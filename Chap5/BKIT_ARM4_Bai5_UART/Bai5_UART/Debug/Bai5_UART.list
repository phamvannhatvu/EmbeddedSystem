
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c56c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003450  0800c700  0800c700  0001c700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb50  0800fb50  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb50  0800fb50  0001fb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb58  0800fb58  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb58  0800fb58  0001fb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb5c  0800fb5c  0001fb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800fb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000354  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f98  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d91  00000000  00000000  0003a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f8  00000000  00000000  0003ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001600  00000000  00000000  0003f4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c7e  00000000  00000000  00040ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db14  00000000  00000000  00065766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e16  00000000  00000000  0008327a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157090  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006774  00000000  00000000  001570e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6e4 	.word	0x0800c6e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800c6e4 	.word	0x0800c6e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b974 	b.w	8000f4c <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468e      	mov	lr, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14d      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0xe8>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b152      	cbz	r2, 8000cac <__udivmoddi4+0x30>
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	f1c2 0120 	rsb	r1, r2, #32
 8000c9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca6:	ea41 0e03 	orr.w	lr, r1, r3
 8000caa:	4094      	lsls	r4, r2
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	0c21      	lsrs	r1, r4, #16
 8000cb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb6:	fa1f f78c 	uxth.w	r7, ip
 8000cba:	fb08 e316 	mls	r3, r8, r6, lr
 8000cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc2:	fb06 f107 	mul.w	r1, r6, r7
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cd2:	f080 811f 	bcs.w	8000f14 <__udivmoddi4+0x298>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 811c 	bls.w	8000f14 <__udivmoddi4+0x298>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb00 f707 	mul.w	r7, r0, r7
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x92>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	f080 810a 	bcs.w	8000f18 <__udivmoddi4+0x29c>
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	f240 8107 	bls.w	8000f18 <__udivmoddi4+0x29c>
 8000d0a:	4464      	add	r4, ip
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	1be4      	subs	r4, r4, r7
 8000d14:	2600      	movs	r6, #0
 8000d16:	b11d      	cbz	r5, 8000d20 <__udivmoddi4+0xa4>
 8000d18:	40d4      	lsrs	r4, r2
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0xc2>
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	f000 80ef 	beq.w	8000f0e <__udivmoddi4+0x292>
 8000d30:	2600      	movs	r6, #0
 8000d32:	e9c5 0100 	strd	r0, r1, [r5]
 8000d36:	4630      	mov	r0, r6
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f683 	clz	r6, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d14a      	bne.n	8000ddc <__udivmoddi4+0x160>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xd4>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80f9 	bhi.w	8000f42 <__udivmoddi4+0x2c6>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0303 	sbc.w	r3, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	469e      	mov	lr, r3
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e0      	beq.n	8000d20 <__udivmoddi4+0xa4>
 8000d5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d62:	e7dd      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xec>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 8092 	bne.w	8000e96 <__udivmoddi4+0x21a>
 8000d72:	eba1 010c 	sub.w	r1, r1, ip
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2601      	movs	r6, #1
 8000d80:	0c20      	lsrs	r0, r4, #16
 8000d82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d86:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8e:	fb0e f003 	mul.w	r0, lr, r3
 8000d92:	4288      	cmp	r0, r1
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x12c>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x12a>
 8000da0:	4288      	cmp	r0, r1
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2c0>
 8000da6:	4643      	mov	r3, r8
 8000da8:	1a09      	subs	r1, r1, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1110 	mls	r1, r7, r0, r1
 8000db4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x156>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x154>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2ca>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dda:	e79c      	b.n	8000d16 <__udivmoddi4+0x9a>
 8000ddc:	f1c6 0720 	rsb	r7, r6, #32
 8000de0:	40b3      	lsls	r3, r6
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa20 f407 	lsr.w	r4, r0, r7
 8000dee:	fa01 f306 	lsl.w	r3, r1, r6
 8000df2:	431c      	orrs	r4, r3
 8000df4:	40f9      	lsrs	r1, r7
 8000df6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fb09 1118 	mls	r1, r9, r8, r1
 8000e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e10:	fb08 f00e 	mul.w	r0, r8, lr
 8000e14:	4288      	cmp	r0, r1
 8000e16:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b8>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2bc>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2bc>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	458e      	cmp	lr, r1
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1e2>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2b4>
 8000e56:	458e      	cmp	lr, r1
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2b4>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4461      	add	r1, ip
 8000e5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e62:	fba0 9402 	umull	r9, r4, r0, r2
 8000e66:	eba1 010e 	sub.w	r1, r1, lr
 8000e6a:	42a1      	cmp	r1, r4
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46a6      	mov	lr, r4
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x2a4>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x2a0>
 8000e74:	b15d      	cbz	r5, 8000e8e <__udivmoddi4+0x212>
 8000e76:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e82:	fa22 f306 	lsr.w	r3, r2, r6
 8000e86:	40f1      	lsrs	r1, r6
 8000e88:	431f      	orrs	r7, r3
 8000e8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8e:	2600      	movs	r6, #0
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	40d8      	lsrs	r0, r3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb8:	0c0b      	lsrs	r3, r1, #16
 8000eba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ebe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x260>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed4:	429e      	cmp	r6, r3
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	b289      	uxth	r1, r1
 8000ee0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eec:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x28a>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0x104>
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e705      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e3      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6f8      	b.n	8000d0e <__udivmoddi4+0x92>
 8000f1c:	454b      	cmp	r3, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f8>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f8>
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x28a>
 8000f30:	4620      	mov	r0, r4
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1e2>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x260>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b8>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x12c>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e709      	b.n	8000d5a <__udivmoddi4+0xde>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x156>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2108      	movs	r1, #8
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <button_init+0x14>)
 8000f5a:	f005 fd17 	bl	800698c <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <button_Scan>:

void button_Scan(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	482f      	ldr	r0, [pc, #188]	; (8001030 <button_Scan+0xc8>)
 8000f74:	f005 fd0a 	bl	800698c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	482c      	ldr	r0, [pc, #176]	; (8001030 <button_Scan+0xc8>)
 8000f7e:	f005 fd05 	bl	800698c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000f82:	230a      	movs	r3, #10
 8000f84:	2202      	movs	r2, #2
 8000f86:	492b      	ldr	r1, [pc, #172]	; (8001034 <button_Scan+0xcc>)
 8000f88:	482b      	ldr	r0, [pc, #172]	; (8001038 <button_Scan+0xd0>)
 8000f8a:	f007 fc7e 	bl	800888a <HAL_SPI_Receive>
	  int button_index = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f96:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	e03f      	b.n	800101e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db06      	blt.n	8000fb2 <button_Scan+0x4a>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	dc03      	bgt.n	8000fb2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e018      	b.n	8000fe4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	dd07      	ble.n	8000fc8 <button_Scan+0x60>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	dc04      	bgt.n	8000fc8 <button_Scan+0x60>
			  button_index = 7 - i;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f1c3 0307 	rsb	r3, r3, #7
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e00d      	b.n	8000fe4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b07      	cmp	r3, #7
 8000fcc:	dd06      	ble.n	8000fdc <button_Scan+0x74>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0b      	cmp	r3, #11
 8000fd2:	dc03      	bgt.n	8000fdc <button_Scan+0x74>
			  button_index = i + 4;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e003      	b.n	8000fe4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1c3 0317 	rsb	r3, r3, #23
 8000fe2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <button_Scan+0xcc>)
 8000fe6:	881a      	ldrh	r2, [r3, #0]
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	4013      	ands	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <button_Scan+0x96>
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <button_Scan+0xd4>)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ffc:	e009      	b.n	8001012 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <button_Scan+0xd4>)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001006:	3301      	adds	r3, #1
 8001008:	b299      	uxth	r1, r3
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <button_Scan+0xd4>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	085b      	lsrs	r3, r3, #1
 8001016:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3301      	adds	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	ddbc      	ble.n	8000f9e <button_Scan+0x36>
	  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020c00 	.word	0x40020c00
 8001034:	200000cc 	.word	0x200000cc
 8001038:	200001d0 	.word	0x200001d0
 800103c:	200000ac 	.word	0x200000ac

08001040 <initds3231>:

/**
 * @brief	init ds3231 real time clock micro controler
 */
void initds3231()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	while (HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK)
 8001044:	bf00      	nop
 8001046:	2332      	movs	r3, #50	; 0x32
 8001048:	2203      	movs	r2, #3
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <initds3231+0x30>)
 800104e:	f006 f935 	bl	80072bc <HAL_I2C_IsDeviceReady>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f6      	bne.n	8001046 <initds3231+0x6>
		;
	ds3231EnableA1(DS3231_DISABLED);
 8001058:	2000      	movs	r0, #0
 800105a:	f000 f997 	bl	800138c <ds3231EnableA1>
	ds3231EnableA2(DS3231_DISABLED);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f9c8 	bl	80013f4 <ds3231EnableA2>
	ds3231ClearFlagA1();
 8001064:	f000 f9fa 	bl	800145c <ds3231ClearFlagA1>
	ds3231ClearFlagA2();
 8001068:	f000 fa1e 	bl	80014a8 <ds3231ClearFlagA2>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000138 	.word	0x20000138

08001074 <ds3231Write>:
 * @brief	write data into specific address on ds3231 micro controller
 * @param	address Register address to write.
 * @param 	value DECIMAL Value to set, 1BYTE (0 to 255).
 */
void ds3231Write(uint8_t address, uint8_t value)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af04      	add	r7, sp, #16
 800107a:	4603      	mov	r3, r0
 800107c:	460a      	mov	r2, r1
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	4613      	mov	r3, r2
 8001082:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 f85c 	bl	8006144 <DEC2BCD>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	b29a      	uxth	r2, r3
 8001094:	230a      	movs	r3, #10
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2301      	movs	r3, #1
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 030f 	add.w	r3, r7, #15
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	21d0      	movs	r1, #208	; 0xd0
 80010a6:	4803      	ldr	r0, [pc, #12]	; (80010b4 <ds3231Write+0x40>)
 80010a8:	f005 fde8 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000138 	.word	0x20000138

080010b8 <ds3231ReadTime>:

/**
 * @brief	read 7 (BYTE) register (from reg 0x00 to reg 0x06) from ds3231 and store into array ds3231_buffer[]
 */
void ds3231ReadTime()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80010be:	230a      	movs	r3, #10
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2307      	movs	r3, #7
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <ds3231ReadTime+0xd8>)
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2200      	movs	r2, #0
 80010ce:	21d0      	movs	r1, #208	; 0xd0
 80010d0:	4830      	ldr	r0, [pc, #192]	; (8001194 <ds3231ReadTime+0xdc>)
 80010d2:	f005 fecd 	bl	8006e70 <HAL_I2C_Mem_Read>

	current_time.second = BCD2DEC(ds3231_buffer[0]);
 80010d6:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <ds3231ReadTime+0xd8>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f005 f818 	bl	8006110 <BCD2DEC>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <ds3231ReadTime+0xe0>)
 80010e6:	701a      	strb	r2, [r3, #0]
	current_time.minute = BCD2DEC(ds3231_buffer[1]);
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <ds3231ReadTime+0xd8>)
 80010ea:	785b      	ldrb	r3, [r3, #1]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 f80f 	bl	8006110 <BCD2DEC>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <ds3231ReadTime+0xe0>)
 80010f8:	705a      	strb	r2, [r3, #1]
	current_time.hour = BCD2DEC(ds3231_buffer[2] & 0x3f);
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <ds3231ReadTime+0xd8>)
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f005 f803 	bl	8006110 <BCD2DEC>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <ds3231ReadTime+0xe0>)
 8001110:	709a      	strb	r2, [r3, #2]
	current_time.day = BCD2DEC(ds3231_buffer[3]);
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <ds3231ReadTime+0xd8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fffa 	bl	8006110 <BCD2DEC>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <ds3231ReadTime+0xe0>)
 8001122:	70da      	strb	r2, [r3, #3]
	current_time.date = BCD2DEC(ds3231_buffer[4]);
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <ds3231ReadTime+0xd8>)
 8001126:	791b      	ldrb	r3, [r3, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	f004 fff1 	bl	8006110 <BCD2DEC>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <ds3231ReadTime+0xe0>)
 8001134:	711a      	strb	r2, [r3, #4]
	current_time.month = BCD2DEC(ds3231_buffer[5] & 0x1f);
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <ds3231ReadTime+0xd8>)
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f004 ffe5 	bl	8006110 <BCD2DEC>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <ds3231ReadTime+0xe0>)
 800114c:	715a      	strb	r2, [r3, #5]
	current_time.year = (BCD2DEC(ds3231_buffer[6]) + 2000) + (((ds3231_buffer[5] & 0x80) >> 7) * 100);
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <ds3231ReadTime+0xd8>)
 8001150:	799b      	ldrb	r3, [r3, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f004 ffdc 	bl	8006110 <BCD2DEC>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <ds3231ReadTime+0xd8>)
 800115e:	795b      	ldrb	r3, [r3, #5]
 8001160:	09db      	lsrs	r3, r3, #7
 8001162:	b2db      	uxtb	r3, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	4619      	mov	r1, r3
 8001168:	0089      	lsls	r1, r1, #2
 800116a:	440b      	add	r3, r1
 800116c:	4619      	mov	r1, r3
 800116e:	0088      	lsls	r0, r1, #2
 8001170:	4619      	mov	r1, r3
 8001172:	4603      	mov	r3, r0
 8001174:	440b      	add	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	b29b      	uxth	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <ds3231ReadTime+0xe0>)
 8001186:	80da      	strh	r2, [r3, #6]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000dc 	.word	0x200000dc
 8001194:	20000138 	.word	0x20000138
 8001198:	200000d0 	.word	0x200000d0

0800119c <ds3231SetSec>:
 * @brief	set time functions
 * @param	valid time (DECIMAL) depends on function
 */

void ds3231SetSec(uint8_t second)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_SEC, second);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4619      	mov	r1, r3
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ff62 	bl	8001074 <ds3231Write>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <ds3231SetMin>:
void ds3231SetMin(uint8_t minute)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_MIN, minute);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4619      	mov	r1, r3
 80011c6:	2001      	movs	r0, #1
 80011c8:	f7ff ff54 	bl	8001074 <ds3231Write>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <ds3231SetHour>:
void ds3231SetHour(uint8_t hour)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	uint8_t hour_reg = DEC2BCD(hour) & 0x3f; // remove 2 MSB bit avoid write into bit 12/24 mode
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 ffaf 	bl	8006144 <DEC2BCD>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_HOUR, I2C_MEMADD_SIZE_8BIT, &hour_reg, 1, 10);
 80011f0:	230a      	movs	r3, #10
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2202      	movs	r2, #2
 8001202:	21d0      	movs	r1, #208	; 0xd0
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <ds3231SetHour+0x40>)
 8001206:	f005 fd39 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000138 	.word	0x20000138

08001218 <ds3231SetDay>:
void ds3231SetDay(uint8_t day)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DAY, day);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	4619      	mov	r1, r3
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff ff24 	bl	8001074 <ds3231Write>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <ds3231SetDate>:
void ds3231SetDate(uint8_t date)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DATE, date);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4619      	mov	r1, r3
 8001242:	2004      	movs	r0, #4
 8001244:	f7ff ff16 	bl	8001074 <ds3231Write>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <ds3231SetMonth>:
void ds3231SetMonth(uint8_t month)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af04      	add	r7, sp, #16
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t century;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &century, 1, 10);
 800125a:	230a      	movs	r3, #10
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2301      	movs	r3, #1
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	f107 030f 	add.w	r3, r7, #15
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2205      	movs	r2, #5
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <ds3231SetMonth+0x70>)
 8001270:	f005 fdfe 	bl	8006e70 <HAL_I2C_Mem_Read>
	century &= 0x80;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800127a:	b2db      	uxtb	r3, r3
 800127c:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg = (DEC2BCD(month) & 0x1f) | century; /* not interfere with century bit */
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f004 ff5f 	bl	8006144 <DEC2BCD>
 8001286:	4603      	mov	r3, r0
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	b25a      	sxtb	r2, r3
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	b25b      	sxtb	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b25b      	sxtb	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 800129c:	230a      	movs	r3, #10
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	2205      	movs	r2, #5
 80012ae:	21d0      	movs	r1, #208	; 0xd0
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <ds3231SetMonth+0x70>)
 80012b2:	f005 fce3 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000138 	.word	0x20000138

080012c4 <ds3231SetYear>:
void ds3231SetYear(uint16_t year)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af04      	add	r7, sp, #16
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]
	uint8_t year_reg = DEC2BCD(year % 100);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <ds3231SetYear+0xbc>)
 80012d2:	fba2 1203 	umull	r1, r2, r2, r3
 80012d6:	0952      	lsrs	r2, r2, #5
 80012d8:	2164      	movs	r1, #100	; 0x64
 80012da:	fb01 f202 	mul.w	r2, r1, r2
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 ff2d 	bl	8006144 <DEC2BCD>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73bb      	strb	r3, [r7, #14]
	uint8_t century = (year / 100) % 20;
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4a23      	ldr	r2, [pc, #140]	; (8001380 <ds3231SetYear+0xbc>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <ds3231SetYear+0xc0>)
 80012fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001300:	0919      	lsrs	r1, r3, #4
 8001302:	460b      	mov	r3, r1
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 8001310:	230a      	movs	r3, #10
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030d 	add.w	r3, r7, #13
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2205      	movs	r2, #5
 8001322:	21d0      	movs	r1, #208	; 0xd0
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <ds3231SetYear+0xc4>)
 8001326:	f005 fda3 	bl	8006e70 <HAL_I2C_Mem_Read>
	month_reg = ((month_reg & 0x1f) | (century << 7));
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	b25a      	sxtb	r2, r3
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	01db      	lsls	r3, r3, #7
 8001338:	b25b      	sxtb	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 8001342:	230a      	movs	r3, #10
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	f107 030d 	add.w	r3, r7, #13
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	2205      	movs	r2, #5
 8001354:	21d0      	movs	r1, #208	; 0xd0
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <ds3231SetYear+0xc4>)
 8001358:	f005 fc90 	bl	8006c7c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_YEAR, I2C_MEMADD_SIZE_8BIT, &year_reg, 1, 10);
 800135c:	230a      	movs	r3, #10
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	2206      	movs	r2, #6
 800136e:	21d0      	movs	r1, #208	; 0xd0
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <ds3231SetYear+0xc4>)
 8001372:	f005 fc83 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	51eb851f 	.word	0x51eb851f
 8001384:	cccccccd 	.word	0xcccccccd
 8001388:	20000138 	.word	0x20000138

0800138c <ds3231EnableA1>:
/**
 * @brief Enables alarm 1 or 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void ds3231EnableA1(DS3231_State enable)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af04      	add	r7, sp, #16
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 8001396:	230a      	movs	r3, #10
 8001398:	9302      	str	r3, [sp, #8]
 800139a:	2301      	movs	r3, #1
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	f107 030f 	add.w	r3, r7, #15
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	2301      	movs	r3, #1
 80013a6:	220e      	movs	r2, #14
 80013a8:	21d0      	movs	r1, #208	; 0xd0
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <ds3231EnableA1+0x64>)
 80013ac:	f005 fd60 	bl	8006e70 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 80013cc:	230a      	movs	r3, #10
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030f 	add.w	r3, r7, #15
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	220e      	movs	r2, #14
 80013de:	21d0      	movs	r1, #208	; 0xd0
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <ds3231EnableA1+0x64>)
 80013e2:	f005 fc4b 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000138 	.word	0x20000138

080013f4 <ds3231EnableA2>:
void ds3231EnableA2(DS3231_State enable)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af04      	add	r7, sp, #16
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 80013fe:	230a      	movs	r3, #10
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	2301      	movs	r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	220e      	movs	r2, #14
 8001410:	21d0      	movs	r1, #208	; 0xd0
 8001412:	4811      	ldr	r0, [pc, #68]	; (8001458 <ds3231EnableA2+0x64>)
 8001414:	f005 fd2c 	bl	8006e70 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	f023 0302 	bic.w	r3, r3, #2
 8001420:	b25a      	sxtb	r2, r3
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b25b      	sxtb	r3, r3
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b25b      	sxtb	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 8001436:	230a      	movs	r3, #10
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2301      	movs	r3, #1
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	f107 030f 	add.w	r3, r7, #15
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	220e      	movs	r2, #14
 8001448:	21d0      	movs	r1, #208	; 0xd0
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <ds3231EnableA2+0x64>)
 800144c:	f005 fc16 	bl	8006c7c <HAL_I2C_Mem_Write>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000138 	.word	0x20000138

0800145c <ds3231ClearFlagA1>:

/*
 * @brief
 */
void ds3231ClearFlagA1()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 8001462:	230a      	movs	r3, #10
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	2301      	movs	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	220f      	movs	r2, #15
 8001472:	21d0      	movs	r1, #208	; 0xd0
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <ds3231ClearFlagA1+0x48>)
 8001476:	f005 fcfb 	bl	8006e70 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfe;
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 8001484:	230a      	movs	r3, #10
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	2301      	movs	r3, #1
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	220f      	movs	r2, #15
 8001494:	21d0      	movs	r1, #208	; 0xd0
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <ds3231ClearFlagA1+0x48>)
 8001498:	f005 fbf0 	bl	8006c7c <HAL_I2C_Mem_Write>
	return;
 800149c:	bf00      	nop
}
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000138 	.word	0x20000138

080014a8 <ds3231ClearFlagA2>:
void ds3231ClearFlagA2()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80014ae:	230a      	movs	r3, #10
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2301      	movs	r3, #1
 80014bc:	220f      	movs	r2, #15
 80014be:	21d0      	movs	r1, #208	; 0xd0
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <ds3231ClearFlagA2+0x48>)
 80014c2:	f005 fcd5 	bl	8006e70 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfd;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80014d0:	230a      	movs	r3, #10
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	2301      	movs	r3, #1
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	220f      	movs	r2, #15
 80014e0:	21d0      	movs	r1, #208	; 0xd0
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <ds3231ClearFlagA2+0x48>)
 80014e4:	f005 fbca 	bl	8006c7c <HAL_I2C_Mem_Write>
	return;
 80014e8:	bf00      	nop
}
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000138 	.word	0x20000138

080014f4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001520:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001522:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001526:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <MX_FSMC_Init+0xec>)
 800152a:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <MX_FSMC_Init+0xf0>)
 800152c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_FSMC_Init+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001540:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001542:	2210      	movs	r2, #16
 8001544:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800154c:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <MX_FSMC_Init+0xec>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <MX_FSMC_Init+0xec>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001566:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001568:	2200      	movs	r2, #0
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_FSMC_Init+0xec>)
 800156e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001574:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_FSMC_Init+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_FSMC_Init+0xec>)
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001586:	230f      	movs	r3, #15
 8001588:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800158a:	230f      	movs	r3, #15
 800158c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800158e:	233c      	movs	r3, #60	; 0x3c
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001596:	2310      	movs	r3, #16
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800159a:	2311      	movs	r3, #17
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80015a2:	2308      	movs	r3, #8
 80015a4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015a6:	230f      	movs	r3, #15
 80015a8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80015aa:	2309      	movs	r3, #9
 80015ac:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015b2:	2310      	movs	r3, #16
 80015b4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015b6:	2311      	movs	r3, #17
 80015b8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015be:	463a      	mov	r2, r7
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_FSMC_Init+0xec>)
 80015c8:	f007 fd42 	bl	8009050 <HAL_SRAM_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80015d2:	f004 f99d 	bl	8005910 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80015d6:	bf00      	nop
 80015d8:	3738      	adds	r7, #56	; 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000e4 	.word	0x200000e4
 80015e4:	a0000104 	.word	0xa0000104

080015e8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_FSMC_MspInit+0x88>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d131      	bne.n	8001668 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_FSMC_MspInit+0x88>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_FSMC_MspInit+0x8c>)
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	4a18      	ldr	r2, [pc, #96]	; (8001674 <HAL_FSMC_MspInit+0x8c>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6393      	str	r3, [r2, #56]	; 0x38
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_FSMC_MspInit+0x8c>)
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001626:	f64f 7388 	movw	r3, #65416	; 0xff88
 800162a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001638:	230c      	movs	r3, #12
 800163a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <HAL_FSMC_MspInit+0x90>)
 8001642:	f005 f807 	bl	8006654 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001646:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800164a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001658:	230c      	movs	r3, #12
 800165a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4806      	ldr	r0, [pc, #24]	; (800167c <HAL_FSMC_MspInit+0x94>)
 8001662:	f004 fff7 	bl	8006654 <HAL_GPIO_Init>
 8001666:	e000      	b.n	800166a <HAL_FSMC_MspInit+0x82>
    return;
 8001668:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000134 	.word	0x20000134
 8001674:	40023800 	.word	0x40023800
 8001678:	40021000 	.word	0x40021000
 800167c:	40020c00 	.word	0x40020c00

08001680 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001688:	f7ff ffae 	bl	80015e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	4b6f      	ldr	r3, [pc, #444]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a6e      	ldr	r2, [pc, #440]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b6c      	ldr	r3, [pc, #432]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	4b68      	ldr	r3, [pc, #416]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a67      	ldr	r2, [pc, #412]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b65      	ldr	r3, [pc, #404]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a60      	ldr	r2, [pc, #384]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <MX_GPIO_Init+0x1d8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b5a      	ldr	r3, [pc, #360]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a59      	ldr	r2, [pc, #356]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b53      	ldr	r3, [pc, #332]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a52      	ldr	r2, [pc, #328]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <MX_GPIO_Init+0x1d8>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <MX_GPIO_Init+0x1d8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a4b      	ldr	r2, [pc, #300]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b45      	ldr	r3, [pc, #276]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a44      	ldr	r2, [pc, #272]	; (800186c <MX_GPIO_Init+0x1d8>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b42      	ldr	r3, [pc, #264]	; (800186c <MX_GPIO_Init+0x1d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2170      	movs	r1, #112	; 0x70
 8001772:	483f      	ldr	r0, [pc, #252]	; (8001870 <MX_GPIO_Init+0x1dc>)
 8001774:	f005 f90a 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <MX_GPIO_Init+0x1e0>)
 8001780:	f005 f904 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	483b      	ldr	r0, [pc, #236]	; (8001878 <MX_GPIO_Init+0x1e4>)
 800178a:	f005 f8ff 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001794:	4839      	ldr	r0, [pc, #228]	; (800187c <MX_GPIO_Init+0x1e8>)
 8001796:	f005 f8f9 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2108      	movs	r1, #8
 800179e:	4838      	ldr	r0, [pc, #224]	; (8001880 <MX_GPIO_Init+0x1ec>)
 80017a0:	f005 f8f4 	bl	800698c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80017a4:	2370      	movs	r3, #112	; 0x70
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	482d      	ldr	r0, [pc, #180]	; (8001870 <MX_GPIO_Init+0x1dc>)
 80017bc:	f004 ff4a 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80017c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4826      	ldr	r0, [pc, #152]	; (8001874 <MX_GPIO_Init+0x1e0>)
 80017da:	f004 ff3b 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017de:	23c0      	movs	r3, #192	; 0xc0
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4822      	ldr	r0, [pc, #136]	; (800187c <MX_GPIO_Init+0x1e8>)
 80017f2:	f004 ff2f 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017f6:	2330      	movs	r3, #48	; 0x30
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	481a      	ldr	r0, [pc, #104]	; (8001874 <MX_GPIO_Init+0x1e0>)
 800180a:	f004 ff23 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4814      	ldr	r0, [pc, #80]	; (8001878 <MX_GPIO_Init+0x1e4>)
 8001826:	f004 ff15 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800182a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_GPIO_Init+0x1e8>)
 8001844:	f004 ff06 	bl	8006654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001848:	2308      	movs	r3, #8
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	4808      	ldr	r0, [pc, #32]	; (8001880 <MX_GPIO_Init+0x1ec>)
 8001860:	f004 fef8 	bl	8006654 <HAL_GPIO_Init>

}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40023800 	.word	0x40023800
 8001870:	40021000 	.word	0x40021000
 8001874:	40020800 	.word	0x40020800
 8001878:	40021800 	.word	0x40021800
 800187c:	40020000 	.word	0x40020000
 8001880:	40020c00 	.word	0x40020c00

08001884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f005 f897 	bl	80069f4 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f004 f820 	bl	8005910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000138 	.word	0x20000138
 80018d8:	40005400 	.word	0x40005400
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_I2C_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12b      	bne.n	800195a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a17      	ldr	r2, [pc, #92]	; (8001968 <HAL_I2C_MspInit+0x88>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191e:	23c0      	movs	r3, #192	; 0xc0
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192e:	2304      	movs	r3, #4
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <HAL_I2C_MspInit+0x8c>)
 800193a:	f004 fe8b 	bl	8006654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_I2C_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400

08001970 <LCD_WR_REG>:
static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <LCD_WR_REG+0x1c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	8013      	strh	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	600ffffe 	.word	0x600ffffe

08001990 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <LCD_WR_DATA+0x1c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	8053      	strh	r3, [r2, #2]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	600ffffe 	.word	0x600ffffe

080019b0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <LCD_RD_DATA+0x20>)
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	b29b      	uxth	r3, r3
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	600ffffe 	.word	0x600ffffe

080019d4 <lcdSetAddress>:


void lcdSetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	80fb      	strh	r3, [r7, #6]
 80019e6:	4603      	mov	r3, r0
 80019e8:	80bb      	strh	r3, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80019f2:	202a      	movs	r0, #42	; 0x2a
 80019f4:	f7ff ffbc 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffc6 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffc0 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001a10:	887b      	ldrh	r3, [r7, #2]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ffba 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ffb4 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001a28:	202b      	movs	r0, #43	; 0x2b
 8001a2a:	f7ff ffa1 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ffab 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ffa5 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff9f 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001a52:	883b      	ldrh	r3, [r7, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff99 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001a5e:	202c      	movs	r0, #44	; 0x2c
 8001a60:	f7ff ff86 	bl	8001970 <LCD_WR_REG>
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <lcdClear>:
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcdClear(uint16_t color)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcdSetAddress(0, 0, lcddev.width - 1, lcddev.height - 1);
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <lcdClear+0x60>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <lcdClear+0x60>)
 8001a80:	885b      	ldrh	r3, [r3, #2]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2100      	movs	r1, #0
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff ffa3 	bl	80019d4 <lcdSetAddress>
	for (i = 0; i < lcddev.width; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	81fb      	strh	r3, [r7, #14]
 8001a92:	e011      	b.n	8001ab8 <lcdClear+0x4c>
	{
		for (j = 0; j < lcddev.height; j++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	81bb      	strh	r3, [r7, #12]
 8001a98:	e006      	b.n	8001aa8 <lcdClear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff77 	bl	8001990 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++)
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	81bb      	strh	r3, [r7, #12]
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <lcdClear+0x60>)
 8001aaa:	885b      	ldrh	r3, [r3, #2]
 8001aac:	89ba      	ldrh	r2, [r7, #12]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d3f3      	bcc.n	8001a9a <lcdClear+0x2e>
	for (i = 0; i < lcddev.width; i++)
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	81fb      	strh	r3, [r7, #14]
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <lcdClear+0x60>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	89fa      	ldrh	r2, [r7, #14]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3e8      	bcc.n	8001a94 <lcdClear+0x28>
		}
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000018c 	.word	0x2000018c

08001ad0 <lcdDrawPoint>:
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
 8001ada:	460b      	mov	r3, r1
 8001adc:	80bb      	strh	r3, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	807b      	strh	r3, [r7, #2]
	lcdSetAddress(x, y, x, y);
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	88b9      	ldrh	r1, [r7, #4]
 8001ae8:	88f8      	ldrh	r0, [r7, #6]
 8001aea:	f7ff ff73 	bl	80019d4 <lcdSetAddress>
	LCD_WR_DATA(color);
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff4d 	bl	8001990 <LCD_WR_DATA>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <lcdDrawLine>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001afe:	b590      	push	{r4, r7, lr}
 8001b00:	b08d      	sub	sp, #52	; 0x34
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4604      	mov	r4, r0
 8001b06:	4608      	mov	r0, r1
 8001b08:	4611      	mov	r1, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	4603      	mov	r3, r0
 8001b12:	80bb      	strh	r3, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8001b2c:	883a      	ldrh	r2, [r7, #0]
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	dd02      	ble.n	8001b48 <lcdDrawLine+0x4a>
		incx = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	e00b      	b.n	8001b60 <lcdDrawLine+0x62>
	else if (delta_x == 0)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <lcdDrawLine+0x56>
		incx = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e005      	b.n	8001b60 <lcdDrawLine+0x62>
	else
	{
		incx = -1;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	dd02      	ble.n	8001b6c <lcdDrawLine+0x6e>
		incy = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e00b      	b.n	8001b84 <lcdDrawLine+0x86>
	else if (delta_y == 0)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <lcdDrawLine+0x7a>
		incy = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	e005      	b.n	8001b84 <lcdDrawLine+0x86>
	else
	{
		incy = -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	425b      	negs	r3, r3
 8001b82:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dd02      	ble.n	8001b92 <lcdDrawLine+0x94>
		distance = delta_x;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e001      	b.n	8001b96 <lcdDrawLine+0x98>
	else
		distance = delta_y;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001b9a:	e02b      	b.n	8001bf4 <lcdDrawLine+0xf6>
	{
		lcdDrawPoint(uRow, uCol, color);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	b291      	uxth	r1, r2
 8001ba4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff91 	bl	8001ad0 <lcdDrawPoint>
		xerr += delta_x;
 8001bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance)
 8001bbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dd07      	ble.n	8001bd6 <lcdDrawLine+0xd8>
		{
			xerr -= distance;
 8001bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dd07      	ble.n	8001bee <lcdDrawLine+0xf0>
		{
			yerr -= distance;
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++)
 8001bee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dacf      	bge.n	8001b9c <lcdDrawLine+0x9e>
		}
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3734      	adds	r7, #52	; 0x34
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
	...

08001c08 <lcdShowChar>:
 * @param sizey height (16, 24, 32) of the character in pixels (sizex is typically half the height)
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4604      	mov	r4, r0
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4623      	mov	r3, r4
 8001c18:	80fb      	strh	r3, [r7, #6]
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80bb      	strh	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
 8001c22:	4613      	mov	r3, r2
 8001c24:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001c2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	fb12 f303 	smulbb	r3, r2, r3
 8001c5e:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	3b20      	subs	r3, #32
 8001c64:	70fb      	strb	r3, [r7, #3]
	lcdSetAddress(x, y, x + sizex - 1, y + sizey - 1);
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29c      	uxth	r4, r3
 8001c74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	88bb      	ldrh	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	88b9      	ldrh	r1, [r7, #4]
 8001c86:	88f8      	ldrh	r0, [r7, #6]
 8001c88:	4622      	mov	r2, r4
 8001c8a:	f7ff fea3 	bl	80019d4 <lcdSetAddress>
	for (i = 0; i < TypefaceNum; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	827b      	strh	r3, [r7, #18]
 8001c92:	e07a      	b.n	8001d8a <lcdShowChar+0x182>
	{
		if (sizey == 12)
 8001c94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d028      	beq.n	8001cee <lcdShowChar+0xe6>
			;
		else if (sizey == 16)
 8001c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d108      	bne.n	8001cb6 <lcdShowChar+0xae>
			temp = ascii_1608[character][i];
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	8a7b      	ldrh	r3, [r7, #18]
 8001ca8:	493c      	ldr	r1, [pc, #240]	; (8001d9c <lcdShowChar+0x194>)
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	440a      	add	r2, r1
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	75fb      	strb	r3, [r7, #23]
 8001cb4:	e01b      	b.n	8001cee <lcdShowChar+0xe6>
		else if (sizey == 24)
 8001cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	d10b      	bne.n	8001cd6 <lcdShowChar+0xce>
			temp = ascii_2412[character][i];
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	8a79      	ldrh	r1, [r7, #18]
 8001cc2:	4837      	ldr	r0, [pc, #220]	; (8001da0 <lcdShowChar+0x198>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4403      	add	r3, r0
 8001cce:	440b      	add	r3, r1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	75fb      	strb	r3, [r7, #23]
 8001cd4:	e00b      	b.n	8001cee <lcdShowChar+0xe6>
		else if (sizey == 32)
 8001cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	d15a      	bne.n	8001d94 <lcdShowChar+0x18c>
			temp = ascii_3216[character][i];
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	8a7b      	ldrh	r3, [r7, #18]
 8001ce2:	4930      	ldr	r1, [pc, #192]	; (8001da4 <lcdShowChar+0x19c>)
 8001ce4:	0192      	lsls	r2, r2, #6
 8001ce6:	440a      	add	r2, r1
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75bb      	strb	r3, [r7, #22]
 8001cf2:	e044      	b.n	8001d7e <lcdShowChar+0x176>
		{
			if (!mode) {
 8001cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d120      	bne.n	8001d3e <lcdShowChar+0x136>
				if (temp & (0x01 << t))
 8001cfc:	7dfa      	ldrb	r2, [r7, #23]
 8001cfe:	7dbb      	ldrb	r3, [r7, #22]
 8001d00:	fa42 f303 	asr.w	r3, r2, r3
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <lcdShowChar+0x10e>
					LCD_WR_DATA(fc);
 8001d0c:	883b      	ldrh	r3, [r7, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe3e 	bl	8001990 <LCD_WR_DATA>
 8001d14:	e003      	b.n	8001d1e <lcdShowChar+0x116>
				else
					LCD_WR_DATA(bc);
 8001d16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fe39 	bl	8001990 <LCD_WR_DATA>
				m++;
 8001d1e:	7d7b      	ldrb	r3, [r7, #21]
 8001d20:	3301      	adds	r3, #1
 8001d22:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0)
 8001d24:	7d7b      	ldrb	r3, [r7, #21]
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d11f      	bne.n	8001d78 <lcdShowChar+0x170>
				{
					m = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	757b      	strb	r3, [r7, #21]
					break;
 8001d3c:	e022      	b.n	8001d84 <lcdShowChar+0x17c>
				}
			}
			else
			{
				if (temp & (0x01 << t))
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
 8001d40:	7dbb      	ldrb	r3, [r7, #22]
 8001d42:	fa42 f303 	asr.w	r3, r2, r3
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <lcdShowChar+0x152>
					lcdDrawPoint(x, y, fc);
 8001d4e:	883a      	ldrh	r2, [r7, #0]
 8001d50:	88b9      	ldrh	r1, [r7, #4]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff febb 	bl	8001ad0 <lcdDrawPoint>
				x++;
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex)
 8001d60:	88fa      	ldrh	r2, [r7, #6]
 8001d62:	8a3b      	ldrh	r3, [r7, #16]
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d105      	bne.n	8001d78 <lcdShowChar+0x170>
				{
					x = x0;
 8001d6c:	8a3b      	ldrh	r3, [r7, #16]
 8001d6e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001d70:	88bb      	ldrh	r3, [r7, #4]
 8001d72:	3301      	adds	r3, #1
 8001d74:	80bb      	strh	r3, [r7, #4]
					break;
 8001d76:	e005      	b.n	8001d84 <lcdShowChar+0x17c>
		for (t = 0; t < 8; t++)
 8001d78:	7dbb      	ldrb	r3, [r7, #22]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	75bb      	strb	r3, [r7, #22]
 8001d7e:	7dbb      	ldrb	r3, [r7, #22]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d9b7      	bls.n	8001cf4 <lcdShowChar+0xec>
	for (i = 0; i < TypefaceNum; i++)
 8001d84:	8a7b      	ldrh	r3, [r7, #18]
 8001d86:	3301      	adds	r3, #1
 8001d88:	827b      	strh	r3, [r7, #18]
 8001d8a:	8a7a      	ldrh	r2, [r7, #18]
 8001d8c:	89bb      	ldrh	r3, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d380      	bcc.n	8001c94 <lcdShowChar+0x8c>
 8001d92:	e000      	b.n	8001d96 <lcdShowChar+0x18e>
			return;
 8001d94:	bf00      	nop
				}
			}
		}
	}
}
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	0800c9a8 	.word	0x0800c9a8
 8001da0:	0800cf98 	.word	0x0800cf98
 8001da4:	0800e168 	.word	0x0800e168

08001da8 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	460a      	mov	r2, r1
 8001db2:	71fb      	strb	r3, [r7, #7]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001db8:	2301      	movs	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001dbc:	e004      	b.n	8001dc8 <mypow+0x20>
		result *= m;
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001dc8:	79bb      	ldrb	r3, [r7, #6]
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	71ba      	strb	r2, [r7, #6]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f5      	bne.n	8001dbe <mypow+0x16>
	return result;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <lcdShowIntNumCenter>:
		lcdShowChar(x + t * sizex, y, temp + 48, fc, bc, sizey, mode);
	}
}
void lcdShowIntNumCenter(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4603      	mov	r3, r0
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	707b      	strb	r3, [r7, #1]
    uint8_t t, temp;
    uint8_t enshow = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75bb      	strb	r3, [r7, #22]
    uint8_t sizex = sizey / 2;
 8001e02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	757b      	strb	r3, [r7, #21]
    uint16_t total_width = len * sizex;
 8001e0a:	787b      	ldrb	r3, [r7, #1]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	7d7b      	ldrb	r3, [r7, #21]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	fb12 f303 	smulbb	r3, r2, r3
 8001e16:	827b      	strh	r3, [r7, #18]
    uint16_t start_x = x - (total_width / 2);
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	88fa      	ldrh	r2, [r7, #6]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	823b      	strh	r3, [r7, #16]
    uint16_t start_y = y - (sizey / 2);
 8001e24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	88ba      	ldrh	r2, [r7, #4]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	81fb      	strh	r3, [r7, #14]

    for (t = 0; t < len; t++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	75fb      	strb	r3, [r7, #23]
 8001e38:	e05b      	b.n	8001ef2 <lcdShowIntNumCenter+0x112>
    {
        temp = (num / mypow(10, len - t - 1)) % 10;
 8001e3a:	887c      	ldrh	r4, [r7, #2]
 8001e3c:	787a      	ldrb	r2, [r7, #1]
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4619      	mov	r1, r3
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff ffac 	bl	8001da8 <mypow>
 8001e50:	4603      	mov	r3, r0
 8001e52:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <lcdShowIntNumCenter+0x124>)
 8001e58:	fba3 2301 	umull	r2, r3, r3, r1
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	1aca      	subs	r2, r1, r3
 8001e68:	4613      	mov	r3, r2
 8001e6a:	737b      	strb	r3, [r7, #13]
        if (enshow == 0 && t < (len - 1))
 8001e6c:	7dbb      	ldrb	r3, [r7, #22]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d122      	bne.n	8001eb8 <lcdShowIntNumCenter+0xd8>
 8001e72:	7dfa      	ldrb	r2, [r7, #23]
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	da1d      	bge.n	8001eb8 <lcdShowIntNumCenter+0xd8>
        {
            if (temp == 0)
 8001e7c:	7b7b      	ldrb	r3, [r7, #13]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <lcdShowIntNumCenter+0xd4>
            {
                lcdShowChar(start_x + t * sizex, start_y, '0', fc, bc, sizey, mode); // Display '0' instead of blank space
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	7d7b      	ldrb	r3, [r7, #21]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	fb12 f303 	smulbb	r3, r2, r3
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	8a3b      	ldrh	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	b298      	uxth	r0, r3
 8001e96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e98:	89f9      	ldrh	r1, [r7, #14]
 8001e9a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	2230      	movs	r2, #48	; 0x30
 8001eae:	f7ff feab 	bl	8001c08 <lcdShowChar>
                continue;
 8001eb2:	e01b      	b.n	8001eec <lcdShowIntNumCenter+0x10c>
            }
            else
                enshow = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	75bb      	strb	r3, [r7, #22]
        }
        lcdShowChar(start_x + t * sizex, start_y, temp + 48, fc, bc, sizey, mode);
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	7d7b      	ldrb	r3, [r7, #21]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	fb12 f303 	smulbb	r3, r2, r3
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	8a3b      	ldrh	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	b298      	uxth	r0, r3
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	3330      	adds	r3, #48	; 0x30
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001ed4:	89f9      	ldrh	r1, [r7, #14]
 8001ed6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f7ff fe8e 	bl	8001c08 <lcdShowChar>
    for (t = 0; t < len; t++)
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	7dfa      	ldrb	r2, [r7, #23]
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d39f      	bcc.n	8001e3a <lcdShowIntNumCenter+0x5a>
    }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	cccccccd 	.word	0xcccccccd

08001f08 <lcdSetDirection>:
		}
	}
}

void lcdSetDirection(uint8_t dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <lcdSetDirection+0x2a>
	{
		lcddev.width = 320;
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <lcdSetDirection+0x44>)
 8001f24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f28:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <lcdSetDirection+0x44>)
 8001f2c:	22f0      	movs	r2, #240	; 0xf0
 8001f2e:	805a      	strh	r2, [r3, #2]
	else
	{
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001f30:	e006      	b.n	8001f40 <lcdSetDirection+0x38>
		lcddev.width = 240;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <lcdSetDirection+0x44>)
 8001f34:	22f0      	movs	r2, #240	; 0xf0
 8001f36:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <lcdSetDirection+0x44>)
 8001f3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f3e:	805a      	strh	r2, [r3, #2]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	2000018c 	.word	0x2000018c

08001f50 <initLCD>:

void initLCD(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5a:	48aa      	ldr	r0, [pc, #680]	; (8002204 <initLCD+0x2b4>)
 8001f5c:	f004 fd16 	bl	800698c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f64:	f004 f9ae 	bl	80062c4 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6e:	48a5      	ldr	r0, [pc, #660]	; (8002204 <initLCD+0x2b4>)
 8001f70:	f004 fd0c 	bl	800698c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f004 f9a4 	bl	80062c4 <HAL_Delay>
	lcdSetDirection(DFT_SCAN_DIR);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff ffc3 	bl	8001f08 <lcdSetDirection>
	LCD_WR_REG(0XD3);
 8001f82:	20d3      	movs	r0, #211	; 0xd3
 8001f84:	f7ff fcf4 	bl	8001970 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001f88:	f7ff fd12 	bl	80019b0 <LCD_RD_DATA>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b9d      	ldr	r3, [pc, #628]	; (8002208 <initLCD+0x2b8>)
 8001f92:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f94:	f7ff fd0c 	bl	80019b0 <LCD_RD_DATA>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b9a      	ldr	r3, [pc, #616]	; (8002208 <initLCD+0x2b8>)
 8001f9e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001fa0:	f7ff fd06 	bl	80019b0 <LCD_RD_DATA>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b97      	ldr	r3, [pc, #604]	; (8002208 <initLCD+0x2b8>)
 8001faa:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001fac:	4b96      	ldr	r3, [pc, #600]	; (8002208 <initLCD+0x2b8>)
 8001fae:	889b      	ldrh	r3, [r3, #4]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b94      	ldr	r3, [pc, #592]	; (8002208 <initLCD+0x2b8>)
 8001fb6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001fb8:	f7ff fcfa 	bl	80019b0 <LCD_RD_DATA>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b91      	ldr	r3, [pc, #580]	; (8002208 <initLCD+0x2b8>)
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <initLCD+0x2b8>)
 8001fca:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001fcc:	20cf      	movs	r0, #207	; 0xcf
 8001fce:	f7ff fccf 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff fcdc 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fd8:	20c1      	movs	r0, #193	; 0xc1
 8001fda:	f7ff fcd9 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001fde:	2030      	movs	r0, #48	; 0x30
 8001fe0:	f7ff fcd6 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001fe4:	20ed      	movs	r0, #237	; 0xed
 8001fe6:	f7ff fcc3 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001fea:	2064      	movs	r0, #100	; 0x64
 8001fec:	f7ff fcd0 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f7ff fccd 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001ff6:	2012      	movs	r0, #18
 8001ff8:	f7ff fcca 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ffc:	2081      	movs	r0, #129	; 0x81
 8001ffe:	f7ff fcc7 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002002:	20e8      	movs	r0, #232	; 0xe8
 8002004:	f7ff fcb4 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002008:	2085      	movs	r0, #133	; 0x85
 800200a:	f7ff fcc1 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800200e:	2010      	movs	r0, #16
 8002010:	f7ff fcbe 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002014:	207a      	movs	r0, #122	; 0x7a
 8002016:	f7ff fcbb 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800201a:	20cb      	movs	r0, #203	; 0xcb
 800201c:	f7ff fca8 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002020:	2039      	movs	r0, #57	; 0x39
 8002022:	f7ff fcb5 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002026:	202c      	movs	r0, #44	; 0x2c
 8002028:	f7ff fcb2 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff fcaf 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002032:	2034      	movs	r0, #52	; 0x34
 8002034:	f7ff fcac 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002038:	2002      	movs	r0, #2
 800203a:	f7ff fca9 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800203e:	20f7      	movs	r0, #247	; 0xf7
 8002040:	f7ff fc96 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002044:	2020      	movs	r0, #32
 8002046:	f7ff fca3 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800204a:	20ea      	movs	r0, #234	; 0xea
 800204c:	f7ff fc90 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fc9d 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fc9a 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800205c:	20c0      	movs	r0, #192	; 0xc0
 800205e:	f7ff fc87 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002062:	201b      	movs	r0, #27
 8002064:	f7ff fc94 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002068:	20c1      	movs	r0, #193	; 0xc1
 800206a:	f7ff fc81 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff fc8e 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002074:	20c5      	movs	r0, #197	; 0xc5
 8002076:	f7ff fc7b 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800207a:	2030      	movs	r0, #48	; 0x30
 800207c:	f7ff fc88 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002080:	2030      	movs	r0, #48	; 0x30
 8002082:	f7ff fc85 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002086:	20c7      	movs	r0, #199	; 0xc7
 8002088:	f7ff fc72 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800208c:	20b7      	movs	r0, #183	; 0xb7
 800208e:	f7ff fc7f 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002092:	2036      	movs	r0, #54	; 0x36
 8002094:	f7ff fc6c 	bl	8001970 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8002098:	2008      	movs	r0, #8
 800209a:	f7ff fc79 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800209e:	203a      	movs	r0, #58	; 0x3a
 80020a0:	f7ff fc66 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80020a4:	2055      	movs	r0, #85	; 0x55
 80020a6:	f7ff fc73 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80020aa:	20b1      	movs	r0, #177	; 0xb1
 80020ac:	f7ff fc60 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fc6d 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80020b6:	201a      	movs	r0, #26
 80020b8:	f7ff fc6a 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80020bc:	20b6      	movs	r0, #182	; 0xb6
 80020be:	f7ff fc57 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80020c2:	200a      	movs	r0, #10
 80020c4:	f7ff fc64 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020c8:	20a2      	movs	r0, #162	; 0xa2
 80020ca:	f7ff fc61 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020ce:	20f2      	movs	r0, #242	; 0xf2
 80020d0:	f7ff fc4e 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fc5b 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020da:	2026      	movs	r0, #38	; 0x26
 80020dc:	f7ff fc48 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7ff fc55 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020e6:	20e0      	movs	r0, #224	; 0xe0
 80020e8:	f7ff fc42 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80020ec:	200f      	movs	r0, #15
 80020ee:	f7ff fc4f 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80020f2:	202a      	movs	r0, #42	; 0x2a
 80020f4:	f7ff fc4c 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80020f8:	2028      	movs	r0, #40	; 0x28
 80020fa:	f7ff fc49 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020fe:	2008      	movs	r0, #8
 8002100:	f7ff fc46 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002104:	200e      	movs	r0, #14
 8002106:	f7ff fc43 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800210a:	2008      	movs	r0, #8
 800210c:	f7ff fc40 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002110:	2054      	movs	r0, #84	; 0x54
 8002112:	f7ff fc3d 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002116:	20a9      	movs	r0, #169	; 0xa9
 8002118:	f7ff fc3a 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800211c:	2043      	movs	r0, #67	; 0x43
 800211e:	f7ff fc37 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002122:	200a      	movs	r0, #10
 8002124:	f7ff fc34 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002128:	200f      	movs	r0, #15
 800212a:	f7ff fc31 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fc2e 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fc2b 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fc28 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fc25 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002146:	20e1      	movs	r0, #225	; 0xe1
 8002148:	f7ff fc12 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fc1f 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002152:	2015      	movs	r0, #21
 8002154:	f7ff fc1c 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002158:	2017      	movs	r0, #23
 800215a:	f7ff fc19 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800215e:	2007      	movs	r0, #7
 8002160:	f7ff fc16 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002164:	2011      	movs	r0, #17
 8002166:	f7ff fc13 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800216a:	2006      	movs	r0, #6
 800216c:	f7ff fc10 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002170:	202b      	movs	r0, #43	; 0x2b
 8002172:	f7ff fc0d 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002176:	2056      	movs	r0, #86	; 0x56
 8002178:	f7ff fc0a 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800217c:	203c      	movs	r0, #60	; 0x3c
 800217e:	f7ff fc07 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002182:	2005      	movs	r0, #5
 8002184:	f7ff fc04 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002188:	2010      	movs	r0, #16
 800218a:	f7ff fc01 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800218e:	200f      	movs	r0, #15
 8002190:	f7ff fbfe 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002194:	203f      	movs	r0, #63	; 0x3f
 8002196:	f7ff fbfb 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800219a:	203f      	movs	r0, #63	; 0x3f
 800219c:	f7ff fbf8 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021a0:	200f      	movs	r0, #15
 80021a2:	f7ff fbf5 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80021a6:	202b      	movs	r0, #43	; 0x2b
 80021a8:	f7ff fbe2 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fbef 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff fbec 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7ff fbe9 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80021be:	203f      	movs	r0, #63	; 0x3f
 80021c0:	f7ff fbe6 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80021c4:	202a      	movs	r0, #42	; 0x2a
 80021c6:	f7ff fbd3 	bl	8001970 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fbe0 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fbdd 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fbda 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021dc:	20ef      	movs	r0, #239	; 0xef
 80021de:	f7ff fbd7 	bl	8001990 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80021e2:	2011      	movs	r0, #17
 80021e4:	f7ff fbc4 	bl	8001970 <LCD_WR_REG>
	HAL_Delay(120);
 80021e8:	2078      	movs	r0, #120	; 0x78
 80021ea:	f004 f86b 	bl	80062c4 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 80021ee:	2029      	movs	r0, #41	; 0x29
 80021f0:	f7ff fbbe 	bl	8001970 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <initLCD+0x2bc>)
 80021fc:	f004 fbc6 	bl	800698c <HAL_GPIO_WritePin>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40020800 	.word	0x40020800
 8002208:	2000018c 	.word	0x2000018c
 800220c:	40020000 	.word	0x40020000

08002210 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
	lcdDrawPoint(xc + x, yc + y, c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	b29a      	uxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	b298      	uxth	r0, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	b29a      	uxth	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4413      	add	r3, r2
 8002234:	b29b      	uxth	r3, r3
 8002236:	8b3a      	ldrh	r2, [r7, #24]
 8002238:	4619      	mov	r1, r3
 800223a:	f7ff fc49 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc + y, c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	b29b      	uxth	r3, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b298      	uxth	r0, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	b29a      	uxth	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4413      	add	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	8b3a      	ldrh	r2, [r7, #24]
 8002258:	4619      	mov	r1, r3
 800225a:	f7ff fc39 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc + x, yc - y, c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	b29b      	uxth	r3, r3
 8002266:	4413      	add	r3, r2
 8002268:	b298      	uxth	r0, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	b29a      	uxth	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b29b      	uxth	r3, r3
 8002276:	8b3a      	ldrh	r2, [r7, #24]
 8002278:	4619      	mov	r1, r3
 800227a:	f7ff fc29 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc - y, c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	b29b      	uxth	r3, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	b298      	uxth	r0, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	b29a      	uxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	b29b      	uxth	r3, r3
 8002296:	8b3a      	ldrh	r2, [r7, #24]
 8002298:	4619      	mov	r1, r3
 800229a:	f7ff fc19 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc + x, c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	b298      	uxth	r0, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8b3a      	ldrh	r2, [r7, #24]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7ff fc09 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc + x, c);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	b298      	uxth	r0, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8b3a      	ldrh	r2, [r7, #24]
 80022d8:	4619      	mov	r1, r3
 80022da:	f7ff fbf9 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc - x, c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	b298      	uxth	r0, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	8b3a      	ldrh	r2, [r7, #24]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7ff fbe9 	bl	8001ad0 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc - x, c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	b29a      	uxth	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	b298      	uxth	r0, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	b29a      	uxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	b29b      	uxth	r3, r3
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	b29b      	uxth	r3, r3
 8002316:	8b3a      	ldrh	r2, [r7, #24]
 8002318:	4619      	mov	r1, r3
 800231a:	f7ff fbd9 	bl	8001ad0 <lcdDrawPoint>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <lcdDrawCircle>:
 * @param c Color to be used for drawing the circle.
 * @param r radius of the circle
 * @param Boolean indicating whether to fill the circle (non-zero value) or just draw the outline (zero value).
 */
void lcdDrawCircle(int xc, int yc, uint16_t c, int r, int fill)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b08a      	sub	sp, #40	; 0x28
 800232a:	af02      	add	r7, sp, #8
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	f1c3 0303 	rsb	r3, r3, #3
 8002346:	613b      	str	r3, [r7, #16]

	if (fill) {
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	2b00      	cmp	r3, #0
 800234c:	d04f      	beq.n	80023ee <lcdDrawCircle+0xc8>
		while (x <= y)
 800234e:	e029      	b.n	80023a4 <lcdDrawCircle+0x7e>
		{
			for (yi = x; yi <= y; yi++)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e00a      	b.n	800236c <lcdDrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f7ff ff55 	bl	8002210 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	429a      	cmp	r2, r3
 8002372:	ddf0      	ble.n	8002356 <lcdDrawCircle+0x30>

			if (d < 0)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	da06      	bge.n	8002388 <lcdDrawCircle+0x62>
			{
				d = d + 4 * x + 6;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	009a      	lsls	r2, r3, #2
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	3306      	adds	r3, #6
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e00a      	b.n	800239e <lcdDrawCircle+0x78>
			}
			else
			{
				d = d + 4 * (x - y) + 10;
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	009a      	lsls	r2, r3, #2
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	330a      	adds	r3, #10
 8002396:	613b      	str	r3, [r7, #16]
				y--;
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	3b01      	subs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	ddd1      	ble.n	8002350 <lcdDrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80023ac:	e023      	b.n	80023f6 <lcdDrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7ff ff29 	bl	8002210 <_draw_circle_8>
			if (d < 0)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	da06      	bge.n	80023d2 <lcdDrawCircle+0xac>
				d = d + 4 * x + 6;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	009a      	lsls	r2, r3, #2
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	3306      	adds	r3, #6
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e00a      	b.n	80023e8 <lcdDrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	009a      	lsls	r2, r3, #2
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	330a      	adds	r3, #10
 80023e0:	613b      	str	r3, [r7, #16]
				y--;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
			x++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	dddb      	ble.n	80023ae <lcdDrawCircle+0x88>
}
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <lcdShowString>:
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b08b      	sub	sp, #44	; 0x2c
 8002404:	af04      	add	r7, sp, #16
 8002406:	60ba      	str	r2, [r7, #8]
 8002408:	461a      	mov	r2, r3
 800240a:	4603      	mov	r3, r0
 800240c:	81fb      	strh	r3, [r7, #14]
 800240e:	460b      	mov	r3, r1
 8002410:	81bb      	strh	r3, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0; // used to handle characters that are more than one byte long (e.g., Chinese characters)
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0)
 800241e:	e048      	b.n	80024b2 <lcdShowString+0xb2>
	{
		if (!bHz)
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d145      	bne.n	80024b2 <lcdShowString+0xb2>
		{
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002426:	89fa      	ldrh	r2, [r7, #14]
 8002428:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <lcdShowString+0xc4>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	4619      	mov	r1, r3
 800242e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	1acb      	subs	r3, r1, r3
 8002438:	429a      	cmp	r2, r3
 800243a:	dc3f      	bgt.n	80024bc <lcdShowString+0xbc>
 800243c:	89ba      	ldrh	r2, [r7, #12]
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <lcdShowString+0xc4>)
 8002440:	885b      	ldrh	r3, [r3, #2]
 8002442:	4619      	mov	r1, r3
 8002444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002448:	1acb      	subs	r3, r1, r3
 800244a:	429a      	cmp	r2, r3
 800244c:	dc36      	bgt.n	80024bc <lcdShowString+0xbc>
				return;
			if (*str > 0x80)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d902      	bls.n	800245c <lcdShowString+0x5c>
				bHz = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	e02a      	b.n	80024b2 <lcdShowString+0xb2>
			else
			{
				if (*str == 0x0D)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b0d      	cmp	r3, #13
 8002462:	d10b      	bne.n	800247c <lcdShowString+0x7c>
				{
					y += sizey;
 8002464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002468:	b29a      	uxth	r2, r3
 800246a:	89bb      	ldrh	r3, [r7, #12]
 800246c:	4413      	add	r3, r2
 800246e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8002470:	8abb      	ldrh	r3, [r7, #20]
 8002472:	81fb      	strh	r3, [r7, #14]
					str++;
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	e017      	b.n	80024ac <lcdShowString+0xac>
				}
				else
				{
					lcdShowChar(x, y, *str, fc, bc, sizey, mode);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	88fc      	ldrh	r4, [r7, #6]
 8002482:	89b9      	ldrh	r1, [r7, #12]
 8002484:	89f8      	ldrh	r0, [r7, #14]
 8002486:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	4623      	mov	r3, r4
 8002498:	f7ff fbb6 	bl	8001c08 <lcdShowChar>
					x += sizey / 2;
 800249c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	4413      	add	r3, r2
 80024aa:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3301      	adds	r3, #1
 80024b0:	60bb      	str	r3, [r7, #8]
	while (*str != 0)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1b2      	bne.n	8002420 <lcdShowString+0x20>
 80024ba:	e000      	b.n	80024be <lcdShowString+0xbe>
				return;
 80024bc:	bf00      	nop
			}
		}
	}
}
 80024be:	371c      	adds	r7, #28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd90      	pop	{r4, r7, pc}
 80024c4:	2000018c 	.word	0x2000018c

080024c8 <lcdShowStringCenter>:
 * @param bc Background color behind the text.
 * @param sizey Height of the characters (can be 16, 24, 32).
 * @param mode Determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background).
 */
void lcdShowStringCenter(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	81fb      	strh	r3, [r7, #14]
 80024d6:	460b      	mov	r3, r1
 80024d8:	81bb      	strh	r3, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
    uint8_t sizex = sizey / 2;
 80024de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    uint16_t str_len = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	83fb      	strh	r3, [r7, #30]
    char *ptr = str;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	61bb      	str	r3, [r7, #24]

    // Calculate the length of the string
    while (*ptr != '\0')
 80024ee:	e010      	b.n	8002512 <lcdShowStringCenter+0x4a>
    {
        if (*ptr > 0x80)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d906      	bls.n	8002506 <lcdShowStringCenter+0x3e>
        {
            // If the character is a multibyte character (e.g., Chinese character)
            str_len += 2;
 80024f8:	8bfb      	ldrh	r3, [r7, #30]
 80024fa:	3302      	adds	r3, #2
 80024fc:	83fb      	strh	r3, [r7, #30]
            ptr++;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	3301      	adds	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e002      	b.n	800250c <lcdShowStringCenter+0x44>
        }
        else
        {
            str_len++;
 8002506:	8bfb      	ldrh	r3, [r7, #30]
 8002508:	3301      	adds	r3, #1
 800250a:	83fb      	strh	r3, [r7, #30]
        }
        ptr++;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	3301      	adds	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
    while (*ptr != '\0')
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1ea      	bne.n	80024f0 <lcdShowStringCenter+0x28>
    }

    uint16_t total_width = str_len * sizex;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	b29b      	uxth	r3, r3
 800251e:	8bfa      	ldrh	r2, [r7, #30]
 8002520:	fb12 f303 	smulbb	r3, r2, r3
 8002524:	82bb      	strh	r3, [r7, #20]
    uint16_t start_x = x - (total_width / 2);
 8002526:	8abb      	ldrh	r3, [r7, #20]
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	b29b      	uxth	r3, r3
 800252c:	89fa      	ldrh	r2, [r7, #14]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	827b      	strh	r3, [r7, #18]
    uint16_t start_y = y - (sizey / 2);
 8002532:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	b29b      	uxth	r3, r3
 800253c:	89ba      	ldrh	r2, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	823b      	strh	r3, [r7, #16]

    lcdShowString(start_x, start_y, str, fc, bc, sizey, mode);
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	8a39      	ldrh	r1, [r7, #16]
 8002546:	8a78      	ldrh	r0, [r7, #18]
 8002548:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800254c:	9302      	str	r3, [sp, #8]
 800254e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f7ff ff50 	bl	8002400 <lcdShowString>
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800256c:	2201      	movs	r2, #1
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <led7_init+0x14>)
 8002572:	f004 fa0b 	bl	800698c <HAL_GPIO_WritePin>
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021800 	.word	0x40021800

08002580 <led7_Scan>:

void led7_Scan(){
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <led7_Scan+0x104>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <led7_Scan+0x104>)
 800258e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002590:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <led7_Scan+0x108>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3d      	ldr	r2, [pc, #244]	; (800268c <led7_Scan+0x10c>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	b21a      	sxth	r2, r3
 800259c:	4b39      	ldr	r3, [pc, #228]	; (8002684 <led7_Scan+0x104>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <led7_Scan+0x104>)
 80025aa:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <led7_Scan+0x108>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d847      	bhi.n	8002644 <led7_Scan+0xc4>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <led7_Scan+0x3c>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025eb 	.word	0x080025eb
 80025c4:	08002609 	.word	0x08002609
 80025c8:	08002627 	.word	0x08002627
	case 0:
		spi_buffer |= 0x00b0;
 80025cc:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <led7_Scan+0x104>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <led7_Scan+0x104>)
 80025d8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <led7_Scan+0x104>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <led7_Scan+0x104>)
 80025e6:	801a      	strh	r2, [r3, #0]
		break;
 80025e8:	e02d      	b.n	8002646 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <led7_Scan+0x104>)
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <led7_Scan+0x104>)
 80025f6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <led7_Scan+0x104>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	f023 0320 	bic.w	r3, r3, #32
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <led7_Scan+0x104>)
 8002604:	801a      	strh	r2, [r3, #0]
		break;
 8002606:	e01e      	b.n	8002646 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <led7_Scan+0x104>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <led7_Scan+0x104>)
 8002614:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <led7_Scan+0x104>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	f023 0310 	bic.w	r3, r3, #16
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <led7_Scan+0x104>)
 8002622:	801a      	strh	r2, [r3, #0]
		break;
 8002624:	e00f      	b.n	8002646 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <led7_Scan+0x104>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800262e:	b29a      	uxth	r2, r3
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <led7_Scan+0x104>)
 8002632:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <led7_Scan+0x104>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <led7_Scan+0x104>)
 8002640:	801a      	strh	r2, [r3, #0]
		break;
 8002642:	e000      	b.n	8002646 <led7_Scan+0xc6>
	default:
		break;
 8002644:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <led7_Scan+0x108>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	425a      	negs	r2, r3
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	bf58      	it	pl
 8002658:	4253      	negpl	r3, r2
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <led7_Scan+0x108>)
 800265c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	480b      	ldr	r0, [pc, #44]	; (8002690 <led7_Scan+0x110>)
 8002664:	f004 f992 	bl	800698c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002668:	2301      	movs	r3, #1
 800266a:	2202      	movs	r2, #2
 800266c:	4905      	ldr	r1, [pc, #20]	; (8002684 <led7_Scan+0x104>)
 800266e:	4809      	ldr	r0, [pc, #36]	; (8002694 <led7_Scan+0x114>)
 8002670:	f005 ffcf 	bl	8008612 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002674:	2201      	movs	r2, #1
 8002676:	2140      	movs	r1, #64	; 0x40
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <led7_Scan+0x110>)
 800267a:	f004 f987 	bl	800698c <HAL_GPIO_WritePin>
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000001a 	.word	0x2000001a
 8002688:	20000194 	.word	0x20000194
 800268c:	2000000c 	.word	0x2000000c
 8002690:	40021800 	.word	0x40021800
 8002694:	200001d0 	.word	0x200001d0

08002698 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0e      	blt.n	80026ca <led7_SetDigit+0x32>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	dc0b      	bgt.n	80026ca <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <led7_SetDigit+0x40>)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b2d9      	uxtb	r1, r3
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <led7_SetDigit+0x44>)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	460a      	mov	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
	}
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000010 	.word	0x20000010
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <led7_SetColon>:

void led7_SetColon(uint8_t status){
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <led7_SetColon+0x20>
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <led7_SetColon+0x3c>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f023 0308 	bic.w	r3, r3, #8
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <led7_SetColon+0x3c>)
 80026fc:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 80026fe:	e006      	b.n	800270e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <led7_SetColon+0x3c>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	f043 0308 	orr.w	r3, r3, #8
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <led7_SetColon+0x3c>)
 800270c:	801a      	strh	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000001a 	.word	0x2000001a

08002720 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b08f      	sub	sp, #60	; 0x3c
 8002724:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002726:	f003 fd5b 	bl	80061e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800272a:	f001 ff77 	bl	800461c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800272e:	f7fe ffb1 	bl	8001694 <MX_GPIO_Init>
	MX_TIM2_Init();
 8002732:	f003 fb41 	bl	8005db8 <MX_TIM2_Init>
	MX_SPI1_Init();
 8002736:	f003 fa09 	bl	8005b4c <MX_SPI1_Init>
	MX_FSMC_Init();
 800273a:	f7fe fedb 	bl	80014f4 <MX_FSMC_Init>
	MX_I2C1_Init();
 800273e:	f7ff f8a1 	bl	8001884 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8002742:	f003 fc6b 	bl	800601c <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8002746:	f003 fb83 	bl	8005e50 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 800274a:	f001 ffd1 	bl	80046f0 <system_init>
	/* USER CODE END 2 */

	sTimer4Set(1000, 50); // interrupt every 50ms
 800274e:	2132      	movs	r1, #50	; 0x32
 8002750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002754:	f003 f964 	bl	8005a20 <sTimer4Set>
	sTimer2Set(0, 500); // interrupt every 500ms
 8002758:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800275c:	2000      	movs	r0, #0
 800275e:	f003 f941 	bl	80059e4 <sTimer2Set>

	int clock_radius = 100;
 8002762:	2364      	movs	r3, #100	; 0x64
 8002764:	61fb      	str	r3, [r7, #28]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (sTimer4GetFlag()) {
 8002766:	f003 f995 	bl	8005a94 <sTimer4GetFlag>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <main+0x60>
			button_Scan();
 8002770:	f7fe fbfa 	bl	8000f68 <button_Scan>
			uart_timer_cnt++;
 8002774:	4b8c      	ldr	r3, [pc, #560]	; (80029a8 <main+0x288>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b8a      	ldr	r3, [pc, #552]	; (80029a8 <main+0x288>)
 800277e:	701a      	strb	r2, [r3, #0]
		}

		switch (current_mode) {
 8002780:	4b8a      	ldr	r3, [pc, #552]	; (80029ac <main+0x28c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b08      	cmp	r3, #8
 8002786:	f201 8710 	bhi.w	80045aa <main+0x1e8a>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <main+0x70>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027e7 	.word	0x080027e7
 8002798:	080045ab 	.word	0x080045ab
 800279c:	080029f1 	.word	0x080029f1
 80027a0:	080045b5 	.word	0x080045b5
 80027a4:	080045b5 	.word	0x080045b5
 80027a8:	080045b5 	.word	0x080045b5
 80027ac:	080045b5 	.word	0x080045b5
 80027b0:	08003aa9 	.word	0x08003aa9
		case Mode_init: {
			led7_SetColon(1);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff ff93 	bl	80026e0 <led7_SetColon>
			setTime(&set_time.second, &set_time.minute, &set_time.hour,
 80027ba:	4b7d      	ldr	r3, [pc, #500]	; (80029b0 <main+0x290>)
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <main+0x294>)
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <main+0x298>)
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <main+0x29c>)
 80027c8:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <main+0x2a0>)
 80027ca:	497e      	ldr	r1, [pc, #504]	; (80029c4 <main+0x2a4>)
 80027cc:	487e      	ldr	r0, [pc, #504]	; (80029c8 <main+0x2a8>)
 80027ce:	f001 ffd7 	bl	8004780 <setTime>
					&set_time.day, &set_time.date, &set_time.month,
					&set_time.year);
			ds3231ReadTime();
 80027d2:	f7fe fc71 	bl	80010b8 <ds3231ReadTime>
			current_time.alarm_on = false;
 80027d6:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <main+0x2ac>)
 80027d8:	2200      	movs	r2, #0
 80027da:	721a      	strb	r2, [r3, #8]
			current_mode = Mode_config_time;
 80027dc:	4b73      	ldr	r3, [pc, #460]	; (80029ac <main+0x28c>)
 80027de:	2203      	movs	r2, #3
 80027e0:	701a      	strb	r2, [r3, #0]
			break;
 80027e2:	f001 beee 	b.w	80045c2 <main+0x1ea2>
		}
		case Mode_word_clock: {
			if (previous_mode != current_mode) {
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <main+0x2b0>)
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	4b70      	ldr	r3, [pc, #448]	; (80029ac <main+0x28c>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d05f      	beq.n	80028b2 <main+0x192>
				lcdClear(WHITE);
 80027f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027f6:	f7ff f939 	bl	8001a6c <lcdClear>
				clock_radius = 100;
 80027fa:	2364      	movs	r3, #100	; 0x64
 80027fc:	61fb      	str	r3, [r7, #28]
				displayClock(LCD_WIDTH / 2, 110, clock_radius);
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	216e      	movs	r1, #110	; 0x6e
 8002802:	2078      	movs	r0, #120	; 0x78
 8002804:	f001 ffec 	bl	80047e0 <displayClock>

				(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1a3 021e 	sub.w	r2, r3, #30
 800280e:	231f      	movs	r3, #31
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <main+0x2ac>)
 8002814:	216e      	movs	r1, #110	; 0x6e
 8002816:	2078      	movs	r0, #120	; 0x78
 8002818:	f002 f89a 	bl	8004950 <displaySecClockwise>
						clock_radius - 30, &current_time.second, BLUE);
				(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002822:	2300      	movs	r3, #0
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	4b6b      	ldr	r3, [pc, #428]	; (80029d4 <main+0x2b4>)
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	4b68      	ldr	r3, [pc, #416]	; (80029cc <main+0x2ac>)
 800282c:	216e      	movs	r1, #110	; 0x6e
 800282e:	2078      	movs	r0, #120	; 0x78
 8002830:	f002 f98a 	bl	8004b48 <displayMinClockwise>
						clock_radius - 40, &current_time.second,
						&current_time.minute, BLACK);
				(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 800283a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	4b65      	ldr	r3, [pc, #404]	; (80029d8 <main+0x2b8>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <main+0x2b4>)
 8002846:	216e      	movs	r1, #110	; 0x6e
 8002848:	2078      	movs	r0, #120	; 0x78
 800284a:	f002 fa99 	bl	8004d80 <displayHourClockwise>
						clock_radius - 50, &current_time.minute,
						&current_time.hour, RED);

				displayTime(LCD_WIDTH / 2, 240, &current_time.second,
 800284e:	2300      	movs	r3, #0
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	2300      	movs	r3, #0
 8002854:	9303      	str	r3, [sp, #12]
 8002856:	2300      	movs	r3, #0
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2320      	movs	r3, #32
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <main+0x2b8>)
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	4b5c      	ldr	r3, [pc, #368]	; (80029d4 <main+0x2b4>)
 8002864:	4a59      	ldr	r2, [pc, #356]	; (80029cc <main+0x2ac>)
 8002866:	21f0      	movs	r1, #240	; 0xf0
 8002868:	2078      	movs	r0, #120	; 0x78
 800286a:	f002 fbad 	bl	8004fc8 <displayTime>
						&current_time.minute, &current_time.hour, 32, BLACK,
						BLACK, BLACK);
				displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date,
 800286e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2318      	movs	r3, #24
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	4b55      	ldr	r3, [pc, #340]	; (80029dc <main+0x2bc>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <main+0x2c0>)
 800288a:	4a56      	ldr	r2, [pc, #344]	; (80029e4 <main+0x2c4>)
 800288c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002890:	2078      	movs	r0, #120	; 0x78
 8002892:	f002 fc17 	bl	80050c4 <displayDate>
						&current_time.month, &current_time.year, 24, DARKBLUE,
						DARKBLUE, DARKBLUE);
				displayDay(20, 320 - 10 - 24, &current_time.day, 24, RED);
 8002896:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2318      	movs	r3, #24
 800289e:	4a52      	ldr	r2, [pc, #328]	; (80029e8 <main+0x2c8>)
 80028a0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80028a4:	2014      	movs	r0, #20
 80028a6:	f002 fcb1 	bl	800520c <displayDay>

				previous_mode = current_mode;
 80028aa:	4b40      	ldr	r3, [pc, #256]	; (80029ac <main+0x28c>)
 80028ac:	781a      	ldrb	r2, [r3, #0]
 80028ae:	4b48      	ldr	r3, [pc, #288]	; (80029d0 <main+0x2b0>)
 80028b0:	701a      	strb	r2, [r3, #0]
			}

			if (sTimer2GetFlag()) {
 80028b2:	f003 f8d3 	bl	8005a5c <sTimer2GetFlag>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d065      	beq.n	8002988 <main+0x268>
//				debugSystem();
				test_LedDebug();
 80028bc:	f001 ff3c 	bl	8004738 <test_LedDebug>

				ds3231ReadTime();
 80028c0:	f7fe fbfa 	bl	80010b8 <ds3231ReadTime>

				(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1a3 021e 	sub.w	r2, r3, #30
 80028ca:	231f      	movs	r3, #31
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <main+0x2ac>)
 80028d0:	216e      	movs	r1, #110	; 0x6e
 80028d2:	2078      	movs	r0, #120	; 0x78
 80028d4:	f002 f83c 	bl	8004950 <displaySecClockwise>
						clock_radius - 30, &current_time.second, BLUE);
				(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <main+0x2b4>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <main+0x2ac>)
 80028e8:	216e      	movs	r1, #110	; 0x6e
 80028ea:	2078      	movs	r0, #120	; 0x78
 80028ec:	f002 f92c 	bl	8004b48 <displayMinClockwise>
						clock_radius - 40, &current_time.second,
						&current_time.minute, BLACK);
				(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80028f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	4b36      	ldr	r3, [pc, #216]	; (80029d8 <main+0x2b8>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <main+0x2b4>)
 8002902:	216e      	movs	r1, #110	; 0x6e
 8002904:	2078      	movs	r0, #120	; 0x78
 8002906:	f002 fa3b 	bl	8004d80 <displayHourClockwise>
						clock_radius - 50, &current_time.minute,
						&current_time.hour, RED);

				displayTime(LCD_WIDTH / 2, 240, &current_time.second,
 800290a:	2300      	movs	r3, #0
 800290c:	9304      	str	r3, [sp, #16]
 800290e:	2300      	movs	r3, #0
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	2300      	movs	r3, #0
 8002914:	9302      	str	r3, [sp, #8]
 8002916:	2320      	movs	r3, #32
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <main+0x2b8>)
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <main+0x2b4>)
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <main+0x2ac>)
 8002922:	21f0      	movs	r1, #240	; 0xf0
 8002924:	2078      	movs	r0, #120	; 0x78
 8002926:	f002 fb4f 	bl	8004fc8 <displayTime>
						&current_time.minute, &current_time.hour, 32, BLACK,
						BLACK, BLACK);
				if (current_time.second == 0 && current_time.minute == 0
 800292a:	4b28      	ldr	r3, [pc, #160]	; (80029cc <main+0x2ac>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d125      	bne.n	800297e <main+0x25e>
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <main+0x2ac>)
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <main+0x25e>
						&& current_time.hour == 0) {
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <main+0x2ac>)
 800293c:	789b      	ldrb	r3, [r3, #2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d11d      	bne.n	800297e <main+0x25e>
					displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date,
 8002942:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002946:	9304      	str	r3, [sp, #16]
 8002948:	f240 13cf 	movw	r3, #463	; 0x1cf
 800294c:	9303      	str	r3, [sp, #12]
 800294e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2318      	movs	r3, #24
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <main+0x2bc>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <main+0x2c0>)
 800295e:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <main+0x2c4>)
 8002960:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002964:	2078      	movs	r0, #120	; 0x78
 8002966:	f002 fbad 	bl	80050c4 <displayDate>
							&current_time.month, &current_time.year, 24,
							DARKBLUE, DARKBLUE, DARKBLUE);
					displayDay(20, 320 - 34, &current_time.day, 24, RED);
 800296a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2318      	movs	r3, #24
 8002972:	4a1d      	ldr	r2, [pc, #116]	; (80029e8 <main+0x2c8>)
 8002974:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002978:	2014      	movs	r0, #20
 800297a:	f002 fc47 	bl	800520c <displayDay>
				}

				displayTimeLed7Seg(&current_time.second, &current_time.minute,
 800297e:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <main+0x2b8>)
 8002980:	4914      	ldr	r1, [pc, #80]	; (80029d4 <main+0x2b4>)
 8002982:	4812      	ldr	r0, [pc, #72]	; (80029cc <main+0x2ac>)
 8002984:	f002 fcea 	bl	800535c <displayTimeLed7Seg>
						&current_time.hour);
			}

			if (button_count[12] == 1) {
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <main+0x2cc>)
 800298a:	8b1b      	ldrh	r3, [r3, #24]
 800298c:	2b01      	cmp	r3, #1
 800298e:	f041 8614 	bne.w	80045ba <main+0x1e9a>
				current_mode = Mode_config_time;
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <main+0x28c>)
 8002994:	2203      	movs	r2, #3
 8002996:	701a      	strb	r2, [r3, #0]
				button_count[12] += 1;
 8002998:	4b14      	ldr	r3, [pc, #80]	; (80029ec <main+0x2cc>)
 800299a:	8b1b      	ldrh	r3, [r3, #24]
 800299c:	3301      	adds	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <main+0x2cc>)
 80029a2:	831a      	strh	r2, [r3, #24]
			}

			break;
 80029a4:	f001 be09 	b.w	80045ba <main+0x1e9a>
 80029a8:	2000019a 	.word	0x2000019a
 80029ac:	200001a4 	.word	0x200001a4
 80029b0:	20000006 	.word	0x20000006
 80029b4:	20000005 	.word	0x20000005
 80029b8:	20000004 	.word	0x20000004
 80029bc:	20000003 	.word	0x20000003
 80029c0:	20000002 	.word	0x20000002
 80029c4:	20000001 	.word	0x20000001
 80029c8:	20000000 	.word	0x20000000
 80029cc:	200000d0 	.word	0x200000d0
 80029d0:	200001a5 	.word	0x200001a5
 80029d4:	200000d1 	.word	0x200000d1
 80029d8:	200000d2 	.word	0x200000d2
 80029dc:	200000d6 	.word	0x200000d6
 80029e0:	200000d5 	.word	0x200000d5
 80029e4:	200000d4 	.word	0x200000d4
 80029e8:	200000d3 	.word	0x200000d3
 80029ec:	200000ac 	.word	0x200000ac
		}
		case Mode_config_time: {
			if (previous_mode != current_mode) {
 80029f0:	4b98      	ldr	r3, [pc, #608]	; (8002c54 <main+0x534>)
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	4b98      	ldr	r3, [pc, #608]	; (8002c58 <main+0x538>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d032      	beq.n	8002a62 <main+0x342>
				ds3231ReadTime();
 80029fc:	f7fe fb5c 	bl	80010b8 <ds3231ReadTime>
				set_time.second = current_time.second;
 8002a00:	4b96      	ldr	r3, [pc, #600]	; (8002c5c <main+0x53c>)
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <main+0x540>)
 8002a06:	701a      	strb	r2, [r3, #0]
				set_time.minute = current_time.minute;
 8002a08:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <main+0x53c>)
 8002a0a:	785a      	ldrb	r2, [r3, #1]
 8002a0c:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <main+0x540>)
 8002a0e:	705a      	strb	r2, [r3, #1]
				set_time.hour = current_time.hour;
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <main+0x53c>)
 8002a12:	789a      	ldrb	r2, [r3, #2]
 8002a14:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <main+0x540>)
 8002a16:	709a      	strb	r2, [r3, #2]
				set_time.day = current_time.day;
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <main+0x53c>)
 8002a1a:	78da      	ldrb	r2, [r3, #3]
 8002a1c:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <main+0x540>)
 8002a1e:	70da      	strb	r2, [r3, #3]
				set_time.date = current_time.date;
 8002a20:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <main+0x53c>)
 8002a22:	791a      	ldrb	r2, [r3, #4]
 8002a24:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <main+0x540>)
 8002a26:	711a      	strb	r2, [r3, #4]
				set_time.month = current_time.month;
 8002a28:	4b8c      	ldr	r3, [pc, #560]	; (8002c5c <main+0x53c>)
 8002a2a:	795a      	ldrb	r2, [r3, #5]
 8002a2c:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <main+0x540>)
 8002a2e:	715a      	strb	r2, [r3, #5]
				set_time.year = current_time.year;
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <main+0x53c>)
 8002a32:	88da      	ldrh	r2, [r3, #6]
 8002a34:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <main+0x540>)
 8002a36:	80da      	strh	r2, [r3, #6]

				lcdClear(WHITE);
 8002a38:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002a3c:	f7ff f816 	bl	8001a6c <lcdClear>
				clock_radius = 100;
 8002a40:	2364      	movs	r3, #100	; 0x64
 8002a42:	61fb      	str	r3, [r7, #28]
				displayClock(LCD_WIDTH / 2, 110, clock_radius);
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	216e      	movs	r1, #110	; 0x6e
 8002a48:	2078      	movs	r0, #120	; 0x78
 8002a4a:	f001 fec9 	bl	80047e0 <displayClock>

				current_mode_config = Mode_config_second;
 8002a4e:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <main+0x544>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
				previous_mode_config = Mode_config_minute;
 8002a54:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <main+0x548>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]

				previous_mode = current_mode;
 8002a5a:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <main+0x538>)
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <main+0x534>)
 8002a60:	701a      	strb	r2, [r3, #0]
			}

			switch (current_mode_config) {
 8002a62:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <main+0x544>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	f200 87eb 	bhi.w	8003a42 <main+0x1322>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <main+0x354>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a91 	.word	0x08002a91
 8002a78:	08002d2f 	.word	0x08002d2f
 8002a7c:	08002ff3 	.word	0x08002ff3
 8002a80:	080032b5 	.word	0x080032b5
 8002a84:	0800348d 	.word	0x0800348d
 8002a88:	0800368d 	.word	0x0800368d
 8002a8c:	0800388d 	.word	0x0800388d
			case Mode_config_second: {
				if (previous_mode_config != current_mode_config) {
 8002a90:	4b75      	ldr	r3, [pc, #468]	; (8002c68 <main+0x548>)
 8002a92:	781a      	ldrb	r2, [r3, #0]
 8002a94:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <main+0x544>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d05a      	beq.n	8002b52 <main+0x432>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	4b71      	ldr	r3, [pc, #452]	; (8002c6c <main+0x54c>)
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <main+0x540>)
 8002aac:	216e      	movs	r1, #110	; 0x6e
 8002aae:	2078      	movs	r0, #120	; 0x78
 8002ab0:	f002 f84a 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLACK);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002aba:	231f      	movs	r3, #31
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	4b6c      	ldr	r3, [pc, #432]	; (8002c70 <main+0x550>)
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <main+0x54c>)
 8002ac4:	216e      	movs	r1, #110	; 0x6e
 8002ac6:	2078      	movs	r0, #120	; 0x78
 8002ac8:	f002 f95a 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							BLUE);
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f1a3 021e 	sub.w	r2, r3, #30
 8002ad2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <main+0x540>)
 8002ada:	216e      	movs	r1, #110	; 0x6e
 8002adc:	2078      	movs	r0, #120	; 0x78
 8002ade:	f001 ff37 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9304      	str	r3, [sp, #16]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	2320      	movs	r3, #32
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <main+0x550>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <main+0x54c>)
 8002afa:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <main+0x540>)
 8002afc:	21f0      	movs	r1, #240	; 0xf0
 8002afe:	2078      	movs	r0, #120	; 0x78
 8002b00:	f002 fa62 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, RED, BLACK,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8002b04:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002b08:	9304      	str	r3, [sp, #16]
 8002b0a:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002b0e:	9303      	str	r3, [sp, #12]
 8002b10:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	2318      	movs	r3, #24
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <main+0x554>)
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <main+0x558>)
 8002b20:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <main+0x55c>)
 8002b22:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002b26:	2078      	movs	r0, #120	; 0x78
 8002b28:	f002 facc 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE,
							DARKBLUE, DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002b2c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2318      	movs	r3, #24
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <main+0x560>)
 8002b36:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002b3a:	2014      	movs	r0, #20
 8002b3c:	f002 fb66 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 8002b40:	4a4b      	ldr	r2, [pc, #300]	; (8002c70 <main+0x550>)
 8002b42:	494a      	ldr	r1, [pc, #296]	; (8002c6c <main+0x54c>)
 8002b44:	4846      	ldr	r0, [pc, #280]	; (8002c60 <main+0x540>)
 8002b46:	f002 fc09 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 8002b4a:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <main+0x544>)
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <main+0x548>)
 8002b50:	701a      	strb	r2, [r3, #0]
				}

				if (sTimer2GetFlag()) {
 8002b52:	f002 ff83 	bl	8005a5c <sTimer2GetFlag>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <main+0x468>
					static int counter = 0;
					counter += 1;
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <main+0x564>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a48      	ldr	r2, [pc, #288]	; (8002c84 <main+0x564>)
 8002b64:	6013      	str	r3, [r2, #0]

					if (counter % 4 == 0) {
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <main+0x564>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <main+0x468>
//						led7SegDebugTurnOff(6);
//						led7SegDebugTurnOff(7);
//						led7SegDebugTurnOff(8);
					} else if (counter % 2 == 0) {
 8002b72:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <main+0x564>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <main+0x468>
						displayTimeLed7Seg(&set_time.second, &set_time.minute,
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	; (8002c70 <main+0x550>)
 8002b80:	493a      	ldr	r1, [pc, #232]	; (8002c6c <main+0x54c>)
 8002b82:	4837      	ldr	r0, [pc, #220]	; (8002c60 <main+0x540>)
 8002b84:	f002 fbea 	bl	800535c <displayTimeLed7Seg>
								&set_time.hour);
					}
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <main+0x568>)
 8002b8a:	8ada      	ldrh	r2, [r3, #22]
 8002b8c:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <main+0x56c>)
 8002b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b92:	0919      	lsrs	r1, r3, #4
 8002b94:	460b      	mov	r3, r1
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a5b      	subs	r3, r3, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10a      	bne.n	8002bba <main+0x49a>
						{
					current_mode_config = Mode_config_minute;
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <main+0x544>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <main+0x568>)
 8002bac:	8adb      	ldrh	r3, [r3, #22]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <main+0x568>)
 8002bb4:	82da      	strh	r2, [r3, #22]
							BLACK);

					button_count[7] += 1;
				}

				break;
 8002bb6:	f000 bf37 	b.w	8003a28 <main+0x1308>
				} else if (button_count[3] % 20 == 1) {
 8002bba:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <main+0x568>)
 8002bbc:	88da      	ldrh	r2, [r3, #6]
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <main+0x570>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	0919      	lsrs	r1, r3, #4
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d15e      	bne.n	8002c94 <main+0x574>
					increaseSec();
 8002bd6:	f002 fc07 	bl	80053e8 <increaseSec>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002be0:	2300      	movs	r3, #0
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <main+0x54c>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <main+0x540>)
 8002bea:	216e      	movs	r1, #110	; 0x6e
 8002bec:	2078      	movs	r0, #120	; 0x78
 8002bee:	f001 ffab 	bl	8004b48 <displayMinClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002bf8:	231f      	movs	r3, #31
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <main+0x550>)
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <main+0x54c>)
 8002c02:	216e      	movs	r1, #110	; 0x6e
 8002c04:	2078      	movs	r0, #120	; 0x78
 8002c06:	f002 f8bb 	bl	8004d80 <displayHourClockwise>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f1a3 021e 	sub.w	r2, r3, #30
 8002c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <main+0x540>)
 8002c18:	216e      	movs	r1, #110	; 0x6e
 8002c1a:	2078      	movs	r0, #120	; 0x78
 8002c1c:	f001 fe98 	bl	8004950 <displaySecClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002c20:	2300      	movs	r3, #0
 8002c22:	9304      	str	r3, [sp, #16]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9303      	str	r3, [sp, #12]
 8002c28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c2c:	9302      	str	r3, [sp, #8]
 8002c2e:	2320      	movs	r3, #32
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <main+0x550>)
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <main+0x54c>)
 8002c38:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <main+0x540>)
 8002c3a:	21f0      	movs	r1, #240	; 0xf0
 8002c3c:	2078      	movs	r0, #120	; 0x78
 8002c3e:	f002 f9c3 	bl	8004fc8 <displayTime>
					button_count[3] += 1;
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <main+0x568>)
 8002c44:	88db      	ldrh	r3, [r3, #6]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <main+0x568>)
 8002c4c:	80da      	strh	r2, [r3, #6]
				break;
 8002c4e:	f000 beeb 	b.w	8003a28 <main+0x1308>
 8002c52:	bf00      	nop
 8002c54:	200001a5 	.word	0x200001a5
 8002c58:	200001a4 	.word	0x200001a4
 8002c5c:	200000d0 	.word	0x200000d0
 8002c60:	20000000 	.word	0x20000000
 8002c64:	200001a6 	.word	0x200001a6
 8002c68:	2000001c 	.word	0x2000001c
 8002c6c:	20000001 	.word	0x20000001
 8002c70:	20000002 	.word	0x20000002
 8002c74:	20000006 	.word	0x20000006
 8002c78:	20000005 	.word	0x20000005
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	20000003 	.word	0x20000003
 8002c84:	200001ac 	.word	0x200001ac
 8002c88:	200000ac 	.word	0x200000ac
 8002c8c:	88888889 	.word	0x88888889
 8002c90:	cccccccd 	.word	0xcccccccd
				} else if (button_count[7] % 20 == 1) {
 8002c94:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <main+0x804>)
 8002c96:	89da      	ldrh	r2, [r3, #14]
 8002c98:	4ba3      	ldr	r3, [pc, #652]	; (8002f28 <main+0x808>)
 8002c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9e:	0919      	lsrs	r1, r3, #4
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 86bb 	bne.w	8003a28 <main+0x1308>
					decreaseSec();
 8002cb2:	f002 fbcd 	bl	8005450 <decreaseSec>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	4b9a      	ldr	r3, [pc, #616]	; (8002f2c <main+0x80c>)
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	4b9a      	ldr	r3, [pc, #616]	; (8002f30 <main+0x810>)
 8002cc6:	216e      	movs	r1, #110	; 0x6e
 8002cc8:	2078      	movs	r0, #120	; 0x78
 8002cca:	f001 ff3d 	bl	8004b48 <displayMinClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002cd4:	231f      	movs	r3, #31
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	4b96      	ldr	r3, [pc, #600]	; (8002f34 <main+0x814>)
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	4b93      	ldr	r3, [pc, #588]	; (8002f2c <main+0x80c>)
 8002cde:	216e      	movs	r1, #110	; 0x6e
 8002ce0:	2078      	movs	r0, #120	; 0x78
 8002ce2:	f002 f84d 	bl	8004d80 <displayHourClockwise>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f1a3 021e 	sub.w	r2, r3, #30
 8002cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4b8f      	ldr	r3, [pc, #572]	; (8002f30 <main+0x810>)
 8002cf4:	216e      	movs	r1, #110	; 0x6e
 8002cf6:	2078      	movs	r0, #120	; 0x78
 8002cf8:	f001 fe2a 	bl	8004950 <displaySecClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9304      	str	r3, [sp, #16]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9303      	str	r3, [sp, #12]
 8002d04:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d08:	9302      	str	r3, [sp, #8]
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <main+0x814>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <main+0x80c>)
 8002d14:	4a86      	ldr	r2, [pc, #536]	; (8002f30 <main+0x810>)
 8002d16:	21f0      	movs	r1, #240	; 0xf0
 8002d18:	2078      	movs	r0, #120	; 0x78
 8002d1a:	f002 f955 	bl	8004fc8 <displayTime>
					button_count[7] += 1;
 8002d1e:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <main+0x804>)
 8002d20:	89db      	ldrh	r3, [r3, #14]
 8002d22:	3301      	adds	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b7f      	ldr	r3, [pc, #508]	; (8002f24 <main+0x804>)
 8002d28:	81da      	strh	r2, [r3, #14]
				break;
 8002d2a:	f000 be7d 	b.w	8003a28 <main+0x1308>
			}
			case Mode_config_minute: {
				if (previous_mode_config != current_mode_config) {
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <main+0x818>)
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <main+0x81c>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d05a      	beq.n	8002df0 <main+0x6d0>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f1a3 021e 	sub.w	r2, r3, #30
 8002d40:	2300      	movs	r3, #0
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b7a      	ldr	r3, [pc, #488]	; (8002f30 <main+0x810>)
 8002d46:	216e      	movs	r1, #110	; 0x6e
 8002d48:	2078      	movs	r0, #120	; 0x78
 8002d4a:	f001 fe01 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002d54:	231f      	movs	r3, #31
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <main+0x814>)
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	4b73      	ldr	r3, [pc, #460]	; (8002f2c <main+0x80c>)
 8002d5e:	216e      	movs	r1, #110	; 0x6e
 8002d60:	2078      	movs	r0, #120	; 0x78
 8002d62:	f002 f80d 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							BLUE);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002d6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <main+0x80c>)
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <main+0x810>)
 8002d78:	216e      	movs	r1, #110	; 0x6e
 8002d7a:	2078      	movs	r0, #120	; 0x78
 8002d7c:	f001 fee4 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002d80:	2300      	movs	r3, #0
 8002d82:	9304      	str	r3, [sp, #16]
 8002d84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d88:	9303      	str	r3, [sp, #12]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	9302      	str	r3, [sp, #8]
 8002d8e:	2320      	movs	r3, #32
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <main+0x814>)
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4b65      	ldr	r3, [pc, #404]	; (8002f2c <main+0x80c>)
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <main+0x810>)
 8002d9a:	21f0      	movs	r1, #240	; 0xf0
 8002d9c:	2078      	movs	r0, #120	; 0x78
 8002d9e:	f002 f913 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, RED,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8002da2:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002dac:	9303      	str	r3, [sp, #12]
 8002dae:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	2318      	movs	r3, #24
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <main+0x820>)
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <main+0x824>)
 8002dbe:	4a62      	ldr	r2, [pc, #392]	; (8002f48 <main+0x828>)
 8002dc0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002dc4:	2078      	movs	r0, #120	; 0x78
 8002dc6:	f002 f97d 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE,
							DARKBLUE, DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002dca:	f240 13cf 	movw	r3, #463	; 0x1cf
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2318      	movs	r3, #24
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <main+0x82c>)
 8002dd4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002dd8:	2014      	movs	r0, #20
 8002dda:	f002 fa17 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 8002dde:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <main+0x814>)
 8002de0:	4952      	ldr	r1, [pc, #328]	; (8002f2c <main+0x80c>)
 8002de2:	4853      	ldr	r0, [pc, #332]	; (8002f30 <main+0x810>)
 8002de4:	f002 faba 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 8002de8:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <main+0x81c>)
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	4b52      	ldr	r3, [pc, #328]	; (8002f38 <main+0x818>)
 8002dee:	701a      	strb	r2, [r3, #0]
				}

				if (sTimer2GetFlag()) {
 8002df0:	f002 fe34 	bl	8005a5c <sTimer2GetFlag>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <main+0x706>
					static int counter = 0;
					counter += 1;
 8002dfa:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <main+0x830>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <main+0x830>)
 8002e02:	6013      	str	r3, [r2, #0]

					if (counter % 4 == 0) {
 8002e04:	4b52      	ldr	r3, [pc, #328]	; (8002f50 <main+0x830>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <main+0x706>
//						led7SegTurnOff(2);
//						led7SegTurnOff(3);
					} else if (counter % 2 == 0) {
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <main+0x830>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <main+0x706>
						displayTimeLed7Seg(&set_time.second, &set_time.minute,
 8002e1c:	4a45      	ldr	r2, [pc, #276]	; (8002f34 <main+0x814>)
 8002e1e:	4943      	ldr	r1, [pc, #268]	; (8002f2c <main+0x80c>)
 8002e20:	4843      	ldr	r0, [pc, #268]	; (8002f30 <main+0x810>)
 8002e22:	f002 fa9b 	bl	800535c <displayTimeLed7Seg>
								&set_time.hour);
					}
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <main+0x804>)
 8002e28:	8ada      	ldrh	r2, [r3, #22]
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <main+0x834>)
 8002e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e30:	0919      	lsrs	r1, r3, #4
 8002e32:	460b      	mov	r3, r1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a5b      	subs	r3, r3, r1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10a      	bne.n	8002e58 <main+0x738>
						{
					current_mode_config = Mode_config_hour;
 8002e42:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <main+0x81c>)
 8002e44:	2202      	movs	r2, #2
 8002e46:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002e48:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <main+0x804>)
 8002e4a:	8adb      	ldrh	r3, [r3, #22]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <main+0x804>)
 8002e52:	82da      	strh	r2, [r3, #22]
							BLACK);

					button_count[7] += 1;
				}

				break;
 8002e54:	f000 bdea 	b.w	8003a2c <main+0x130c>
				} else if (button_count[15] % 30 == 1) {
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <main+0x804>)
 8002e5a:	8bda      	ldrh	r2, [r3, #30]
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <main+0x834>)
 8002e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e62:	0919      	lsrs	r1, r3, #4
 8002e64:	460b      	mov	r3, r1
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a5b      	subs	r3, r3, r1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d10a      	bne.n	8002e8a <main+0x76a>
					current_mode_config = Mode_config_second;
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <main+0x81c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <main+0x804>)
 8002e7c:	8bdb      	ldrh	r3, [r3, #30]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <main+0x804>)
 8002e84:	83da      	strh	r2, [r3, #30]
				break;
 8002e86:	f000 bdd1 	b.w	8003a2c <main+0x130c>
				} else if (button_count[3] % 20 == 1) {
 8002e8a:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <main+0x804>)
 8002e8c:	88da      	ldrh	r2, [r3, #6]
 8002e8e:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <main+0x808>)
 8002e90:	fba3 1302 	umull	r1, r3, r3, r2
 8002e94:	0919      	lsrs	r1, r3, #4
 8002e96:	460b      	mov	r3, r1
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d158      	bne.n	8002f58 <main+0x838>
					increaseMin();
 8002ea6:	f002 fb07 	bl	80054b8 <increaseMin>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f1a3 021e 	sub.w	r2, r3, #30
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <main+0x810>)
 8002eb6:	216e      	movs	r1, #110	; 0x6e
 8002eb8:	2078      	movs	r0, #120	; 0x78
 8002eba:	f001 fd49 	bl	8004950 <displaySecClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002ec4:	231f      	movs	r3, #31
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <main+0x814>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <main+0x80c>)
 8002ece:	216e      	movs	r1, #110	; 0x6e
 8002ed0:	2078      	movs	r0, #120	; 0x78
 8002ed2:	f001 ff55 	bl	8004d80 <displayHourClockwise>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002edc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <main+0x80c>)
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <main+0x810>)
 8002ee8:	216e      	movs	r1, #110	; 0x6e
 8002eea:	2078      	movs	r0, #120	; 0x78
 8002eec:	f001 fe2c 	bl	8004b48 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9304      	str	r3, [sp, #16]
 8002ef4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	2320      	movs	r3, #32
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <main+0x814>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <main+0x80c>)
 8002f08:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <main+0x810>)
 8002f0a:	21f0      	movs	r1, #240	; 0xf0
 8002f0c:	2078      	movs	r0, #120	; 0x78
 8002f0e:	f002 f85b 	bl	8004fc8 <displayTime>
					button_count[3] += 1;
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <main+0x804>)
 8002f14:	88db      	ldrh	r3, [r3, #6]
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <main+0x804>)
 8002f1c:	80da      	strh	r2, [r3, #6]
				break;
 8002f1e:	f000 bd85 	b.w	8003a2c <main+0x130c>
 8002f22:	bf00      	nop
 8002f24:	200000ac 	.word	0x200000ac
 8002f28:	cccccccd 	.word	0xcccccccd
 8002f2c:	20000001 	.word	0x20000001
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000002 	.word	0x20000002
 8002f38:	2000001c 	.word	0x2000001c
 8002f3c:	200001a6 	.word	0x200001a6
 8002f40:	20000006 	.word	0x20000006
 8002f44:	20000005 	.word	0x20000005
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20000003 	.word	0x20000003
 8002f50:	200001b0 	.word	0x200001b0
 8002f54:	88888889 	.word	0x88888889
				} else if (button_count[7] % 20 == 1) {
 8002f58:	4ba3      	ldr	r3, [pc, #652]	; (80031e8 <main+0xac8>)
 8002f5a:	89da      	ldrh	r2, [r3, #14]
 8002f5c:	4ba3      	ldr	r3, [pc, #652]	; (80031ec <main+0xacc>)
 8002f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f62:	0919      	lsrs	r1, r3, #4
 8002f64:	460b      	mov	r3, r1
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 855b 	bne.w	8003a2c <main+0x130c>
					decreaseMin();
 8002f76:	f002 fac5 	bl	8005504 <decreaseMin>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f1a3 021e 	sub.w	r2, r3, #30
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4b9a      	ldr	r3, [pc, #616]	; (80031f0 <main+0xad0>)
 8002f86:	216e      	movs	r1, #110	; 0x6e
 8002f88:	2078      	movs	r0, #120	; 0x78
 8002f8a:	f001 fce1 	bl	8004950 <displaySecClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8002f94:	231f      	movs	r3, #31
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	4b96      	ldr	r3, [pc, #600]	; (80031f4 <main+0xad4>)
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4b96      	ldr	r3, [pc, #600]	; (80031f8 <main+0xad8>)
 8002f9e:	216e      	movs	r1, #110	; 0x6e
 8002fa0:	2078      	movs	r0, #120	; 0x78
 8002fa2:	f001 feed 	bl	8004d80 <displayHourClockwise>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8002fac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <main+0xad8>)
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	4b8e      	ldr	r3, [pc, #568]	; (80031f0 <main+0xad0>)
 8002fb8:	216e      	movs	r1, #110	; 0x6e
 8002fba:	2078      	movs	r0, #120	; 0x78
 8002fbc:	f001 fdc4 	bl	8004b48 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9304      	str	r3, [sp, #16]
 8002fc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fc8:	9303      	str	r3, [sp, #12]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	2320      	movs	r3, #32
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <main+0xad4>)
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <main+0xad8>)
 8002fd8:	4a85      	ldr	r2, [pc, #532]	; (80031f0 <main+0xad0>)
 8002fda:	21f0      	movs	r1, #240	; 0xf0
 8002fdc:	2078      	movs	r0, #120	; 0x78
 8002fde:	f001 fff3 	bl	8004fc8 <displayTime>
					button_count[7] += 1;
 8002fe2:	4b81      	ldr	r3, [pc, #516]	; (80031e8 <main+0xac8>)
 8002fe4:	89db      	ldrh	r3, [r3, #14]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <main+0xac8>)
 8002fec:	81da      	strh	r2, [r3, #14]
				break;
 8002fee:	f000 bd1d 	b.w	8003a2c <main+0x130c>
			}
			case Mode_config_hour: {
				if (previous_mode_config != current_mode_config) {
 8002ff2:	4b82      	ldr	r3, [pc, #520]	; (80031fc <main+0xadc>)
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	4b82      	ldr	r3, [pc, #520]	; (8003200 <main+0xae0>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d05a      	beq.n	80030b4 <main+0x994>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f1a3 021e 	sub.w	r2, r3, #30
 8003004:	2300      	movs	r3, #0
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <main+0xad0>)
 800300a:	216e      	movs	r1, #110	; 0x6e
 800300c:	2078      	movs	r0, #120	; 0x78
 800300e:	f001 fc9f 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8003018:	231f      	movs	r3, #31
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <main+0xad8>)
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <main+0xad0>)
 8003022:	216e      	movs	r1, #110	; 0x6e
 8003024:	2078      	movs	r0, #120	; 0x78
 8003026:	f001 fd8f 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLUE);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8003030:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	4b6f      	ldr	r3, [pc, #444]	; (80031f4 <main+0xad4>)
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4b6f      	ldr	r3, [pc, #444]	; (80031f8 <main+0xad8>)
 800303c:	216e      	movs	r1, #110	; 0x6e
 800303e:	2078      	movs	r0, #120	; 0x78
 8003040:	f001 fe9e 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8003044:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003048:	9304      	str	r3, [sp, #16]
 800304a:	2300      	movs	r3, #0
 800304c:	9303      	str	r3, [sp, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	9302      	str	r3, [sp, #8]
 8003052:	2320      	movs	r3, #32
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <main+0xad4>)
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <main+0xad8>)
 800305c:	4a64      	ldr	r2, [pc, #400]	; (80031f0 <main+0xad0>)
 800305e:	21f0      	movs	r1, #240	; 0xf0
 8003060:	2078      	movs	r0, #120	; 0x78
 8003062:	f001 ffb1 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, BLACK,
							RED);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8003066:	f240 13cf 	movw	r3, #463	; 0x1cf
 800306a:	9304      	str	r3, [sp, #16]
 800306c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	2318      	movs	r3, #24
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <main+0xae4>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <main+0xae8>)
 8003082:	4a62      	ldr	r2, [pc, #392]	; (800320c <main+0xaec>)
 8003084:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003088:	2078      	movs	r0, #120	; 0x78
 800308a:	f002 f81b 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE,
							DARKBLUE, DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 800308e:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2318      	movs	r3, #24
 8003096:	4a5e      	ldr	r2, [pc, #376]	; (8003210 <main+0xaf0>)
 8003098:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800309c:	2014      	movs	r0, #20
 800309e:	f002 f8b5 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 80030a2:	4a54      	ldr	r2, [pc, #336]	; (80031f4 <main+0xad4>)
 80030a4:	4954      	ldr	r1, [pc, #336]	; (80031f8 <main+0xad8>)
 80030a6:	4852      	ldr	r0, [pc, #328]	; (80031f0 <main+0xad0>)
 80030a8:	f002 f958 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 80030ac:	4b54      	ldr	r3, [pc, #336]	; (8003200 <main+0xae0>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b52      	ldr	r3, [pc, #328]	; (80031fc <main+0xadc>)
 80030b2:	701a      	strb	r2, [r3, #0]
				}

				if (sTimer2GetFlag()) {
 80030b4:	f002 fcd2 	bl	8005a5c <sTimer2GetFlag>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d015      	beq.n	80030ea <main+0x9ca>
					static int counter = 0;
					counter += 1;
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <main+0xaf4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	4a53      	ldr	r2, [pc, #332]	; (8003214 <main+0xaf4>)
 80030c6:	6013      	str	r3, [r2, #0]

					if (counter % 4 == 0) {
 80030c8:	4b52      	ldr	r3, [pc, #328]	; (8003214 <main+0xaf4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <main+0x9ca>
//						led7SegTurnOff(0);
//						led7SegTurnOff(1);
					} else if (counter % 2 == 0) {
 80030d4:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <main+0xaf4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <main+0x9ca>
						displayTimeLed7Seg(&set_time.second, &set_time.minute,
 80030e0:	4a44      	ldr	r2, [pc, #272]	; (80031f4 <main+0xad4>)
 80030e2:	4945      	ldr	r1, [pc, #276]	; (80031f8 <main+0xad8>)
 80030e4:	4842      	ldr	r0, [pc, #264]	; (80031f0 <main+0xad0>)
 80030e6:	f002 f939 	bl	800535c <displayTimeLed7Seg>
								&set_time.hour);
					}
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <main+0xac8>)
 80030ec:	8ada      	ldrh	r2, [r3, #22]
 80030ee:	4b4a      	ldr	r3, [pc, #296]	; (8003218 <main+0xaf8>)
 80030f0:	fba3 1302 	umull	r1, r3, r3, r2
 80030f4:	0919      	lsrs	r1, r3, #4
 80030f6:	460b      	mov	r3, r1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a5b      	subs	r3, r3, r1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d10a      	bne.n	800311c <main+0x9fc>
						{
					current_mode_config = Mode_config_day;
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <main+0xae0>)
 8003108:	2203      	movs	r2, #3
 800310a:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 800310c:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <main+0xac8>)
 800310e:	8adb      	ldrh	r3, [r3, #22]
 8003110:	3301      	adds	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <main+0xac8>)
 8003116:	82da      	strh	r2, [r3, #22]
							RED);

					button_count[7] += 1;
				}

				break;
 8003118:	f000 bc8a 	b.w	8003a30 <main+0x1310>
				} else if (button_count[15] % 30 == 1) {
 800311c:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <main+0xac8>)
 800311e:	8bda      	ldrh	r2, [r3, #30]
 8003120:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <main+0xaf8>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	0919      	lsrs	r1, r3, #4
 8003128:	460b      	mov	r3, r1
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a5b      	subs	r3, r3, r1
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10a      	bne.n	800314e <main+0xa2e>
					current_mode_config = Mode_config_minute;
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <main+0xae0>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 800313e:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <main+0xac8>)
 8003140:	8bdb      	ldrh	r3, [r3, #30]
 8003142:	3301      	adds	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <main+0xac8>)
 8003148:	83da      	strh	r2, [r3, #30]
				break;
 800314a:	f000 bc71 	b.w	8003a30 <main+0x1310>
				} else if (button_count[3] % 20 == 1) // check button is held 1 second
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <main+0xac8>)
 8003150:	88da      	ldrh	r2, [r3, #6]
 8003152:	4b26      	ldr	r3, [pc, #152]	; (80031ec <main+0xacc>)
 8003154:	fba3 1302 	umull	r1, r3, r3, r2
 8003158:	0919      	lsrs	r1, r3, #4
 800315a:	460b      	mov	r3, r1
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d158      	bne.n	800321c <main+0xafc>
					increaseHour();
 800316a:	f002 f9f1 	bl	8005550 <increaseHour>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f1a3 021e 	sub.w	r2, r3, #30
 8003174:	2300      	movs	r3, #0
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <main+0xad0>)
 800317a:	216e      	movs	r1, #110	; 0x6e
 800317c:	2078      	movs	r0, #120	; 0x78
 800317e:	f001 fbe7 	bl	8004950 <displaySecClockwise>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8003188:	231f      	movs	r3, #31
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <main+0xad8>)
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <main+0xad0>)
 8003192:	216e      	movs	r1, #110	; 0x6e
 8003194:	2078      	movs	r0, #120	; 0x78
 8003196:	f001 fcd7 	bl	8004b48 <displayMinClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80031a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031a4:	9301      	str	r3, [sp, #4]
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <main+0xad4>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <main+0xad8>)
 80031ac:	216e      	movs	r1, #110	; 0x6e
 80031ae:	2078      	movs	r0, #120	; 0x78
 80031b0:	f001 fde6 	bl	8004d80 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 80031b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b8:	9304      	str	r3, [sp, #16]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9303      	str	r3, [sp, #12]
 80031be:	2300      	movs	r3, #0
 80031c0:	9302      	str	r3, [sp, #8]
 80031c2:	2320      	movs	r3, #32
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <main+0xad4>)
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <main+0xad8>)
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <main+0xad0>)
 80031ce:	21f0      	movs	r1, #240	; 0xf0
 80031d0:	2078      	movs	r0, #120	; 0x78
 80031d2:	f001 fef9 	bl	8004fc8 <displayTime>
					button_count[3] += 1;
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <main+0xac8>)
 80031d8:	88db      	ldrh	r3, [r3, #6]
 80031da:	3301      	adds	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b02      	ldr	r3, [pc, #8]	; (80031e8 <main+0xac8>)
 80031e0:	80da      	strh	r2, [r3, #6]
				break;
 80031e2:	f000 bc25 	b.w	8003a30 <main+0x1310>
 80031e6:	bf00      	nop
 80031e8:	200000ac 	.word	0x200000ac
 80031ec:	cccccccd 	.word	0xcccccccd
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000002 	.word	0x20000002
 80031f8:	20000001 	.word	0x20000001
 80031fc:	2000001c 	.word	0x2000001c
 8003200:	200001a6 	.word	0x200001a6
 8003204:	20000006 	.word	0x20000006
 8003208:	20000005 	.word	0x20000005
 800320c:	20000004 	.word	0x20000004
 8003210:	20000003 	.word	0x20000003
 8003214:	200001b4 	.word	0x200001b4
 8003218:	88888889 	.word	0x88888889
				} else if (button_count[7] % 20 == 1) {
 800321c:	4b8f      	ldr	r3, [pc, #572]	; (800345c <main+0xd3c>)
 800321e:	89da      	ldrh	r2, [r3, #14]
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <main+0xd40>)
 8003222:	fba3 1302 	umull	r1, r3, r3, r2
 8003226:	0919      	lsrs	r1, r3, #4
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 83fb 	bne.w	8003a30 <main+0x1310>
					decreaseHour();
 800323a:	f002 f9a1 	bl	8005580 <decreaseHour>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f1a3 021e 	sub.w	r2, r3, #30
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4b86      	ldr	r3, [pc, #536]	; (8003464 <main+0xd44>)
 800324a:	216e      	movs	r1, #110	; 0x6e
 800324c:	2078      	movs	r0, #120	; 0x78
 800324e:	f001 fb7f 	bl	8004950 <displaySecClockwise>
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 8003258:	231f      	movs	r3, #31
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	4b82      	ldr	r3, [pc, #520]	; (8003468 <main+0xd48>)
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4b80      	ldr	r3, [pc, #512]	; (8003464 <main+0xd44>)
 8003262:	216e      	movs	r1, #110	; 0x6e
 8003264:	2078      	movs	r0, #120	; 0x78
 8003266:	f001 fc6f 	bl	8004b48 <displayMinClockwise>
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 8003270:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	4b7d      	ldr	r3, [pc, #500]	; (800346c <main+0xd4c>)
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <main+0xd48>)
 800327c:	216e      	movs	r1, #110	; 0x6e
 800327e:	2078      	movs	r0, #120	; 0x78
 8003280:	f001 fd7e 	bl	8004d80 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8003284:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003288:	9304      	str	r3, [sp, #16]
 800328a:	2300      	movs	r3, #0
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	2300      	movs	r3, #0
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	2320      	movs	r3, #32
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	4b75      	ldr	r3, [pc, #468]	; (800346c <main+0xd4c>)
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4b73      	ldr	r3, [pc, #460]	; (8003468 <main+0xd48>)
 800329c:	4a71      	ldr	r2, [pc, #452]	; (8003464 <main+0xd44>)
 800329e:	21f0      	movs	r1, #240	; 0xf0
 80032a0:	2078      	movs	r0, #120	; 0x78
 80032a2:	f001 fe91 	bl	8004fc8 <displayTime>
					button_count[7] += 1;
 80032a6:	4b6d      	ldr	r3, [pc, #436]	; (800345c <main+0xd3c>)
 80032a8:	89db      	ldrh	r3, [r3, #14]
 80032aa:	3301      	adds	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	4b6b      	ldr	r3, [pc, #428]	; (800345c <main+0xd3c>)
 80032b0:	81da      	strh	r2, [r3, #14]
				break;
 80032b2:	e3bd      	b.n	8003a30 <main+0x1310>
			}
			case Mode_config_day: {
				if (previous_mode_config != current_mode_config) {
 80032b4:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <main+0xd50>)
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <main+0xd54>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d059      	beq.n	8003374 <main+0xc54>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1a3 021e 	sub.w	r2, r3, #30
 80032c6:	2300      	movs	r3, #0
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4b66      	ldr	r3, [pc, #408]	; (8003464 <main+0xd44>)
 80032cc:	216e      	movs	r1, #110	; 0x6e
 80032ce:	2078      	movs	r0, #120	; 0x78
 80032d0:	f001 fb3e 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80032da:	231f      	movs	r3, #31
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	4b62      	ldr	r3, [pc, #392]	; (8003468 <main+0xd48>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	4b60      	ldr	r3, [pc, #384]	; (8003464 <main+0xd44>)
 80032e4:	216e      	movs	r1, #110	; 0x6e
 80032e6:	2078      	movs	r0, #120	; 0x78
 80032e8:	f001 fc2e 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLUE);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80032f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	4b5c      	ldr	r3, [pc, #368]	; (800346c <main+0xd4c>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4b5a      	ldr	r3, [pc, #360]	; (8003468 <main+0xd48>)
 80032fe:	216e      	movs	r1, #110	; 0x6e
 8003300:	2078      	movs	r0, #120	; 0x78
 8003302:	f001 fd3d 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 8003306:	2300      	movs	r3, #0
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	2300      	movs	r3, #0
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	2300      	movs	r3, #0
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	2320      	movs	r3, #32
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <main+0xd4c>)
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4b53      	ldr	r3, [pc, #332]	; (8003468 <main+0xd48>)
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <main+0xd44>)
 800331e:	21f0      	movs	r1, #240	; 0xf0
 8003320:	2078      	movs	r0, #120	; 0x78
 8003322:	f001 fe51 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, BLACK,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8003326:	f240 13cf 	movw	r3, #463	; 0x1cf
 800332a:	9304      	str	r3, [sp, #16]
 800332c:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003330:	9303      	str	r3, [sp, #12]
 8003332:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	2318      	movs	r3, #24
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <main+0xd58>)
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4b4e      	ldr	r3, [pc, #312]	; (800347c <main+0xd5c>)
 8003342:	4a4f      	ldr	r2, [pc, #316]	; (8003480 <main+0xd60>)
 8003344:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003348:	2078      	movs	r0, #120	; 0x78
 800334a:	f001 febb 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE,
							DARKBLUE, DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 800334e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2318      	movs	r3, #24
 8003356:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <main+0xd64>)
 8003358:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800335c:	2014      	movs	r0, #20
 800335e:	f001 ff55 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <main+0xd4c>)
 8003364:	4940      	ldr	r1, [pc, #256]	; (8003468 <main+0xd48>)
 8003366:	483f      	ldr	r0, [pc, #252]	; (8003464 <main+0xd44>)
 8003368:	f001 fff8 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 800336c:	4b41      	ldr	r3, [pc, #260]	; (8003474 <main+0xd54>)
 800336e:	781a      	ldrb	r2, [r3, #0]
 8003370:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <main+0xd50>)
 8003372:	701a      	strb	r2, [r3, #0]
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 8003374:	4b39      	ldr	r3, [pc, #228]	; (800345c <main+0xd3c>)
 8003376:	8ada      	ldrh	r2, [r3, #22]
 8003378:	4b43      	ldr	r3, [pc, #268]	; (8003488 <main+0xd68>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	0919      	lsrs	r1, r3, #4
 8003380:	460b      	mov	r3, r1
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d109      	bne.n	80033a4 <main+0xc84>
						{
					current_mode_config = Mode_config_date;
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <main+0xd54>)
 8003392:	2204      	movs	r2, #4
 8003394:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <main+0xd3c>)
 8003398:	8adb      	ldrh	r3, [r3, #22]
 800339a:	3301      	adds	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	4b2f      	ldr	r3, [pc, #188]	; (800345c <main+0xd3c>)
 80033a0:	82da      	strh	r2, [r3, #22]
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);

					button_count[7] += 1;
				}

				break;
 80033a2:	e347      	b.n	8003a34 <main+0x1314>
				} else if (button_count[15] % 30 == 1) {
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <main+0xd3c>)
 80033a6:	8bda      	ldrh	r2, [r3, #30]
 80033a8:	4b37      	ldr	r3, [pc, #220]	; (8003488 <main+0xd68>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	0919      	lsrs	r1, r3, #4
 80033b0:	460b      	mov	r3, r1
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a5b      	subs	r3, r3, r1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d109      	bne.n	80033d4 <main+0xcb4>
					current_mode_config = Mode_config_hour;
 80033c0:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <main+0xd54>)
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <main+0xd3c>)
 80033c8:	8bdb      	ldrh	r3, [r3, #30]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <main+0xd3c>)
 80033d0:	83da      	strh	r2, [r3, #30]
				break;
 80033d2:	e32f      	b.n	8003a34 <main+0x1314>
				} else if (button_count[3] % 20 == 1) // check button is held 1 second
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <main+0xd3c>)
 80033d6:	88da      	ldrh	r2, [r3, #6]
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <main+0xd40>)
 80033da:	fba3 1302 	umull	r1, r3, r3, r2
 80033de:	0919      	lsrs	r1, r3, #4
 80033e0:	460b      	mov	r3, r1
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d112      	bne.n	8003416 <main+0xcf6>
					increaseDay();
 80033f0:	f002 f8de 	bl	80055b0 <increaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 80033f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2318      	movs	r3, #24
 80033fc:	4a21      	ldr	r2, [pc, #132]	; (8003484 <main+0xd64>)
 80033fe:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003402:	2014      	movs	r0, #20
 8003404:	f001 ff02 	bl	800520c <displayDay>
					button_count[3] += 1;
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <main+0xd3c>)
 800340a:	88db      	ldrh	r3, [r3, #6]
 800340c:	3301      	adds	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <main+0xd3c>)
 8003412:	80da      	strh	r2, [r3, #6]
				break;
 8003414:	e30e      	b.n	8003a34 <main+0x1314>
				} else if (button_count[7] % 20 == 1) {
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <main+0xd3c>)
 8003418:	89da      	ldrh	r2, [r3, #14]
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <main+0xd40>)
 800341c:	fba3 1302 	umull	r1, r3, r3, r2
 8003420:	0919      	lsrs	r1, r3, #4
 8003422:	460b      	mov	r3, r1
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	f040 8300 	bne.w	8003a34 <main+0x1314>
					decreaseDay();
 8003434:	f002 f8d4 	bl	80055e0 <decreaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 8003438:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2318      	movs	r3, #24
 8003440:	4a10      	ldr	r2, [pc, #64]	; (8003484 <main+0xd64>)
 8003442:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003446:	2014      	movs	r0, #20
 8003448:	f001 fee0 	bl	800520c <displayDay>
					button_count[7] += 1;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <main+0xd3c>)
 800344e:	89db      	ldrh	r3, [r3, #14]
 8003450:	3301      	adds	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	4b01      	ldr	r3, [pc, #4]	; (800345c <main+0xd3c>)
 8003456:	81da      	strh	r2, [r3, #14]
				break;
 8003458:	e2ec      	b.n	8003a34 <main+0x1314>
 800345a:	bf00      	nop
 800345c:	200000ac 	.word	0x200000ac
 8003460:	cccccccd 	.word	0xcccccccd
 8003464:	20000000 	.word	0x20000000
 8003468:	20000001 	.word	0x20000001
 800346c:	20000002 	.word	0x20000002
 8003470:	2000001c 	.word	0x2000001c
 8003474:	200001a6 	.word	0x200001a6
 8003478:	20000006 	.word	0x20000006
 800347c:	20000005 	.word	0x20000005
 8003480:	20000004 	.word	0x20000004
 8003484:	20000003 	.word	0x20000003
 8003488:	88888889 	.word	0x88888889
			}
			case Mode_config_date: {
				if (previous_mode_config != current_mode_config) {
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <main+0xf3c>)
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	4b73      	ldr	r3, [pc, #460]	; (8003660 <main+0xf40>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d059      	beq.n	800354c <main+0xe2c>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1a3 021e 	sub.w	r2, r3, #30
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4b70      	ldr	r3, [pc, #448]	; (8003664 <main+0xf44>)
 80034a4:	216e      	movs	r1, #110	; 0x6e
 80034a6:	2078      	movs	r0, #120	; 0x78
 80034a8:	f001 fa52 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80034b2:	231f      	movs	r3, #31
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <main+0xf48>)
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <main+0xf44>)
 80034bc:	216e      	movs	r1, #110	; 0x6e
 80034be:	2078      	movs	r0, #120	; 0x78
 80034c0:	f001 fb42 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLUE);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80034ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <main+0xf4c>)
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4b64      	ldr	r3, [pc, #400]	; (8003668 <main+0xf48>)
 80034d6:	216e      	movs	r1, #110	; 0x6e
 80034d8:	2078      	movs	r0, #120	; 0x78
 80034da:	f001 fc51 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 80034de:	2300      	movs	r3, #0
 80034e0:	9304      	str	r3, [sp, #16]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9303      	str	r3, [sp, #12]
 80034e6:	2300      	movs	r3, #0
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	2320      	movs	r3, #32
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <main+0xf4c>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	4b5d      	ldr	r3, [pc, #372]	; (8003668 <main+0xf48>)
 80034f4:	4a5b      	ldr	r2, [pc, #364]	; (8003664 <main+0xf44>)
 80034f6:	21f0      	movs	r1, #240	; 0xf0
 80034f8:	2078      	movs	r0, #120	; 0x78
 80034fa:	f001 fd65 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, BLACK,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80034fe:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003502:	9304      	str	r3, [sp, #16]
 8003504:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003508:	9303      	str	r3, [sp, #12]
 800350a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2318      	movs	r3, #24
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <main+0xf50>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4b56      	ldr	r3, [pc, #344]	; (8003674 <main+0xf54>)
 800351a:	4a57      	ldr	r2, [pc, #348]	; (8003678 <main+0xf58>)
 800351c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003520:	2078      	movs	r0, #120	; 0x78
 8003522:	f001 fdcf 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, RED, DARKBLUE,
							DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003526:	f240 13cf 	movw	r3, #463	; 0x1cf
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2318      	movs	r3, #24
 800352e:	4a53      	ldr	r2, [pc, #332]	; (800367c <main+0xf5c>)
 8003530:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003534:	2014      	movs	r0, #20
 8003536:	f001 fe69 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 800353a:	4a4c      	ldr	r2, [pc, #304]	; (800366c <main+0xf4c>)
 800353c:	494a      	ldr	r1, [pc, #296]	; (8003668 <main+0xf48>)
 800353e:	4849      	ldr	r0, [pc, #292]	; (8003664 <main+0xf44>)
 8003540:	f001 ff0c 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <main+0xf40>)
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	4b44      	ldr	r3, [pc, #272]	; (800365c <main+0xf3c>)
 800354a:	701a      	strb	r2, [r3, #0]
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <main+0xf60>)
 800354e:	8ada      	ldrh	r2, [r3, #22]
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <main+0xf64>)
 8003552:	fba3 1302 	umull	r1, r3, r3, r2
 8003556:	0919      	lsrs	r1, r3, #4
 8003558:	460b      	mov	r3, r1
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a5b      	subs	r3, r3, r1
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d109      	bne.n	800357c <main+0xe5c>
						{
					current_mode_config = Mode_config_month;
 8003568:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <main+0xf40>)
 800356a:	2205      	movs	r2, #5
 800356c:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 800356e:	4b44      	ldr	r3, [pc, #272]	; (8003680 <main+0xf60>)
 8003570:	8adb      	ldrh	r3, [r3, #22]
 8003572:	3301      	adds	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <main+0xf60>)
 8003578:	82da      	strh	r2, [r3, #22]
							DARKBLUE);

					button_count[7] += 1;
				}

				break;
 800357a:	e25d      	b.n	8003a38 <main+0x1318>
				} else if (button_count[15] % 30 == 1) {
 800357c:	4b40      	ldr	r3, [pc, #256]	; (8003680 <main+0xf60>)
 800357e:	8bda      	ldrh	r2, [r3, #30]
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <main+0xf64>)
 8003582:	fba3 1302 	umull	r1, r3, r3, r2
 8003586:	0919      	lsrs	r1, r3, #4
 8003588:	460b      	mov	r3, r1
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a5b      	subs	r3, r3, r1
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d109      	bne.n	80035ac <main+0xe8c>
					current_mode_config = Mode_config_day;
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <main+0xf40>)
 800359a:	2203      	movs	r2, #3
 800359c:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 800359e:	4b38      	ldr	r3, [pc, #224]	; (8003680 <main+0xf60>)
 80035a0:	8bdb      	ldrh	r3, [r3, #30]
 80035a2:	3301      	adds	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <main+0xf60>)
 80035a8:	83da      	strh	r2, [r3, #30]
				break;
 80035aa:	e245      	b.n	8003a38 <main+0x1318>
				} else if (button_count[3] % 20 == 1) // check button is held 1 second
 80035ac:	4b34      	ldr	r3, [pc, #208]	; (8003680 <main+0xf60>)
 80035ae:	88da      	ldrh	r2, [r3, #6]
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <main+0xf68>)
 80035b2:	fba3 1302 	umull	r1, r3, r3, r2
 80035b6:	0919      	lsrs	r1, r3, #4
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d11c      	bne.n	8003602 <main+0xee2>
					increaseDate();
 80035c8:	f002 f822 	bl	8005610 <increaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80035cc:	f240 13cf 	movw	r3, #463	; 0x1cf
 80035d0:	9304      	str	r3, [sp, #16]
 80035d2:	f240 13cf 	movw	r3, #463	; 0x1cf
 80035d6:	9303      	str	r3, [sp, #12]
 80035d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80035dc:	9302      	str	r3, [sp, #8]
 80035de:	2318      	movs	r3, #24
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <main+0xf50>)
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <main+0xf54>)
 80035e8:	4a23      	ldr	r2, [pc, #140]	; (8003678 <main+0xf58>)
 80035ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80035ee:	2078      	movs	r0, #120	; 0x78
 80035f0:	f001 fd68 	bl	80050c4 <displayDate>
					button_count[3] += 1;
 80035f4:	4b22      	ldr	r3, [pc, #136]	; (8003680 <main+0xf60>)
 80035f6:	88db      	ldrh	r3, [r3, #6]
 80035f8:	3301      	adds	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <main+0xf60>)
 80035fe:	80da      	strh	r2, [r3, #6]
				break;
 8003600:	e21a      	b.n	8003a38 <main+0x1318>
				} else if (button_count[7] % 20 == 1) {
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <main+0xf60>)
 8003604:	89da      	ldrh	r2, [r3, #14]
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <main+0xf68>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	0919      	lsrs	r1, r3, #4
 800360e:	460b      	mov	r3, r1
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 820c 	bne.w	8003a38 <main+0x1318>
					decreaseDate();
 8003620:	f002 f82e 	bl	8005680 <decreaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8003624:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800362e:	9303      	str	r3, [sp, #12]
 8003630:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	2318      	movs	r3, #24
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <main+0xf50>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <main+0xf54>)
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <main+0xf58>)
 8003642:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003646:	2078      	movs	r0, #120	; 0x78
 8003648:	f001 fd3c 	bl	80050c4 <displayDate>
					button_count[7] += 1;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <main+0xf60>)
 800364e:	89db      	ldrh	r3, [r3, #14]
 8003650:	3301      	adds	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <main+0xf60>)
 8003656:	81da      	strh	r2, [r3, #14]
				break;
 8003658:	e1ee      	b.n	8003a38 <main+0x1318>
 800365a:	bf00      	nop
 800365c:	2000001c 	.word	0x2000001c
 8003660:	200001a6 	.word	0x200001a6
 8003664:	20000000 	.word	0x20000000
 8003668:	20000001 	.word	0x20000001
 800366c:	20000002 	.word	0x20000002
 8003670:	20000006 	.word	0x20000006
 8003674:	20000005 	.word	0x20000005
 8003678:	20000004 	.word	0x20000004
 800367c:	20000003 	.word	0x20000003
 8003680:	200000ac 	.word	0x200000ac
 8003684:	88888889 	.word	0x88888889
 8003688:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_month: {
				if (previous_mode_config != current_mode_config) {
 800368c:	4b73      	ldr	r3, [pc, #460]	; (800385c <main+0x113c>)
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	4b73      	ldr	r3, [pc, #460]	; (8003860 <main+0x1140>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d059      	beq.n	800374c <main+0x102c>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f1a3 021e 	sub.w	r2, r3, #30
 800369e:	2300      	movs	r3, #0
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <main+0x1144>)
 80036a4:	216e      	movs	r1, #110	; 0x6e
 80036a6:	2078      	movs	r0, #120	; 0x78
 80036a8:	f001 f952 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80036b2:	231f      	movs	r3, #31
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <main+0x1148>)
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <main+0x1144>)
 80036bc:	216e      	movs	r1, #110	; 0x6e
 80036be:	2078      	movs	r0, #120	; 0x78
 80036c0:	f001 fa42 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLUE);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80036ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <main+0x114c>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4b64      	ldr	r3, [pc, #400]	; (8003868 <main+0x1148>)
 80036d6:	216e      	movs	r1, #110	; 0x6e
 80036d8:	2078      	movs	r0, #120	; 0x78
 80036da:	f001 fb51 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 80036de:	2300      	movs	r3, #0
 80036e0:	9304      	str	r3, [sp, #16]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9303      	str	r3, [sp, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	2320      	movs	r3, #32
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	4b5f      	ldr	r3, [pc, #380]	; (800386c <main+0x114c>)
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	4b5d      	ldr	r3, [pc, #372]	; (8003868 <main+0x1148>)
 80036f4:	4a5b      	ldr	r2, [pc, #364]	; (8003864 <main+0x1144>)
 80036f6:	21f0      	movs	r1, #240	; 0xf0
 80036f8:	2078      	movs	r0, #120	; 0x78
 80036fa:	f001 fc65 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, BLACK,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80036fe:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800370e:	9302      	str	r3, [sp, #8]
 8003710:	2318      	movs	r3, #24
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	4b56      	ldr	r3, [pc, #344]	; (8003870 <main+0x1150>)
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4b56      	ldr	r3, [pc, #344]	; (8003874 <main+0x1154>)
 800371a:	4a57      	ldr	r2, [pc, #348]	; (8003878 <main+0x1158>)
 800371c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003720:	2078      	movs	r0, #120	; 0x78
 8003722:	f001 fccf 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE, RED,
							DARKBLUE);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003726:	f240 13cf 	movw	r3, #463	; 0x1cf
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2318      	movs	r3, #24
 800372e:	4a53      	ldr	r2, [pc, #332]	; (800387c <main+0x115c>)
 8003730:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003734:	2014      	movs	r0, #20
 8003736:	f001 fd69 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 800373a:	4a4c      	ldr	r2, [pc, #304]	; (800386c <main+0x114c>)
 800373c:	494a      	ldr	r1, [pc, #296]	; (8003868 <main+0x1148>)
 800373e:	4849      	ldr	r0, [pc, #292]	; (8003864 <main+0x1144>)
 8003740:	f001 fe0c 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <main+0x1140>)
 8003746:	781a      	ldrb	r2, [r3, #0]
 8003748:	4b44      	ldr	r3, [pc, #272]	; (800385c <main+0x113c>)
 800374a:	701a      	strb	r2, [r3, #0]
				}

				if (button_count[11] % 30 == 1) // check button is held 1.5 second
 800374c:	4b4c      	ldr	r3, [pc, #304]	; (8003880 <main+0x1160>)
 800374e:	8ada      	ldrh	r2, [r3, #22]
 8003750:	4b4c      	ldr	r3, [pc, #304]	; (8003884 <main+0x1164>)
 8003752:	fba3 1302 	umull	r1, r3, r3, r2
 8003756:	0919      	lsrs	r1, r3, #4
 8003758:	460b      	mov	r3, r1
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a5b      	subs	r3, r3, r1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d109      	bne.n	800377c <main+0x105c>
						{
					current_mode_config = Mode_config_year;
 8003768:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <main+0x1140>)
 800376a:	2206      	movs	r2, #6
 800376c:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 800376e:	4b44      	ldr	r3, [pc, #272]	; (8003880 <main+0x1160>)
 8003770:	8adb      	ldrh	r3, [r3, #22]
 8003772:	3301      	adds	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	4b42      	ldr	r3, [pc, #264]	; (8003880 <main+0x1160>)
 8003778:	82da      	strh	r2, [r3, #22]
							DARKBLUE);

					button_count[7] += 1;
				}

				break;
 800377a:	e15f      	b.n	8003a3c <main+0x131c>
				} else if (button_count[15] % 30 == 1) {
 800377c:	4b40      	ldr	r3, [pc, #256]	; (8003880 <main+0x1160>)
 800377e:	8bda      	ldrh	r2, [r3, #30]
 8003780:	4b40      	ldr	r3, [pc, #256]	; (8003884 <main+0x1164>)
 8003782:	fba3 1302 	umull	r1, r3, r3, r2
 8003786:	0919      	lsrs	r1, r3, #4
 8003788:	460b      	mov	r3, r1
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d109      	bne.n	80037ac <main+0x108c>
					current_mode_config = Mode_config_date;
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <main+0x1140>)
 800379a:	2204      	movs	r2, #4
 800379c:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 800379e:	4b38      	ldr	r3, [pc, #224]	; (8003880 <main+0x1160>)
 80037a0:	8bdb      	ldrh	r3, [r3, #30]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <main+0x1160>)
 80037a8:	83da      	strh	r2, [r3, #30]
				break;
 80037aa:	e147      	b.n	8003a3c <main+0x131c>
				} else if (button_count[3] % 20 == 1) // check button is held 1 second
 80037ac:	4b34      	ldr	r3, [pc, #208]	; (8003880 <main+0x1160>)
 80037ae:	88da      	ldrh	r2, [r3, #6]
 80037b0:	4b35      	ldr	r3, [pc, #212]	; (8003888 <main+0x1168>)
 80037b2:	fba3 1302 	umull	r1, r3, r3, r2
 80037b6:	0919      	lsrs	r1, r3, #4
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11c      	bne.n	8003802 <main+0x10e2>
					increaseMonth();
 80037c8:	f001 ff8c 	bl	80056e4 <increaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80037cc:	f240 13cf 	movw	r3, #463	; 0x1cf
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037d6:	9303      	str	r3, [sp, #12]
 80037d8:	f240 13cf 	movw	r3, #463	; 0x1cf
 80037dc:	9302      	str	r3, [sp, #8]
 80037de:	2318      	movs	r3, #24
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	4b23      	ldr	r3, [pc, #140]	; (8003870 <main+0x1150>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <main+0x1154>)
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <main+0x1158>)
 80037ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80037ee:	2078      	movs	r0, #120	; 0x78
 80037f0:	f001 fc68 	bl	80050c4 <displayDate>
					button_count[3] += 1;
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <main+0x1160>)
 80037f6:	88db      	ldrh	r3, [r3, #6]
 80037f8:	3301      	adds	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	4b20      	ldr	r3, [pc, #128]	; (8003880 <main+0x1160>)
 80037fe:	80da      	strh	r2, [r3, #6]
				break;
 8003800:	e11c      	b.n	8003a3c <main+0x131c>
				} else if (button_count[7] % 20 == 1) {
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <main+0x1160>)
 8003804:	89da      	ldrh	r2, [r3, #14]
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <main+0x1168>)
 8003808:	fba3 1302 	umull	r1, r3, r3, r2
 800380c:	0919      	lsrs	r1, r3, #4
 800380e:	460b      	mov	r3, r1
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 810e 	bne.w	8003a3c <main+0x131c>
					decreaseMonth();
 8003820:	f001 ff96 	bl	8005750 <decreaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 8003824:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003834:	9302      	str	r3, [sp, #8]
 8003836:	2318      	movs	r3, #24
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <main+0x1150>)
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <main+0x1154>)
 8003840:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <main+0x1158>)
 8003842:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003846:	2078      	movs	r0, #120	; 0x78
 8003848:	f001 fc3c 	bl	80050c4 <displayDate>
					button_count[7] += 1;
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <main+0x1160>)
 800384e:	89db      	ldrh	r3, [r3, #14]
 8003850:	3301      	adds	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <main+0x1160>)
 8003856:	81da      	strh	r2, [r3, #14]
				break;
 8003858:	e0f0      	b.n	8003a3c <main+0x131c>
 800385a:	bf00      	nop
 800385c:	2000001c 	.word	0x2000001c
 8003860:	200001a6 	.word	0x200001a6
 8003864:	20000000 	.word	0x20000000
 8003868:	20000001 	.word	0x20000001
 800386c:	20000002 	.word	0x20000002
 8003870:	20000006 	.word	0x20000006
 8003874:	20000005 	.word	0x20000005
 8003878:	20000004 	.word	0x20000004
 800387c:	20000003 	.word	0x20000003
 8003880:	200000ac 	.word	0x200000ac
 8003884:	88888889 	.word	0x88888889
 8003888:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_year: {
				if (previous_mode_config != current_mode_config) {
 800388c:	4bac      	ldr	r3, [pc, #688]	; (8003b40 <main+0x1420>)
 800388e:	781a      	ldrb	r2, [r3, #0]
 8003890:	4bac      	ldr	r3, [pc, #688]	; (8003b44 <main+0x1424>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d059      	beq.n	800394c <main+0x122c>
					(void) displaySecClockwise(LCD_WIDTH / 2, 110,
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1a3 021e 	sub.w	r2, r3, #30
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4ba9      	ldr	r3, [pc, #676]	; (8003b48 <main+0x1428>)
 80038a4:	216e      	movs	r1, #110	; 0x6e
 80038a6:	2078      	movs	r0, #120	; 0x78
 80038a8:	f001 f852 	bl	8004950 <displaySecClockwise>
							clock_radius - 30, &set_time.second, BLACK);
					(void) displayMinClockwise(LCD_WIDTH / 2, 110,
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
 80038b2:	231f      	movs	r3, #31
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	4ba5      	ldr	r3, [pc, #660]	; (8003b4c <main+0x142c>)
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4ba3      	ldr	r3, [pc, #652]	; (8003b48 <main+0x1428>)
 80038bc:	216e      	movs	r1, #110	; 0x6e
 80038be:	2078      	movs	r0, #120	; 0x78
 80038c0:	f001 f942 	bl	8004b48 <displayMinClockwise>
							clock_radius - 40, &set_time.second,
							&set_time.minute, BLUE);
					(void) displayHourClockwise(LCD_WIDTH / 2, 110,
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f1a3 0232 	sub.w	r2, r3, #50	; 0x32
 80038ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	4b9f      	ldr	r3, [pc, #636]	; (8003b50 <main+0x1430>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4b9d      	ldr	r3, [pc, #628]	; (8003b4c <main+0x142c>)
 80038d6:	216e      	movs	r1, #110	; 0x6e
 80038d8:	2078      	movs	r0, #120	; 0x78
 80038da:	f001 fa51 	bl	8004d80 <displayHourClockwise>
							clock_radius - 50, &set_time.minute, &set_time.hour,
							RED);

					displayTime(LCD_WIDTH / 2, 240, &set_time.second,
 80038de:	2300      	movs	r3, #0
 80038e0:	9304      	str	r3, [sp, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9303      	str	r3, [sp, #12]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9302      	str	r3, [sp, #8]
 80038ea:	2320      	movs	r3, #32
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	4b98      	ldr	r3, [pc, #608]	; (8003b50 <main+0x1430>)
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <main+0x142c>)
 80038f4:	4a94      	ldr	r2, [pc, #592]	; (8003b48 <main+0x1428>)
 80038f6:	21f0      	movs	r1, #240	; 0xf0
 80038f8:	2078      	movs	r0, #120	; 0x78
 80038fa:	f001 fb65 	bl	8004fc8 <displayTime>
							&set_time.minute, &set_time.hour, 32, BLACK, BLACK,
							BLACK);
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80038fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003902:	9304      	str	r3, [sp, #16]
 8003904:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003908:	9303      	str	r3, [sp, #12]
 800390a:	f240 13cf 	movw	r3, #463	; 0x1cf
 800390e:	9302      	str	r3, [sp, #8]
 8003910:	2318      	movs	r3, #24
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <main+0x1434>)
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	4b8f      	ldr	r3, [pc, #572]	; (8003b58 <main+0x1438>)
 800391a:	4a90      	ldr	r2, [pc, #576]	; (8003b5c <main+0x143c>)
 800391c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003920:	2078      	movs	r0, #120	; 0x78
 8003922:	f001 fbcf 	bl	80050c4 <displayDate>
							&set_time.month, &set_time.year, 24, DARKBLUE,
							DARKBLUE, RED);
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003926:	f240 13cf 	movw	r3, #463	; 0x1cf
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2318      	movs	r3, #24
 800392e:	4a8c      	ldr	r2, [pc, #560]	; (8003b60 <main+0x1440>)
 8003930:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003934:	2014      	movs	r0, #20
 8003936:	f001 fc69 	bl	800520c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute,
 800393a:	4a85      	ldr	r2, [pc, #532]	; (8003b50 <main+0x1430>)
 800393c:	4983      	ldr	r1, [pc, #524]	; (8003b4c <main+0x142c>)
 800393e:	4882      	ldr	r0, [pc, #520]	; (8003b48 <main+0x1428>)
 8003940:	f001 fd0c 	bl	800535c <displayTimeLed7Seg>
							&set_time.hour);

					previous_mode_config = current_mode_config;
 8003944:	4b7f      	ldr	r3, [pc, #508]	; (8003b44 <main+0x1424>)
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <main+0x1420>)
 800394a:	701a      	strb	r2, [r3, #0]
				}

				if (button_count[15] % 30 == 1) {
 800394c:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <main+0x1444>)
 800394e:	8bda      	ldrh	r2, [r3, #30]
 8003950:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <main+0x1448>)
 8003952:	fba3 1302 	umull	r1, r3, r3, r2
 8003956:	0919      	lsrs	r1, r3, #4
 8003958:	460b      	mov	r3, r1
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a5b      	subs	r3, r3, r1
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	d109      	bne.n	800397c <main+0x125c>
					current_mode_config = Mode_config_month;
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <main+0x1424>)
 800396a:	2205      	movs	r2, #5
 800396c:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 800396e:	4b7d      	ldr	r3, [pc, #500]	; (8003b64 <main+0x1444>)
 8003970:	8bdb      	ldrh	r3, [r3, #30]
 8003972:	3301      	adds	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <main+0x1444>)
 8003978:	83da      	strh	r2, [r3, #30]
							DARKBLUE, RED);

					button_count[7] += 1;
				}

				break;
 800397a:	e061      	b.n	8003a40 <main+0x1320>
				} else if (button_count[3] % 20 == 1) // check button is held 1 second
 800397c:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <main+0x1444>)
 800397e:	88da      	ldrh	r2, [r3, #6]
 8003980:	4b7a      	ldr	r3, [pc, #488]	; (8003b6c <main+0x144c>)
 8003982:	fba3 1302 	umull	r1, r3, r3, r2
 8003986:	0919      	lsrs	r1, r3, #4
 8003988:	460b      	mov	r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d11c      	bne.n	80039d2 <main+0x12b2>
					increaseYear();
 8003998:	f001 ff10 	bl	80057bc <increaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 800399c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039a0:	9304      	str	r3, [sp, #16]
 80039a2:	f240 13cf 	movw	r3, #463	; 0x1cf
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	f240 13cf 	movw	r3, #463	; 0x1cf
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	2318      	movs	r3, #24
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	4b68      	ldr	r3, [pc, #416]	; (8003b54 <main+0x1434>)
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <main+0x1438>)
 80039b8:	4a68      	ldr	r2, [pc, #416]	; (8003b5c <main+0x143c>)
 80039ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80039be:	2078      	movs	r0, #120	; 0x78
 80039c0:	f001 fb80 	bl	80050c4 <displayDate>
					button_count[3] += 1;
 80039c4:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <main+0x1444>)
 80039c6:	88db      	ldrh	r3, [r3, #6]
 80039c8:	3301      	adds	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	4b65      	ldr	r3, [pc, #404]	; (8003b64 <main+0x1444>)
 80039ce:	80da      	strh	r2, [r3, #6]
				break;
 80039d0:	e036      	b.n	8003a40 <main+0x1320>
				} else if (button_count[7] % 20 == 1) {
 80039d2:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <main+0x1444>)
 80039d4:	89da      	ldrh	r2, [r3, #14]
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <main+0x144c>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	0919      	lsrs	r1, r3, #4
 80039de:	460b      	mov	r3, r1
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d128      	bne.n	8003a40 <main+0x1320>
					decreaseYear();
 80039ee:	f001 ff0d 	bl	800580c <decreaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date,
 80039f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	f240 13cf 	movw	r3, #463	; 0x1cf
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	f240 13cf 	movw	r3, #463	; 0x1cf
 8003a02:	9302      	str	r3, [sp, #8]
 8003a04:	2318      	movs	r3, #24
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <main+0x1434>)
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4b52      	ldr	r3, [pc, #328]	; (8003b58 <main+0x1438>)
 8003a0e:	4a53      	ldr	r2, [pc, #332]	; (8003b5c <main+0x143c>)
 8003a10:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003a14:	2078      	movs	r0, #120	; 0x78
 8003a16:	f001 fb55 	bl	80050c4 <displayDate>
					button_count[7] += 1;
 8003a1a:	4b52      	ldr	r3, [pc, #328]	; (8003b64 <main+0x1444>)
 8003a1c:	89db      	ldrh	r3, [r3, #14]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <main+0x1444>)
 8003a24:	81da      	strh	r2, [r3, #14]
				break;
 8003a26:	e00b      	b.n	8003a40 <main+0x1320>
				break;
 8003a28:	bf00      	nop
 8003a2a:	e00a      	b.n	8003a42 <main+0x1322>
				break;
 8003a2c:	bf00      	nop
 8003a2e:	e008      	b.n	8003a42 <main+0x1322>
				break;
 8003a30:	bf00      	nop
 8003a32:	e006      	b.n	8003a42 <main+0x1322>
				break;
 8003a34:	bf00      	nop
 8003a36:	e004      	b.n	8003a42 <main+0x1322>
				break;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <main+0x1322>
				break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <main+0x1322>
				break;
 8003a40:	bf00      	nop
			}
			}

			if (button_count[12] == 1) {
 8003a42:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <main+0x1444>)
 8003a44:	8b1b      	ldrh	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d11e      	bne.n	8003a88 <main+0x1368>
				setTime(&set_time.second, &set_time.minute, &set_time.hour,
 8003a4a:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <main+0x1434>)
 8003a4c:	9302      	str	r3, [sp, #8]
 8003a4e:	4b42      	ldr	r3, [pc, #264]	; (8003b58 <main+0x1438>)
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <main+0x143c>)
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	4b42      	ldr	r3, [pc, #264]	; (8003b60 <main+0x1440>)
 8003a58:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <main+0x1430>)
 8003a5a:	493c      	ldr	r1, [pc, #240]	; (8003b4c <main+0x142c>)
 8003a5c:	483a      	ldr	r0, [pc, #232]	; (8003b48 <main+0x1428>)
 8003a5e:	f000 fe8f 	bl	8004780 <setTime>
						&set_time.day, &set_time.date, &set_time.month,
						&set_time.year);
				ds3231ReadTime();
 8003a62:	f7fd fb29 	bl	80010b8 <ds3231ReadTime>
				current_mode = Mode_remote_config_time;
 8003a66:	4b42      	ldr	r3, [pc, #264]	; (8003b70 <main+0x1450>)
 8003a68:	2208      	movs	r2, #8
 8003a6a:	701a      	strb	r2, [r3, #0]
				lcdClear(BLACK);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7fd fffd 	bl	8001a6c <lcdClear>
				remote_update_time_status = UPDATE_HOURS;
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <main+0x1454>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
				button_count[12] += 1;
 8003a78:	4b3a      	ldr	r3, [pc, #232]	; (8003b64 <main+0x1444>)
 8003a7a:	8b1b      	ldrh	r3, [r3, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	4b38      	ldr	r3, [pc, #224]	; (8003b64 <main+0x1444>)
 8003a82:	831a      	strh	r2, [r3, #24]
			} else if (button_count[14] == 1) {
				current_mode = Mode_word_clock;
				button_count[14] += 1;
			}
			break;
 8003a84:	f000 bd9c 	b.w	80045c0 <main+0x1ea0>
			} else if (button_count[14] == 1) {
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <main+0x1444>)
 8003a8a:	8b9b      	ldrh	r3, [r3, #28]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f040 8597 	bne.w	80045c0 <main+0x1ea0>
				current_mode = Mode_word_clock;
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <main+0x1450>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
				button_count[14] += 1;
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <main+0x1444>)
 8003a9a:	8b9b      	ldrh	r3, [r3, #28]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <main+0x1444>)
 8003aa2:	839a      	strh	r2, [r3, #28]
			break;
 8003aa4:	f000 bd8c 	b.w	80045c0 <main+0x1ea0>
		}
		case Mode_monitor_register: {
			break;
		}
		case Mode_remote_config_time: {
			if (button_count[14] == 1) {
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <main+0x1444>)
 8003aaa:	8b9b      	ldrh	r3, [r3, #28]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d10a      	bne.n	8003ac6 <main+0x13a6>
				current_mode = Mode_word_clock;
 8003ab0:	4b2f      	ldr	r3, [pc, #188]	; (8003b70 <main+0x1450>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
				button_count[14] += 1;
 8003ab6:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <main+0x1444>)
 8003ab8:	8b9b      	ldrh	r3, [r3, #28]
 8003aba:	3301      	adds	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <main+0x1444>)
 8003ac0:	839a      	strh	r2, [r3, #28]
				break;
 8003ac2:	f000 bd7e 	b.w	80045c2 <main+0x1ea2>
			}
			switch (remote_update_time_status) {
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <main+0x1454>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b0d      	cmp	r3, #13
 8003acc:	f200 855d 	bhi.w	800458a <main+0x1e6a>
 8003ad0:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <main+0x13b8>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003b11 	.word	0x08003b11
 8003adc:	08003b85 	.word	0x08003b85
 8003ae0:	08003ca1 	.word	0x08003ca1
 8003ae4:	08003cd1 	.word	0x08003cd1
 8003ae8:	08003de9 	.word	0x08003de9
 8003aec:	08003f75 	.word	0x08003f75
 8003af0:	0800438b 	.word	0x0800438b
 8003af4:	0800424b 	.word	0x0800424b
 8003af8:	080040bf 	.word	0x080040bf
 8003afc:	08003e17 	.word	0x08003e17
 8003b00:	08003fa3 	.word	0x08003fa3
 8003b04:	080043b9 	.word	0x080043b9
 8003b08:	08004279 	.word	0x08004279
 8003b0c:	080040ed 	.word	0x080040ed
			case UPDATE_HOURS:
				uart_Rs232SendString("hours");
 8003b10:	4819      	ldr	r0, [pc, #100]	; (8003b78 <main+0x1458>)
 8003b12:	f002 fa3d 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating hours...", GREEN, BLACK, 16, 0);
 8003b16:	2300      	movs	r3, #0
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	2310      	movs	r3, #16
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <main+0x145c>)
 8003b28:	2114      	movs	r1, #20
 8003b2a:	200a      	movs	r0, #10
 8003b2c:	f7fe fc68 	bl	8002400 <lcdShowString>
				remote_update_time_status = WAIT_FOR_HOURS;
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <main+0x1454>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <main+0x1460>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
				break;
 8003b3c:	f000 bd34 	b.w	80045a8 <main+0x1e88>
 8003b40:	2000001c 	.word	0x2000001c
 8003b44:	200001a6 	.word	0x200001a6
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	20000001 	.word	0x20000001
 8003b50:	20000002 	.word	0x20000002
 8003b54:	20000006 	.word	0x20000006
 8003b58:	20000005 	.word	0x20000005
 8003b5c:	20000004 	.word	0x20000004
 8003b60:	20000003 	.word	0x20000003
 8003b64:	200000ac 	.word	0x200000ac
 8003b68:	88888889 	.word	0x88888889
 8003b6c:	cccccccd 	.word	0xcccccccd
 8003b70:	200001a4 	.word	0x200001a4
 8003b74:	20000198 	.word	0x20000198
 8003b78:	0800c700 	.word	0x0800c700
 8003b7c:	0800c708 	.word	0x0800c708
 8003b80:	2000019a 	.word	0x2000019a
			case WAIT_FOR_HOURS:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 8003b84:	4bb2      	ldr	r3, [pc, #712]	; (8003e50 <main+0x1730>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2bc7      	cmp	r3, #199	; 0xc7
 8003b8a:	d926      	bls.n	8003bda <main+0x14ba>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 8003b8c:	4bb1      	ldr	r3, [pc, #708]	; (8003e54 <main+0x1734>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d914      	bls.n	8003bbe <main+0x149e>
						lcdClear(BLACK);
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7fd ff69 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating hours timeout", RED,
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003baa:	4aab      	ldr	r2, [pc, #684]	; (8003e58 <main+0x1738>)
 8003bac:	2164      	movs	r1, #100	; 0x64
 8003bae:	200a      	movs	r0, #10
 8003bb0:	f7fe fc26 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 8003bb4:	4ba9      	ldr	r3, [pc, #676]	; (8003e5c <main+0x173c>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 8003bba:	f000 bce8 	b.w	800458e <main+0x1e6e>
						remote_update_time_status = UPDATE_HOURS;
 8003bbe:	4ba8      	ldr	r3, [pc, #672]	; (8003e60 <main+0x1740>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 8003bc4:	4ba2      	ldr	r3, [pc, #648]	; (8003e50 <main+0x1730>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 8003bca:	4ba2      	ldr	r3, [pc, #648]	; (8003e54 <main+0x1734>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4ba0      	ldr	r3, [pc, #640]	; (8003e54 <main+0x1734>)
 8003bd4:	701a      	strb	r2, [r3, #0]
				break;
 8003bd6:	f000 bcda 	b.w	800458e <main+0x1e6e>
					if (uart_receive_flag) {
 8003bda:	4ba2      	ldr	r3, [pc, #648]	; (8003e64 <main+0x1744>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 84d5 	beq.w	800458e <main+0x1e6e>
						uart_receive_flag = 0;
 8003be4:	4b9f      	ldr	r3, [pc, #636]	; (8003e64 <main+0x1744>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
						uint8_t hour_received = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	76fb      	strb	r3, [r7, #27]
						uint8_t valid_format = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	76bb      	strb	r3, [r7, #26]
						while (uart_ring_buffer.length > 0) {
 8003bf2:	e01b      	b.n	8003c2c <main+0x150c>
							uint8_t received_char = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	72bb      	strb	r3, [r7, #10]
							ringBufferPop(&uart_ring_buffer, &received_char);
 8003bf8:	f107 030a 	add.w	r3, r7, #10
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	489a      	ldr	r0, [pc, #616]	; (8003e68 <main+0x1748>)
 8003c00:	f001 feb5 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 8003c04:	7abb      	ldrb	r3, [r7, #10]
 8003c06:	2b39      	cmp	r3, #57	; 0x39
 8003c08:	d802      	bhi.n	8003c10 <main+0x14f0>
 8003c0a:	7abb      	ldrb	r3, [r7, #10]
 8003c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8003c0e:	d802      	bhi.n	8003c16 <main+0x14f6>
								valid_format = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	76bb      	strb	r3, [r7, #26]
 8003c14:	e00a      	b.n	8003c2c <main+0x150c>
										+ (received_char - '0');
 8003c16:	7efb      	ldrb	r3, [r7, #27]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	7abb      	ldrb	r3, [r7, #10]
 8003c24:	4413      	add	r3, r2
 8003c26:	b2db      	uxtb	r3, r3
								hour_received = hour_received * 10
 8003c28:	3b30      	subs	r3, #48	; 0x30
 8003c2a:	76fb      	strb	r3, [r7, #27]
						while (uart_ring_buffer.length > 0) {
 8003c2c:	4b8e      	ldr	r3, [pc, #568]	; (8003e68 <main+0x1748>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1df      	bne.n	8003bf4 <main+0x14d4>
						if (hour_received < 24 && valid_format) {
 8003c34:	7efb      	ldrb	r3, [r7, #27]
 8003c36:	2b17      	cmp	r3, #23
 8003c38:	d810      	bhi.n	8003c5c <main+0x153c>
 8003c3a:	7ebb      	ldrb	r3, [r7, #26]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <main+0x153c>
							lcdClear(BLACK);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fd ff13 	bl	8001a6c <lcdClear>
							remote_update_time_status = UPDATE_MINUTES;
 8003c46:	4b86      	ldr	r3, [pc, #536]	; (8003e60 <main+0x1740>)
 8003c48:	2202      	movs	r2, #2
 8003c4a:	701a      	strb	r2, [r3, #0]
							uart_hour = hour_received;
 8003c4c:	4a87      	ldr	r2, [pc, #540]	; (8003e6c <main+0x174c>)
 8003c4e:	7efb      	ldrb	r3, [r7, #27]
 8003c50:	7013      	strb	r3, [r2, #0]
							timeout_cnt = 0;
 8003c52:	4b80      	ldr	r3, [pc, #512]	; (8003e54 <main+0x1734>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
				break;
 8003c58:	f000 bc99 	b.w	800458e <main+0x1e6e>
							remote_update_time_status = UPDATE_HOURS;
 8003c5c:	4b80      	ldr	r3, [pc, #512]	; (8003e60 <main+0x1740>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 8003c62:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <main+0x1734>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of hours",
 8003c68:	2300      	movs	r3, #0
 8003c6a:	9302      	str	r3, [sp, #8]
 8003c6c:	2310      	movs	r3, #16
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2300      	movs	r3, #0
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c78:	4a7d      	ldr	r2, [pc, #500]	; (8003e70 <main+0x1750>)
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	200a      	movs	r0, #10
 8003c7e:	f7fe fbbf 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 8003c82:	2300      	movs	r3, #0
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	2310      	movs	r3, #16
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c92:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <main+0x1754>)
 8003c94:	2178      	movs	r1, #120	; 0x78
 8003c96:	200a      	movs	r0, #10
 8003c98:	f7fe fbb2 	bl	8002400 <lcdShowString>
				break;
 8003c9c:	f000 bc77 	b.w	800458e <main+0x1e6e>
			case UPDATE_MINUTES:
				uart_Rs232SendString("minutes");
 8003ca0:	4875      	ldr	r0, [pc, #468]	; (8003e78 <main+0x1758>)
 8003ca2:	f002 f975 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating minutes...", GREEN, BLACK, 16,
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9302      	str	r3, [sp, #8]
 8003caa:	2310      	movs	r3, #16
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003cb6:	4a71      	ldr	r2, [pc, #452]	; (8003e7c <main+0x175c>)
 8003cb8:	2114      	movs	r1, #20
 8003cba:	200a      	movs	r0, #10
 8003cbc:	f7fe fba0 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_MINUTES;
 8003cc0:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <main+0x1740>)
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 8003cc6:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <main+0x1730>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
				break;
 8003ccc:	f000 bc6c 	b.w	80045a8 <main+0x1e88>
			case WAIT_FOR_MINUTES:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 8003cd0:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <main+0x1730>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2bc7      	cmp	r3, #199	; 0xc7
 8003cd6:	d926      	bls.n	8003d26 <main+0x1606>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <main+0x1734>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d914      	bls.n	8003d0a <main+0x15ea>
						lcdClear(BLACK);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fd fec3 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating minutes timeout", RED,
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9302      	str	r3, [sp, #8]
 8003cea:	2310      	movs	r3, #16
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cf6:	4a62      	ldr	r2, [pc, #392]	; (8003e80 <main+0x1760>)
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	200a      	movs	r0, #10
 8003cfc:	f7fe fb80 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 8003d00:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <main+0x173c>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 8003d06:	f000 bc44 	b.w	8004592 <main+0x1e72>
						remote_update_time_status = UPDATE_MINUTES;
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <main+0x1740>)
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <main+0x1730>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 8003d16:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <main+0x1734>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <main+0x1734>)
 8003d20:	701a      	strb	r2, [r3, #0]
				break;
 8003d22:	f000 bc36 	b.w	8004592 <main+0x1e72>
					if (uart_receive_flag) {
 8003d26:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <main+0x1744>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8431 	beq.w	8004592 <main+0x1e72>
						uart_receive_flag = 0;
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <main+0x1744>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
						uint8_t minute_received = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	767b      	strb	r3, [r7, #25]
						uint8_t valid_format = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	763b      	strb	r3, [r7, #24]
						while (uart_ring_buffer.length > 0) {
 8003d3e:	e01b      	b.n	8003d78 <main+0x1658>
							uint8_t received_char = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	727b      	strb	r3, [r7, #9]
							ringBufferPop(&uart_ring_buffer, &received_char);
 8003d44:	f107 0309 	add.w	r3, r7, #9
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4847      	ldr	r0, [pc, #284]	; (8003e68 <main+0x1748>)
 8003d4c:	f001 fe0f 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 8003d50:	7a7b      	ldrb	r3, [r7, #9]
 8003d52:	2b39      	cmp	r3, #57	; 0x39
 8003d54:	d802      	bhi.n	8003d5c <main+0x163c>
 8003d56:	7a7b      	ldrb	r3, [r7, #9]
 8003d58:	2b2f      	cmp	r3, #47	; 0x2f
 8003d5a:	d802      	bhi.n	8003d62 <main+0x1642>
								valid_format = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	763b      	strb	r3, [r7, #24]
 8003d60:	e00a      	b.n	8003d78 <main+0x1658>
										+ (received_char - '0');
 8003d62:	7e7b      	ldrb	r3, [r7, #25]
 8003d64:	461a      	mov	r2, r3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	7a7b      	ldrb	r3, [r7, #9]
 8003d70:	4413      	add	r3, r2
 8003d72:	b2db      	uxtb	r3, r3
								minute_received = minute_received * 10
 8003d74:	3b30      	subs	r3, #48	; 0x30
 8003d76:	767b      	strb	r3, [r7, #25]
						while (uart_ring_buffer.length > 0) {
 8003d78:	4b3b      	ldr	r3, [pc, #236]	; (8003e68 <main+0x1748>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1df      	bne.n	8003d40 <main+0x1620>
						if (minute_received < 60 && valid_format) {
 8003d80:	7e7b      	ldrb	r3, [r7, #25]
 8003d82:	2b3b      	cmp	r3, #59	; 0x3b
 8003d84:	d80f      	bhi.n	8003da6 <main+0x1686>
 8003d86:	7e3b      	ldrb	r3, [r7, #24]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <main+0x1686>
							lcdClear(BLACK);
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f7fd fe6d 	bl	8001a6c <lcdClear>
							remote_update_time_status = UPDATE_SECONDS;
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <main+0x1740>)
 8003d94:	2204      	movs	r2, #4
 8003d96:	701a      	strb	r2, [r3, #0]
							uart_minute = minute_received;
 8003d98:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <main+0x1764>)
 8003d9a:	7e7b      	ldrb	r3, [r7, #25]
 8003d9c:	7013      	strb	r3, [r2, #0]
							timeout_cnt = 0;
 8003d9e:	4b2d      	ldr	r3, [pc, #180]	; (8003e54 <main+0x1734>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
				break;
 8003da4:	e3f5      	b.n	8004592 <main+0x1e72>
							remote_update_time_status = UPDATE_MINUTES;
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <main+0x1740>)
 8003da8:	2202      	movs	r2, #2
 8003daa:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 8003dac:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <main+0x1734>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of minutes",
 8003db2:	2300      	movs	r3, #0
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	2310      	movs	r3, #16
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dc2:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <main+0x1768>)
 8003dc4:	2164      	movs	r1, #100	; 0x64
 8003dc6:	200a      	movs	r0, #10
 8003dc8:	f7fe fb1a 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	9301      	str	r3, [sp, #4]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <main+0x1754>)
 8003dde:	2178      	movs	r1, #120	; 0x78
 8003de0:	200a      	movs	r0, #10
 8003de2:	f7fe fb0d 	bl	8002400 <lcdShowString>
				break;
 8003de6:	e3d4      	b.n	8004592 <main+0x1e72>
			case UPDATE_SECONDS:
				uart_Rs232SendString("seconds");
 8003de8:	4828      	ldr	r0, [pc, #160]	; (8003e8c <main+0x176c>)
 8003dea:	f002 f8d1 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating seconds...", GREEN, BLACK, 16,
 8003dee:	2300      	movs	r3, #0
 8003df0:	9302      	str	r3, [sp, #8]
 8003df2:	2310      	movs	r3, #16
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <main+0x1770>)
 8003e00:	2114      	movs	r1, #20
 8003e02:	200a      	movs	r0, #10
 8003e04:	f7fe fafc 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_SECONDS;
 8003e08:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <main+0x1740>)
 8003e0a:	2209      	movs	r2, #9
 8003e0c:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <main+0x1730>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
				break;
 8003e14:	e3c8      	b.n	80045a8 <main+0x1e88>
			case WAIT_FOR_SECONDS:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <main+0x1730>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2bc7      	cmp	r3, #199	; 0xc7
 8003e1c:	d949      	bls.n	8003eb2 <main+0x1792>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <main+0x1734>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d938      	bls.n	8003e98 <main+0x1778>
						lcdClear(BLACK);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7fd fe20 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating seconds timeout", RED,
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	2310      	movs	r3, #16
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <main+0x1774>)
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	200a      	movs	r0, #10
 8003e42:	f7fe fadd 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <main+0x173c>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 8003e4c:	e3a3      	b.n	8004596 <main+0x1e76>
 8003e4e:	bf00      	nop
 8003e50:	2000019a 	.word	0x2000019a
 8003e54:	20000199 	.word	0x20000199
 8003e58:	0800c71c 	.word	0x0800c71c
 8003e5c:	200001a4 	.word	0x200001a4
 8003e60:	20000198 	.word	0x20000198
 8003e64:	20000324 	.word	0x20000324
 8003e68:	200002bc 	.word	0x200002bc
 8003e6c:	2000019b 	.word	0x2000019b
 8003e70:	0800c734 	.word	0x0800c734
 8003e74:	0800c74c 	.word	0x0800c74c
 8003e78:	0800c758 	.word	0x0800c758
 8003e7c:	0800c760 	.word	0x0800c760
 8003e80:	0800c774 	.word	0x0800c774
 8003e84:	2000019c 	.word	0x2000019c
 8003e88:	0800c78c 	.word	0x0800c78c
 8003e8c:	0800c7a8 	.word	0x0800c7a8
 8003e90:	0800c7b0 	.word	0x0800c7b0
 8003e94:	0800c7c4 	.word	0x0800c7c4
						remote_update_time_status = UPDATE_SECONDS;
 8003e98:	4ba9      	ldr	r3, [pc, #676]	; (8004140 <main+0x1a20>)
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 8003e9e:	4ba9      	ldr	r3, [pc, #676]	; (8004144 <main+0x1a24>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 8003ea4:	4ba8      	ldr	r3, [pc, #672]	; (8004148 <main+0x1a28>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4ba6      	ldr	r3, [pc, #664]	; (8004148 <main+0x1a28>)
 8003eae:	701a      	strb	r2, [r3, #0]
				break;
 8003eb0:	e371      	b.n	8004596 <main+0x1e76>
					if (uart_receive_flag) {
 8003eb2:	4ba6      	ldr	r3, [pc, #664]	; (800414c <main+0x1a2c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 836d 	beq.w	8004596 <main+0x1e76>
						uart_receive_flag = 0;
 8003ebc:	4ba3      	ldr	r3, [pc, #652]	; (800414c <main+0x1a2c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
						uint8_t second_received = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
						uint8_t valid_format = 1;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	75bb      	strb	r3, [r7, #22]
						while (uart_ring_buffer.length > 0) {
 8003eca:	e01b      	b.n	8003f04 <main+0x17e4>
							uint8_t received_char = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	723b      	strb	r3, [r7, #8]
							ringBufferPop(&uart_ring_buffer, &received_char);
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	489e      	ldr	r0, [pc, #632]	; (8004150 <main+0x1a30>)
 8003ed8:	f001 fd49 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 8003edc:	7a3b      	ldrb	r3, [r7, #8]
 8003ede:	2b39      	cmp	r3, #57	; 0x39
 8003ee0:	d802      	bhi.n	8003ee8 <main+0x17c8>
 8003ee2:	7a3b      	ldrb	r3, [r7, #8]
 8003ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8003ee6:	d802      	bhi.n	8003eee <main+0x17ce>
								valid_format = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75bb      	strb	r3, [r7, #22]
 8003eec:	e00a      	b.n	8003f04 <main+0x17e4>
										+ (received_char - '0');
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	7a3b      	ldrb	r3, [r7, #8]
 8003efc:	4413      	add	r3, r2
 8003efe:	b2db      	uxtb	r3, r3
								second_received = second_received * 10
 8003f00:	3b30      	subs	r3, #48	; 0x30
 8003f02:	75fb      	strb	r3, [r7, #23]
						while (uart_ring_buffer.length > 0) {
 8003f04:	4b92      	ldr	r3, [pc, #584]	; (8004150 <main+0x1a30>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1df      	bne.n	8003ecc <main+0x17ac>
						if (second_received < 60 && valid_format) {
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b3b      	cmp	r3, #59	; 0x3b
 8003f10:	d80f      	bhi.n	8003f32 <main+0x1812>
 8003f12:	7dbb      	ldrb	r3, [r7, #22]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <main+0x1812>
							remote_update_time_status = UPDATE_DAYS;
 8003f18:	4b89      	ldr	r3, [pc, #548]	; (8004140 <main+0x1a20>)
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	701a      	strb	r2, [r3, #0]
							lcdClear(BLACK);
 8003f1e:	2000      	movs	r0, #0
 8003f20:	f7fd fda4 	bl	8001a6c <lcdClear>
							uart_second = second_received;
 8003f24:	4a8b      	ldr	r2, [pc, #556]	; (8004154 <main+0x1a34>)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	7013      	strb	r3, [r2, #0]
							timeout_cnt = 0;
 8003f2a:	4b87      	ldr	r3, [pc, #540]	; (8004148 <main+0x1a28>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
				break;
 8003f30:	e331      	b.n	8004596 <main+0x1e76>
							remote_update_time_status = UPDATE_SECONDS;
 8003f32:	4b83      	ldr	r3, [pc, #524]	; (8004140 <main+0x1a20>)
 8003f34:	2204      	movs	r2, #4
 8003f36:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 8003f38:	4b83      	ldr	r3, [pc, #524]	; (8004148 <main+0x1a28>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of seconds",
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	2310      	movs	r3, #16
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f4e:	4a82      	ldr	r2, [pc, #520]	; (8004158 <main+0x1a38>)
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	200a      	movs	r0, #10
 8003f54:	f7fe fa54 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9302      	str	r3, [sp, #8]
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	2300      	movs	r3, #0
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003f68:	4a7c      	ldr	r2, [pc, #496]	; (800415c <main+0x1a3c>)
 8003f6a:	2178      	movs	r1, #120	; 0x78
 8003f6c:	200a      	movs	r0, #10
 8003f6e:	f7fe fa47 	bl	8002400 <lcdShowString>
				break;
 8003f72:	e310      	b.n	8004596 <main+0x1e76>
			case UPDATE_DAYS:
				uart_Rs232SendString("days");
 8003f74:	487a      	ldr	r0, [pc, #488]	; (8004160 <main+0x1a40>)
 8003f76:	f002 f80b 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating days...", GREEN, BLACK, 16,
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9302      	str	r3, [sp, #8]
 8003f7e:	2310      	movs	r3, #16
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003f8a:	4a76      	ldr	r2, [pc, #472]	; (8004164 <main+0x1a44>)
 8003f8c:	2114      	movs	r1, #20
 8003f8e:	200a      	movs	r0, #10
 8003f90:	f7fe fa36 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_DAYS;
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <main+0x1a20>)
 8003f96:	220a      	movs	r2, #10
 8003f98:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <main+0x1a24>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
				break;
 8003fa0:	e302      	b.n	80045a8 <main+0x1e88>
			case WAIT_FOR_DAYS:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 8003fa2:	4b68      	ldr	r3, [pc, #416]	; (8004144 <main+0x1a24>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2bc7      	cmp	r3, #199	; 0xc7
 8003fa8:	d924      	bls.n	8003ff4 <main+0x18d4>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 8003faa:	4b67      	ldr	r3, [pc, #412]	; (8004148 <main+0x1a28>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d913      	bls.n	8003fda <main+0x18ba>
						lcdClear(BLACK);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f7fd fd5a 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating days timeout", RED,
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fc8:	4a67      	ldr	r2, [pc, #412]	; (8004168 <main+0x1a48>)
 8003fca:	2164      	movs	r1, #100	; 0x64
 8003fcc:	200a      	movs	r0, #10
 8003fce:	f7fe fa17 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 8003fd2:	4b66      	ldr	r3, [pc, #408]	; (800416c <main+0x1a4c>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 8003fd8:	e2df      	b.n	800459a <main+0x1e7a>
						remote_update_time_status = UPDATE_DAYS;
 8003fda:	4b59      	ldr	r3, [pc, #356]	; (8004140 <main+0x1a20>)
 8003fdc:	2205      	movs	r2, #5
 8003fde:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 8003fe0:	4b58      	ldr	r3, [pc, #352]	; (8004144 <main+0x1a24>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 8003fe6:	4b58      	ldr	r3, [pc, #352]	; (8004148 <main+0x1a28>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4b56      	ldr	r3, [pc, #344]	; (8004148 <main+0x1a28>)
 8003ff0:	701a      	strb	r2, [r3, #0]
				break;
 8003ff2:	e2d2      	b.n	800459a <main+0x1e7a>
					if (uart_receive_flag) {
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <main+0x1a2c>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 82ce 	beq.w	800459a <main+0x1e7a>
						uart_receive_flag = 0;
 8003ffe:	4b53      	ldr	r3, [pc, #332]	; (800414c <main+0x1a2c>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
						uint16_t day_received = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	82bb      	strh	r3, [r7, #20]
						uint8_t valid_format = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	74fb      	strb	r3, [r7, #19]
						while (uart_ring_buffer.length > 0) {
 800400c:	e01b      	b.n	8004046 <main+0x1926>
							uint8_t received_char = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	71fb      	strb	r3, [r7, #7]
							ringBufferPop(&uart_ring_buffer, &received_char);
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	4619      	mov	r1, r3
 8004016:	484e      	ldr	r0, [pc, #312]	; (8004150 <main+0x1a30>)
 8004018:	f001 fca9 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	2b39      	cmp	r3, #57	; 0x39
 8004020:	d802      	bhi.n	8004028 <main+0x1908>
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b2f      	cmp	r3, #47	; 0x2f
 8004026:	d802      	bhi.n	800402e <main+0x190e>
								valid_format = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	74fb      	strb	r3, [r7, #19]
 800402c:	e00b      	b.n	8004046 <main+0x1926>
										+ (received_char - '0');
 800402e:	8abb      	ldrh	r3, [r7, #20]
 8004030:	461a      	mov	r2, r3
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	4413      	add	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	b29b      	uxth	r3, r3
 800403e:	4413      	add	r3, r2
 8004040:	b29b      	uxth	r3, r3
								day_received = day_received * 10
 8004042:	3b30      	subs	r3, #48	; 0x30
 8004044:	82bb      	strh	r3, [r7, #20]
						while (uart_ring_buffer.length > 0) {
 8004046:	4b42      	ldr	r3, [pc, #264]	; (8004150 <main+0x1a30>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1df      	bne.n	800400e <main+0x18ee>
						if (day_received < 8 && day_received > 0 && valid_format) {
 800404e:	8abb      	ldrh	r3, [r7, #20]
 8004050:	2b07      	cmp	r3, #7
 8004052:	d813      	bhi.n	800407c <main+0x195c>
 8004054:	8abb      	ldrh	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d010      	beq.n	800407c <main+0x195c>
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <main+0x195c>
							lcdClear(BLACK);
 8004060:	2000      	movs	r0, #0
 8004062:	f7fd fd03 	bl	8001a6c <lcdClear>
							remote_update_time_status = UPDATE_YEARS;
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <main+0x1a20>)
 8004068:	2208      	movs	r2, #8
 800406a:	701a      	strb	r2, [r3, #0]
							uart_day = day_received;
 800406c:	8abb      	ldrh	r3, [r7, #20]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <main+0x1a50>)
 8004072:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <main+0x1a28>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
				break;
 800407a:	e28e      	b.n	800459a <main+0x1e7a>
							remote_update_time_status = UPDATE_DAYS;
 800407c:	4b30      	ldr	r3, [pc, #192]	; (8004140 <main+0x1a20>)
 800407e:	2205      	movs	r2, #5
 8004080:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <main+0x1a28>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of days",
 8004088:	2300      	movs	r3, #0
 800408a:	9302      	str	r3, [sp, #8]
 800408c:	2310      	movs	r3, #16
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	2300      	movs	r3, #0
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004098:	4a36      	ldr	r2, [pc, #216]	; (8004174 <main+0x1a54>)
 800409a:	2164      	movs	r1, #100	; 0x64
 800409c:	200a      	movs	r0, #10
 800409e:	f7fe f9af 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 80040a2:	2300      	movs	r3, #0
 80040a4:	9302      	str	r3, [sp, #8]
 80040a6:	2310      	movs	r3, #16
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	2300      	movs	r3, #0
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <main+0x1a3c>)
 80040b4:	2178      	movs	r1, #120	; 0x78
 80040b6:	200a      	movs	r0, #10
 80040b8:	f7fe f9a2 	bl	8002400 <lcdShowString>
				break;
 80040bc:	e26d      	b.n	800459a <main+0x1e7a>
			case UPDATE_YEARS:
				uart_Rs232SendString("years");
 80040be:	482e      	ldr	r0, [pc, #184]	; (8004178 <main+0x1a58>)
 80040c0:	f001 ff66 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating years...", GREEN, BLACK, 16,
 80040c4:	2300      	movs	r3, #0
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	2310      	movs	r3, #16
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	2300      	movs	r3, #0
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80040d4:	4a29      	ldr	r2, [pc, #164]	; (800417c <main+0x1a5c>)
 80040d6:	2114      	movs	r1, #20
 80040d8:	200a      	movs	r0, #10
 80040da:	f7fe f991 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_YEARS;
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <main+0x1a20>)
 80040e0:	220d      	movs	r2, #13
 80040e2:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <main+0x1a24>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
				break;
 80040ea:	e25d      	b.n	80045a8 <main+0x1e88>
			case WAIT_FOR_YEARS:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 80040ec:	4b15      	ldr	r3, [pc, #84]	; (8004144 <main+0x1a24>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2bc7      	cmp	r3, #199	; 0xc7
 80040f2:	d947      	bls.n	8004184 <main+0x1a64>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <main+0x1a28>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d913      	bls.n	8004124 <main+0x1a04>
						lcdClear(BLACK);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7fd fcb5 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating years timeout", RED,
 8004102:	2300      	movs	r3, #0
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	2310      	movs	r3, #16
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	2300      	movs	r3, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004112:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <main+0x1a60>)
 8004114:	2164      	movs	r1, #100	; 0x64
 8004116:	200a      	movs	r0, #10
 8004118:	f7fe f972 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <main+0x1a4c>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 8004122:	e23c      	b.n	800459e <main+0x1e7e>
						remote_update_time_status = UPDATE_YEARS;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <main+0x1a20>)
 8004126:	2208      	movs	r2, #8
 8004128:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <main+0x1a24>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <main+0x1a28>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <main+0x1a28>)
 800413a:	701a      	strb	r2, [r3, #0]
				break;
 800413c:	e22f      	b.n	800459e <main+0x1e7e>
 800413e:	bf00      	nop
 8004140:	20000198 	.word	0x20000198
 8004144:	2000019a 	.word	0x2000019a
 8004148:	20000199 	.word	0x20000199
 800414c:	20000324 	.word	0x20000324
 8004150:	200002bc 	.word	0x200002bc
 8004154:	2000019d 	.word	0x2000019d
 8004158:	0800c7dc 	.word	0x0800c7dc
 800415c:	0800c74c 	.word	0x0800c74c
 8004160:	0800c7f8 	.word	0x0800c7f8
 8004164:	0800c800 	.word	0x0800c800
 8004168:	0800c814 	.word	0x0800c814
 800416c:	200001a4 	.word	0x200001a4
 8004170:	2000019f 	.word	0x2000019f
 8004174:	0800c828 	.word	0x0800c828
 8004178:	0800c840 	.word	0x0800c840
 800417c:	0800c848 	.word	0x0800c848
 8004180:	0800c85c 	.word	0x0800c85c
					if (uart_receive_flag) {
 8004184:	4ba7      	ldr	r3, [pc, #668]	; (8004424 <main+0x1d04>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8208 	beq.w	800459e <main+0x1e7e>
						uart_receive_flag = 0;
 800418e:	4ba5      	ldr	r3, [pc, #660]	; (8004424 <main+0x1d04>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
						uint16_t year_received = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	823b      	strh	r3, [r7, #16]
						uint8_t valid_format = 1;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
						while (uart_ring_buffer.length > 0) {
 800419c:	e01b      	b.n	80041d6 <main+0x1ab6>
							uint8_t received_char = 0;
 800419e:	2300      	movs	r3, #0
 80041a0:	71bb      	strb	r3, [r7, #6]
							ringBufferPop(&uart_ring_buffer, &received_char);
 80041a2:	1dbb      	adds	r3, r7, #6
 80041a4:	4619      	mov	r1, r3
 80041a6:	48a0      	ldr	r0, [pc, #640]	; (8004428 <main+0x1d08>)
 80041a8:	f001 fbe1 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 80041ac:	79bb      	ldrb	r3, [r7, #6]
 80041ae:	2b39      	cmp	r3, #57	; 0x39
 80041b0:	d802      	bhi.n	80041b8 <main+0x1a98>
 80041b2:	79bb      	ldrb	r3, [r7, #6]
 80041b4:	2b2f      	cmp	r3, #47	; 0x2f
 80041b6:	d802      	bhi.n	80041be <main+0x1a9e>
								valid_format = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e00b      	b.n	80041d6 <main+0x1ab6>
										+ (received_char - '0');
 80041be:	8a3b      	ldrh	r3, [r7, #16]
 80041c0:	461a      	mov	r2, r3
 80041c2:	0092      	lsls	r2, r2, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	79bb      	ldrb	r3, [r7, #6]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	b29b      	uxth	r3, r3
								year_received = year_received * 10
 80041d2:	3b30      	subs	r3, #48	; 0x30
 80041d4:	823b      	strh	r3, [r7, #16]
						while (uart_ring_buffer.length > 0) {
 80041d6:	4b94      	ldr	r3, [pc, #592]	; (8004428 <main+0x1d08>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1df      	bne.n	800419e <main+0x1a7e>
						if (year_received < 10000 && valid_format) {
 80041de:	8a3b      	ldrh	r3, [r7, #16]
 80041e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d80f      	bhi.n	8004208 <main+0x1ae8>
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <main+0x1ae8>
							lcdClear(BLACK);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7fd fc3c 	bl	8001a6c <lcdClear>
							remote_update_time_status = UPDATE_MONTHS;
 80041f4:	4b8d      	ldr	r3, [pc, #564]	; (800442c <main+0x1d0c>)
 80041f6:	2207      	movs	r2, #7
 80041f8:	701a      	strb	r2, [r3, #0]
							uart_year = year_received;
 80041fa:	4a8d      	ldr	r2, [pc, #564]	; (8004430 <main+0x1d10>)
 80041fc:	8a3b      	ldrh	r3, [r7, #16]
 80041fe:	8013      	strh	r3, [r2, #0]
							timeout_cnt = 0;
 8004200:	4b8c      	ldr	r3, [pc, #560]	; (8004434 <main+0x1d14>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
				break;
 8004206:	e1ca      	b.n	800459e <main+0x1e7e>
							remote_update_time_status = UPDATE_YEARS;
 8004208:	4b88      	ldr	r3, [pc, #544]	; (800442c <main+0x1d0c>)
 800420a:	2208      	movs	r2, #8
 800420c:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 800420e:	4b89      	ldr	r3, [pc, #548]	; (8004434 <main+0x1d14>)
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of years",
 8004214:	2300      	movs	r3, #0
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	2310      	movs	r3, #16
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004224:	4a84      	ldr	r2, [pc, #528]	; (8004438 <main+0x1d18>)
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	200a      	movs	r0, #10
 800422a:	f7fe f8e9 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 800422e:	2300      	movs	r3, #0
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	2310      	movs	r3, #16
 8004234:	9301      	str	r3, [sp, #4]
 8004236:	2300      	movs	r3, #0
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800423e:	4a7f      	ldr	r2, [pc, #508]	; (800443c <main+0x1d1c>)
 8004240:	2178      	movs	r1, #120	; 0x78
 8004242:	200a      	movs	r0, #10
 8004244:	f7fe f8dc 	bl	8002400 <lcdShowString>
				break;
 8004248:	e1a9      	b.n	800459e <main+0x1e7e>
			case UPDATE_MONTHS:
				uart_Rs232SendString("months");
 800424a:	487d      	ldr	r0, [pc, #500]	; (8004440 <main+0x1d20>)
 800424c:	f001 fea0 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating months...", GREEN, BLACK, 16,
 8004250:	2300      	movs	r3, #0
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	2310      	movs	r3, #16
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004260:	4a78      	ldr	r2, [pc, #480]	; (8004444 <main+0x1d24>)
 8004262:	2114      	movs	r1, #20
 8004264:	200a      	movs	r0, #10
 8004266:	f7fe f8cb 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_MONTHS;
 800426a:	4b70      	ldr	r3, [pc, #448]	; (800442c <main+0x1d0c>)
 800426c:	220c      	movs	r2, #12
 800426e:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 8004270:	4b75      	ldr	r3, [pc, #468]	; (8004448 <main+0x1d28>)
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
				break;
 8004276:	e197      	b.n	80045a8 <main+0x1e88>
			case WAIT_FOR_MONTHS:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 8004278:	4b73      	ldr	r3, [pc, #460]	; (8004448 <main+0x1d28>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2bc7      	cmp	r3, #199	; 0xc7
 800427e:	d924      	bls.n	80042ca <main+0x1baa>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 8004280:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <main+0x1d14>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d913      	bls.n	80042b0 <main+0x1b90>
						lcdClear(BLACK);
 8004288:	2000      	movs	r0, #0
 800428a:	f7fd fbef 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating months timeout", RED,
 800428e:	2300      	movs	r3, #0
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	2310      	movs	r3, #16
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2300      	movs	r3, #0
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800429e:	4a6b      	ldr	r2, [pc, #428]	; (800444c <main+0x1d2c>)
 80042a0:	2164      	movs	r1, #100	; 0x64
 80042a2:	200a      	movs	r0, #10
 80042a4:	f7fe f8ac 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 80042a8:	4b69      	ldr	r3, [pc, #420]	; (8004450 <main+0x1d30>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 80042ae:	e178      	b.n	80045a2 <main+0x1e82>
						remote_update_time_status = UPDATE_MONTHS;
 80042b0:	4b5e      	ldr	r3, [pc, #376]	; (800442c <main+0x1d0c>)
 80042b2:	2207      	movs	r2, #7
 80042b4:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 80042b6:	4b64      	ldr	r3, [pc, #400]	; (8004448 <main+0x1d28>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 80042bc:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <main+0x1d14>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <main+0x1d14>)
 80042c6:	701a      	strb	r2, [r3, #0]
				break;
 80042c8:	e16b      	b.n	80045a2 <main+0x1e82>
					if (uart_receive_flag) {
 80042ca:	4b56      	ldr	r3, [pc, #344]	; (8004424 <main+0x1d04>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8167 	beq.w	80045a2 <main+0x1e82>
						uart_receive_flag = 0;
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <main+0x1d04>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
						uint8_t month_received = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	73bb      	strb	r3, [r7, #14]
						uint8_t valid_format = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	737b      	strb	r3, [r7, #13]
						while (uart_ring_buffer.length > 0) {
 80042e2:	e01a      	b.n	800431a <main+0x1bfa>
							uint8_t received_char = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	717b      	strb	r3, [r7, #5]
							ringBufferPop(&uart_ring_buffer, &received_char);
 80042e8:	1d7b      	adds	r3, r7, #5
 80042ea:	4619      	mov	r1, r3
 80042ec:	484e      	ldr	r0, [pc, #312]	; (8004428 <main+0x1d08>)
 80042ee:	f001 fb3e 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 80042f2:	797b      	ldrb	r3, [r7, #5]
 80042f4:	2b39      	cmp	r3, #57	; 0x39
 80042f6:	d802      	bhi.n	80042fe <main+0x1bde>
 80042f8:	797b      	ldrb	r3, [r7, #5]
 80042fa:	2b2f      	cmp	r3, #47	; 0x2f
 80042fc:	d802      	bhi.n	8004304 <main+0x1be4>
								valid_format = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	737b      	strb	r3, [r7, #13]
 8004302:	e00a      	b.n	800431a <main+0x1bfa>
										+ (received_char - '0');
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	461a      	mov	r2, r3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	797b      	ldrb	r3, [r7, #5]
 8004312:	4413      	add	r3, r2
 8004314:	b2db      	uxtb	r3, r3
								month_received = month_received * 10
 8004316:	3b30      	subs	r3, #48	; 0x30
 8004318:	73bb      	strb	r3, [r7, #14]
						while (uart_ring_buffer.length > 0) {
 800431a:	4b43      	ldr	r3, [pc, #268]	; (8004428 <main+0x1d08>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e0      	bne.n	80042e4 <main+0x1bc4>
						if (month_received < 13 && valid_format) {
 8004322:	7bbb      	ldrb	r3, [r7, #14]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d80f      	bhi.n	8004348 <main+0x1c28>
 8004328:	7b7b      	ldrb	r3, [r7, #13]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <main+0x1c28>
							lcdClear(BLACK);
 800432e:	2000      	movs	r0, #0
 8004330:	f7fd fb9c 	bl	8001a6c <lcdClear>
							remote_update_time_status = UPDATE_DATES;
 8004334:	4b3d      	ldr	r3, [pc, #244]	; (800442c <main+0x1d0c>)
 8004336:	2206      	movs	r2, #6
 8004338:	701a      	strb	r2, [r3, #0]
							uart_month = month_received;
 800433a:	4a46      	ldr	r2, [pc, #280]	; (8004454 <main+0x1d34>)
 800433c:	7bbb      	ldrb	r3, [r7, #14]
 800433e:	7013      	strb	r3, [r2, #0]
							timeout_cnt = 0;
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <main+0x1d14>)
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
				break;
 8004346:	e12c      	b.n	80045a2 <main+0x1e82>
							remote_update_time_status = UPDATE_MONTHS;
 8004348:	4b38      	ldr	r3, [pc, #224]	; (800442c <main+0x1d0c>)
 800434a:	2207      	movs	r2, #7
 800434c:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 800434e:	4b39      	ldr	r3, [pc, #228]	; (8004434 <main+0x1d14>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Wating format of months",
 8004354:	2300      	movs	r3, #0
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	2310      	movs	r3, #16
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004364:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <main+0x1d38>)
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	200a      	movs	r0, #10
 800436a:	f7fe f849 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 800436e:	2300      	movs	r3, #0
 8004370:	9302      	str	r3, [sp, #8]
 8004372:	2310      	movs	r3, #16
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <main+0x1d1c>)
 8004380:	2178      	movs	r1, #120	; 0x78
 8004382:	200a      	movs	r0, #10
 8004384:	f7fe f83c 	bl	8002400 <lcdShowString>
				break;
 8004388:	e10b      	b.n	80045a2 <main+0x1e82>
			case UPDATE_DATES:
				uart_Rs232SendString("dates");
 800438a:	4834      	ldr	r0, [pc, #208]	; (800445c <main+0x1d3c>)
 800438c:	f001 fe00 	bl	8005f90 <uart_Rs232SendString>
				lcdShowString(10, 20, "Updating dates...", GREEN, BLACK, 16,
 8004390:	2300      	movs	r3, #0
 8004392:	9302      	str	r3, [sp, #8]
 8004394:	2310      	movs	r3, #16
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2300      	movs	r3, #0
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <main+0x1d40>)
 80043a2:	2114      	movs	r1, #20
 80043a4:	200a      	movs	r0, #10
 80043a6:	f7fe f82b 	bl	8002400 <lcdShowString>
						0);
				remote_update_time_status = WAIT_FOR_DATES;
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <main+0x1d0c>)
 80043ac:	220b      	movs	r2, #11
 80043ae:	701a      	strb	r2, [r3, #0]
				uart_timer_cnt = 0;
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <main+0x1d28>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
				break;
 80043b6:	e0f7      	b.n	80045a8 <main+0x1e88>
			case WAIT_FOR_DATES:
				// Check for timeout
				if (uart_timer_cnt >= UART_TIMEOUT_CNT) {
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <main+0x1d28>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2bc7      	cmp	r3, #199	; 0xc7
 80043be:	d924      	bls.n	800440a <main+0x1cea>
					if (timeout_cnt >= UART_TIMEOUT_MAX_TRIES) {
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <main+0x1d14>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d913      	bls.n	80043f0 <main+0x1cd0>
						lcdClear(BLACK);
 80043c8:	2000      	movs	r0, #0
 80043ca:	f7fd fb4f 	bl	8001a6c <lcdClear>
						lcdShowString(10, 100, "Wating dates timeout", RED,
 80043ce:	2300      	movs	r3, #0
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	2310      	movs	r3, #16
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	2300      	movs	r3, #0
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043de:	4a21      	ldr	r2, [pc, #132]	; (8004464 <main+0x1d44>)
 80043e0:	2164      	movs	r1, #100	; 0x64
 80043e2:	200a      	movs	r0, #10
 80043e4:	f7fe f80c 	bl	8002400 <lcdShowString>
						BLACK, 16, 0);
						current_mode = Mode_word_clock;
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <main+0x1d30>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
									0);
						}
					}
				}
				break;
 80043ee:	e0da      	b.n	80045a6 <main+0x1e86>
						remote_update_time_status = UPDATE_DATES;
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <main+0x1d0c>)
 80043f2:	2206      	movs	r2, #6
 80043f4:	701a      	strb	r2, [r3, #0]
						uart_timer_cnt = 0;
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <main+0x1d28>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
						timeout_cnt++;
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <main+0x1d14>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <main+0x1d14>)
 8004406:	701a      	strb	r2, [r3, #0]
				break;
 8004408:	e0cd      	b.n	80045a6 <main+0x1e86>
					if (uart_receive_flag) {
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <main+0x1d04>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80c9 	beq.w	80045a6 <main+0x1e86>
						uart_receive_flag = 0;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <main+0x1d04>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
						uint8_t date_received = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	733b      	strb	r3, [r7, #12]
						uint8_t valid_format = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	72fb      	strb	r3, [r7, #11]
						while (uart_ring_buffer.length > 0) {
 8004422:	e03c      	b.n	800449e <main+0x1d7e>
 8004424:	20000324 	.word	0x20000324
 8004428:	200002bc 	.word	0x200002bc
 800442c:	20000198 	.word	0x20000198
 8004430:	200001a2 	.word	0x200001a2
 8004434:	20000199 	.word	0x20000199
 8004438:	0800c874 	.word	0x0800c874
 800443c:	0800c74c 	.word	0x0800c74c
 8004440:	0800c88c 	.word	0x0800c88c
 8004444:	0800c894 	.word	0x0800c894
 8004448:	2000019a 	.word	0x2000019a
 800444c:	0800c8a8 	.word	0x0800c8a8
 8004450:	200001a4 	.word	0x200001a4
 8004454:	200001a0 	.word	0x200001a0
 8004458:	0800c8c0 	.word	0x0800c8c0
 800445c:	0800c8d8 	.word	0x0800c8d8
 8004460:	0800c8e0 	.word	0x0800c8e0
 8004464:	0800c8f4 	.word	0x0800c8f4
							uint8_t received_char = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	713b      	strb	r3, [r7, #4]
							ringBufferPop(&uart_ring_buffer, &received_char);
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4855      	ldr	r0, [pc, #340]	; (80045c8 <main+0x1ea8>)
 8004472:	f001 fa7c 	bl	800596e <ringBufferPop>
							if (received_char > '9' || received_char < '0') {
 8004476:	793b      	ldrb	r3, [r7, #4]
 8004478:	2b39      	cmp	r3, #57	; 0x39
 800447a:	d802      	bhi.n	8004482 <main+0x1d62>
 800447c:	793b      	ldrb	r3, [r7, #4]
 800447e:	2b2f      	cmp	r3, #47	; 0x2f
 8004480:	d802      	bhi.n	8004488 <main+0x1d68>
								valid_format = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	72fb      	strb	r3, [r7, #11]
 8004486:	e00a      	b.n	800449e <main+0x1d7e>
										+ (received_char - '0');
 8004488:	7b3b      	ldrb	r3, [r7, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	0092      	lsls	r2, r2, #2
 800448e:	4413      	add	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	793b      	ldrb	r3, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	b2db      	uxtb	r3, r3
								date_received = date_received * 10
 800449a:	3b30      	subs	r3, #48	; 0x30
 800449c:	733b      	strb	r3, [r7, #12]
						while (uart_ring_buffer.length > 0) {
 800449e:	4b4a      	ldr	r3, [pc, #296]	; (80045c8 <main+0x1ea8>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e0      	bne.n	8004468 <main+0x1d48>
						if (date_received <= getDaysInMonth(uart_month, uart_year) && valid_format) {
 80044a6:	7b3c      	ldrb	r4, [r7, #12]
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <main+0x1eac>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <main+0x1eb0>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f001 f9d5 	bl	8005864 <getDaysInMonth>
 80044ba:	4603      	mov	r3, r0
 80044bc:	429c      	cmp	r4, r3
 80044be:	dc43      	bgt.n	8004548 <main+0x1e28>
 80044c0:	7afb      	ldrb	r3, [r7, #11]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d040      	beq.n	8004548 <main+0x1e28>
							current_mode = Mode_word_clock;
 80044c6:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <main+0x1eb4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
							uart_date = date_received;
 80044cc:	4a42      	ldr	r2, [pc, #264]	; (80045d8 <main+0x1eb8>)
 80044ce:	7b3b      	ldrb	r3, [r7, #12]
 80044d0:	7013      	strb	r3, [r2, #0]
							lcdClear(BLACK);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f7fd faca 	bl	8001a6c <lcdClear>
							lcdShowString(10, 100, "Update time successfully",
 80044d8:	2300      	movs	r3, #0
 80044da:	9302      	str	r3, [sp, #8]
 80044dc:	2310      	movs	r3, #16
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	2300      	movs	r3, #0
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80044e8:	4a3c      	ldr	r2, [pc, #240]	; (80045dc <main+0x1ebc>)
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	200a      	movs	r0, #10
 80044ee:	f7fd ff87 	bl	8002400 <lcdShowString>
							set_time.second = uart_second;
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <main+0x1ec0>)
 80044f4:	781a      	ldrb	r2, [r3, #0]
 80044f6:	4b3b      	ldr	r3, [pc, #236]	; (80045e4 <main+0x1ec4>)
 80044f8:	701a      	strb	r2, [r3, #0]
							set_time.minute = uart_minute;
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <main+0x1ec8>)
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <main+0x1ec4>)
 8004500:	705a      	strb	r2, [r3, #1]
							set_time.hour = uart_hour;
 8004502:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <main+0x1ecc>)
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <main+0x1ec4>)
 8004508:	709a      	strb	r2, [r3, #2]
							set_time.day = uart_day;
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <main+0x1ed0>)
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	4b35      	ldr	r3, [pc, #212]	; (80045e4 <main+0x1ec4>)
 8004510:	70da      	strb	r2, [r3, #3]
							set_time.year = uart_year;
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <main+0x1eb0>)
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <main+0x1ec4>)
 8004518:	80da      	strh	r2, [r3, #6]
							set_time.month = uart_month;
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <main+0x1eac>)
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <main+0x1ec4>)
 8004520:	715a      	strb	r2, [r3, #5]
							set_time.date = uart_date;
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <main+0x1eb8>)
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <main+0x1ec4>)
 8004528:	711a      	strb	r2, [r3, #4]
							setTime(&set_time.second, &set_time.minute,
 800452a:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <main+0x1ed4>)
 800452c:	9302      	str	r3, [sp, #8]
 800452e:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <main+0x1ed8>)
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	4b32      	ldr	r3, [pc, #200]	; (80045fc <main+0x1edc>)
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4b32      	ldr	r3, [pc, #200]	; (8004600 <main+0x1ee0>)
 8004538:	4a32      	ldr	r2, [pc, #200]	; (8004604 <main+0x1ee4>)
 800453a:	4933      	ldr	r1, [pc, #204]	; (8004608 <main+0x1ee8>)
 800453c:	4829      	ldr	r0, [pc, #164]	; (80045e4 <main+0x1ec4>)
 800453e:	f000 f91f 	bl	8004780 <setTime>
							ds3231ReadTime();
 8004542:	f7fc fdb9 	bl	80010b8 <ds3231ReadTime>
				break;
 8004546:	e02e      	b.n	80045a6 <main+0x1e86>
							remote_update_time_status = UPDATE_DATES;
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <main+0x1eec>)
 800454a:	2206      	movs	r2, #6
 800454c:	701a      	strb	r2, [r3, #0]
							timeout_cnt = 0;
 800454e:	4b30      	ldr	r3, [pc, #192]	; (8004610 <main+0x1ef0>)
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
							lcdShowString(10, 100, "Date not valid",
 8004554:	2300      	movs	r3, #0
 8004556:	9302      	str	r3, [sp, #8]
 8004558:	2310      	movs	r3, #16
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2300      	movs	r3, #0
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <main+0x1ef4>)
 8004566:	2164      	movs	r1, #100	; 0x64
 8004568:	200a      	movs	r0, #10
 800456a:	f7fd ff49 	bl	8002400 <lcdShowString>
							lcdShowString(10, 120, "Try again", RED, BLACK, 16,
 800456e:	2300      	movs	r3, #0
 8004570:	9302      	str	r3, [sp, #8]
 8004572:	2310      	movs	r3, #16
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	2300      	movs	r3, #0
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800457e:	4a26      	ldr	r2, [pc, #152]	; (8004618 <main+0x1ef8>)
 8004580:	2178      	movs	r1, #120	; 0x78
 8004582:	200a      	movs	r0, #10
 8004584:	f7fd ff3c 	bl	8002400 <lcdShowString>
				break;
 8004588:	e00d      	b.n	80045a6 <main+0x1e86>
			default:
				break;
 800458a:	bf00      	nop
 800458c:	e019      	b.n	80045c2 <main+0x1ea2>
				break;
 800458e:	bf00      	nop
 8004590:	e017      	b.n	80045c2 <main+0x1ea2>
				break;
 8004592:	bf00      	nop
 8004594:	e015      	b.n	80045c2 <main+0x1ea2>
				break;
 8004596:	bf00      	nop
 8004598:	e013      	b.n	80045c2 <main+0x1ea2>
				break;
 800459a:	bf00      	nop
 800459c:	e011      	b.n	80045c2 <main+0x1ea2>
				break;
 800459e:	bf00      	nop
 80045a0:	e00f      	b.n	80045c2 <main+0x1ea2>
				break;
 80045a2:	bf00      	nop
 80045a4:	e00d      	b.n	80045c2 <main+0x1ea2>
				break;
 80045a6:	bf00      	nop
			}
			break;
 80045a8:	e00b      	b.n	80045c2 <main+0x1ea2>
		}
		default: {
			current_mode = Mode_init;
 80045aa:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <main+0x1eb4>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	f7fe b8d9 	b.w	8002766 <main+0x46>
			break;
 80045b4:	bf00      	nop
 80045b6:	f7fe b8d6 	b.w	8002766 <main+0x46>
			break;
 80045ba:	bf00      	nop
 80045bc:	f7fe b8d3 	b.w	8002766 <main+0x46>
			break;
 80045c0:	bf00      	nop
		if (sTimer4GetFlag()) {
 80045c2:	f7fe b8d0 	b.w	8002766 <main+0x46>
 80045c6:	bf00      	nop
 80045c8:	200002bc 	.word	0x200002bc
 80045cc:	200001a0 	.word	0x200001a0
 80045d0:	200001a2 	.word	0x200001a2
 80045d4:	200001a4 	.word	0x200001a4
 80045d8:	2000019e 	.word	0x2000019e
 80045dc:	0800c90c 	.word	0x0800c90c
 80045e0:	2000019d 	.word	0x2000019d
 80045e4:	20000000 	.word	0x20000000
 80045e8:	2000019c 	.word	0x2000019c
 80045ec:	2000019b 	.word	0x2000019b
 80045f0:	2000019f 	.word	0x2000019f
 80045f4:	20000006 	.word	0x20000006
 80045f8:	20000005 	.word	0x20000005
 80045fc:	20000004 	.word	0x20000004
 8004600:	20000003 	.word	0x20000003
 8004604:	20000002 	.word	0x20000002
 8004608:	20000001 	.word	0x20000001
 800460c:	20000198 	.word	0x20000198
 8004610:	20000199 	.word	0x20000199
 8004614:	0800c928 	.word	0x0800c928
 8004618:	0800c74c 	.word	0x0800c74c

0800461c <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b094      	sub	sp, #80	; 0x50
 8004620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004622:	f107 0320 	add.w	r3, r7, #32
 8004626:	2230      	movs	r2, #48	; 0x30
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f006 fb44 	bl	800acb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	605a      	str	r2, [r3, #4]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <SystemClock_Config+0xcc>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a27      	ldr	r2, [pc, #156]	; (80046e8 <SystemClock_Config+0xcc>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <SystemClock_Config+0xcc>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800465c:	2300      	movs	r3, #0
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	4b22      	ldr	r3, [pc, #136]	; (80046ec <SystemClock_Config+0xd0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a21      	ldr	r2, [pc, #132]	; (80046ec <SystemClock_Config+0xd0>)
 8004666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <SystemClock_Config+0xd0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004678:	2302      	movs	r3, #2
 800467a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800467c:	2301      	movs	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004680:	2310      	movs	r3, #16
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004684:	2302      	movs	r3, #2
 8004686:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004688:	2300      	movs	r3, #0
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800468c:	2308      	movs	r3, #8
 800468e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8004690:	23a8      	movs	r3, #168	; 0xa8
 8004692:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004694:	2302      	movs	r3, #2
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8004698:	2304      	movs	r3, #4
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800469c:	f107 0320 	add.w	r3, r7, #32
 80046a0:	4618      	mov	r0, r3
 80046a2:	f003 fa95 	bl	8007bd0 <HAL_RCC_OscConfig>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <SystemClock_Config+0x94>
		Error_Handler();
 80046ac:	f001 f930 	bl	8005910 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80046b0:	230f      	movs	r3, #15
 80046b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046b4:	2302      	movs	r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80046c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	2105      	movs	r1, #5
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 fcf6 	bl	80080c0 <HAL_RCC_ClockConfig>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <SystemClock_Config+0xc2>
		Error_Handler();
 80046da:	f001 f919 	bl	8005910 <Error_Handler>
	}
}
 80046de:	bf00      	nop
 80046e0:	3750      	adds	r7, #80	; 0x50
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40007000 	.word	0x40007000

080046f0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2120      	movs	r1, #32
 80046f8:	480e      	ldr	r0, [pc, #56]	; (8004734 <system_init+0x44>)
 80046fa:	f002 f947 	bl	800698c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	480c      	ldr	r0, [pc, #48]	; (8004734 <system_init+0x44>)
 8004704:	f002 f942 	bl	800698c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8004708:	2200      	movs	r2, #0
 800470a:	2110      	movs	r1, #16
 800470c:	4809      	ldr	r0, [pc, #36]	; (8004734 <system_init+0x44>)
 800470e:	f002 f93d 	bl	800698c <HAL_GPIO_WritePin>
	initTimer2();
 8004712:	f001 f953 	bl	80059bc <initTimer2>
	initTimer4();
 8004716:	f001 f95b 	bl	80059d0 <initTimer4>
	led7_init();
 800471a:	f7fd ff25 	bl	8002568 <led7_init>
	button_init();
 800471e:	f7fc fc17 	bl	8000f50 <button_init>
	initLCD();
 8004722:	f7fd fc15 	bl	8001f50 <initLCD>
	initds3231();
 8004726:	f7fc fc8b 	bl	8001040 <initds3231>
	uart_init_rs232();
 800472a:	f001 fc23 	bl	8005f74 <uart_init_rs232>
}
 800472e:	bf00      	nop
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000

08004738 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug() {
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1) % 20;
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <test_LedDebug+0x3c>)
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <test_LedDebug+0x40>)
 8004744:	fb83 1302 	smull	r1, r3, r3, r2
 8004748:	10d9      	asrs	r1, r3, #3
 800474a:	17d3      	asrs	r3, r2, #31
 800474c:	1ac9      	subs	r1, r1, r3
 800474e:	460b      	mov	r3, r1
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	1ad1      	subs	r1, r2, r3
 8004758:	b28a      	uxth	r2, r1
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <test_LedDebug+0x3c>)
 800475c:	801a      	strh	r2, [r3, #0]
	if (count_led_debug == 0) {
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <test_LedDebug+0x3c>)
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d103      	bne.n	800476e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8004766:	2110      	movs	r1, #16
 8004768:	4804      	ldr	r0, [pc, #16]	; (800477c <test_LedDebug+0x44>)
 800476a:	f002 f928 	bl	80069be <HAL_GPIO_TogglePin>
	}
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200001a8 	.word	0x200001a8
 8004778:	66666667 	.word	0x66666667
 800477c:	40021000 	.word	0x40021000

08004780 <setTime>:
	}
}

/* USER CODE END 4 */
void setTime(uint8_t *second, uint8_t *minute, uint8_t *hour, uint8_t *day,
		uint8_t *date, uint8_t *month, uint16_t *year) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
	ds3231SetSec(*second);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fd02 	bl	800119c <ds3231SetSec>
	ds3231SetMin(*minute);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fc fd0b 	bl	80011b8 <ds3231SetMin>
	ds3231SetHour(*hour);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc fd14 	bl	80011d4 <ds3231SetHour>
	ds3231SetDay(*day);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fc fd31 	bl	8001218 <ds3231SetDay>
	ds3231SetDate(*date);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc fd3a 	bl	8001234 <ds3231SetDate>
	ds3231SetMonth(*month);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fc fd43 	bl	8001250 <ds3231SetMonth>
	ds3231SetYear(*year);
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc fd78 	bl	80012c4 <ds3231SetYear>
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	0000      	movs	r0, r0
	...

080047e0 <displayClock>:

void displayClock(int x_coor, int y_coor, int radius) {
 80047e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e4:	b08e      	sub	sp, #56	; 0x38
 80047e6:	af04      	add	r7, sp, #16
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
	const uint8_t char_size = 24;
 80047ee:	2318      	movs	r3, #24
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	lcdDrawCircle(x_coor, y_coor, DARKBLUE, radius + 2, 1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3302      	adds	r3, #2
 80047f8:	2201      	movs	r2, #1
 80047fa:	9200      	str	r2, [sp, #0]
 80047fc:	f240 12cf 	movw	r2, #463	; 0x1cf
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f7fd fd8f 	bl	8002326 <lcdDrawCircle>
	lcdDrawCircle(x_coor, y_coor, WHITE, radius, 1);
 8004808:	2301      	movs	r3, #1
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7fd fd86 	bl	8002326 <lcdDrawCircle>

	for (int i = 0; i < 12; i++) {
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	e086      	b.n	800492e <displayClock+0x14e>
		float angle = (i * 30) * (PI / 180); // Convert angle to radians
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe72 	bl	8000514 <__aeabi_i2d>
 8004830:	a345      	add	r3, pc, #276	; (adr r3, 8004948 <displayClock+0x168>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fb fed7 	bl	80005e8 <__aeabi_dmul>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	f7fc f9b3 	bl	8000bac <__aeabi_d2f>
 8004846:	4603      	mov	r3, r0
 8004848:	61fb      	str	r3, [r7, #28]
		int x = x_coor + (radius - 15) * sin(angle);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7fb fe62 	bl	8000514 <__aeabi_i2d>
 8004850:	4680      	mov	r8, r0
 8004852:	4689      	mov	r9, r1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b0f      	subs	r3, #15
 8004858:	4618      	mov	r0, r3
 800485a:	f7fb fe5b 	bl	8000514 <__aeabi_i2d>
 800485e:	4682      	mov	sl, r0
 8004860:	468b      	mov	fp, r1
 8004862:	69f8      	ldr	r0, [r7, #28]
 8004864:	f7fb fe68 	bl	8000538 <__aeabi_f2d>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	ec43 2b10 	vmov	d0, r2, r3
 8004870:	f006 feee 	bl	800b650 <sin>
 8004874:	ec53 2b10 	vmov	r2, r3, d0
 8004878:	4650      	mov	r0, sl
 800487a:	4659      	mov	r1, fp
 800487c:	f7fb feb4 	bl	80005e8 <__aeabi_dmul>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4640      	mov	r0, r8
 8004886:	4649      	mov	r1, r9
 8004888:	f7fb fcf8 	bl	800027c <__adddf3>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f7fc f942 	bl	8000b1c <__aeabi_d2iz>
 8004898:	4603      	mov	r3, r0
 800489a:	61bb      	str	r3, [r7, #24]
		int y = y_coor + (radius - 15) * -cos(angle);
 800489c:	68b8      	ldr	r0, [r7, #8]
 800489e:	f7fb fe39 	bl	8000514 <__aeabi_i2d>
 80048a2:	4680      	mov	r8, r0
 80048a4:	4689      	mov	r9, r1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3b0f      	subs	r3, #15
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fe32 	bl	8000514 <__aeabi_i2d>
 80048b0:	4682      	mov	sl, r0
 80048b2:	468b      	mov	fp, r1
 80048b4:	69f8      	ldr	r0, [r7, #28]
 80048b6:	f7fb fe3f 	bl	8000538 <__aeabi_f2d>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	ec43 2b10 	vmov	d0, r2, r3
 80048c2:	f006 fe71 	bl	800b5a8 <cos>
 80048c6:	ec53 2b10 	vmov	r2, r3, d0
 80048ca:	4614      	mov	r4, r2
 80048cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80048d0:	4622      	mov	r2, r4
 80048d2:	462b      	mov	r3, r5
 80048d4:	4650      	mov	r0, sl
 80048d6:	4659      	mov	r1, fp
 80048d8:	f7fb fe86 	bl	80005e8 <__aeabi_dmul>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fb fcca 	bl	800027c <__adddf3>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	f7fc f914 	bl	8000b1c <__aeabi_d2iz>
 80048f4:	4603      	mov	r3, r0
 80048f6:	617b      	str	r3, [r7, #20]

		lcdShowIntNumCenter(x, y, ((i == 0) ? 12 : i), 2, BLACK, WHITE,
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	b298      	uxth	r0, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	b299      	uxth	r1, r3
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <displayClock+0x12c>
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	b29a      	uxth	r2, r3
 800490a:	e000      	b.n	800490e <displayClock+0x12e>
 800490c:	220c      	movs	r2, #12
 800490e:	2301      	movs	r3, #1
 8004910:	9303      	str	r3, [sp, #12]
 8004912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004916:	9302      	str	r3, [sp, #8]
 8004918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800491c:	9301      	str	r3, [sp, #4]
 800491e:	2300      	movs	r3, #0
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	2302      	movs	r3, #2
 8004924:	f7fd fa5c 	bl	8001de0 <lcdShowIntNumCenter>
	for (int i = 0; i < 12; i++) {
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	2b0b      	cmp	r3, #11
 8004932:	f77f af75 	ble.w	8004820 <displayClock+0x40>
				char_size, 1);
	}
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	3728      	adds	r7, #40	; 0x28
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	a2529d39 	.word	0xa2529d39
 800494c:	3f91df46 	.word	0x3f91df46

08004950 <displaySecClockwise>:
 * @param *second, *minute a pointer to variable store time value
 * @param color color of clockwise
 * @return float angle of clockwise
 */
float displaySecClockwise(int x_coor, int y_coor, int length,
		const uint8_t *second, uint16_t color) {
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	b08b      	sub	sp, #44	; 0x2c
 8004956:	af02      	add	r7, sp, #8
 8004958:	6178      	str	r0, [r7, #20]
 800495a:	6139      	str	r1, [r7, #16]
 800495c:	60fa      	str	r2, [r7, #12]
 800495e:	60bb      	str	r3, [r7, #8]
	static float angle_sec;
	int x, y;

	x = x_coor + (length) * sin(angle_sec);
 8004960:	6978      	ldr	r0, [r7, #20]
 8004962:	f7fb fdd7 	bl	8000514 <__aeabi_i2d>
 8004966:	4682      	mov	sl, r0
 8004968:	468b      	mov	fp, r1
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7fb fdd2 	bl	8000514 <__aeabi_i2d>
 8004970:	e9c7 0100 	strd	r0, r1, [r7]
 8004974:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <displaySecClockwise+0x1f0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7fb fddd 	bl	8000538 <__aeabi_f2d>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	ec43 2b10 	vmov	d0, r2, r3
 8004986:	f006 fe63 	bl	800b650 <sin>
 800498a:	ec53 2b10 	vmov	r2, r3, d0
 800498e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004992:	f7fb fe29 	bl	80005e8 <__aeabi_dmul>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4650      	mov	r0, sl
 800499c:	4659      	mov	r1, fp
 800499e:	f7fb fc6d 	bl	800027c <__adddf3>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fc f8b7 	bl	8000b1c <__aeabi_d2iz>
 80049ae:	4603      	mov	r3, r0
 80049b0:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_sec);
 80049b2:	6938      	ldr	r0, [r7, #16]
 80049b4:	f7fb fdae 	bl	8000514 <__aeabi_i2d>
 80049b8:	4682      	mov	sl, r0
 80049ba:	468b      	mov	fp, r1
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7fb fda9 	bl	8000514 <__aeabi_i2d>
 80049c2:	e9c7 0100 	strd	r0, r1, [r7]
 80049c6:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <displaySecClockwise+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fdb4 	bl	8000538 <__aeabi_f2d>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	ec43 2b10 	vmov	d0, r2, r3
 80049d8:	f006 fde6 	bl	800b5a8 <cos>
 80049dc:	ec53 2b10 	vmov	r2, r3, d0
 80049e0:	4690      	mov	r8, r2
 80049e2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80049e6:	4642      	mov	r2, r8
 80049e8:	464b      	mov	r3, r9
 80049ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ee:	f7fb fdfb 	bl	80005e8 <__aeabi_dmul>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4650      	mov	r0, sl
 80049f8:	4659      	mov	r1, fp
 80049fa:	f7fb fc3f 	bl	800027c <__adddf3>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	f7fc f889 	bl	8000b1c <__aeabi_d2iz>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	b298      	uxth	r0, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	b299      	uxth	r1, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004a22:	9600      	str	r6, [sp, #0]
 8004a24:	f7fd f86b 	bl	8001afe <lcdDrawLine>

	angle_sec = (*second * 6) * (PI / 180);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4613      	mov	r3, r2
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fb fd6c 	bl	8000514 <__aeabi_i2d>
 8004a3c:	a33e      	add	r3, pc, #248	; (adr r3, 8004b38 <displaySecClockwise+0x1e8>)
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f7fb fdd1 	bl	80005e8 <__aeabi_dmul>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7fc f8ad 	bl	8000bac <__aeabi_d2f>
 8004a52:	4603      	mov	r3, r0
 8004a54:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <displaySecClockwise+0x1f0>)
 8004a56:	6013      	str	r3, [r2, #0]
	x = x_coor + (length) * sin(angle_sec);
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7fb fd5b 	bl	8000514 <__aeabi_i2d>
 8004a5e:	4680      	mov	r8, r0
 8004a60:	4689      	mov	r9, r1
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7fb fd56 	bl	8000514 <__aeabi_i2d>
 8004a68:	4682      	mov	sl, r0
 8004a6a:	468b      	mov	fp, r1
 8004a6c:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <displaySecClockwise+0x1f0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd61 	bl	8000538 <__aeabi_f2d>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	ec43 2b10 	vmov	d0, r2, r3
 8004a7e:	f006 fde7 	bl	800b650 <sin>
 8004a82:	ec53 2b10 	vmov	r2, r3, d0
 8004a86:	4650      	mov	r0, sl
 8004a88:	4659      	mov	r1, fp
 8004a8a:	f7fb fdad 	bl	80005e8 <__aeabi_dmul>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4640      	mov	r0, r8
 8004a94:	4649      	mov	r1, r9
 8004a96:	f7fb fbf1 	bl	800027c <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f7fc f83b 	bl	8000b1c <__aeabi_d2iz>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_sec);
 8004aaa:	6938      	ldr	r0, [r7, #16]
 8004aac:	f7fb fd32 	bl	8000514 <__aeabi_i2d>
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7fb fd2d 	bl	8000514 <__aeabi_i2d>
 8004aba:	4682      	mov	sl, r0
 8004abc:	468b      	mov	fp, r1
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <displaySecClockwise+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fb fd38 	bl	8000538 <__aeabi_f2d>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	ec43 2b10 	vmov	d0, r2, r3
 8004ad0:	f006 fd6a 	bl	800b5a8 <cos>
 8004ad4:	ec53 2b10 	vmov	r2, r3, d0
 8004ad8:	4614      	mov	r4, r2
 8004ada:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	4650      	mov	r0, sl
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	f7fb fd7f 	bl	80005e8 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4640      	mov	r0, r8
 8004af0:	4649      	mov	r1, r9
 8004af2:	f7fb fbc3 	bl	800027c <__adddf3>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fc f80d 	bl	8000b1c <__aeabi_d2iz>
 8004b02:	4603      	mov	r3, r0
 8004b04:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, color);
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	b298      	uxth	r0, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	b299      	uxth	r1, r3
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	b29c      	uxth	r4, r3
 8004b16:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	f7fc ffee 	bl	8001afe <lcdDrawLine>

	return angle_sec;
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <displaySecClockwise+0x1f0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	ee07 3a90 	vmov	s15, r3
}
 8004b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2e:	3724      	adds	r7, #36	; 0x24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b36:	bf00      	nop
 8004b38:	a2529d39 	.word	0xa2529d39
 8004b3c:	3f91df46 	.word	0x3f91df46
 8004b40:	200001b8 	.word	0x200001b8
 8004b44:	00000000 	.word	0x00000000

08004b48 <displayMinClockwise>:
float displayMinClockwise(int x_coor, int y_coor, int length,
		const uint8_t *second, const uint8_t *minute, uint16_t color) {
 8004b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b4c:	b08b      	sub	sp, #44	; 0x2c
 8004b4e:	af02      	add	r7, sp, #8
 8004b50:	6178      	str	r0, [r7, #20]
 8004b52:	6139      	str	r1, [r7, #16]
 8004b54:	60fa      	str	r2, [r7, #12]
 8004b56:	60bb      	str	r3, [r7, #8]
	static float angle_min;
	int x, y;

	x = x_coor + (length) * sin(angle_min);
 8004b58:	6978      	ldr	r0, [r7, #20]
 8004b5a:	f7fb fcdb 	bl	8000514 <__aeabi_i2d>
 8004b5e:	4682      	mov	sl, r0
 8004b60:	468b      	mov	fp, r1
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7fb fcd6 	bl	8000514 <__aeabi_i2d>
 8004b68:	e9c7 0100 	strd	r0, r1, [r7]
 8004b6c:	4b80      	ldr	r3, [pc, #512]	; (8004d70 <displayMinClockwise+0x228>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fb fce1 	bl	8000538 <__aeabi_f2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	ec43 2b10 	vmov	d0, r2, r3
 8004b7e:	f006 fd67 	bl	800b650 <sin>
 8004b82:	ec53 2b10 	vmov	r2, r3, d0
 8004b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b8a:	f7fb fd2d 	bl	80005e8 <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	f7fb fb71 	bl	800027c <__adddf3>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f7fb ffbb 	bl	8000b1c <__aeabi_d2iz>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_min);
 8004baa:	6938      	ldr	r0, [r7, #16]
 8004bac:	f7fb fcb2 	bl	8000514 <__aeabi_i2d>
 8004bb0:	4682      	mov	sl, r0
 8004bb2:	468b      	mov	fp, r1
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7fb fcad 	bl	8000514 <__aeabi_i2d>
 8004bba:	e9c7 0100 	strd	r0, r1, [r7]
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <displayMinClockwise+0x228>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fb fcb8 	bl	8000538 <__aeabi_f2d>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	ec43 2b10 	vmov	d0, r2, r3
 8004bd0:	f006 fcea 	bl	800b5a8 <cos>
 8004bd4:	ec53 2b10 	vmov	r2, r3, d0
 8004bd8:	4690      	mov	r8, r2
 8004bda:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004be6:	f7fb fcff 	bl	80005e8 <__aeabi_dmul>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4650      	mov	r0, sl
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	f7fb fb43 	bl	800027c <__adddf3>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f7fb ff8d 	bl	8000b1c <__aeabi_d2iz>
 8004c02:	4603      	mov	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	b298      	uxth	r0, r3
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	b299      	uxth	r1, r3
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004c1a:	9600      	str	r6, [sp, #0]
 8004c1c:	f7fc ff6f 	bl	8001afe <lcdDrawLine>

	angle_min = ((*minute + *second / 60.0) * 6) * (PI / 180);
 8004c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fb fc75 	bl	8000514 <__aeabi_i2d>
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	4689      	mov	r9, r1
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fb fc6e 	bl	8000514 <__aeabi_i2d>
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <displayMinClockwise+0x22c>)
 8004c3e:	f7fb fdfd 	bl	800083c <__aeabi_ddiv>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4640      	mov	r0, r8
 8004c48:	4649      	mov	r1, r9
 8004c4a:	f7fb fb17 	bl	800027c <__adddf3>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	4b47      	ldr	r3, [pc, #284]	; (8004d78 <displayMinClockwise+0x230>)
 8004c5c:	f7fb fcc4 	bl	80005e8 <__aeabi_dmul>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4610      	mov	r0, r2
 8004c66:	4619      	mov	r1, r3
 8004c68:	a33f      	add	r3, pc, #252	; (adr r3, 8004d68 <displayMinClockwise+0x220>)
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f7fb fcbb 	bl	80005e8 <__aeabi_dmul>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f7fb ff97 	bl	8000bac <__aeabi_d2f>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4a3b      	ldr	r2, [pc, #236]	; (8004d70 <displayMinClockwise+0x228>)
 8004c82:	6013      	str	r3, [r2, #0]
	x = x_coor + (length) * sin(angle_min);
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7fb fc45 	bl	8000514 <__aeabi_i2d>
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	4689      	mov	r9, r1
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f7fb fc40 	bl	8000514 <__aeabi_i2d>
 8004c94:	4682      	mov	sl, r0
 8004c96:	468b      	mov	fp, r1
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <displayMinClockwise+0x228>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc4b 	bl	8000538 <__aeabi_f2d>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	ec43 2b10 	vmov	d0, r2, r3
 8004caa:	f006 fcd1 	bl	800b650 <sin>
 8004cae:	ec53 2b10 	vmov	r2, r3, d0
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	f7fb fc97 	bl	80005e8 <__aeabi_dmul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	f7fb fadb 	bl	800027c <__adddf3>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f7fb ff25 	bl	8000b1c <__aeabi_d2iz>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_min);
 8004cd6:	6938      	ldr	r0, [r7, #16]
 8004cd8:	f7fb fc1c 	bl	8000514 <__aeabi_i2d>
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4689      	mov	r9, r1
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7fb fc17 	bl	8000514 <__aeabi_i2d>
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	468b      	mov	fp, r1
 8004cea:	4b21      	ldr	r3, [pc, #132]	; (8004d70 <displayMinClockwise+0x228>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fc22 	bl	8000538 <__aeabi_f2d>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	ec43 2b10 	vmov	d0, r2, r3
 8004cfc:	f006 fc54 	bl	800b5a8 <cos>
 8004d00:	ec53 2b10 	vmov	r2, r3, d0
 8004d04:	4614      	mov	r4, r2
 8004d06:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	4650      	mov	r0, sl
 8004d10:	4659      	mov	r1, fp
 8004d12:	f7fb fc69 	bl	80005e8 <__aeabi_dmul>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb faad 	bl	800027c <__adddf3>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7fb fef7 	bl	8000b1c <__aeabi_d2iz>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, color);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	b298      	uxth	r0, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	b299      	uxth	r1, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	b29c      	uxth	r4, r3
 8004d42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4623      	mov	r3, r4
 8004d4a:	f7fc fed8 	bl	8001afe <lcdDrawLine>

	return angle_min;
 8004d4e:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <displayMinClockwise+0x228>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	ee07 3a90 	vmov	s15, r3
}
 8004d56:	eeb0 0a67 	vmov.f32	s0, s15
 8004d5a:	3724      	adds	r7, #36	; 0x24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	f3af 8000 	nop.w
 8004d68:	a2529d39 	.word	0xa2529d39
 8004d6c:	3f91df46 	.word	0x3f91df46
 8004d70:	200001bc 	.word	0x200001bc
 8004d74:	404e0000 	.word	0x404e0000
 8004d78:	40180000 	.word	0x40180000
 8004d7c:	00000000 	.word	0x00000000

08004d80 <displayHourClockwise>:
float displayHourClockwise(int x_coor, int y_coor, int length,
		const uint8_t *minute, const uint8_t *hour, uint16_t color) {
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	b08b      	sub	sp, #44	; 0x2c
 8004d86:	af02      	add	r7, sp, #8
 8004d88:	6178      	str	r0, [r7, #20]
 8004d8a:	6139      	str	r1, [r7, #16]
 8004d8c:	60fa      	str	r2, [r7, #12]
 8004d8e:	60bb      	str	r3, [r7, #8]
	static float angle_hour;
	int x, y;

	x = x_coor + (length) * sin(angle_hour);
 8004d90:	6978      	ldr	r0, [r7, #20]
 8004d92:	f7fb fbbf 	bl	8000514 <__aeabi_i2d>
 8004d96:	4682      	mov	sl, r0
 8004d98:	468b      	mov	fp, r1
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7fb fbba 	bl	8000514 <__aeabi_i2d>
 8004da0:	e9c7 0100 	strd	r0, r1, [r7]
 8004da4:	4b84      	ldr	r3, [pc, #528]	; (8004fb8 <displayHourClockwise+0x238>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fb fbc5 	bl	8000538 <__aeabi_f2d>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	ec43 2b10 	vmov	d0, r2, r3
 8004db6:	f006 fc4b 	bl	800b650 <sin>
 8004dba:	ec53 2b10 	vmov	r2, r3, d0
 8004dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc2:	f7fb fc11 	bl	80005e8 <__aeabi_dmul>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4650      	mov	r0, sl
 8004dcc:	4659      	mov	r1, fp
 8004dce:	f7fb fa55 	bl	800027c <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f7fb fe9f 	bl	8000b1c <__aeabi_d2iz>
 8004dde:	4603      	mov	r3, r0
 8004de0:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_hour);
 8004de2:	6938      	ldr	r0, [r7, #16]
 8004de4:	f7fb fb96 	bl	8000514 <__aeabi_i2d>
 8004de8:	4682      	mov	sl, r0
 8004dea:	468b      	mov	fp, r1
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7fb fb91 	bl	8000514 <__aeabi_i2d>
 8004df2:	e9c7 0100 	strd	r0, r1, [r7]
 8004df6:	4b70      	ldr	r3, [pc, #448]	; (8004fb8 <displayHourClockwise+0x238>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fb fb9c 	bl	8000538 <__aeabi_f2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	ec43 2b10 	vmov	d0, r2, r3
 8004e08:	f006 fbce 	bl	800b5a8 <cos>
 8004e0c:	ec53 2b10 	vmov	r2, r3, d0
 8004e10:	4690      	mov	r8, r2
 8004e12:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8004e16:	4642      	mov	r2, r8
 8004e18:	464b      	mov	r3, r9
 8004e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e1e:	f7fb fbe3 	bl	80005e8 <__aeabi_dmul>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4650      	mov	r0, sl
 8004e28:	4659      	mov	r1, fp
 8004e2a:	f7fb fa27 	bl	800027c <__adddf3>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	4610      	mov	r0, r2
 8004e34:	4619      	mov	r1, r3
 8004e36:	f7fb fe71 	bl	8000b1c <__aeabi_d2iz>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	b298      	uxth	r0, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	b299      	uxth	r1, r3
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8004e52:	9600      	str	r6, [sp, #0]
 8004e54:	f7fc fe53 	bl	8001afe <lcdDrawLine>

	angle_hour = ((*hour % 12 + *minute / 60.0) * 30) * (PI / 180); // 360 degrees / 12 hours = 30 degrees per hour
 8004e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <displayHourClockwise+0x23c>)
 8004e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e62:	08d9      	lsrs	r1, r3, #3
 8004e64:	460b      	mov	r3, r1
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	440b      	add	r3, r1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fb fb4f 	bl	8000514 <__aeabi_i2d>
 8004e76:	4680      	mov	r8, r0
 8004e78:	4689      	mov	r9, r1
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fb fb48 	bl	8000514 <__aeabi_i2d>
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <displayHourClockwise+0x240>)
 8004e8a:	f7fb fcd7 	bl	800083c <__aeabi_ddiv>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4640      	mov	r0, r8
 8004e94:	4649      	mov	r1, r9
 8004e96:	f7fb f9f1 	bl	800027c <__adddf3>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <displayHourClockwise+0x244>)
 8004ea8:	f7fb fb9e 	bl	80005e8 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	a33e      	add	r3, pc, #248	; (adr r3, 8004fb0 <displayHourClockwise+0x230>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb fb95 	bl	80005e8 <__aeabi_dmul>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f7fb fe71 	bl	8000bac <__aeabi_d2f>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	4a3a      	ldr	r2, [pc, #232]	; (8004fb8 <displayHourClockwise+0x238>)
 8004ece:	6013      	str	r3, [r2, #0]
	x = x_coor + (length) * sin(angle_hour);
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	f7fb fb1f 	bl	8000514 <__aeabi_i2d>
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	4689      	mov	r9, r1
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7fb fb1a 	bl	8000514 <__aeabi_i2d>
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	468b      	mov	fp, r1
 8004ee4:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <displayHourClockwise+0x238>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb25 	bl	8000538 <__aeabi_f2d>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	ec43 2b10 	vmov	d0, r2, r3
 8004ef6:	f006 fbab 	bl	800b650 <sin>
 8004efa:	ec53 2b10 	vmov	r2, r3, d0
 8004efe:	4650      	mov	r0, sl
 8004f00:	4659      	mov	r1, fp
 8004f02:	f7fb fb71 	bl	80005e8 <__aeabi_dmul>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb f9b5 	bl	800027c <__adddf3>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fb fdff 	bl	8000b1c <__aeabi_d2iz>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_hour);
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f7fb faf6 	bl	8000514 <__aeabi_i2d>
 8004f28:	4680      	mov	r8, r0
 8004f2a:	4689      	mov	r9, r1
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7fb faf1 	bl	8000514 <__aeabi_i2d>
 8004f32:	4682      	mov	sl, r0
 8004f34:	468b      	mov	fp, r1
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <displayHourClockwise+0x238>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fb fafc 	bl	8000538 <__aeabi_f2d>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	ec43 2b10 	vmov	d0, r2, r3
 8004f48:	f006 fb2e 	bl	800b5a8 <cos>
 8004f4c:	ec53 2b10 	vmov	r2, r3, d0
 8004f50:	4614      	mov	r4, r2
 8004f52:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004f56:	4622      	mov	r2, r4
 8004f58:	462b      	mov	r3, r5
 8004f5a:	4650      	mov	r0, sl
 8004f5c:	4659      	mov	r1, fp
 8004f5e:	f7fb fb43 	bl	80005e8 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4640      	mov	r0, r8
 8004f68:	4649      	mov	r1, r9
 8004f6a:	f7fb f987 	bl	800027c <__adddf3>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	f7fb fdd1 	bl	8000b1c <__aeabi_d2iz>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, color);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	b298      	uxth	r0, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	b299      	uxth	r1, r3
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	b29c      	uxth	r4, r3
 8004f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4623      	mov	r3, r4
 8004f96:	f7fc fdb2 	bl	8001afe <lcdDrawLine>

	return angle_hour;
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <displayHourClockwise+0x238>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	ee07 3a90 	vmov	s15, r3
}
 8004fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa6:	3724      	adds	r7, #36	; 0x24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	a2529d39 	.word	0xa2529d39
 8004fb4:	3f91df46 	.word	0x3f91df46
 8004fb8:	200001c0 	.word	0x200001c0
 8004fbc:	aaaaaaab 	.word	0xaaaaaaab
 8004fc0:	404e0000 	.word	0x404e0000
 8004fc4:	403e0000 	.word	0x403e0000

08004fc8 <displayTime>:

void displayTime(int x_coor, int y_coor, const uint8_t *second,
		const uint8_t *minute, const uint8_t *hour, uint8_t char_size,
		uint16_t color_sec, uint16_t color_min, uint16_t color_hour) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af04      	add	r7, sp, #16
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *hour, 2, color_hour,
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	7f3b      	ldrb	r3, [r7, #28]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	b298      	uxth	r0, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	b299      	uxth	r1, r3
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9303      	str	r3, [sp, #12]
 8004ff4:	7f3b      	ldrb	r3, [r7, #28]
 8004ff6:	9302      	str	r3, [sp, #8]
 8004ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2302      	movs	r3, #2
 8005004:	f7fc feec 	bl	8001de0 <lcdShowIntNumCenter>
	WHITE, char_size, 0);
	lcdShowIntNumCenter(x_coor, y_coor, *minute, 2, color_min, WHITE, char_size,
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	b298      	uxth	r0, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	b299      	uxth	r1, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b29a      	uxth	r2, r3
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	7f3b      	ldrb	r3, [r7, #28]
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2302      	movs	r3, #2
 800502a:	f7fc fed9 	bl	8001de0 <lcdShowIntNumCenter>
			0);
	lcdShowIntNumCenter(x_coor + char_size * 2, y_coor, *second, 2, color_sec,
 800502e:	7f3b      	ldrb	r3, [r7, #28]
 8005030:	b29b      	uxth	r3, r3
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	b29b      	uxth	r3, r3
 800503a:	4413      	add	r3, r2
 800503c:	b298      	uxth	r0, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	b299      	uxth	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	2300      	movs	r3, #0
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	7f3b      	ldrb	r3, [r7, #28]
 800504e:	9302      	str	r3, [sp, #8]
 8005050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	8c3b      	ldrh	r3, [r7, #32]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	2302      	movs	r3, #2
 800505c:	f7fc fec0 	bl	8001de0 <lcdShowIntNumCenter>
	WHITE, char_size, 0);

	lcdShowStringCenter(x_coor + char_size, y_coor, ":", BLACK, WHITE,
 8005060:	7f3b      	ldrb	r3, [r7, #28]
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b29b      	uxth	r3, r3
 8005068:	4413      	add	r3, r2
 800506a:	b298      	uxth	r0, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	b299      	uxth	r1, r3
 8005070:	2301      	movs	r3, #1
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	7f3b      	ldrb	r3, [r7, #28]
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	2300      	movs	r3, #0
 8005080:	4a0f      	ldr	r2, [pc, #60]	; (80050c0 <displayTime+0xf8>)
 8005082:	f7fd fa21 	bl	80024c8 <lcdShowStringCenter>
			char_size, 1);
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, ":",
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	b29a      	uxth	r2, r3
 800508a:	7f3b      	ldrb	r3, [r7, #28]
 800508c:	b29b      	uxth	r3, r3
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	b29a      	uxth	r2, r3
 8005096:	7f3b      	ldrb	r3, [r7, #28]
 8005098:	b29b      	uxth	r3, r3
 800509a:	4413      	add	r3, r2
 800509c:	b298      	uxth	r0, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	b299      	uxth	r1, r3
 80050a2:	2301      	movs	r3, #1
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	7f3b      	ldrb	r3, [r7, #28]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2300      	movs	r3, #0
 80050b2:	4a03      	ldr	r2, [pc, #12]	; (80050c0 <displayTime+0xf8>)
 80050b4:	f7fd fa08 	bl	80024c8 <lcdShowStringCenter>
	BLACK, WHITE, char_size, 1);
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	0800c938 	.word	0x0800c938

080050c4 <displayDate>:

void displayDate(int x_coor, int y_coor, const uint8_t *date,
		const uint8_t *month, const uint16_t *year, uint8_t char_size,
		uint16_t color_date, uint16_t color_month, uint16_t color_year) {
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af04      	add	r7, sp, #16
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *date, 2, color_date,
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050da:	b29b      	uxth	r3, r3
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	b29b      	uxth	r3, r3
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	b298      	uxth	r0, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	b299      	uxth	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	2300      	movs	r3, #0
 80050f0:	9303      	str	r3, [sp, #12]
 80050f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050f6:	9302      	str	r3, [sp, #8]
 80050f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2302      	movs	r3, #2
 8005104:	f7fc fe6c 	bl	8001de0 <lcdShowIntNumCenter>
	WHITE, char_size, 0);
	lcdShowIntNumCenter(x_coor, y_coor, *month, 2, color_month, WHITE,
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	b298      	uxth	r0, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	b299      	uxth	r1, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b29a      	uxth	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2302      	movs	r3, #2
 800512c:	f7fc fe58 	bl	8001de0 <lcdShowIntNumCenter>
			char_size, 0);
	lcdShowIntNumCenter(x_coor + char_size * 2 + char_size / 2.0, y_coor, *year,
 8005130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005134:	005a      	lsls	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb f9ea 	bl	8000514 <__aeabi_i2d>
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005148:	4618      	mov	r0, r3
 800514a:	f7fb f9e3 	bl	8000514 <__aeabi_i2d>
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005156:	f7fb fb71 	bl	800083c <__aeabi_ddiv>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb f88b 	bl	800027c <__adddf3>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	f7fb fcfd 	bl	8000b6c <__aeabi_d2uiz>
 8005172:	4603      	mov	r3, r0
 8005174:	b298      	uxth	r0, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	b299      	uxth	r1, r3
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	9303      	str	r3, [sp, #12]
 8005182:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005186:	9302      	str	r3, [sp, #8]
 8005188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800518c:	9301      	str	r3, [sp, #4]
 800518e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	2304      	movs	r3, #4
 8005194:	f7fc fe24 	bl	8001de0 <lcdShowIntNumCenter>
			4, color_year, WHITE, char_size, 0);

	lcdShowStringCenter(x_coor + char_size, y_coor, "/", color_month, WHITE,
 8005198:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	4413      	add	r3, r2
 80051a4:	b298      	uxth	r0, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	b299      	uxth	r1, r3
 80051aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80051ac:	2301      	movs	r3, #1
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <displayDate+0x144>)
 80051c0:	f7fd f982 	bl	80024c8 <lcdShowStringCenter>
			char_size, 1);
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, "/",
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051da:	b29b      	uxth	r3, r3
 80051dc:	4413      	add	r3, r2
 80051de:	b298      	uxth	r0, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	b299      	uxth	r1, r3
 80051e4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80051e6:	2301      	movs	r3, #1
 80051e8:	9302      	str	r3, [sp, #8]
 80051ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	4a03      	ldr	r2, [pc, #12]	; (8005208 <displayDate+0x144>)
 80051fa:	f7fd f965 	bl	80024c8 <lcdShowStringCenter>
			color_month, WHITE, char_size, 1);
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bdb0      	pop	{r4, r5, r7, pc}
 8005206:	bf00      	nop
 8005208:	0800c940 	.word	0x0800c940

0800520c <displayDay>:
	lcdShowFloatNum(x_coor, y_coor, temperature, 4, color_temp, WHITE,
			char_size, 0);
	return;
}
void displayDay(int x_coor, int y_coor, const uint8_t *day, uint8_t char_size,
		uint16_t color_day) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af04      	add	r7, sp, #16
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	70fb      	strb	r3, [r7, #3]
	switch (*day) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	3b01      	subs	r3, #1
 8005220:	2b06      	cmp	r3, #6
 8005222:	f200 8089 	bhi.w	8005338 <displayDay+0x12c>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <displayDay+0x20>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005249 	.word	0x08005249
 8005230:	0800526b 	.word	0x0800526b
 8005234:	0800528d 	.word	0x0800528d
 8005238:	080052af 	.word	0x080052af
 800523c:	080052d1 	.word	0x080052d1
 8005240:	080052f3 	.word	0x080052f3
 8005244:	08005315 	.word	0x08005315
	case 1: {
		lcdShowString(x_coor, y_coor, "Sunday   ", color_day, WHITE, char_size,
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	b298      	uxth	r0, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	b299      	uxth	r1, r3
 8005250:	8b3a      	ldrh	r2, [r7, #24]
 8005252:	2300      	movs	r3, #0
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	78fb      	ldrb	r3, [r7, #3]
 8005258:	9301      	str	r3, [sp, #4]
 800525a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	4a37      	ldr	r2, [pc, #220]	; (8005340 <displayDay+0x134>)
 8005264:	f7fd f8cc 	bl	8002400 <lcdShowString>
				0);
		break;
 8005268:	e065      	b.n	8005336 <displayDay+0x12a>
	}
	case 2: {
		lcdShowString(x_coor, y_coor, "Monday   ", color_day, WHITE, char_size,
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	b298      	uxth	r0, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	b299      	uxth	r1, r3
 8005272:	8b3a      	ldrh	r2, [r7, #24]
 8005274:	2300      	movs	r3, #0
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	4a2f      	ldr	r2, [pc, #188]	; (8005344 <displayDay+0x138>)
 8005286:	f7fd f8bb 	bl	8002400 <lcdShowString>
				0);
		break;
 800528a:	e054      	b.n	8005336 <displayDay+0x12a>
	}
	case 3: {
		lcdShowString(x_coor, y_coor, "Tuesday  ", color_day, WHITE, char_size,
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	b298      	uxth	r0, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	b299      	uxth	r1, r3
 8005294:	8b3a      	ldrh	r2, [r7, #24]
 8005296:	2300      	movs	r3, #0
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	4a28      	ldr	r2, [pc, #160]	; (8005348 <displayDay+0x13c>)
 80052a8:	f7fd f8aa 	bl	8002400 <lcdShowString>
				0);
		break;
 80052ac:	e043      	b.n	8005336 <displayDay+0x12a>
	}
	case 4: {
		lcdShowString(x_coor, y_coor, "Wednesday", color_day, WHITE, char_size,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	b298      	uxth	r0, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	b299      	uxth	r1, r3
 80052b6:	8b3a      	ldrh	r2, [r7, #24]
 80052b8:	2300      	movs	r3, #0
 80052ba:	9302      	str	r3, [sp, #8]
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	4a20      	ldr	r2, [pc, #128]	; (800534c <displayDay+0x140>)
 80052ca:	f7fd f899 	bl	8002400 <lcdShowString>
				0);
		break;
 80052ce:	e032      	b.n	8005336 <displayDay+0x12a>
	}
	case 5: {
		lcdShowString(x_coor, y_coor, "Thursday ", color_day, WHITE, char_size,
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	b298      	uxth	r0, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	b299      	uxth	r1, r3
 80052d8:	8b3a      	ldrh	r2, [r7, #24]
 80052da:	2300      	movs	r3, #0
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	4a19      	ldr	r2, [pc, #100]	; (8005350 <displayDay+0x144>)
 80052ec:	f7fd f888 	bl	8002400 <lcdShowString>
				0);
		break;
 80052f0:	e021      	b.n	8005336 <displayDay+0x12a>
	}
	case 6: {
		lcdShowString(x_coor, y_coor, "Friday", color_day, WHITE, char_size, 0);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	b298      	uxth	r0, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	b299      	uxth	r1, r3
 80052fa:	8b3a      	ldrh	r2, [r7, #24]
 80052fc:	2300      	movs	r3, #0
 80052fe:	9302      	str	r3, [sp, #8]
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	4a11      	ldr	r2, [pc, #68]	; (8005354 <displayDay+0x148>)
 800530e:	f7fd f877 	bl	8002400 <lcdShowString>
		break;
 8005312:	e010      	b.n	8005336 <displayDay+0x12a>
	}
	case 7: {
		lcdShowString(x_coor, y_coor, "Saturday", color_day, WHITE, char_size,
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	b298      	uxth	r0, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	b299      	uxth	r1, r3
 800531c:	8b3a      	ldrh	r2, [r7, #24]
 800531e:	2300      	movs	r3, #0
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <displayDay+0x14c>)
 8005330:	f7fd f866 	bl	8002400 <lcdShowString>
				0);
		break;
 8005334:	bf00      	nop
	}
	}
	return;
 8005336:	bf00      	nop
 8005338:	bf00      	nop
}
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	0800c944 	.word	0x0800c944
 8005344:	0800c950 	.word	0x0800c950
 8005348:	0800c95c 	.word	0x0800c95c
 800534c:	0800c968 	.word	0x0800c968
 8005350:	0800c974 	.word	0x0800c974
 8005354:	0800c980 	.word	0x0800c980
 8005358:	0800c988 	.word	0x0800c988

0800535c <displayTimeLed7Seg>:

void displayTimeLed7Seg(const uint8_t *second, const uint8_t *minute,
		const uint8_t *hour) {
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
//		led7SegDebugTurnOn(8);
//	} else {
//		led7SegDebugTurnOff(8);
//	}

	led7_SetDigit(*hour / 10, 0, 0);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <displayTimeLed7Seg+0x88>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	08db      	lsrs	r3, r3, #3
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f7fd f98c 	bl	8002698 <led7_SetDigit>
	led7_SetDigit(*hour % 10, 1, 0);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <displayTimeLed7Seg+0x88>)
 8005386:	fba3 1302 	umull	r1, r3, r3, r2
 800538a:	08d9      	lsrs	r1, r3, #3
 800538c:	460b      	mov	r3, r1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2200      	movs	r2, #0
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f7fd f97b 	bl	8002698 <led7_SetDigit>

	led7_SetDigit(*minute / 10, 2, 0);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	4a0f      	ldr	r2, [pc, #60]	; (80053e4 <displayTimeLed7Seg+0x88>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	2102      	movs	r1, #2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fd f96f 	bl	8002698 <led7_SetDigit>
	led7_SetDigit(*minute % 10, 3, 0);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <displayTimeLed7Seg+0x88>)
 80053c0:	fba3 1302 	umull	r1, r3, r3, r2
 80053c4:	08d9      	lsrs	r1, r3, #3
 80053c6:	460b      	mov	r3, r1
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2200      	movs	r2, #0
 80053d4:	2103      	movs	r1, #3
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd f95e 	bl	8002698 <led7_SetDigit>

	return;
 80053dc:	bf00      	nop
}
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	cccccccd 	.word	0xcccccccd

080053e8 <increaseSec>:

void increaseSec() {
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
	if (set_time.second < 59) {
 80053ec:	4b17      	ldr	r3, [pc, #92]	; (800544c <increaseSec+0x64>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b3a      	cmp	r3, #58	; 0x3a
 80053f2:	d806      	bhi.n	8005402 <increaseSec+0x1a>
		set_time.second += 1;
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <increaseSec+0x64>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	4b13      	ldr	r3, [pc, #76]	; (800544c <increaseSec+0x64>)
 80053fe:	701a      	strb	r2, [r3, #0]
			} else {
				set_time.hour = 0;
			}
		}
	}
}
 8005400:	e01e      	b.n	8005440 <increaseSec+0x58>
		set_time.second = 0;
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <increaseSec+0x64>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
		if (set_time.minute < 59) {
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <increaseSec+0x64>)
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b3a      	cmp	r3, #58	; 0x3a
 800540e:	d806      	bhi.n	800541e <increaseSec+0x36>
			set_time.minute += 1;
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <increaseSec+0x64>)
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	3301      	adds	r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <increaseSec+0x64>)
 800541a:	705a      	strb	r2, [r3, #1]
}
 800541c:	e010      	b.n	8005440 <increaseSec+0x58>
			set_time.minute = 0;
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <increaseSec+0x64>)
 8005420:	2200      	movs	r2, #0
 8005422:	705a      	strb	r2, [r3, #1]
			if (set_time.hour < 23) {
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <increaseSec+0x64>)
 8005426:	789b      	ldrb	r3, [r3, #2]
 8005428:	2b16      	cmp	r3, #22
 800542a:	d806      	bhi.n	800543a <increaseSec+0x52>
				set_time.hour += 1;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <increaseSec+0x64>)
 800542e:	789b      	ldrb	r3, [r3, #2]
 8005430:	3301      	adds	r3, #1
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <increaseSec+0x64>)
 8005436:	709a      	strb	r2, [r3, #2]
}
 8005438:	e002      	b.n	8005440 <increaseSec+0x58>
				set_time.hour = 0;
 800543a:	4b04      	ldr	r3, [pc, #16]	; (800544c <increaseSec+0x64>)
 800543c:	2200      	movs	r2, #0
 800543e:	709a      	strb	r2, [r3, #2]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000000 	.word	0x20000000

08005450 <decreaseSec>:
void decreaseSec() {
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
	if (set_time.second > 0) {
 8005454:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <decreaseSec+0x64>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <decreaseSec+0x1a>
		set_time.second -= 1;
 800545c:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <decreaseSec+0x64>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <decreaseSec+0x64>)
 8005466:	701a      	strb	r2, [r3, #0]
			} else {
				set_time.hour = 23;
			}
		}
	}
}
 8005468:	e01e      	b.n	80054a8 <decreaseSec+0x58>
		set_time.second = 59;
 800546a:	4b12      	ldr	r3, [pc, #72]	; (80054b4 <decreaseSec+0x64>)
 800546c:	223b      	movs	r2, #59	; 0x3b
 800546e:	701a      	strb	r2, [r3, #0]
		if (set_time.minute > 0) {
 8005470:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <decreaseSec+0x64>)
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <decreaseSec+0x36>
			set_time.minute -= 1;
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <decreaseSec+0x64>)
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	3b01      	subs	r3, #1
 800547e:	b2da      	uxtb	r2, r3
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <decreaseSec+0x64>)
 8005482:	705a      	strb	r2, [r3, #1]
}
 8005484:	e010      	b.n	80054a8 <decreaseSec+0x58>
			set_time.minute = 59;
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <decreaseSec+0x64>)
 8005488:	223b      	movs	r2, #59	; 0x3b
 800548a:	705a      	strb	r2, [r3, #1]
			if (set_time.hour > 0) {
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <decreaseSec+0x64>)
 800548e:	789b      	ldrb	r3, [r3, #2]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d006      	beq.n	80054a2 <decreaseSec+0x52>
				set_time.hour -= 1;
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <decreaseSec+0x64>)
 8005496:	789b      	ldrb	r3, [r3, #2]
 8005498:	3b01      	subs	r3, #1
 800549a:	b2da      	uxtb	r2, r3
 800549c:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <decreaseSec+0x64>)
 800549e:	709a      	strb	r2, [r3, #2]
}
 80054a0:	e002      	b.n	80054a8 <decreaseSec+0x58>
				set_time.hour = 23;
 80054a2:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <decreaseSec+0x64>)
 80054a4:	2217      	movs	r2, #23
 80054a6:	709a      	strb	r2, [r3, #2]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	20000000 	.word	0x20000000

080054b8 <increaseMin>:
void increaseMin() {
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
	if (set_time.minute < 59) {
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <increaseMin+0x48>)
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	2b3a      	cmp	r3, #58	; 0x3a
 80054c2:	d806      	bhi.n	80054d2 <increaseMin+0x1a>
		set_time.minute += 1;
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <increaseMin+0x48>)
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	3301      	adds	r3, #1
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b0c      	ldr	r3, [pc, #48]	; (8005500 <increaseMin+0x48>)
 80054ce:	705a      	strb	r2, [r3, #1]
			set_time.hour += 1;
		} else {
			set_time.hour = 0;
		}
	}
}
 80054d0:	e010      	b.n	80054f4 <increaseMin+0x3c>
		set_time.minute = 0;
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <increaseMin+0x48>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	705a      	strb	r2, [r3, #1]
		if (set_time.hour < 23) {
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <increaseMin+0x48>)
 80054da:	789b      	ldrb	r3, [r3, #2]
 80054dc:	2b16      	cmp	r3, #22
 80054de:	d806      	bhi.n	80054ee <increaseMin+0x36>
			set_time.hour += 1;
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <increaseMin+0x48>)
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	3301      	adds	r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <increaseMin+0x48>)
 80054ea:	709a      	strb	r2, [r3, #2]
}
 80054ec:	e002      	b.n	80054f4 <increaseMin+0x3c>
			set_time.hour = 0;
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <increaseMin+0x48>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	709a      	strb	r2, [r3, #2]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000000 	.word	0x20000000

08005504 <decreaseMin>:

void decreaseMin() {
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
	if (set_time.minute > 0) {
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <decreaseMin+0x48>)
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <decreaseMin+0x1a>
		set_time.minute -= 1;
 8005510:	4b0e      	ldr	r3, [pc, #56]	; (800554c <decreaseMin+0x48>)
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	3b01      	subs	r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <decreaseMin+0x48>)
 800551a:	705a      	strb	r2, [r3, #1]
			set_time.hour -= 1;
		} else {
			set_time.hour = 23;
		}
	}
}
 800551c:	e010      	b.n	8005540 <decreaseMin+0x3c>
		set_time.minute = 59;
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <decreaseMin+0x48>)
 8005520:	223b      	movs	r2, #59	; 0x3b
 8005522:	705a      	strb	r2, [r3, #1]
		if (set_time.hour > 0) {
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <decreaseMin+0x48>)
 8005526:	789b      	ldrb	r3, [r3, #2]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <decreaseMin+0x36>
			set_time.hour -= 1;
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <decreaseMin+0x48>)
 800552e:	789b      	ldrb	r3, [r3, #2]
 8005530:	3b01      	subs	r3, #1
 8005532:	b2da      	uxtb	r2, r3
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <decreaseMin+0x48>)
 8005536:	709a      	strb	r2, [r3, #2]
}
 8005538:	e002      	b.n	8005540 <decreaseMin+0x3c>
			set_time.hour = 23;
 800553a:	4b04      	ldr	r3, [pc, #16]	; (800554c <decreaseMin+0x48>)
 800553c:	2217      	movs	r2, #23
 800553e:	709a      	strb	r2, [r3, #2]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000000 	.word	0x20000000

08005550 <increaseHour>:

void increaseHour() {
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
	if (set_time.hour < 23) {
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <increaseHour+0x2c>)
 8005556:	789b      	ldrb	r3, [r3, #2]
 8005558:	2b16      	cmp	r3, #22
 800555a:	d806      	bhi.n	800556a <increaseHour+0x1a>
		set_time.hour += 1;
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <increaseHour+0x2c>)
 800555e:	789b      	ldrb	r3, [r3, #2]
 8005560:	3301      	adds	r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <increaseHour+0x2c>)
 8005566:	709a      	strb	r2, [r3, #2]
	} else {
		set_time.hour = 0;
	}
}
 8005568:	e002      	b.n	8005570 <increaseHour+0x20>
		set_time.hour = 0;
 800556a:	4b04      	ldr	r3, [pc, #16]	; (800557c <increaseHour+0x2c>)
 800556c:	2200      	movs	r2, #0
 800556e:	709a      	strb	r2, [r3, #2]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000000 	.word	0x20000000

08005580 <decreaseHour>:

void decreaseHour() {
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
	if (set_time.hour > 0) {
 8005584:	4b09      	ldr	r3, [pc, #36]	; (80055ac <decreaseHour+0x2c>)
 8005586:	789b      	ldrb	r3, [r3, #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <decreaseHour+0x1a>
		set_time.hour -= 1;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <decreaseHour+0x2c>)
 800558e:	789b      	ldrb	r3, [r3, #2]
 8005590:	3b01      	subs	r3, #1
 8005592:	b2da      	uxtb	r2, r3
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <decreaseHour+0x2c>)
 8005596:	709a      	strb	r2, [r3, #2]
	} else {
		set_time.hour = 23;
	}
}
 8005598:	e002      	b.n	80055a0 <decreaseHour+0x20>
		set_time.hour = 23;
 800559a:	4b04      	ldr	r3, [pc, #16]	; (80055ac <decreaseHour+0x2c>)
 800559c:	2217      	movs	r2, #23
 800559e:	709a      	strb	r2, [r3, #2]
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000000 	.word	0x20000000

080055b0 <increaseDay>:

void increaseDay() {
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
	if (set_time.day < 7) {
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <increaseDay+0x2c>)
 80055b6:	78db      	ldrb	r3, [r3, #3]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d806      	bhi.n	80055ca <increaseDay+0x1a>
		set_time.day += 1;
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <increaseDay+0x2c>)
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	3301      	adds	r3, #1
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <increaseDay+0x2c>)
 80055c6:	70da      	strb	r2, [r3, #3]
	} else {
		set_time.day = 1;
	}
}
 80055c8:	e002      	b.n	80055d0 <increaseDay+0x20>
		set_time.day = 1;
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <increaseDay+0x2c>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	70da      	strb	r2, [r3, #3]
}
 80055d0:	bf00      	nop
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000000 	.word	0x20000000

080055e0 <decreaseDay>:

void decreaseDay() {
 80055e0:	b480      	push	{r7}
 80055e2:	af00      	add	r7, sp, #0
	if (set_time.day > 1) {
 80055e4:	4b09      	ldr	r3, [pc, #36]	; (800560c <decreaseDay+0x2c>)
 80055e6:	78db      	ldrb	r3, [r3, #3]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d906      	bls.n	80055fa <decreaseDay+0x1a>
		set_time.day -= 1;
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <decreaseDay+0x2c>)
 80055ee:	78db      	ldrb	r3, [r3, #3]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <decreaseDay+0x2c>)
 80055f6:	70da      	strb	r2, [r3, #3]
	} else {
		set_time.day = 7;
	}
}
 80055f8:	e002      	b.n	8005600 <decreaseDay+0x20>
		set_time.day = 7;
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <decreaseDay+0x2c>)
 80055fc:	2207      	movs	r2, #7
 80055fe:	70da      	strb	r2, [r3, #3]
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000000 	.word	0x20000000

08005610 <increaseDate>:
void increaseDate() {
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
	int daysInMonth = getDaysInMonth(set_time.month, set_time.year);
 8005616:	4b19      	ldr	r3, [pc, #100]	; (800567c <increaseDate+0x6c>)
 8005618:	795b      	ldrb	r3, [r3, #5]
 800561a:	461a      	mov	r2, r3
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <increaseDate+0x6c>)
 800561e:	88db      	ldrh	r3, [r3, #6]
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f000 f91e 	bl	8005864 <getDaysInMonth>
 8005628:	6078      	str	r0, [r7, #4]
	if (set_time.date < daysInMonth) {
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <increaseDate+0x6c>)
 800562c:	791b      	ldrb	r3, [r3, #4]
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4293      	cmp	r3, r2
 8005634:	dd06      	ble.n	8005644 <increaseDate+0x34>
		set_time.date += 1;
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <increaseDate+0x6c>)
 8005638:	791b      	ldrb	r3, [r3, #4]
 800563a:	3301      	adds	r3, #1
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b0f      	ldr	r3, [pc, #60]	; (800567c <increaseDate+0x6c>)
 8005640:	711a      	strb	r2, [r3, #4]
		} else {
			set_time.month = 1;
			set_time.year += 1;
		}
	}
}
 8005642:	e016      	b.n	8005672 <increaseDate+0x62>
		set_time.date = 1;
 8005644:	4b0d      	ldr	r3, [pc, #52]	; (800567c <increaseDate+0x6c>)
 8005646:	2201      	movs	r2, #1
 8005648:	711a      	strb	r2, [r3, #4]
		if (set_time.month < 12) {
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <increaseDate+0x6c>)
 800564c:	795b      	ldrb	r3, [r3, #5]
 800564e:	2b0b      	cmp	r3, #11
 8005650:	d806      	bhi.n	8005660 <increaseDate+0x50>
			set_time.month += 1;
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <increaseDate+0x6c>)
 8005654:	795b      	ldrb	r3, [r3, #5]
 8005656:	3301      	adds	r3, #1
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b08      	ldr	r3, [pc, #32]	; (800567c <increaseDate+0x6c>)
 800565c:	715a      	strb	r2, [r3, #5]
}
 800565e:	e008      	b.n	8005672 <increaseDate+0x62>
			set_time.month = 1;
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <increaseDate+0x6c>)
 8005662:	2201      	movs	r2, #1
 8005664:	715a      	strb	r2, [r3, #5]
			set_time.year += 1;
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <increaseDate+0x6c>)
 8005668:	88db      	ldrh	r3, [r3, #6]
 800566a:	3301      	adds	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	4b03      	ldr	r3, [pc, #12]	; (800567c <increaseDate+0x6c>)
 8005670:	80da      	strh	r2, [r3, #6]
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000000 	.word	0x20000000

08005680 <decreaseDate>:

void decreaseDate() {
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
	if (set_time.date > 1) {
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <decreaseDate+0x60>)
 8005686:	791b      	ldrb	r3, [r3, #4]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d906      	bls.n	800569a <decreaseDate+0x1a>
		set_time.date -= 1;
 800568c:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <decreaseDate+0x60>)
 800568e:	791b      	ldrb	r3, [r3, #4]
 8005690:	3b01      	subs	r3, #1
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b12      	ldr	r3, [pc, #72]	; (80056e0 <decreaseDate+0x60>)
 8005696:	711a      	strb	r2, [r3, #4]
			set_time.month = 12;
			set_time.year -= 1;
		}
		set_time.date = getDaysInMonth(set_time.month, set_time.year);
	}
}
 8005698:	e020      	b.n	80056dc <decreaseDate+0x5c>
		if (set_time.month > 1) {
 800569a:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <decreaseDate+0x60>)
 800569c:	795b      	ldrb	r3, [r3, #5]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d906      	bls.n	80056b0 <decreaseDate+0x30>
			set_time.month -= 1;
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <decreaseDate+0x60>)
 80056a4:	795b      	ldrb	r3, [r3, #5]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <decreaseDate+0x60>)
 80056ac:	715a      	strb	r2, [r3, #5]
 80056ae:	e008      	b.n	80056c2 <decreaseDate+0x42>
			set_time.month = 12;
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <decreaseDate+0x60>)
 80056b2:	220c      	movs	r2, #12
 80056b4:	715a      	strb	r2, [r3, #5]
			set_time.year -= 1;
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <decreaseDate+0x60>)
 80056b8:	88db      	ldrh	r3, [r3, #6]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <decreaseDate+0x60>)
 80056c0:	80da      	strh	r2, [r3, #6]
		set_time.date = getDaysInMonth(set_time.month, set_time.year);
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <decreaseDate+0x60>)
 80056c4:	795b      	ldrb	r3, [r3, #5]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <decreaseDate+0x60>)
 80056ca:	88db      	ldrh	r3, [r3, #6]
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 f8c8 	bl	8005864 <getDaysInMonth>
 80056d4:	4603      	mov	r3, r0
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	4b01      	ldr	r3, [pc, #4]	; (80056e0 <decreaseDate+0x60>)
 80056da:	711a      	strb	r2, [r3, #4]
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000000 	.word	0x20000000

080056e4 <increaseMonth>:

void increaseMonth() {
 80056e4:	b598      	push	{r3, r4, r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	if (set_time.month < 12) {
 80056e8:	4b18      	ldr	r3, [pc, #96]	; (800574c <increaseMonth+0x68>)
 80056ea:	795b      	ldrb	r3, [r3, #5]
 80056ec:	2b0b      	cmp	r3, #11
 80056ee:	d806      	bhi.n	80056fe <increaseMonth+0x1a>
		set_time.month += 1;
 80056f0:	4b16      	ldr	r3, [pc, #88]	; (800574c <increaseMonth+0x68>)
 80056f2:	795b      	ldrb	r3, [r3, #5]
 80056f4:	3301      	adds	r3, #1
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b14      	ldr	r3, [pc, #80]	; (800574c <increaseMonth+0x68>)
 80056fa:	715a      	strb	r2, [r3, #5]
 80056fc:	e008      	b.n	8005710 <increaseMonth+0x2c>
	} else {
		set_time.month = 1;
 80056fe:	4b13      	ldr	r3, [pc, #76]	; (800574c <increaseMonth+0x68>)
 8005700:	2201      	movs	r2, #1
 8005702:	715a      	strb	r2, [r3, #5]
		set_time.year += 1;
 8005704:	4b11      	ldr	r3, [pc, #68]	; (800574c <increaseMonth+0x68>)
 8005706:	88db      	ldrh	r3, [r3, #6]
 8005708:	3301      	adds	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <increaseMonth+0x68>)
 800570e:	80da      	strh	r2, [r3, #6]
	}

	if (set_time.day
 8005710:	4b0e      	ldr	r3, [pc, #56]	; (800574c <increaseMonth+0x68>)
 8005712:	78dc      	ldrb	r4, [r3, #3]
			> (uint8_t) (getDaysInMonth(set_time.month, set_time.year))) {
 8005714:	4b0d      	ldr	r3, [pc, #52]	; (800574c <increaseMonth+0x68>)
 8005716:	795b      	ldrb	r3, [r3, #5]
 8005718:	461a      	mov	r2, r3
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <increaseMonth+0x68>)
 800571c:	88db      	ldrh	r3, [r3, #6]
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 f89f 	bl	8005864 <getDaysInMonth>
 8005726:	4603      	mov	r3, r0
 8005728:	b2db      	uxtb	r3, r3
	if (set_time.day
 800572a:	429c      	cmp	r4, r3
 800572c:	d90c      	bls.n	8005748 <increaseMonth+0x64>
		set_time.day =
				(uint8_t) (getDaysInMonth(set_time.month, set_time.year));
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <increaseMonth+0x68>)
 8005730:	795b      	ldrb	r3, [r3, #5]
 8005732:	461a      	mov	r2, r3
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <increaseMonth+0x68>)
 8005736:	88db      	ldrh	r3, [r3, #6]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 f892 	bl	8005864 <getDaysInMonth>
 8005740:	4603      	mov	r3, r0
 8005742:	b2da      	uxtb	r2, r3
		set_time.day =
 8005744:	4b01      	ldr	r3, [pc, #4]	; (800574c <increaseMonth+0x68>)
 8005746:	70da      	strb	r2, [r3, #3]
	}
}
 8005748:	bf00      	nop
 800574a:	bd98      	pop	{r3, r4, r7, pc}
 800574c:	20000000 	.word	0x20000000

08005750 <decreaseMonth>:

void decreaseMonth() {
 8005750:	b598      	push	{r3, r4, r7, lr}
 8005752:	af00      	add	r7, sp, #0
	if (set_time.month > 1) {
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <decreaseMonth+0x68>)
 8005756:	795b      	ldrb	r3, [r3, #5]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d906      	bls.n	800576a <decreaseMonth+0x1a>
		set_time.month -= 1;
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <decreaseMonth+0x68>)
 800575e:	795b      	ldrb	r3, [r3, #5]
 8005760:	3b01      	subs	r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	4b14      	ldr	r3, [pc, #80]	; (80057b8 <decreaseMonth+0x68>)
 8005766:	715a      	strb	r2, [r3, #5]
 8005768:	e008      	b.n	800577c <decreaseMonth+0x2c>
	} else {
		set_time.month = 12;
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <decreaseMonth+0x68>)
 800576c:	220c      	movs	r2, #12
 800576e:	715a      	strb	r2, [r3, #5]
		set_time.year -= 1;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <decreaseMonth+0x68>)
 8005772:	88db      	ldrh	r3, [r3, #6]
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <decreaseMonth+0x68>)
 800577a:	80da      	strh	r2, [r3, #6]
	}

	if (set_time.day
 800577c:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <decreaseMonth+0x68>)
 800577e:	78dc      	ldrb	r4, [r3, #3]
			> (uint8_t) (getDaysInMonth(set_time.month, set_time.year))) {
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <decreaseMonth+0x68>)
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	461a      	mov	r2, r3
 8005786:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <decreaseMonth+0x68>)
 8005788:	88db      	ldrh	r3, [r3, #6]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f000 f869 	bl	8005864 <getDaysInMonth>
 8005792:	4603      	mov	r3, r0
 8005794:	b2db      	uxtb	r3, r3
	if (set_time.day
 8005796:	429c      	cmp	r4, r3
 8005798:	d90c      	bls.n	80057b4 <decreaseMonth+0x64>
		set_time.day =
				(uint8_t) (getDaysInMonth(set_time.month, set_time.year));
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <decreaseMonth+0x68>)
 800579c:	795b      	ldrb	r3, [r3, #5]
 800579e:	461a      	mov	r2, r3
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <decreaseMonth+0x68>)
 80057a2:	88db      	ldrh	r3, [r3, #6]
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 f85c 	bl	8005864 <getDaysInMonth>
 80057ac:	4603      	mov	r3, r0
 80057ae:	b2da      	uxtb	r2, r3
		set_time.day =
 80057b0:	4b01      	ldr	r3, [pc, #4]	; (80057b8 <decreaseMonth+0x68>)
 80057b2:	70da      	strb	r2, [r3, #3]
	}
}
 80057b4:	bf00      	nop
 80057b6:	bd98      	pop	{r3, r4, r7, pc}
 80057b8:	20000000 	.word	0x20000000

080057bc <increaseYear>:

void increaseYear() {
 80057bc:	b598      	push	{r3, r4, r7, lr}
 80057be:	af00      	add	r7, sp, #0
	set_time.year += 1;
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <increaseYear+0x4c>)
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	3301      	adds	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <increaseYear+0x4c>)
 80057ca:	80da      	strh	r2, [r3, #6]

	if (set_time.day
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <increaseYear+0x4c>)
 80057ce:	78dc      	ldrb	r4, [r3, #3]
			> (uint8_t) (getDaysInMonth(set_time.month, set_time.year))) {
 80057d0:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <increaseYear+0x4c>)
 80057d2:	795b      	ldrb	r3, [r3, #5]
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <increaseYear+0x4c>)
 80057d8:	88db      	ldrh	r3, [r3, #6]
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 f841 	bl	8005864 <getDaysInMonth>
 80057e2:	4603      	mov	r3, r0
 80057e4:	b2db      	uxtb	r3, r3
	if (set_time.day
 80057e6:	429c      	cmp	r4, r3
 80057e8:	d90c      	bls.n	8005804 <increaseYear+0x48>
		set_time.day =
				(uint8_t) (getDaysInMonth(set_time.month, set_time.year));
 80057ea:	4b07      	ldr	r3, [pc, #28]	; (8005808 <increaseYear+0x4c>)
 80057ec:	795b      	ldrb	r3, [r3, #5]
 80057ee:	461a      	mov	r2, r3
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <increaseYear+0x4c>)
 80057f2:	88db      	ldrh	r3, [r3, #6]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f834 	bl	8005864 <getDaysInMonth>
 80057fc:	4603      	mov	r3, r0
 80057fe:	b2da      	uxtb	r2, r3
		set_time.day =
 8005800:	4b01      	ldr	r3, [pc, #4]	; (8005808 <increaseYear+0x4c>)
 8005802:	70da      	strb	r2, [r3, #3]
	}
}
 8005804:	bf00      	nop
 8005806:	bd98      	pop	{r3, r4, r7, pc}
 8005808:	20000000 	.word	0x20000000

0800580c <decreaseYear>:

void decreaseYear() {
 800580c:	b598      	push	{r3, r4, r7, lr}
 800580e:	af00      	add	r7, sp, #0
	if (set_time.year > 0) // Assuming year 0 is a valid boundary
 8005810:	4b13      	ldr	r3, [pc, #76]	; (8005860 <decreaseYear+0x54>)
 8005812:	88db      	ldrh	r3, [r3, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d005      	beq.n	8005824 <decreaseYear+0x18>
			{
		set_time.year -= 1;
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <decreaseYear+0x54>)
 800581a:	88db      	ldrh	r3, [r3, #6]
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <decreaseYear+0x54>)
 8005822:	80da      	strh	r2, [r3, #6]
	}

	if (set_time.day
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <decreaseYear+0x54>)
 8005826:	78dc      	ldrb	r4, [r3, #3]
			> (uint8_t) (getDaysInMonth(set_time.month, set_time.year))) {
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <decreaseYear+0x54>)
 800582a:	795b      	ldrb	r3, [r3, #5]
 800582c:	461a      	mov	r2, r3
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <decreaseYear+0x54>)
 8005830:	88db      	ldrh	r3, [r3, #6]
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f000 f815 	bl	8005864 <getDaysInMonth>
 800583a:	4603      	mov	r3, r0
 800583c:	b2db      	uxtb	r3, r3
	if (set_time.day
 800583e:	429c      	cmp	r4, r3
 8005840:	d90c      	bls.n	800585c <decreaseYear+0x50>
		set_time.day =
				(uint8_t) (getDaysInMonth(set_time.month, set_time.year));
 8005842:	4b07      	ldr	r3, [pc, #28]	; (8005860 <decreaseYear+0x54>)
 8005844:	795b      	ldrb	r3, [r3, #5]
 8005846:	461a      	mov	r2, r3
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <decreaseYear+0x54>)
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 f808 	bl	8005864 <getDaysInMonth>
 8005854:	4603      	mov	r3, r0
 8005856:	b2da      	uxtb	r2, r3
		set_time.day =
 8005858:	4b01      	ldr	r3, [pc, #4]	; (8005860 <decreaseYear+0x54>)
 800585a:	70da      	strb	r2, [r3, #3]
	}
}
 800585c:	bf00      	nop
 800585e:	bd98      	pop	{r3, r4, r7, pc}
 8005860:	20000000 	.word	0x20000000

08005864 <getDaysInMonth>:

// Helper function to get the number of days in a month
int getDaysInMonth(int month, int year) {
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	switch (month) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3b01      	subs	r3, #1
 8005872:	2b0b      	cmp	r3, #11
 8005874:	d842      	bhi.n	80058fc <getDaysInMonth+0x98>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <getDaysInMonth+0x18>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058ad 	.word	0x080058ad
 8005880:	080058b5 	.word	0x080058b5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058ad 	.word	0x080058ad
 8005890:	080058b1 	.word	0x080058b1
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058ad 	.word	0x080058ad
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058ad 	.word	0x080058ad
 80058a4:	080058b1 	.word	0x080058b1
 80058a8:	080058ad 	.word	0x080058ad
	case 5:
	case 7:
	case 8:
	case 10:
	case 12: {
		return 31;
 80058ac:	231f      	movs	r3, #31
 80058ae:	e026      	b.n	80058fe <getDaysInMonth+0x9a>
	}
	case 4:
	case 6:
	case 9:
	case 11: {
		return 30;
 80058b0:	231e      	movs	r3, #30
 80058b2:	e024      	b.n	80058fe <getDaysInMonth+0x9a>
	}
	case 2: {
		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <getDaysInMonth+0x74>
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <getDaysInMonth+0xa8>)
 80058c2:	fb83 1302 	smull	r1, r3, r3, r2
 80058c6:	1159      	asrs	r1, r3, #5
 80058c8:	17d3      	asrs	r3, r2, #31
 80058ca:	1acb      	subs	r3, r1, r3
 80058cc:	2164      	movs	r1, #100	; 0x64
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <getDaysInMonth+0x90>
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <getDaysInMonth+0xa8>)
 80058dc:	fb83 1302 	smull	r1, r3, r3, r2
 80058e0:	11d9      	asrs	r1, r3, #7
 80058e2:	17d3      	asrs	r3, r2, #31
 80058e4:	1acb      	subs	r3, r1, r3
 80058e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <getDaysInMonth+0x94>
			return 29; // Leap year
 80058f4:	231d      	movs	r3, #29
 80058f6:	e002      	b.n	80058fe <getDaysInMonth+0x9a>
		else
			return 28;
 80058f8:	231c      	movs	r3, #28
 80058fa:	e000      	b.n	80058fe <getDaysInMonth+0x9a>
	}
	default:
		return 30; // Default case, should not happen
 80058fc:	231e      	movs	r3, #30
	}
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	51eb851f 	.word	0x51eb851f

08005910 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005914:	b672      	cpsid	i
}
 8005916:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005918:	e7fe      	b.n	8005918 <Error_Handler+0x8>

0800591a <ringBufferPush>:
 */

#include "ring_buffer.h"

void ringBufferPush(ring_buffer_t *buf, uint8_t value)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
	buf->data[buf->tail] = value;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4413      	add	r3, r2
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	70da      	strb	r2, [r3, #3]
	buf->tail++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	789b      	ldrb	r3, [r3, #2]
 8005938:	3301      	adds	r3, #1
 800593a:	b2da      	uxtb	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	709a      	strb	r2, [r3, #2]
	if (buf->tail == RING_BUFFER_MAX_SIZE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	789b      	ldrb	r3, [r3, #2]
 8005944:	2b64      	cmp	r3, #100	; 0x64
 8005946:	d102      	bne.n	800594e <ringBufferPush+0x34>
	{
		buf->tail = 0;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	709a      	strb	r2, [r3, #2]
	}
	if (buf->length < RING_BUFFER_MAX_SIZE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b63      	cmp	r3, #99	; 0x63
 8005954:	d805      	bhi.n	8005962 <ringBufferPush+0x48>
	{
		buf->length++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	b2da      	uxtb	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	701a      	strb	r2, [r3, #0]
	}
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <ringBufferPop>:

uint8_t ringBufferPop(ring_buffer_t *buf, uint8_t *data)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
	if (buf->length > 0)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d015      	beq.n	80059ac <ringBufferPop+0x3e>
	{
		*data = buf->data[buf->head];
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	78da      	ldrb	r2, [r3, #3]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	701a      	strb	r2, [r3, #0]
		buf->head++;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	3301      	adds	r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	705a      	strb	r2, [r3, #1]
		buf->length--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	701a      	strb	r2, [r3, #0]
		return RING_BUFFER_SUCCESS;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e000      	b.n	80059ae <ringBufferPop+0x40>
	}
	return RING_BUFFER_ERR_EMPTY;
 80059ac:	2301      	movs	r3, #1
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <initTimer2>:

/**
 * @brief	init timer function
 */
void initTimer2()
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <initTimer2+0x10>)
 80059c2:	f003 fbd9 	bl	8009178 <HAL_TIM_Base_Start_IT>
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000022c 	.word	0x2000022c

080059d0 <initTimer4>:

void initTimer4()
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80059d4:	4802      	ldr	r0, [pc, #8]	; (80059e0 <initTimer4+0x10>)
 80059d6:	f003 fbcf 	bl	8009178 <HAL_TIM_Base_Start_IT>
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000274 	.word	0x20000274

080059e4 <sTimer2Set>:
 * @brief	set timer duration(ms)
 * @param	delay(ms)
 * @param	period(ms)
 */
void sTimer2Set(uint16_t delay, uint16_t period)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	460a      	mov	r2, r1
 80059ee:	80fb      	strh	r3, [r7, #6]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80bb      	strh	r3, [r7, #4]
	timer_2_mul = period / TIMER_2_CYCLES;
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <sTimer2Set+0x30>)
 80059f6:	88bb      	ldrh	r3, [r7, #4]
 80059f8:	8013      	strh	r3, [r2, #0]
	timer_2_counter = delay / TIMER_2_CYCLES;
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <sTimer2Set+0x34>)
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	8013      	strh	r3, [r2, #0]
	timer_2_flag = 0;
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <sTimer2Set+0x38>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	200001c8 	.word	0x200001c8
 8005a18:	200001c6 	.word	0x200001c6
 8005a1c:	200001c4 	.word	0x200001c4

08005a20 <sTimer4Set>:

void sTimer4Set(uint16_t delay, uint16_t period)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	460a      	mov	r2, r1
 8005a2a:	80fb      	strh	r3, [r7, #6]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	80bb      	strh	r3, [r7, #4]
	timer_4_mul = period / TIMER_4_CYCLES;
 8005a30:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <sTimer4Set+0x30>)
 8005a32:	88bb      	ldrh	r3, [r7, #4]
 8005a34:	8013      	strh	r3, [r2, #0]
	timer_4_counter = delay / TIMER_4_CYCLES;
 8005a36:	4a07      	ldr	r2, [pc, #28]	; (8005a54 <sTimer4Set+0x34>)
 8005a38:	88fb      	ldrh	r3, [r7, #6]
 8005a3a:	8013      	strh	r3, [r2, #0]
	timer_4_flag = 0;
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <sTimer4Set+0x38>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	200001ce 	.word	0x200001ce
 8005a54:	200001cc 	.word	0x200001cc
 8005a58:	200001ca 	.word	0x200001ca

08005a5c <sTimer2GetFlag>:
/**
 * @brief	get flag timer fuction and auto reset flags and timer counter
 * @return	timer flag
 */
uint8_t sTimer2GetFlag()
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
	if(timer_2_flag)
 8005a60:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <sTimer2GetFlag+0x2c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <sTimer2GetFlag+0x1e>
	{
		timer_2_flag = 0;
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <sTimer2GetFlag+0x2c>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
		timer_2_counter = timer_2_mul;
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <sTimer2GetFlag+0x30>)
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <sTimer2GetFlag+0x34>)
 8005a74:	801a      	strh	r2, [r3, #0]
		return 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <sTimer2GetFlag+0x20>
	}
	return 0;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	200001c4 	.word	0x200001c4
 8005a8c:	200001c8 	.word	0x200001c8
 8005a90:	200001c6 	.word	0x200001c6

08005a94 <sTimer4GetFlag>:

uint8_t sTimer4GetFlag()
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
	if(timer_4_flag)
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <sTimer4GetFlag+0x2c>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <sTimer4GetFlag+0x1e>
	{
		timer_4_flag = 0;
 8005aa0:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <sTimer4GetFlag+0x2c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	701a      	strb	r2, [r3, #0]
		timer_4_counter = timer_4_mul;
 8005aa6:	4b07      	ldr	r3, [pc, #28]	; (8005ac4 <sTimer4GetFlag+0x30>)
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <sTimer4GetFlag+0x34>)
 8005aac:	801a      	strh	r2, [r3, #0]
		return 1;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <sTimer4GetFlag+0x20>
	}
	return 0;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	200001ca 	.word	0x200001ca
 8005ac4:	200001ce 	.word	0x200001ce
 8005ac8:	200001cc 	.word	0x200001cc

08005acc <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief	callback function call every 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d110      	bne.n	8005b00 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if (timer_2_counter > 0)
 8005ade:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			--timer_2_counter;
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005af0:	801a      	strh	r2, [r3, #0]
		}
		if (timer_2_counter <= 0)
 8005af2:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			timer_2_flag = 1;
 8005afa:	4b10      	ldr	r3, [pc, #64]	; (8005b3c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d112      	bne.n	8005b30 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		if (timer_4_counter > 0)
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			--timer_4_counter;
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005b1c:	801a      	strh	r2, [r3, #0]
		}
		if (timer_4_counter <= 0)
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			timer_4_flag = 1;
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
		}
		led7_Scan();
 8005b2c:	f7fc fd28 	bl	8002580 <led7_Scan>
	}
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200001c6 	.word	0x200001c6
 8005b3c:	200001c4 	.word	0x200001c4
 8005b40:	40000800 	.word	0x40000800
 8005b44:	200001cc 	.word	0x200001cc
 8005b48:	200001ca 	.word	0x200001ca

08005b4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005b50:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b52:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <MX_SPI1_Init+0x68>)
 8005b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b56:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b5e:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b98:	220a      	movs	r2, #10
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b9c:	4804      	ldr	r0, [pc, #16]	; (8005bb0 <MX_SPI1_Init+0x64>)
 8005b9e:	f002 fcaf 	bl	8008500 <HAL_SPI_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ba8:	f7ff feb2 	bl	8005910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	200001d0 	.word	0x200001d0
 8005bb4:	40013000 	.word	0x40013000

08005bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc0:	f107 0314 	add.w	r3, r7, #20
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <HAL_SPI_MspInit+0x84>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d12b      	bne.n	8005c32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005bda:	2300      	movs	r3, #0
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	4b18      	ldr	r3, [pc, #96]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	4a17      	ldr	r2, [pc, #92]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005be8:	6453      	str	r3, [r2, #68]	; 0x44
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	4a10      	ldr	r2, [pc, #64]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005c00:	f043 0302 	orr.w	r3, r3, #2
 8005c04:	6313      	str	r3, [r2, #48]	; 0x30
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <HAL_SPI_MspInit+0x88>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005c12:	2338      	movs	r3, #56	; 0x38
 8005c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c16:	2302      	movs	r3, #2
 8005c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005c22:	2305      	movs	r3, #5
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4805      	ldr	r0, [pc, #20]	; (8005c44 <HAL_SPI_MspInit+0x8c>)
 8005c2e:	f000 fd11 	bl	8006654 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005c32:	bf00      	nop
 8005c34:	3728      	adds	r7, #40	; 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40013000 	.word	0x40013000
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40020400 	.word	0x40020400

08005c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c56:	4a0f      	ldr	r2, [pc, #60]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6413      	str	r3, [r2, #64]	; 0x40
 8005c7a:	4b06      	ldr	r3, [pc, #24]	; (8005c94 <HAL_MspInit+0x4c>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40023800 	.word	0x40023800

08005c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c9c:	e7fe      	b.n	8005c9c <NMI_Handler+0x4>

08005c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ca2:	e7fe      	b.n	8005ca2 <HardFault_Handler+0x4>

08005ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ca8:	e7fe      	b.n	8005ca8 <MemManage_Handler+0x4>

08005caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005caa:	b480      	push	{r7}
 8005cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cae:	e7fe      	b.n	8005cae <BusFault_Handler+0x4>

08005cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cb4:	e7fe      	b.n	8005cb4 <UsageFault_Handler+0x4>

08005cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ce4:	f000 face 	bl	8006284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ce8:	bf00      	nop
 8005cea:	bd80      	pop	{r7, pc}

08005cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005cf0:	4802      	ldr	r0, [pc, #8]	; (8005cfc <TIM2_IRQHandler+0x10>)
 8005cf2:	f003 fab1 	bl	8009258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2000022c 	.word	0x2000022c

08005d00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d04:	4802      	ldr	r0, [pc, #8]	; (8005d10 <TIM4_IRQHandler+0x10>)
 8005d06:	f003 faa7 	bl	8009258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000274 	.word	0x20000274

08005d14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d18:	4802      	ldr	r0, [pc, #8]	; (8005d24 <USART1_IRQHandler+0x10>)
 8005d1a:	f003 ff6f 	bl	8009bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000038c 	.word	0x2000038c

08005d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d30:	4a14      	ldr	r2, [pc, #80]	; (8005d84 <_sbrk+0x5c>)
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <_sbrk+0x60>)
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d3c:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <_sbrk+0x64>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <_sbrk+0x64>)
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <_sbrk+0x68>)
 8005d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d4a:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <_sbrk+0x64>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d207      	bcs.n	8005d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d58:	f004 ff84 	bl	800ac64 <__errno>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	220c      	movs	r2, #12
 8005d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	e009      	b.n	8005d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <_sbrk+0x64>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d6e:	4b07      	ldr	r3, [pc, #28]	; (8005d8c <_sbrk+0x64>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	4a05      	ldr	r2, [pc, #20]	; (8005d8c <_sbrk+0x64>)
 8005d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20020000 	.word	0x20020000
 8005d88:	00000400 	.word	0x00000400
 8005d8c:	20000228 	.word	0x20000228
 8005d90:	200003e8 	.word	0x200003e8

08005d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <SystemInit+0x20>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <SystemInit+0x20>)
 8005da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dbe:	f107 0308 	add.w	r3, r7, #8
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
 8005dc8:	609a      	str	r2, [r3, #8]
 8005dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dcc:	463b      	mov	r3, r7
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005dd4:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005dde:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8005dea:	4b18      	ldr	r3, [pc, #96]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005dec:	2209      	movs	r2, #9
 8005dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005dfc:	4813      	ldr	r0, [pc, #76]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005dfe:	f003 f96b 	bl	80090d8 <HAL_TIM_Base_Init>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005e08:	f7ff fd82 	bl	8005910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	480c      	ldr	r0, [pc, #48]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005e1a:	f003 fb25 	bl	8009468 <HAL_TIM_ConfigClockSource>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005e24:	f7ff fd74 	bl	8005910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e30:	463b      	mov	r3, r7
 8005e32:	4619      	mov	r1, r3
 8005e34:	4805      	ldr	r0, [pc, #20]	; (8005e4c <MX_TIM2_Init+0x94>)
 8005e36:	f003 fd41 	bl	80098bc <HAL_TIMEx_MasterConfigSynchronization>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005e40:	f7ff fd66 	bl	8005910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005e44:	bf00      	nop
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2000022c 	.word	0x2000022c

08005e50 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e64:	463b      	mov	r3, r7
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <MX_TIM4_Init+0x98>)
 8005e70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e74:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005e78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 8005e80:	4b18      	ldr	r3, [pc, #96]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e82:	2209      	movs	r2, #9
 8005e84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e86:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e8c:	4b15      	ldr	r3, [pc, #84]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005e92:	4814      	ldr	r0, [pc, #80]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005e94:	f003 f920 	bl	80090d8 <HAL_TIM_Base_Init>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005e9e:	f7ff fd37 	bl	8005910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ea2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ea8:	f107 0308 	add.w	r3, r7, #8
 8005eac:	4619      	mov	r1, r3
 8005eae:	480d      	ldr	r0, [pc, #52]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005eb0:	f003 fada 	bl	8009468 <HAL_TIM_ConfigClockSource>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005eba:	f7ff fd29 	bl	8005910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4806      	ldr	r0, [pc, #24]	; (8005ee4 <MX_TIM4_Init+0x94>)
 8005ecc:	f003 fcf6 	bl	80098bc <HAL_TIMEx_MasterConfigSynchronization>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005ed6:	f7ff fd1b 	bl	8005910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000274 	.word	0x20000274
 8005ee8:	40000800 	.word	0x40000800

08005eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efc:	d116      	bne.n	8005f2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	201c      	movs	r0, #28
 8005f20:	f000 facf 	bl	80064c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005f24:	201c      	movs	r0, #28
 8005f26:	f000 fae8 	bl	80064fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005f2a:	e01a      	b.n	8005f62 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a0f      	ldr	r2, [pc, #60]	; (8005f70 <HAL_TIM_Base_MspInit+0x84>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d115      	bne.n	8005f62 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	4a0b      	ldr	r2, [pc, #44]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f40:	f043 0304 	orr.w	r3, r3, #4
 8005f44:	6413      	str	r3, [r2, #64]	; 0x40
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_TIM_Base_MspInit+0x80>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005f52:	2200      	movs	r2, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	201e      	movs	r0, #30
 8005f58:	f000 fab3 	bl	80064c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f5c:	201e      	movs	r0, #30
 8005f5e:	f000 facc 	bl	80064fa <HAL_NVIC_EnableIRQ>
}
 8005f62:	bf00      	nop
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	40000800 	.word	0x40000800

08005f74 <uart_init_rs232>:
ring_buffer_t uart_ring_buffer;
uint8_t receive_buffer1 = 0;
uint8_t uart_receive_flag = 0;
uint8_t msg[100];

void uart_init_rs232() {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8005f78:	2201      	movs	r2, #1
 8005f7a:	4903      	ldr	r1, [pc, #12]	; (8005f88 <uart_init_rs232+0x14>)
 8005f7c:	4803      	ldr	r0, [pc, #12]	; (8005f8c <uart_init_rs232+0x18>)
 8005f7e:	f003 fe0c 	bl	8009b9a <HAL_UART_Receive_IT>
}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000323 	.word	0x20000323
 8005f8c:	2000038c 	.word	0x2000038c

08005f90 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t *str) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <uart_Rs232SendString+0x28>)
 8005f9c:	4807      	ldr	r0, [pc, #28]	; (8005fbc <uart_Rs232SendString+0x2c>)
 8005f9e:	f004 fe93 	bl	800acc8 <siprintf>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	230a      	movs	r3, #10
 8005fa8:	4904      	ldr	r1, [pc, #16]	; (8005fbc <uart_Rs232SendString+0x2c>)
 8005faa:	4805      	ldr	r0, [pc, #20]	; (8005fc0 <uart_Rs232SendString+0x30>)
 8005fac:	f003 fd63 	bl	8009a76 <HAL_UART_Transmit>
			10);
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	0800c994 	.word	0x0800c994
 8005fbc:	20000328 	.word	0x20000328
 8005fc0:	2000038c 	.word	0x2000038c

08005fc4 <HAL_UART_RxCpltCallback>:
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

// rs232 isr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <HAL_UART_RxCpltCallback+0x44>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d113      	bne.n	8005ffe <HAL_UART_RxCpltCallback+0x3a>

		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8005fd6:	230a      	movs	r3, #10
 8005fd8:	2201      	movs	r2, #1
 8005fda:	490c      	ldr	r1, [pc, #48]	; (800600c <HAL_UART_RxCpltCallback+0x48>)
 8005fdc:	480c      	ldr	r0, [pc, #48]	; (8006010 <HAL_UART_RxCpltCallback+0x4c>)
 8005fde:	f003 fd4a 	bl	8009a76 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4909      	ldr	r1, [pc, #36]	; (800600c <HAL_UART_RxCpltCallback+0x48>)
 8005fe6:	480a      	ldr	r0, [pc, #40]	; (8006010 <HAL_UART_RxCpltCallback+0x4c>)
 8005fe8:	f003 fdd7 	bl	8009b9a <HAL_UART_Receive_IT>

		// set the flag and add new received data to the buffer
		uart_receive_flag = 1;
 8005fec:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_UART_RxCpltCallback+0x50>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
		ringBufferPush(&uart_ring_buffer, receive_buffer1);
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_UART_RxCpltCallback+0x48>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4807      	ldr	r0, [pc, #28]	; (8006018 <HAL_UART_RxCpltCallback+0x54>)
 8005ffa:	f7ff fc8e 	bl	800591a <ringBufferPush>
	}
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40011000 	.word	0x40011000
 800600c:	20000323 	.word	0x20000323
 8006010:	2000038c 	.word	0x2000038c
 8006014:	20000324 	.word	0x20000324
 8006018:	200002bc 	.word	0x200002bc

0800601c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <MX_USART1_UART_Init+0x50>)
 8006024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006026:	4b10      	ldr	r3, [pc, #64]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800602c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006030:	2200      	movs	r2, #0
 8006032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006036:	2200      	movs	r2, #0
 8006038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006042:	220c      	movs	r2, #12
 8006044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800604c:	4b06      	ldr	r3, [pc, #24]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 800604e:	2200      	movs	r2, #0
 8006050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006052:	4805      	ldr	r0, [pc, #20]	; (8006068 <MX_USART1_UART_Init+0x4c>)
 8006054:	f003 fcc2 	bl	80099dc <HAL_UART_Init>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800605e:	f7ff fc57 	bl	8005910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006062:	bf00      	nop
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	2000038c 	.word	0x2000038c
 800606c:	40011000 	.word	0x40011000

08006070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <HAL_UART_MspInit+0x94>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d134      	bne.n	80060fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	4b1c      	ldr	r3, [pc, #112]	; (8006108 <HAL_UART_MspInit+0x98>)
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	4a1b      	ldr	r2, [pc, #108]	; (8006108 <HAL_UART_MspInit+0x98>)
 800609c:	f043 0310 	orr.w	r3, r3, #16
 80060a0:	6453      	str	r3, [r2, #68]	; 0x44
 80060a2:	4b19      	ldr	r3, [pc, #100]	; (8006108 <HAL_UART_MspInit+0x98>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <HAL_UART_MspInit+0x98>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <HAL_UART_MspInit+0x98>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	6313      	str	r3, [r2, #48]	; 0x30
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <HAL_UART_MspInit+0x98>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80060ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80060ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2302      	movs	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060d8:	2303      	movs	r3, #3
 80060da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060dc:	2307      	movs	r3, #7
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	4619      	mov	r1, r3
 80060e6:	4809      	ldr	r0, [pc, #36]	; (800610c <HAL_UART_MspInit+0x9c>)
 80060e8:	f000 fab4 	bl	8006654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80060ec:	2200      	movs	r2, #0
 80060ee:	2100      	movs	r1, #0
 80060f0:	2025      	movs	r0, #37	; 0x25
 80060f2:	f000 f9e6 	bl	80064c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060f6:	2025      	movs	r0, #37	; 0x25
 80060f8:	f000 f9ff 	bl	80064fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80060fc:	bf00      	nop
 80060fe:	3728      	adds	r7, #40	; 0x28
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40011000 	.word	0x40011000
 8006108:	40023800 	.word	0x40023800
 800610c:	40020000 	.word	0x40020000

08006110 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	4413      	add	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	b2da      	uxtb	r2, r3
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	b2db      	uxtb	r3, r3
 8006132:	4413      	add	r3, r2
 8006134:	b2db      	uxtb	r3, r3
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	4a0d      	ldr	r2, [pc, #52]	; (8006188 <DEC2BCD+0x44>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	b2db      	uxtb	r3, r3
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	b258      	sxtb	r0, r3
 800615e:	79fa      	ldrb	r2, [r7, #7]
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <DEC2BCD+0x44>)
 8006162:	fba3 1302 	umull	r1, r3, r3, r2
 8006166:	08d9      	lsrs	r1, r3, #3
 8006168:	460b      	mov	r3, r1
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	b2db      	uxtb	r3, r3
 8006174:	b25b      	sxtb	r3, r3
 8006176:	4303      	orrs	r3, r0
 8006178:	b25b      	sxtb	r3, r3
 800617a:	b2db      	uxtb	r3, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	cccccccd 	.word	0xcccccccd

0800618c <Reset_Handler>:
 800618c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061c4 <LoopFillZerobss+0x12>
 8006190:	480d      	ldr	r0, [pc, #52]	; (80061c8 <LoopFillZerobss+0x16>)
 8006192:	490e      	ldr	r1, [pc, #56]	; (80061cc <LoopFillZerobss+0x1a>)
 8006194:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <LoopFillZerobss+0x1e>)
 8006196:	2300      	movs	r3, #0
 8006198:	e002      	b.n	80061a0 <LoopCopyDataInit>

0800619a <CopyDataInit>:
 800619a:	58d4      	ldr	r4, [r2, r3]
 800619c:	50c4      	str	r4, [r0, r3]
 800619e:	3304      	adds	r3, #4

080061a0 <LoopCopyDataInit>:
 80061a0:	18c4      	adds	r4, r0, r3
 80061a2:	428c      	cmp	r4, r1
 80061a4:	d3f9      	bcc.n	800619a <CopyDataInit>
 80061a6:	4a0b      	ldr	r2, [pc, #44]	; (80061d4 <LoopFillZerobss+0x22>)
 80061a8:	4c0b      	ldr	r4, [pc, #44]	; (80061d8 <LoopFillZerobss+0x26>)
 80061aa:	2300      	movs	r3, #0
 80061ac:	e001      	b.n	80061b2 <LoopFillZerobss>

080061ae <FillZerobss>:
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	3204      	adds	r2, #4

080061b2 <LoopFillZerobss>:
 80061b2:	42a2      	cmp	r2, r4
 80061b4:	d3fb      	bcc.n	80061ae <FillZerobss>
 80061b6:	f7ff fded 	bl	8005d94 <SystemInit>
 80061ba:	f004 fd59 	bl	800ac70 <__libc_init_array>
 80061be:	f7fc faaf 	bl	8002720 <main>
 80061c2:	4770      	bx	lr
 80061c4:	20020000 	.word	0x20020000
 80061c8:	20000000 	.word	0x20000000
 80061cc:	20000090 	.word	0x20000090
 80061d0:	0800fb60 	.word	0x0800fb60
 80061d4:	20000090 	.word	0x20000090
 80061d8:	200003e4 	.word	0x200003e4

080061dc <ADC_IRQHandler>:
 80061dc:	e7fe      	b.n	80061dc <ADC_IRQHandler>
	...

080061e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <HAL_Init+0x40>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a0d      	ldr	r2, [pc, #52]	; (8006220 <HAL_Init+0x40>)
 80061ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_Init+0x40>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a0a      	ldr	r2, [pc, #40]	; (8006220 <HAL_Init+0x40>)
 80061f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_Init+0x40>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a07      	ldr	r2, [pc, #28]	; (8006220 <HAL_Init+0x40>)
 8006202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006208:	2003      	movs	r0, #3
 800620a:	f000 f94f 	bl	80064ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800620e:	200f      	movs	r0, #15
 8006210:	f000 f808 	bl	8006224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006214:	f7ff fd18 	bl	8005c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40023c00 	.word	0x40023c00

08006224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_InitTick+0x54>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4b12      	ldr	r3, [pc, #72]	; (800627c <HAL_InitTick+0x58>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800623a:	fbb3 f3f1 	udiv	r3, r3, r1
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f967 	bl	8006516 <HAL_SYSTICK_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e00e      	b.n	8006270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b0f      	cmp	r3, #15
 8006256:	d80a      	bhi.n	800626e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006258:	2200      	movs	r2, #0
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	f000 f92f 	bl	80064c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006264:	4a06      	ldr	r2, [pc, #24]	; (8006280 <HAL_InitTick+0x5c>)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000020 	.word	0x20000020
 800627c:	20000028 	.word	0x20000028
 8006280:	20000024 	.word	0x20000024

08006284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_IncTick+0x20>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_IncTick+0x24>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4413      	add	r3, r2
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <HAL_IncTick+0x24>)
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000028 	.word	0x20000028
 80062a8:	200003d0 	.word	0x200003d0

080062ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return uwTick;
 80062b0:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <HAL_GetTick+0x14>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	200003d0 	.word	0x200003d0

080062c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062cc:	f7ff ffee 	bl	80062ac <HAL_GetTick>
 80062d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d005      	beq.n	80062ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_Delay+0x44>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062ea:	bf00      	nop
 80062ec:	f7ff ffde 	bl	80062ac <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d8f7      	bhi.n	80062ec <HAL_Delay+0x28>
  {
  }
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000028 	.word	0x20000028

0800630c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800631c:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <__NVIC_SetPriorityGrouping+0x44>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006328:	4013      	ands	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800633c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800633e:	4a04      	ldr	r2, [pc, #16]	; (8006350 <__NVIC_SetPriorityGrouping+0x44>)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	60d3      	str	r3, [r2, #12]
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006358:	4b04      	ldr	r3, [pc, #16]	; (800636c <__NVIC_GetPriorityGrouping+0x18>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	f003 0307 	and.w	r3, r3, #7
}
 8006362:	4618      	mov	r0, r3
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	e000ed00 	.word	0xe000ed00

08006370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800637a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637e:	2b00      	cmp	r3, #0
 8006380:	db0b      	blt.n	800639a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006382:	79fb      	ldrb	r3, [r7, #7]
 8006384:	f003 021f 	and.w	r2, r3, #31
 8006388:	4907      	ldr	r1, [pc, #28]	; (80063a8 <__NVIC_EnableIRQ+0x38>)
 800638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	2001      	movs	r0, #1
 8006392:	fa00 f202 	lsl.w	r2, r0, r2
 8006396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	e000e100 	.word	0xe000e100

080063ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	6039      	str	r1, [r7, #0]
 80063b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	db0a      	blt.n	80063d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	490c      	ldr	r1, [pc, #48]	; (80063f8 <__NVIC_SetPriority+0x4c>)
 80063c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ca:	0112      	lsls	r2, r2, #4
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	440b      	add	r3, r1
 80063d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063d4:	e00a      	b.n	80063ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	4908      	ldr	r1, [pc, #32]	; (80063fc <__NVIC_SetPriority+0x50>)
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	3b04      	subs	r3, #4
 80063e4:	0112      	lsls	r2, r2, #4
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	440b      	add	r3, r1
 80063ea:	761a      	strb	r2, [r3, #24]
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	e000e100 	.word	0xe000e100
 80063fc:	e000ed00 	.word	0xe000ed00

08006400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006400:	b480      	push	{r7}
 8006402:	b089      	sub	sp, #36	; 0x24
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	f1c3 0307 	rsb	r3, r3, #7
 800641a:	2b04      	cmp	r3, #4
 800641c:	bf28      	it	cs
 800641e:	2304      	movcs	r3, #4
 8006420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3304      	adds	r3, #4
 8006426:	2b06      	cmp	r3, #6
 8006428:	d902      	bls.n	8006430 <NVIC_EncodePriority+0x30>
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3b03      	subs	r3, #3
 800642e:	e000      	b.n	8006432 <NVIC_EncodePriority+0x32>
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006434:	f04f 32ff 	mov.w	r2, #4294967295
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43da      	mvns	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	401a      	ands	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006448:	f04f 31ff 	mov.w	r1, #4294967295
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	fa01 f303 	lsl.w	r3, r1, r3
 8006452:	43d9      	mvns	r1, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006458:	4313      	orrs	r3, r2
         );
}
 800645a:	4618      	mov	r0, r3
 800645c:	3724      	adds	r7, #36	; 0x24
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3b01      	subs	r3, #1
 8006474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006478:	d301      	bcc.n	800647e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800647a:	2301      	movs	r3, #1
 800647c:	e00f      	b.n	800649e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800647e:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <SysTick_Config+0x40>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3b01      	subs	r3, #1
 8006484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006486:	210f      	movs	r1, #15
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	f7ff ff8e 	bl	80063ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <SysTick_Config+0x40>)
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006496:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <SysTick_Config+0x40>)
 8006498:	2207      	movs	r2, #7
 800649a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	e000e010 	.word	0xe000e010

080064ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff29 	bl	800630c <__NVIC_SetPriorityGrouping>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	4603      	mov	r3, r0
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064d4:	f7ff ff3e 	bl	8006354 <__NVIC_GetPriorityGrouping>
 80064d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	6978      	ldr	r0, [r7, #20]
 80064e0:	f7ff ff8e 	bl	8006400 <NVIC_EncodePriority>
 80064e4:	4602      	mov	r2, r0
 80064e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff ff5d 	bl	80063ac <__NVIC_SetPriority>
}
 80064f2:	bf00      	nop
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	4603      	mov	r3, r0
 8006502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff ff31 	bl	8006370 <__NVIC_EnableIRQ>
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ffa2 	bl	8006468 <SysTick_Config>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800653c:	f7ff feb6 	bl	80062ac <HAL_GetTick>
 8006540:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d008      	beq.n	8006560 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e052      	b.n	8006606 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0216 	bic.w	r2, r2, #22
 800656e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695a      	ldr	r2, [r3, #20]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <HAL_DMA_Abort+0x62>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0208 	bic.w	r2, r2, #8
 800659e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065b0:	e013      	b.n	80065da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065b2:	f7ff fe7b 	bl	80062ac <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b05      	cmp	r3, #5
 80065be:	d90c      	bls.n	80065da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2203      	movs	r2, #3
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e015      	b.n	8006606 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e4      	bne.n	80065b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	223f      	movs	r2, #63	; 0x3f
 80065ee:	409a      	lsls	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d004      	beq.n	800662c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e00c      	b.n	8006646 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2205      	movs	r2, #5
 8006630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	; 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	e16b      	b.n	8006948 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006670:	2201      	movs	r2, #1
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4013      	ands	r3, r2
 8006682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	429a      	cmp	r2, r3
 800668a:	f040 815a 	bne.w	8006942 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b01      	cmp	r3, #1
 8006698:	d005      	beq.n	80066a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d130      	bne.n	8006708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	2203      	movs	r2, #3
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066dc:	2201      	movs	r2, #1
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	43db      	mvns	r3, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	4013      	ands	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	091b      	lsrs	r3, r3, #4
 80066f2:	f003 0201 	and.w	r2, r3, #1
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4313      	orrs	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f003 0303 	and.w	r3, r3, #3
 8006710:	2b03      	cmp	r3, #3
 8006712:	d017      	beq.n	8006744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	2203      	movs	r2, #3
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	43db      	mvns	r3, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4013      	ands	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4313      	orrs	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d123      	bne.n	8006798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	08da      	lsrs	r2, r3, #3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3208      	adds	r2, #8
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	220f      	movs	r2, #15
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	4013      	ands	r3, r2
 8006772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4313      	orrs	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	08da      	lsrs	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3208      	adds	r2, #8
 8006792:	69b9      	ldr	r1, [r7, #24]
 8006794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	2203      	movs	r2, #3
 80067a4:	fa02 f303 	lsl.w	r3, r2, r3
 80067a8:	43db      	mvns	r3, r3
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4013      	ands	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0203 	and.w	r2, r3, #3
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80b4 	beq.w	8006942 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	4b60      	ldr	r3, [pc, #384]	; (8006960 <HAL_GPIO_Init+0x30c>)
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	4a5f      	ldr	r2, [pc, #380]	; (8006960 <HAL_GPIO_Init+0x30c>)
 80067e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067e8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ea:	4b5d      	ldr	r3, [pc, #372]	; (8006960 <HAL_GPIO_Init+0x30c>)
 80067ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067f6:	4a5b      	ldr	r2, [pc, #364]	; (8006964 <HAL_GPIO_Init+0x310>)
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	3302      	adds	r3, #2
 80067fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	220f      	movs	r2, #15
 800680e:	fa02 f303 	lsl.w	r3, r2, r3
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a52      	ldr	r2, [pc, #328]	; (8006968 <HAL_GPIO_Init+0x314>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d02b      	beq.n	800687a <HAL_GPIO_Init+0x226>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a51      	ldr	r2, [pc, #324]	; (800696c <HAL_GPIO_Init+0x318>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d025      	beq.n	8006876 <HAL_GPIO_Init+0x222>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a50      	ldr	r2, [pc, #320]	; (8006970 <HAL_GPIO_Init+0x31c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01f      	beq.n	8006872 <HAL_GPIO_Init+0x21e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a4f      	ldr	r2, [pc, #316]	; (8006974 <HAL_GPIO_Init+0x320>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d019      	beq.n	800686e <HAL_GPIO_Init+0x21a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a4e      	ldr	r2, [pc, #312]	; (8006978 <HAL_GPIO_Init+0x324>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_GPIO_Init+0x216>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a4d      	ldr	r2, [pc, #308]	; (800697c <HAL_GPIO_Init+0x328>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00d      	beq.n	8006866 <HAL_GPIO_Init+0x212>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a4c      	ldr	r2, [pc, #304]	; (8006980 <HAL_GPIO_Init+0x32c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <HAL_GPIO_Init+0x20e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a4b      	ldr	r2, [pc, #300]	; (8006984 <HAL_GPIO_Init+0x330>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <HAL_GPIO_Init+0x20a>
 800685a:	2307      	movs	r3, #7
 800685c:	e00e      	b.n	800687c <HAL_GPIO_Init+0x228>
 800685e:	2308      	movs	r3, #8
 8006860:	e00c      	b.n	800687c <HAL_GPIO_Init+0x228>
 8006862:	2306      	movs	r3, #6
 8006864:	e00a      	b.n	800687c <HAL_GPIO_Init+0x228>
 8006866:	2305      	movs	r3, #5
 8006868:	e008      	b.n	800687c <HAL_GPIO_Init+0x228>
 800686a:	2304      	movs	r3, #4
 800686c:	e006      	b.n	800687c <HAL_GPIO_Init+0x228>
 800686e:	2303      	movs	r3, #3
 8006870:	e004      	b.n	800687c <HAL_GPIO_Init+0x228>
 8006872:	2302      	movs	r3, #2
 8006874:	e002      	b.n	800687c <HAL_GPIO_Init+0x228>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_GPIO_Init+0x228>
 800687a:	2300      	movs	r3, #0
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	f002 0203 	and.w	r2, r2, #3
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	4093      	lsls	r3, r2
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	4313      	orrs	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800688c:	4935      	ldr	r1, [pc, #212]	; (8006964 <HAL_GPIO_Init+0x310>)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	089b      	lsrs	r3, r3, #2
 8006892:	3302      	adds	r3, #2
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800689a:	4b3b      	ldr	r3, [pc, #236]	; (8006988 <HAL_GPIO_Init+0x334>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	43db      	mvns	r3, r3
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	4013      	ands	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80068be:	4a32      	ldr	r2, [pc, #200]	; (8006988 <HAL_GPIO_Init+0x334>)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80068c4:	4b30      	ldr	r3, [pc, #192]	; (8006988 <HAL_GPIO_Init+0x334>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	4013      	ands	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068e8:	4a27      	ldr	r2, [pc, #156]	; (8006988 <HAL_GPIO_Init+0x334>)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068ee:	4b26      	ldr	r3, [pc, #152]	; (8006988 <HAL_GPIO_Init+0x334>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	43db      	mvns	r3, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006912:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_GPIO_Init+0x334>)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <HAL_GPIO_Init+0x334>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800693c:	4a12      	ldr	r2, [pc, #72]	; (8006988 <HAL_GPIO_Init+0x334>)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b0f      	cmp	r3, #15
 800694c:	f67f ae90 	bls.w	8006670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3724      	adds	r7, #36	; 0x24
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40023800 	.word	0x40023800
 8006964:	40013800 	.word	0x40013800
 8006968:	40020000 	.word	0x40020000
 800696c:	40020400 	.word	0x40020400
 8006970:	40020800 	.word	0x40020800
 8006974:	40020c00 	.word	0x40020c00
 8006978:	40021000 	.word	0x40021000
 800697c:	40021400 	.word	0x40021400
 8006980:	40021800 	.word	0x40021800
 8006984:	40021c00 	.word	0x40021c00
 8006988:	40013c00 	.word	0x40013c00

0800698c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	807b      	strh	r3, [r7, #2]
 8006998:	4613      	mov	r3, r2
 800699a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800699c:	787b      	ldrb	r3, [r7, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069a2:	887a      	ldrh	r2, [r7, #2]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069a8:	e003      	b.n	80069b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069aa:	887b      	ldrh	r3, [r7, #2]
 80069ac:	041a      	lsls	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069d0:	887a      	ldrh	r2, [r7, #2]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4013      	ands	r3, r2
 80069d6:	041a      	lsls	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	43d9      	mvns	r1, r3
 80069dc:	887b      	ldrh	r3, [r7, #2]
 80069de:	400b      	ands	r3, r1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	619a      	str	r2, [r3, #24]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e12b      	b.n	8006c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fa ff60 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	; 0x24
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a58:	f001 fd2a 	bl	80084b0 <HAL_RCC_GetPCLK1Freq>
 8006a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4a81      	ldr	r2, [pc, #516]	; (8006c68 <HAL_I2C_Init+0x274>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d807      	bhi.n	8006a78 <HAL_I2C_Init+0x84>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a80      	ldr	r2, [pc, #512]	; (8006c6c <HAL_I2C_Init+0x278>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bf94      	ite	ls
 8006a70:	2301      	movls	r3, #1
 8006a72:	2300      	movhi	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	e006      	b.n	8006a86 <HAL_I2C_Init+0x92>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a7d      	ldr	r2, [pc, #500]	; (8006c70 <HAL_I2C_Init+0x27c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	bf94      	ite	ls
 8006a80:	2301      	movls	r3, #1
 8006a82:	2300      	movhi	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0e7      	b.n	8006c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4a78      	ldr	r2, [pc, #480]	; (8006c74 <HAL_I2C_Init+0x280>)
 8006a92:	fba2 2303 	umull	r2, r3, r2, r3
 8006a96:	0c9b      	lsrs	r3, r3, #18
 8006a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4a6a      	ldr	r2, [pc, #424]	; (8006c68 <HAL_I2C_Init+0x274>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d802      	bhi.n	8006ac8 <HAL_I2C_Init+0xd4>
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	e009      	b.n	8006adc <HAL_I2C_Init+0xe8>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ace:	fb02 f303 	mul.w	r3, r2, r3
 8006ad2:	4a69      	ldr	r2, [pc, #420]	; (8006c78 <HAL_I2C_Init+0x284>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	099b      	lsrs	r3, r3, #6
 8006ada:	3301      	adds	r3, #1
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	495c      	ldr	r1, [pc, #368]	; (8006c68 <HAL_I2C_Init+0x274>)
 8006af8:	428b      	cmp	r3, r1
 8006afa:	d819      	bhi.n	8006b30 <HAL_I2C_Init+0x13c>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	1e59      	subs	r1, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b10:	400b      	ands	r3, r1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <HAL_I2C_Init+0x138>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	1e59      	subs	r1, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b24:	3301      	adds	r3, #1
 8006b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b2a:	e051      	b.n	8006bd0 <HAL_I2C_Init+0x1dc>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	e04f      	b.n	8006bd0 <HAL_I2C_Init+0x1dc>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d111      	bne.n	8006b5c <HAL_I2C_Init+0x168>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	1e58      	subs	r0, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6859      	ldr	r1, [r3, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	440b      	add	r3, r1
 8006b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bf0c      	ite	eq
 8006b54:	2301      	moveq	r3, #1
 8006b56:	2300      	movne	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e012      	b.n	8006b82 <HAL_I2C_Init+0x18e>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	1e58      	subs	r0, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6859      	ldr	r1, [r3, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	440b      	add	r3, r1
 8006b6a:	0099      	lsls	r1, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b72:	3301      	adds	r3, #1
 8006b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf0c      	ite	eq
 8006b7c:	2301      	moveq	r3, #1
 8006b7e:	2300      	movne	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_Init+0x196>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e022      	b.n	8006bd0 <HAL_I2C_Init+0x1dc>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10e      	bne.n	8006bb0 <HAL_I2C_Init+0x1bc>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1e58      	subs	r0, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6859      	ldr	r1, [r3, #4]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	440b      	add	r3, r1
 8006ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bae:	e00f      	b.n	8006bd0 <HAL_I2C_Init+0x1dc>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	1e58      	subs	r0, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6859      	ldr	r1, [r3, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	440b      	add	r3, r1
 8006bbe:	0099      	lsls	r1, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bd0:	6879      	ldr	r1, [r7, #4]
 8006bd2:	6809      	ldr	r1, [r1, #0]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69da      	ldr	r2, [r3, #28]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6911      	ldr	r1, [r2, #16]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	4311      	orrs	r1, r2
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695a      	ldr	r2, [r3, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	000186a0 	.word	0x000186a0
 8006c6c:	001e847f 	.word	0x001e847f
 8006c70:	003d08ff 	.word	0x003d08ff
 8006c74:	431bde83 	.word	0x431bde83
 8006c78:	10624dd3 	.word	0x10624dd3

08006c7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	4608      	mov	r0, r1
 8006c86:	4611      	mov	r1, r2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	817b      	strh	r3, [r7, #10]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	813b      	strh	r3, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c96:	f7ff fb09 	bl	80062ac <HAL_GetTick>
 8006c9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	f040 80d9 	bne.w	8006e5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	2319      	movs	r3, #25
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	496d      	ldr	r1, [pc, #436]	; (8006e68 <HAL_I2C_Mem_Write+0x1ec>)
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fdad 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e0cc      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_I2C_Mem_Write+0x56>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e0c5      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d007      	beq.n	8006cf8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2221      	movs	r2, #33	; 0x21
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2240      	movs	r2, #64	; 0x40
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a3a      	ldr	r2, [r7, #32]
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a4d      	ldr	r2, [pc, #308]	; (8006e6c <HAL_I2C_Mem_Write+0x1f0>)
 8006d38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d3a:	88f8      	ldrh	r0, [r7, #6]
 8006d3c:	893a      	ldrh	r2, [r7, #8]
 8006d3e:	8979      	ldrh	r1, [r7, #10]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	9301      	str	r3, [sp, #4]
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fbe4 	bl	8007518 <I2C_RequestMemoryWrite>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d052      	beq.n	8006dfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e081      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fe2e 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b04      	cmp	r3, #4
 8006d70:	d107      	bne.n	8006d82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e06b      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d11b      	bne.n	8006dfc <HAL_I2C_Mem_Write+0x180>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1aa      	bne.n	8006d5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fe1a 	bl	8007a42 <I2C_WaitOnBTFFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00d      	beq.n	8006e30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d107      	bne.n	8006e2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e016      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e000      	b.n	8006e5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e5c:	2302      	movs	r3, #2
  }
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	00100002 	.word	0x00100002
 8006e6c:	ffff0000 	.word	0xffff0000

08006e70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	; 0x30
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e8a:	f7ff fa0f 	bl	80062ac <HAL_GetTick>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	f040 8208 	bne.w	80072ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	2319      	movs	r3, #25
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	497b      	ldr	r1, [pc, #492]	; (8007094 <HAL_I2C_Mem_Read+0x224>)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fcb3 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e1fb      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_I2C_Mem_Read+0x56>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e1f4      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d007      	beq.n	8006eec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2222      	movs	r2, #34	; 0x22
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2240      	movs	r2, #64	; 0x40
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a5b      	ldr	r2, [pc, #364]	; (8007098 <HAL_I2C_Mem_Read+0x228>)
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f2e:	88f8      	ldrh	r0, [r7, #6]
 8006f30:	893a      	ldrh	r2, [r7, #8]
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fb80 	bl	8007644 <I2C_RequestMemoryRead>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e1b0      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d113      	bne.n	8006f7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f56:	2300      	movs	r3, #0
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	623b      	str	r3, [r7, #32]
 8006f6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e184      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d11b      	bne.n	8006fbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	61fb      	str	r3, [r7, #28]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e164      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d11b      	bne.n	8006ffe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	61bb      	str	r3, [r7, #24]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	e144      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007014:	e138      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701a:	2b03      	cmp	r3, #3
 800701c:	f200 80f1 	bhi.w	8007202 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007024:	2b01      	cmp	r3, #1
 8007026:	d123      	bne.n	8007070 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 fd49 	bl	8007ac4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e139      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691a      	ldr	r2, [r3, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800706e:	e10b      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	2b02      	cmp	r3, #2
 8007076:	d14e      	bne.n	8007116 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	2200      	movs	r2, #0
 8007080:	4906      	ldr	r1, [pc, #24]	; (800709c <HAL_I2C_Mem_Read+0x22c>)
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fbc6 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e10e      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
 8007092:	bf00      	nop
 8007094:	00100002 	.word	0x00100002
 8007098:	ffff0000 	.word	0xffff0000
 800709c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007114:	e0b8      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2200      	movs	r2, #0
 800711e:	4966      	ldr	r1, [pc, #408]	; (80072b8 <HAL_I2C_Mem_Read+0x448>)
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fb77 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e0bf      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800713e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2200      	movs	r2, #0
 800717a:	494f      	ldr	r1, [pc, #316]	; (80072b8 <HAL_I2C_Mem_Read+0x448>)
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fb49 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e091      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007200:	e042      	b.n	8007288 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fc5c 	bl	8007ac4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e04c      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	b2d2      	uxtb	r2, r2
 8007222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f003 0304 	and.w	r3, r3, #4
 8007252:	2b04      	cmp	r3, #4
 8007254:	d118      	bne.n	8007288 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	b29a      	uxth	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728c:	2b00      	cmp	r3, #0
 800728e:	f47f aec2 	bne.w	8007016 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2220      	movs	r2, #32
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e000      	b.n	80072b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
  }
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3728      	adds	r7, #40	; 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	00010004 	.word	0x00010004

080072bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	460b      	mov	r3, r1
 80072ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80072cc:	f7fe ffee 	bl	80062ac <HAL_GetTick>
 80072d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80072d2:	2301      	movs	r3, #1
 80072d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b20      	cmp	r3, #32
 80072e0:	f040 8111 	bne.w	8007506 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2319      	movs	r3, #25
 80072ea:	2201      	movs	r2, #1
 80072ec:	4988      	ldr	r1, [pc, #544]	; (8007510 <HAL_I2C_IsDeviceReady+0x254>)
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa90 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80072fa:	2302      	movs	r3, #2
 80072fc:	e104      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_I2C_IsDeviceReady+0x50>
 8007308:	2302      	movs	r3, #2
 800730a:	e0fd      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b01      	cmp	r3, #1
 8007320:	d007      	beq.n	8007332 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0201 	orr.w	r2, r2, #1
 8007330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007340:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2224      	movs	r2, #36	; 0x24
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4a70      	ldr	r2, [pc, #448]	; (8007514 <HAL_I2C_IsDeviceReady+0x258>)
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007364:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fa4e 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00d      	beq.n	800739a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738c:	d103      	bne.n	8007396 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007394:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e0b6      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800739a:	897b      	ldrh	r3, [r7, #10]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80073aa:	f7fe ff7f 	bl	80062ac <HAL_GetTick>
 80073ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	bf0c      	ite	eq
 80073be:	2301      	moveq	r3, #1
 80073c0:	2300      	movne	r3, #0
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	bf0c      	ite	eq
 80073d6:	2301      	moveq	r3, #1
 80073d8:	2300      	movne	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80073de:	e025      	b.n	800742c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073e0:	f7fe ff64 	bl	80062ac <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d302      	bcc.n	80073f6 <HAL_I2C_IsDeviceReady+0x13a>
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	22a0      	movs	r2, #160	; 0xa0
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b02      	cmp	r3, #2
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007422:	bf0c      	ite	eq
 8007424:	2301      	moveq	r3, #1
 8007426:	2300      	movne	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2ba0      	cmp	r3, #160	; 0xa0
 8007436:	d005      	beq.n	8007444 <HAL_I2C_IsDeviceReady+0x188>
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_I2C_IsDeviceReady+0x188>
 800743e:	7dbb      	ldrb	r3, [r7, #22]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0cd      	beq.n	80073e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d129      	bne.n	80074ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007468:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	2319      	movs	r3, #25
 8007486:	2201      	movs	r2, #1
 8007488:	4921      	ldr	r1, [pc, #132]	; (8007510 <HAL_I2C_IsDeviceReady+0x254>)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f9c2 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e036      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e02c      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	2319      	movs	r3, #25
 80074ce:	2201      	movs	r2, #1
 80074d0:	490f      	ldr	r1, [pc, #60]	; (8007510 <HAL_I2C_IsDeviceReady+0x254>)
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f99e 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e012      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	f4ff af32 	bcc.w	8007356 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007506:	2302      	movs	r3, #2
  }
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	00100002 	.word	0x00100002
 8007514:	ffff0000 	.word	0xffff0000

08007518 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	4603      	mov	r3, r0
 8007528:	817b      	strh	r3, [r7, #10]
 800752a:	460b      	mov	r3, r1
 800752c:	813b      	strh	r3, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	2200      	movs	r2, #0
 800754a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 f960 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007568:	d103      	bne.n	8007572 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e05f      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	6a3a      	ldr	r2, [r7, #32]
 800758a:	492d      	ldr	r1, [pc, #180]	; (8007640 <I2C_RequestMemoryWrite+0x128>)
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f998 	bl	80078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e04c      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075b4:	6a39      	ldr	r1, [r7, #32]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fa02 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00d      	beq.n	80075de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d107      	bne.n	80075da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e02b      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d105      	bne.n	80075f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075e4:	893b      	ldrh	r3, [r7, #8]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	611a      	str	r2, [r3, #16]
 80075ee:	e021      	b.n	8007634 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007600:	6a39      	ldr	r1, [r7, #32]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f9dc 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00d      	beq.n	800762a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	2b04      	cmp	r3, #4
 8007614:	d107      	bne.n	8007626 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e005      	b.n	8007636 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800762a:	893b      	ldrh	r3, [r7, #8]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	00010002 	.word	0x00010002

08007644 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af02      	add	r7, sp, #8
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4603      	mov	r3, r0
 8007654:	817b      	strh	r3, [r7, #10]
 8007656:	460b      	mov	r3, r1
 8007658:	813b      	strh	r3, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800766c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800767c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	2200      	movs	r2, #0
 8007686:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f8c2 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a4:	d103      	bne.n	80076ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0aa      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076b2:	897b      	ldrh	r3, [r7, #10]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	6a3a      	ldr	r2, [r7, #32]
 80076c6:	4952      	ldr	r1, [pc, #328]	; (8007810 <I2C_RequestMemoryRead+0x1cc>)
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f8fa 	bl	80078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e097      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f964 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007714:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e076      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d105      	bne.n	800772c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e021      	b.n	8007770 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800772c:	893b      	ldrh	r3, [r7, #8]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	b29b      	uxth	r3, r3
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800773a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773c:	6a39      	ldr	r1, [r7, #32]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f93e 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2b04      	cmp	r3, #4
 8007750:	d107      	bne.n	8007762 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007760:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e050      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007766:	893b      	ldrh	r3, [r7, #8]
 8007768:	b2da      	uxtb	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007772:	6a39      	ldr	r1, [r7, #32]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f923 	bl	80079c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007784:	2b04      	cmp	r3, #4
 8007786:	d107      	bne.n	8007798 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007796:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e035      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f82b 	bl	8007814 <I2C_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00d      	beq.n	80077e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d2:	d103      	bne.n	80077dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e013      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077e0:	897b      	ldrh	r3, [r7, #10]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	4906      	ldr	r1, [pc, #24]	; (8007810 <I2C_RequestMemoryRead+0x1cc>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f863 	bl	80078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	00010002 	.word	0x00010002

08007814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007824:	e025      	b.n	8007872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d021      	beq.n	8007872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fe fd3d 	bl	80062ac <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d116      	bne.n	8007872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f043 0220 	orr.w	r2, r3, #32
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e023      	b.n	80078ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	0c1b      	lsrs	r3, r3, #16
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d10d      	bne.n	8007898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	43da      	mvns	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf0c      	ite	eq
 800788e:	2301      	moveq	r3, #1
 8007890:	2300      	movne	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	e00c      	b.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	43da      	mvns	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4013      	ands	r3, r2
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	bf0c      	ite	eq
 80078aa:	2301      	moveq	r3, #1
 80078ac:	2300      	movne	r3, #0
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d0b6      	beq.n	8007826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078d0:	e051      	b.n	8007976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d123      	bne.n	800792a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f043 0204 	orr.w	r2, r3, #4
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e046      	b.n	80079b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007930:	d021      	beq.n	8007976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007932:	f7fe fcbb 	bl	80062ac <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	d302      	bcc.n	8007948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d116      	bne.n	8007976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f043 0220 	orr.w	r2, r3, #32
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e020      	b.n	80079b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	0c1b      	lsrs	r3, r3, #16
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10c      	bne.n	800799a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	43da      	mvns	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	4013      	ands	r3, r2
 800798c:	b29b      	uxth	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	bf14      	ite	ne
 8007992:	2301      	movne	r3, #1
 8007994:	2300      	moveq	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	e00b      	b.n	80079b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	43da      	mvns	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	4013      	ands	r3, r2
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bf14      	ite	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	2300      	moveq	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d18d      	bne.n	80078d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079cc:	e02d      	b.n	8007a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f8ce 	bl	8007b70 <I2C_IsAcknowledgeFailed>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e02d      	b.n	8007a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d021      	beq.n	8007a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e6:	f7fe fc61 	bl	80062ac <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d116      	bne.n	8007a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f043 0220 	orr.w	r2, r3, #32
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e007      	b.n	8007a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a34:	2b80      	cmp	r3, #128	; 0x80
 8007a36:	d1ca      	bne.n	80079ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a4e:	e02d      	b.n	8007aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f88d 	bl	8007b70 <I2C_IsAcknowledgeFailed>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e02d      	b.n	8007abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d021      	beq.n	8007aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a68:	f7fe fc20 	bl	80062ac <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d302      	bcc.n	8007a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d116      	bne.n	8007aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e007      	b.n	8007abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d1ca      	bne.n	8007a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ad0:	e042      	b.n	8007b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d119      	bne.n	8007b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0210 	mvn.w	r2, #16
 8007ae8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e029      	b.n	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b14:	f7fe fbca 	bl	80062ac <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d302      	bcc.n	8007b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d116      	bne.n	8007b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	f043 0220 	orr.w	r2, r3, #32
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e007      	b.n	8007b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d1b5      	bne.n	8007ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b86:	d11b      	bne.n	8007bc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f043 0204 	orr.w	r2, r3, #4
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e000      	b.n	8007bc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
	...

08007bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e267      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d075      	beq.n	8007cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007bee:	4b88      	ldr	r3, [pc, #544]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d00c      	beq.n	8007c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bfa:	4b85      	ldr	r3, [pc, #532]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d112      	bne.n	8007c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c06:	4b82      	ldr	r3, [pc, #520]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c12:	d10b      	bne.n	8007c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c14:	4b7e      	ldr	r3, [pc, #504]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d05b      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x108>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d157      	bne.n	8007cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e242      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c34:	d106      	bne.n	8007c44 <HAL_RCC_OscConfig+0x74>
 8007c36:	4b76      	ldr	r3, [pc, #472]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a75      	ldr	r2, [pc, #468]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c40:	6013      	str	r3, [r2, #0]
 8007c42:	e01d      	b.n	8007c80 <HAL_RCC_OscConfig+0xb0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RCC_OscConfig+0x98>
 8007c4e:	4b70      	ldr	r3, [pc, #448]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a6f      	ldr	r2, [pc, #444]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	4b6d      	ldr	r3, [pc, #436]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a6c      	ldr	r2, [pc, #432]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	e00b      	b.n	8007c80 <HAL_RCC_OscConfig+0xb0>
 8007c68:	4b69      	ldr	r3, [pc, #420]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a68      	ldr	r2, [pc, #416]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a65      	ldr	r2, [pc, #404]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d013      	beq.n	8007cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c88:	f7fe fb10 	bl	80062ac <HAL_GetTick>
 8007c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c90:	f7fe fb0c 	bl	80062ac <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	; 0x64
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e207      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca2:	4b5b      	ldr	r3, [pc, #364]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0xc0>
 8007cae:	e014      	b.n	8007cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb0:	f7fe fafc 	bl	80062ac <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cb8:	f7fe faf8 	bl	80062ac <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b64      	cmp	r3, #100	; 0x64
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e1f3      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cca:	4b51      	ldr	r3, [pc, #324]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0xe8>
 8007cd6:	e000      	b.n	8007cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d063      	beq.n	8007dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ce6:	4b4a      	ldr	r3, [pc, #296]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 030c 	and.w	r3, r3, #12
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d11c      	bne.n	8007d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cfe:	4b44      	ldr	r3, [pc, #272]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d116      	bne.n	8007d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d0a:	4b41      	ldr	r3, [pc, #260]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_RCC_OscConfig+0x152>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d001      	beq.n	8007d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e1c7      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	4937      	ldr	r1, [pc, #220]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d36:	e03a      	b.n	8007dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d020      	beq.n	8007d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d40:	4b34      	ldr	r3, [pc, #208]	; (8007e14 <HAL_RCC_OscConfig+0x244>)
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d46:	f7fe fab1 	bl	80062ac <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d4e:	f7fe faad 	bl	80062ac <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e1a8      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d60:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0f0      	beq.n	8007d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d6c:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	4925      	ldr	r1, [pc, #148]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	600b      	str	r3, [r1, #0]
 8007d80:	e015      	b.n	8007dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <HAL_RCC_OscConfig+0x244>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d88:	f7fe fa90 	bl	80062ac <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d90:	f7fe fa8c 	bl	80062ac <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e187      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007da2:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d036      	beq.n	8007e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d016      	beq.n	8007df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <HAL_RCC_OscConfig+0x248>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc8:	f7fe fa70 	bl	80062ac <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dce:	e008      	b.n	8007de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dd0:	f7fe fa6c 	bl	80062ac <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e167      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <HAL_RCC_OscConfig+0x240>)
 8007de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f0      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x200>
 8007dee:	e01b      	b.n	8007e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007df0:	4b09      	ldr	r3, [pc, #36]	; (8007e18 <HAL_RCC_OscConfig+0x248>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007df6:	f7fe fa59 	bl	80062ac <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dfc:	e00e      	b.n	8007e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dfe:	f7fe fa55 	bl	80062ac <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d907      	bls.n	8007e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e150      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
 8007e10:	40023800 	.word	0x40023800
 8007e14:	42470000 	.word	0x42470000
 8007e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e1c:	4b88      	ldr	r3, [pc, #544]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1ea      	bne.n	8007dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8097 	beq.w	8007f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e36:	2300      	movs	r3, #0
 8007e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e3a:	4b81      	ldr	r3, [pc, #516]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10f      	bne.n	8007e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]
 8007e4a:	4b7d      	ldr	r3, [pc, #500]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	4a7c      	ldr	r2, [pc, #496]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e54:	6413      	str	r3, [r2, #64]	; 0x40
 8007e56:	4b7a      	ldr	r3, [pc, #488]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	60bb      	str	r3, [r7, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e62:	2301      	movs	r3, #1
 8007e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e66:	4b77      	ldr	r3, [pc, #476]	; (8008044 <HAL_RCC_OscConfig+0x474>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d118      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e72:	4b74      	ldr	r3, [pc, #464]	; (8008044 <HAL_RCC_OscConfig+0x474>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a73      	ldr	r2, [pc, #460]	; (8008044 <HAL_RCC_OscConfig+0x474>)
 8007e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e7e:	f7fe fa15 	bl	80062ac <HAL_GetTick>
 8007e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e86:	f7fe fa11 	bl	80062ac <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e10c      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e98:	4b6a      	ldr	r3, [pc, #424]	; (8008044 <HAL_RCC_OscConfig+0x474>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d0f0      	beq.n	8007e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d106      	bne.n	8007eba <HAL_RCC_OscConfig+0x2ea>
 8007eac:	4b64      	ldr	r3, [pc, #400]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	4a63      	ldr	r2, [pc, #396]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb8:	e01c      	b.n	8007ef4 <HAL_RCC_OscConfig+0x324>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCC_OscConfig+0x30c>
 8007ec2:	4b5f      	ldr	r3, [pc, #380]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	4a5e      	ldr	r2, [pc, #376]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ec8:	f043 0304 	orr.w	r3, r3, #4
 8007ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ece:	4b5c      	ldr	r3, [pc, #368]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed2:	4a5b      	ldr	r2, [pc, #364]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8007eda:	e00b      	b.n	8007ef4 <HAL_RCC_OscConfig+0x324>
 8007edc:	4b58      	ldr	r3, [pc, #352]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	4a57      	ldr	r2, [pc, #348]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ee2:	f023 0301 	bic.w	r3, r3, #1
 8007ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee8:	4b55      	ldr	r3, [pc, #340]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eec:	4a54      	ldr	r2, [pc, #336]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007eee:	f023 0304 	bic.w	r3, r3, #4
 8007ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d015      	beq.n	8007f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efc:	f7fe f9d6 	bl	80062ac <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f02:	e00a      	b.n	8007f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f04:	f7fe f9d2 	bl	80062ac <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e0cb      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f1a:	4b49      	ldr	r3, [pc, #292]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0ee      	beq.n	8007f04 <HAL_RCC_OscConfig+0x334>
 8007f26:	e014      	b.n	8007f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f28:	f7fe f9c0 	bl	80062ac <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f30:	f7fe f9bc 	bl	80062ac <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e0b5      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f46:	4b3e      	ldr	r3, [pc, #248]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1ee      	bne.n	8007f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d105      	bne.n	8007f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f58:	4b39      	ldr	r3, [pc, #228]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	4a38      	ldr	r2, [pc, #224]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a1 	beq.w	80080b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f6e:	4b34      	ldr	r3, [pc, #208]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d05c      	beq.n	8008034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d141      	bne.n	8008006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <HAL_RCC_OscConfig+0x478>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fe f990 	bl	80062ac <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f90:	f7fe f98c 	bl	80062ac <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e087      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa2:	4b27      	ldr	r3, [pc, #156]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69da      	ldr	r2, [r3, #28]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	019b      	lsls	r3, r3, #6
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	041b      	lsls	r3, r3, #16
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	061b      	lsls	r3, r3, #24
 8007fd2:	491b      	ldr	r1, [pc, #108]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fd8:	4b1b      	ldr	r3, [pc, #108]	; (8008048 <HAL_RCC_OscConfig+0x478>)
 8007fda:	2201      	movs	r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fde:	f7fe f965 	bl	80062ac <HAL_GetTick>
 8007fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fe6:	f7fe f961 	bl	80062ac <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e05c      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff8:	4b11      	ldr	r3, [pc, #68]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0f0      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x416>
 8008004:	e054      	b.n	80080b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <HAL_RCC_OscConfig+0x478>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800c:	f7fe f94e 	bl	80062ac <HAL_GetTick>
 8008010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008012:	e008      	b.n	8008026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008014:	f7fe f94a 	bl	80062ac <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d901      	bls.n	8008026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e045      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008026:	4b06      	ldr	r3, [pc, #24]	; (8008040 <HAL_RCC_OscConfig+0x470>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f0      	bne.n	8008014 <HAL_RCC_OscConfig+0x444>
 8008032:	e03d      	b.n	80080b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d107      	bne.n	800804c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e038      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
 8008040:	40023800 	.word	0x40023800
 8008044:	40007000 	.word	0x40007000
 8008048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800804c:	4b1b      	ldr	r3, [pc, #108]	; (80080bc <HAL_RCC_OscConfig+0x4ec>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d028      	beq.n	80080ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008064:	429a      	cmp	r2, r3
 8008066:	d121      	bne.n	80080ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008072:	429a      	cmp	r2, r3
 8008074:	d11a      	bne.n	80080ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800807c:	4013      	ands	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008084:	4293      	cmp	r3, r2
 8008086:	d111      	bne.n	80080ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	3b01      	subs	r3, #1
 8008096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008098:	429a      	cmp	r2, r3
 800809a:	d107      	bne.n	80080ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d001      	beq.n	80080b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40023800 	.word	0x40023800

080080c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0cc      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080d4:	4b68      	ldr	r3, [pc, #416]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d90c      	bls.n	80080fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e2:	4b65      	ldr	r3, [pc, #404]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ea:	4b63      	ldr	r3, [pc, #396]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d001      	beq.n	80080fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e0b8      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d020      	beq.n	800814a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008114:	4b59      	ldr	r3, [pc, #356]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	4a58      	ldr	r2, [pc, #352]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 800811a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800811e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d005      	beq.n	8008138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800812c:	4b53      	ldr	r3, [pc, #332]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	4a52      	ldr	r2, [pc, #328]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008138:	4b50      	ldr	r3, [pc, #320]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	494d      	ldr	r1, [pc, #308]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008146:	4313      	orrs	r3, r2
 8008148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d044      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d107      	bne.n	800816e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815e:	4b47      	ldr	r3, [pc, #284]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d119      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e07f      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d003      	beq.n	800817e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800817a:	2b03      	cmp	r3, #3
 800817c:	d107      	bne.n	800818e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800817e:	4b3f      	ldr	r3, [pc, #252]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e06f      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800818e:	4b3b      	ldr	r3, [pc, #236]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e067      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800819e:	4b37      	ldr	r3, [pc, #220]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f023 0203 	bic.w	r2, r3, #3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4934      	ldr	r1, [pc, #208]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081b0:	f7fe f87c 	bl	80062ac <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b6:	e00a      	b.n	80081ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b8:	f7fe f878 	bl	80062ac <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e04f      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081ce:	4b2b      	ldr	r3, [pc, #172]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 020c 	and.w	r2, r3, #12
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	429a      	cmp	r2, r3
 80081de:	d1eb      	bne.n	80081b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081e0:	4b25      	ldr	r3, [pc, #148]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d20c      	bcs.n	8008208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ee:	4b22      	ldr	r3, [pc, #136]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <HAL_RCC_ClockConfig+0x1b8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d001      	beq.n	8008208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e032      	b.n	800826e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d008      	beq.n	8008226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008214:	4b19      	ldr	r3, [pc, #100]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	4916      	ldr	r1, [pc, #88]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008222:	4313      	orrs	r3, r2
 8008224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	490e      	ldr	r1, [pc, #56]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 8008242:	4313      	orrs	r3, r2
 8008244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008246:	f000 f821 	bl	800828c <HAL_RCC_GetSysClockFreq>
 800824a:	4602      	mov	r2, r0
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	091b      	lsrs	r3, r3, #4
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	490a      	ldr	r1, [pc, #40]	; (8008280 <HAL_RCC_ClockConfig+0x1c0>)
 8008258:	5ccb      	ldrb	r3, [r1, r3]
 800825a:	fa22 f303 	lsr.w	r3, r2, r3
 800825e:	4a09      	ldr	r2, [pc, #36]	; (8008284 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008262:	4b09      	ldr	r3, [pc, #36]	; (8008288 <HAL_RCC_ClockConfig+0x1c8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd ffdc 	bl	8006224 <HAL_InitTick>

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40023c00 	.word	0x40023c00
 800827c:	40023800 	.word	0x40023800
 8008280:	0800f928 	.word	0x0800f928
 8008284:	20000020 	.word	0x20000020
 8008288:	20000024 	.word	0x20000024

0800828c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800828c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008290:	b094      	sub	sp, #80	; 0x50
 8008292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	647b      	str	r3, [r7, #68]	; 0x44
 8008298:	2300      	movs	r3, #0
 800829a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800829c:	2300      	movs	r3, #0
 800829e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082a4:	4b79      	ldr	r3, [pc, #484]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f003 030c 	and.w	r3, r3, #12
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d00d      	beq.n	80082cc <HAL_RCC_GetSysClockFreq+0x40>
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	f200 80e1 	bhi.w	8008478 <HAL_RCC_GetSysClockFreq+0x1ec>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_RCC_GetSysClockFreq+0x34>
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d003      	beq.n	80082c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80082be:	e0db      	b.n	8008478 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082c0:	4b73      	ldr	r3, [pc, #460]	; (8008490 <HAL_RCC_GetSysClockFreq+0x204>)
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80082c4:	e0db      	b.n	800847e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082c6:	4b73      	ldr	r3, [pc, #460]	; (8008494 <HAL_RCC_GetSysClockFreq+0x208>)
 80082c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082ca:	e0d8      	b.n	800847e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082cc:	4b6f      	ldr	r3, [pc, #444]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082d6:	4b6d      	ldr	r3, [pc, #436]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d063      	beq.n	80083aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082e2:	4b6a      	ldr	r3, [pc, #424]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	099b      	lsrs	r3, r3, #6
 80082e8:	2200      	movs	r2, #0
 80082ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
 80082f6:	2300      	movs	r3, #0
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
 80082fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80082fe:	4622      	mov	r2, r4
 8008300:	462b      	mov	r3, r5
 8008302:	f04f 0000 	mov.w	r0, #0
 8008306:	f04f 0100 	mov.w	r1, #0
 800830a:	0159      	lsls	r1, r3, #5
 800830c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008310:	0150      	lsls	r0, r2, #5
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4621      	mov	r1, r4
 8008318:	1a51      	subs	r1, r2, r1
 800831a:	6139      	str	r1, [r7, #16]
 800831c:	4629      	mov	r1, r5
 800831e:	eb63 0301 	sbc.w	r3, r3, r1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008330:	4659      	mov	r1, fp
 8008332:	018b      	lsls	r3, r1, #6
 8008334:	4651      	mov	r1, sl
 8008336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800833a:	4651      	mov	r1, sl
 800833c:	018a      	lsls	r2, r1, #6
 800833e:	4651      	mov	r1, sl
 8008340:	ebb2 0801 	subs.w	r8, r2, r1
 8008344:	4659      	mov	r1, fp
 8008346:	eb63 0901 	sbc.w	r9, r3, r1
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800835a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800835e:	4690      	mov	r8, r2
 8008360:	4699      	mov	r9, r3
 8008362:	4623      	mov	r3, r4
 8008364:	eb18 0303 	adds.w	r3, r8, r3
 8008368:	60bb      	str	r3, [r7, #8]
 800836a:	462b      	mov	r3, r5
 800836c:	eb49 0303 	adc.w	r3, r9, r3
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800837e:	4629      	mov	r1, r5
 8008380:	024b      	lsls	r3, r1, #9
 8008382:	4621      	mov	r1, r4
 8008384:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008388:	4621      	mov	r1, r4
 800838a:	024a      	lsls	r2, r1, #9
 800838c:	4610      	mov	r0, r2
 800838e:	4619      	mov	r1, r3
 8008390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008392:	2200      	movs	r2, #0
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
 8008396:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800839c:	f7f8 fc56 	bl	8000c4c <__aeabi_uldivmod>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4613      	mov	r3, r2
 80083a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083a8:	e058      	b.n	800845c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083aa:	4b38      	ldr	r3, [pc, #224]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	099b      	lsrs	r3, r3, #6
 80083b0:	2200      	movs	r2, #0
 80083b2:	4618      	mov	r0, r3
 80083b4:	4611      	mov	r1, r2
 80083b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80083ba:	623b      	str	r3, [r7, #32]
 80083bc:	2300      	movs	r3, #0
 80083be:	627b      	str	r3, [r7, #36]	; 0x24
 80083c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80083c4:	4642      	mov	r2, r8
 80083c6:	464b      	mov	r3, r9
 80083c8:	f04f 0000 	mov.w	r0, #0
 80083cc:	f04f 0100 	mov.w	r1, #0
 80083d0:	0159      	lsls	r1, r3, #5
 80083d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083d6:	0150      	lsls	r0, r2, #5
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4641      	mov	r1, r8
 80083de:	ebb2 0a01 	subs.w	sl, r2, r1
 80083e2:	4649      	mov	r1, r9
 80083e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80083f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80083f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80083fc:	ebb2 040a 	subs.w	r4, r2, sl
 8008400:	eb63 050b 	sbc.w	r5, r3, fp
 8008404:	f04f 0200 	mov.w	r2, #0
 8008408:	f04f 0300 	mov.w	r3, #0
 800840c:	00eb      	lsls	r3, r5, #3
 800840e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008412:	00e2      	lsls	r2, r4, #3
 8008414:	4614      	mov	r4, r2
 8008416:	461d      	mov	r5, r3
 8008418:	4643      	mov	r3, r8
 800841a:	18e3      	adds	r3, r4, r3
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	464b      	mov	r3, r9
 8008420:	eb45 0303 	adc.w	r3, r5, r3
 8008424:	607b      	str	r3, [r7, #4]
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008432:	4629      	mov	r1, r5
 8008434:	028b      	lsls	r3, r1, #10
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800843c:	4621      	mov	r1, r4
 800843e:	028a      	lsls	r2, r1, #10
 8008440:	4610      	mov	r0, r2
 8008442:	4619      	mov	r1, r3
 8008444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008446:	2200      	movs	r2, #0
 8008448:	61bb      	str	r3, [r7, #24]
 800844a:	61fa      	str	r2, [r7, #28]
 800844c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008450:	f7f8 fbfc 	bl	8000c4c <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4613      	mov	r3, r2
 800845a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800845c:	4b0b      	ldr	r3, [pc, #44]	; (800848c <HAL_RCC_GetSysClockFreq+0x200>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	3301      	adds	r3, #1
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800846c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800846e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008470:	fbb2 f3f3 	udiv	r3, r2, r3
 8008474:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008476:	e002      	b.n	800847e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <HAL_RCC_GetSysClockFreq+0x204>)
 800847a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800847c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800847e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008480:	4618      	mov	r0, r3
 8008482:	3750      	adds	r7, #80	; 0x50
 8008484:	46bd      	mov	sp, r7
 8008486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800848a:	bf00      	nop
 800848c:	40023800 	.word	0x40023800
 8008490:	00f42400 	.word	0x00f42400
 8008494:	007a1200 	.word	0x007a1200

08008498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800849c:	4b03      	ldr	r3, [pc, #12]	; (80084ac <HAL_RCC_GetHCLKFreq+0x14>)
 800849e:	681b      	ldr	r3, [r3, #0]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000020 	.word	0x20000020

080084b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084b4:	f7ff fff0 	bl	8008498 <HAL_RCC_GetHCLKFreq>
 80084b8:	4602      	mov	r2, r0
 80084ba:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	0a9b      	lsrs	r3, r3, #10
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	4903      	ldr	r1, [pc, #12]	; (80084d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084c6:	5ccb      	ldrb	r3, [r1, r3]
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40023800 	.word	0x40023800
 80084d4:	0800f938 	.word	0x0800f938

080084d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084dc:	f7ff ffdc 	bl	8008498 <HAL_RCC_GetHCLKFreq>
 80084e0:	4602      	mov	r2, r0
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	0b5b      	lsrs	r3, r3, #13
 80084e8:	f003 0307 	and.w	r3, r3, #7
 80084ec:	4903      	ldr	r1, [pc, #12]	; (80084fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ee:	5ccb      	ldrb	r3, [r1, r3]
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40023800 	.word	0x40023800
 80084fc:	0800f938 	.word	0x0800f938

08008500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e07b      	b.n	800860a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d108      	bne.n	800852c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008522:	d009      	beq.n	8008538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	61da      	str	r2, [r3, #28]
 800852a:	e005      	b.n	8008538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fd fb30 	bl	8005bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800856e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	431a      	orrs	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a8:	431a      	orrs	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085b2:	431a      	orrs	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085bc:	ea42 0103 	orr.w	r1, r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	f003 0104 	and.w	r1, r3, #4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	f003 0210 	and.w	r2, r3, #16
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b088      	sub	sp, #32
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800862c:	2b01      	cmp	r3, #1
 800862e:	d101      	bne.n	8008634 <HAL_SPI_Transmit+0x22>
 8008630:	2302      	movs	r3, #2
 8008632:	e126      	b.n	8008882 <HAL_SPI_Transmit+0x270>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800863c:	f7fd fe36 	bl	80062ac <HAL_GetTick>
 8008640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d002      	beq.n	8008658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008656:	e10b      	b.n	8008870 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_SPI_Transmit+0x52>
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008668:	e102      	b.n	8008870 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2203      	movs	r2, #3
 800866e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	88fa      	ldrh	r2, [r7, #6]
 8008682:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086b0:	d10f      	bne.n	80086d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d007      	beq.n	80086f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086f8:	d14b      	bne.n	8008792 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_SPI_Transmit+0xf6>
 8008702:	8afb      	ldrh	r3, [r7, #22]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d13e      	bne.n	8008786 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800872c:	e02b      	b.n	8008786 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d112      	bne.n	8008762 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	881a      	ldrh	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874c:	1c9a      	adds	r2, r3, #2
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008760:	e011      	b.n	8008786 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008762:	f7fd fda3 	bl	80062ac <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	429a      	cmp	r2, r3
 8008770:	d803      	bhi.n	800877a <HAL_SPI_Transmit+0x168>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d102      	bne.n	8008780 <HAL_SPI_Transmit+0x16e>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d102      	bne.n	8008786 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008784:	e074      	b.n	8008870 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ce      	bne.n	800872e <HAL_SPI_Transmit+0x11c>
 8008790:	e04c      	b.n	800882c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_SPI_Transmit+0x18e>
 800879a:	8afb      	ldrh	r3, [r7, #22]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d140      	bne.n	8008822 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	7812      	ldrb	r2, [r2, #0]
 80087ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80087c6:	e02c      	b.n	8008822 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d113      	bne.n	80087fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	330c      	adds	r3, #12
 80087e0:	7812      	ldrb	r2, [r2, #0]
 80087e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80087fc:	e011      	b.n	8008822 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fe:	f7fd fd55 	bl	80062ac <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d803      	bhi.n	8008816 <HAL_SPI_Transmit+0x204>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d102      	bne.n	800881c <HAL_SPI_Transmit+0x20a>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008820:	e026      	b.n	8008870 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1cd      	bne.n	80087c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fbcb 	bl	8008fcc <SPI_EndRxTxTransaction>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	77fb      	strb	r3, [r7, #31]
 800886c:	e000      	b.n	8008870 <HAL_SPI_Transmit+0x25e>
  }

error:
 800886e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008880:	7ffb      	ldrb	r3, [r7, #31]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af02      	add	r7, sp, #8
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	4613      	mov	r3, r2
 8008898:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a6:	d112      	bne.n	80088ce <HAL_SPI_Receive+0x44>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10e      	bne.n	80088ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2204      	movs	r2, #4
 80088b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	4613      	mov	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	68b9      	ldr	r1, [r7, #8]
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f8f1 	bl	8008aac <HAL_SPI_TransmitReceive>
 80088ca:	4603      	mov	r3, r0
 80088cc:	e0ea      	b.n	8008aa4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_SPI_Receive+0x52>
 80088d8:	2302      	movs	r3, #2
 80088da:	e0e3      	b.n	8008aa4 <HAL_SPI_Receive+0x21a>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088e4:	f7fd fce2 	bl	80062ac <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d002      	beq.n	80088fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
 80088f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80088fa:	e0ca      	b.n	8008a92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <HAL_SPI_Receive+0x7e>
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800890c:	e0c1      	b.n	8008a92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2204      	movs	r2, #4
 8008912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	88fa      	ldrh	r2, [r7, #6]
 800892c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008954:	d10f      	bne.n	8008976 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008974:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d007      	beq.n	8008994 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008992:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d162      	bne.n	8008a62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800899c:	e02e      	b.n	80089fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d115      	bne.n	80089d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f103 020c 	add.w	r2, r3, #12
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089d6:	e011      	b.n	80089fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089d8:	f7fd fc68 	bl	80062ac <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d803      	bhi.n	80089f0 <HAL_SPI_Receive+0x166>
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ee:	d102      	bne.n	80089f6 <HAL_SPI_Receive+0x16c>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d102      	bne.n	80089fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089fa:	e04a      	b.n	8008a92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1cb      	bne.n	800899e <HAL_SPI_Receive+0x114>
 8008a06:	e031      	b.n	8008a6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d113      	bne.n	8008a3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	b292      	uxth	r2, r2
 8008a22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a3c:	e011      	b.n	8008a62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a3e:	f7fd fc35 	bl	80062ac <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d803      	bhi.n	8008a56 <HAL_SPI_Receive+0x1cc>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a54:	d102      	bne.n	8008a5c <HAL_SPI_Receive+0x1d2>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d102      	bne.n	8008a62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a60:	e017      	b.n	8008a92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1cd      	bne.n	8008a08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fa45 	bl	8008f00 <SPI_EndRxTransaction>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	75fb      	strb	r3, [r7, #23]
 8008a8e:	e000      	b.n	8008a92 <HAL_SPI_Receive+0x208>
  }

error :
 8008a90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08c      	sub	sp, #48	; 0x30
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008aba:	2301      	movs	r3, #1
 8008abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x26>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e18a      	b.n	8008de8 <HAL_SPI_TransmitReceive+0x33c>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ada:	f7fd fbe7 	bl	80062ac <HAL_GetTick>
 8008ade:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008af0:	887b      	ldrh	r3, [r7, #2]
 8008af2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d00f      	beq.n	8008b1c <HAL_SPI_TransmitReceive+0x70>
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b02:	d107      	bne.n	8008b14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d103      	bne.n	8008b14 <HAL_SPI_TransmitReceive+0x68>
 8008b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d003      	beq.n	8008b1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b14:	2302      	movs	r3, #2
 8008b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b1a:	e15b      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x82>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <HAL_SPI_TransmitReceive+0x82>
 8008b28:	887b      	ldrh	r3, [r7, #2]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d103      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b34:	e14e      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d003      	beq.n	8008b4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2205      	movs	r2, #5
 8008b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	887a      	ldrh	r2, [r7, #2]
 8008b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	887a      	ldrh	r2, [r7, #2]
 8008b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	887a      	ldrh	r2, [r7, #2]
 8008b6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	887a      	ldrh	r2, [r7, #2]
 8008b72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	d007      	beq.n	8008b9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba6:	d178      	bne.n	8008c9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_SPI_TransmitReceive+0x10a>
 8008bb0:	8b7b      	ldrh	r3, [r7, #26]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d166      	bne.n	8008c84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	881a      	ldrh	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	1c9a      	adds	r2, r3, #2
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bda:	e053      	b.n	8008c84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d11b      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x176>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d016      	beq.n	8008c22 <HAL_SPI_TransmitReceive+0x176>
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d113      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfe:	881a      	ldrh	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0a:	1c9a      	adds	r2, r3, #2
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d119      	bne.n	8008c64 <HAL_SPI_TransmitReceive+0x1b8>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d014      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	b292      	uxth	r2, r2
 8008c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4c:	1c9a      	adds	r2, r3, #2
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c60:	2301      	movs	r3, #1
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c64:	f7fd fb22 	bl	80062ac <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d807      	bhi.n	8008c84 <HAL_SPI_TransmitReceive+0x1d8>
 8008c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d003      	beq.n	8008c84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c82:	e0a7      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1a6      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x130>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1a1      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x130>
 8008c98:	e07c      	b.n	8008d94 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x1fc>
 8008ca2:	8b7b      	ldrh	r3, [r7, #26]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d16b      	bne.n	8008d80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	330c      	adds	r3, #12
 8008cb2:	7812      	ldrb	r2, [r2, #0]
 8008cb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cce:	e057      	b.n	8008d80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d11c      	bne.n	8008d18 <HAL_SPI_TransmitReceive+0x26c>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d017      	beq.n	8008d18 <HAL_SPI_TransmitReceive+0x26c>
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d114      	bne.n	8008d18 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d119      	bne.n	8008d5a <HAL_SPI_TransmitReceive+0x2ae>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d014      	beq.n	8008d5a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d56:	2301      	movs	r3, #1
 8008d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d5a:	f7fd faa7 	bl	80062ac <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d803      	bhi.n	8008d72 <HAL_SPI_TransmitReceive+0x2c6>
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d102      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x2cc>
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d7e:	e029      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1a2      	bne.n	8008cd0 <HAL_SPI_TransmitReceive+0x224>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d19d      	bne.n	8008cd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f917 	bl	8008fcc <SPI_EndRxTxTransaction>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d006      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008db0:	e010      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	e000      	b.n	8008dd4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008dd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3730      	adds	r7, #48	; 0x30
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	603b      	str	r3, [r7, #0]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e00:	f7fd fa54 	bl	80062ac <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	1a9b      	subs	r3, r3, r2
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e10:	f7fd fa4c 	bl	80062ac <HAL_GetTick>
 8008e14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e16:	4b39      	ldr	r3, [pc, #228]	; (8008efc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	015b      	lsls	r3, r3, #5
 8008e1c:	0d1b      	lsrs	r3, r3, #20
 8008e1e:	69fa      	ldr	r2, [r7, #28]
 8008e20:	fb02 f303 	mul.w	r3, r2, r3
 8008e24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e26:	e054      	b.n	8008ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2e:	d050      	beq.n	8008ed2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e30:	f7fd fa3c 	bl	80062ac <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d902      	bls.n	8008e46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d13d      	bne.n	8008ec2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e5e:	d111      	bne.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e68:	d004      	beq.n	8008e74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e72:	d107      	bne.n	8008e84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e8c:	d10f      	bne.n	8008eae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e017      	b.n	8008ef2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689a      	ldr	r2, [r3, #8]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4013      	ands	r3, r2
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	bf0c      	ite	eq
 8008ee2:	2301      	moveq	r3, #1
 8008ee4:	2300      	movne	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d19b      	bne.n	8008e28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3720      	adds	r7, #32
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000020 	.word	0x20000020

08008f00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f14:	d111      	bne.n	8008f3a <SPI_EndRxTransaction+0x3a>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f1e:	d004      	beq.n	8008f2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f28:	d107      	bne.n	8008f3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f42:	d12a      	bne.n	8008f9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4c:	d012      	beq.n	8008f74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2200      	movs	r2, #0
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff ff49 	bl	8008df0 <SPI_WaitFlagStateUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d02d      	beq.n	8008fc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f043 0220 	orr.w	r2, r3, #32
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e026      	b.n	8008fc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f7ff ff36 	bl	8008df0 <SPI_WaitFlagStateUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d01a      	beq.n	8008fc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8e:	f043 0220 	orr.w	r2, r3, #32
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f96:	2303      	movs	r3, #3
 8008f98:	e013      	b.n	8008fc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff ff23 	bl	8008df0 <SPI_WaitFlagStateUntilTimeout>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb4:	f043 0220 	orr.w	r2, r3, #32
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e000      	b.n	8008fc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af02      	add	r7, sp, #8
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fd8:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <SPI_EndRxTxTransaction+0x7c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1b      	ldr	r2, [pc, #108]	; (800904c <SPI_EndRxTxTransaction+0x80>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	0d5b      	lsrs	r3, r3, #21
 8008fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff6:	d112      	bne.n	800901e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2180      	movs	r1, #128	; 0x80
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f7ff fef4 	bl	8008df0 <SPI_WaitFlagStateUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d016      	beq.n	800903c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	f043 0220 	orr.w	r2, r3, #32
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e00f      	b.n	800903e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00a      	beq.n	800903a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	3b01      	subs	r3, #1
 8009028:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	2b80      	cmp	r3, #128	; 0x80
 8009036:	d0f2      	beq.n	800901e <SPI_EndRxTxTransaction+0x52>
 8009038:	e000      	b.n	800903c <SPI_EndRxTxTransaction+0x70>
        break;
 800903a:	bf00      	nop
  }

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000020 	.word	0x20000020
 800904c:	165e9f81 	.word	0x165e9f81

08009050 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e034      	b.n	80090d0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d106      	bne.n	8009080 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7f8 fb00 	bl	8001680 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3308      	adds	r3, #8
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f001 fd1a 	bl	800aac4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	461a      	mov	r2, r3
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	f001 fd64 	bl	800ab68 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6858      	ldr	r0, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	f001 fd99 	bl	800abe4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	6892      	ldr	r2, [r2, #8]
 80090ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	6892      	ldr	r2, [r2, #8]
 80090c6:	f041 0101 	orr.w	r1, r1, #1
 80090ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e041      	b.n	800916e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fc fef4 	bl	8005eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f000 fa96 	bl	8009648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b01      	cmp	r3, #1
 800918a:	d001      	beq.n	8009190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e04e      	b.n	800922e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a23      	ldr	r2, [pc, #140]	; (800923c <HAL_TIM_Base_Start_IT+0xc4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d022      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ba:	d01d      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <HAL_TIM_Base_Start_IT+0xc8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d018      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a1e      	ldr	r2, [pc, #120]	; (8009244 <HAL_TIM_Base_Start_IT+0xcc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <HAL_TIM_Base_Start_IT+0xd0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00e      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1b      	ldr	r2, [pc, #108]	; (800924c <HAL_TIM_Base_Start_IT+0xd4>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a19      	ldr	r2, [pc, #100]	; (8009250 <HAL_TIM_Base_Start_IT+0xd8>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x80>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a18      	ldr	r2, [pc, #96]	; (8009254 <HAL_TIM_Base_Start_IT+0xdc>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d111      	bne.n	800921c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b06      	cmp	r3, #6
 8009208:	d010      	beq.n	800922c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0201 	orr.w	r2, r2, #1
 8009218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921a:	e007      	b.n	800922c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40010000 	.word	0x40010000
 8009240:	40000400 	.word	0x40000400
 8009244:	40000800 	.word	0x40000800
 8009248:	40000c00 	.word	0x40000c00
 800924c:	40010400 	.word	0x40010400
 8009250:	40014000 	.word	0x40014000
 8009254:	40001800 	.word	0x40001800

08009258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b02      	cmp	r3, #2
 800926c:	d122      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0302 	and.w	r3, r3, #2
 8009278:	2b02      	cmp	r3, #2
 800927a:	d11b      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0202 	mvn.w	r2, #2
 8009284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	f003 0303 	and.w	r3, r3, #3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9b5 	bl	800960a <HAL_TIM_IC_CaptureCallback>
 80092a0:	e005      	b.n	80092ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f9a7 	bl	80095f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f9b8 	bl	800961e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d122      	bne.n	8009308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d11b      	bne.n	8009308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0204 	mvn.w	r2, #4
 80092d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2202      	movs	r2, #2
 80092de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f98b 	bl	800960a <HAL_TIM_IC_CaptureCallback>
 80092f4:	e005      	b.n	8009302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f97d 	bl	80095f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f98e 	bl	800961e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b08      	cmp	r3, #8
 8009314:	d122      	bne.n	800935c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f003 0308 	and.w	r3, r3, #8
 8009320:	2b08      	cmp	r3, #8
 8009322:	d11b      	bne.n	800935c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f06f 0208 	mvn.w	r2, #8
 800932c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2204      	movs	r2, #4
 8009332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f961 	bl	800960a <HAL_TIM_IC_CaptureCallback>
 8009348:	e005      	b.n	8009356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f953 	bl	80095f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f964 	bl	800961e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0310 	and.w	r3, r3, #16
 8009366:	2b10      	cmp	r3, #16
 8009368:	d122      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0310 	and.w	r3, r3, #16
 8009374:	2b10      	cmp	r3, #16
 8009376:	d11b      	bne.n	80093b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0210 	mvn.w	r2, #16
 8009380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2208      	movs	r2, #8
 8009386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f937 	bl	800960a <HAL_TIM_IC_CaptureCallback>
 800939c:	e005      	b.n	80093aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f929 	bl	80095f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f93a 	bl	800961e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d10e      	bne.n	80093dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d107      	bne.n	80093dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0201 	mvn.w	r2, #1
 80093d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fc fb78 	bl	8005acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d10e      	bne.n	8009408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f4:	2b80      	cmp	r3, #128	; 0x80
 80093f6:	d107      	bne.n	8009408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fae0 	bl	80099c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009412:	2b40      	cmp	r3, #64	; 0x40
 8009414:	d10e      	bne.n	8009434 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009420:	2b40      	cmp	r3, #64	; 0x40
 8009422:	d107      	bne.n	8009434 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800942c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f8ff 	bl	8009632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0320 	and.w	r3, r3, #32
 800943e:	2b20      	cmp	r3, #32
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b20      	cmp	r3, #32
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0220 	mvn.w	r2, #32
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 faaa 	bl	80099b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800947c:	2b01      	cmp	r3, #1
 800947e:	d101      	bne.n	8009484 <HAL_TIM_ConfigClockSource+0x1c>
 8009480:	2302      	movs	r3, #2
 8009482:	e0b4      	b.n	80095ee <HAL_TIM_ConfigClockSource+0x186>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094bc:	d03e      	beq.n	800953c <HAL_TIM_ConfigClockSource+0xd4>
 80094be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c2:	f200 8087 	bhi.w	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ca:	f000 8086 	beq.w	80095da <HAL_TIM_ConfigClockSource+0x172>
 80094ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d2:	d87f      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094d4:	2b70      	cmp	r3, #112	; 0x70
 80094d6:	d01a      	beq.n	800950e <HAL_TIM_ConfigClockSource+0xa6>
 80094d8:	2b70      	cmp	r3, #112	; 0x70
 80094da:	d87b      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094dc:	2b60      	cmp	r3, #96	; 0x60
 80094de:	d050      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x11a>
 80094e0:	2b60      	cmp	r3, #96	; 0x60
 80094e2:	d877      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094e4:	2b50      	cmp	r3, #80	; 0x50
 80094e6:	d03c      	beq.n	8009562 <HAL_TIM_ConfigClockSource+0xfa>
 80094e8:	2b50      	cmp	r3, #80	; 0x50
 80094ea:	d873      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d058      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x13a>
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	d86f      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094f4:	2b30      	cmp	r3, #48	; 0x30
 80094f6:	d064      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0x15a>
 80094f8:	2b30      	cmp	r3, #48	; 0x30
 80094fa:	d86b      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 80094fc:	2b20      	cmp	r3, #32
 80094fe:	d060      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009500:	2b20      	cmp	r3, #32
 8009502:	d867      	bhi.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d05c      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0x15a>
 8009508:	2b10      	cmp	r3, #16
 800950a:	d05a      	beq.n	80095c2 <HAL_TIM_ConfigClockSource+0x15a>
 800950c:	e062      	b.n	80095d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6818      	ldr	r0, [r3, #0]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	6899      	ldr	r1, [r3, #8]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f000 f9ad 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	609a      	str	r2, [r3, #8]
      break;
 800953a:	e04f      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6899      	ldr	r1, [r3, #8]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f000 f996 	bl	800987c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800955e:	609a      	str	r2, [r3, #8]
      break;
 8009560:	e03c      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6859      	ldr	r1, [r3, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	461a      	mov	r2, r3
 8009570:	f000 f90a 	bl	8009788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2150      	movs	r1, #80	; 0x50
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f963 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 8009580:	e02c      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6859      	ldr	r1, [r3, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	461a      	mov	r2, r3
 8009590:	f000 f929 	bl	80097e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2160      	movs	r1, #96	; 0x60
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f953 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 80095a0:	e01c      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6859      	ldr	r1, [r3, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f000 f8ea 	bl	8009788 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2140      	movs	r1, #64	; 0x40
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f943 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 80095c0:	e00c      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4619      	mov	r1, r3
 80095cc:	4610      	mov	r0, r2
 80095ce:	f000 f93a 	bl	8009846 <TIM_ITRx_SetConfig>
      break;
 80095d2:	e003      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
      break;
 80095d8:	e000      	b.n	80095dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80095da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095fe:	bf00      	nop
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a40      	ldr	r2, [pc, #256]	; (800975c <TIM_Base_SetConfig+0x114>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d013      	beq.n	8009688 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009666:	d00f      	beq.n	8009688 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3d      	ldr	r2, [pc, #244]	; (8009760 <TIM_Base_SetConfig+0x118>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d00b      	beq.n	8009688 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a3c      	ldr	r2, [pc, #240]	; (8009764 <TIM_Base_SetConfig+0x11c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d007      	beq.n	8009688 <TIM_Base_SetConfig+0x40>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a3b      	ldr	r2, [pc, #236]	; (8009768 <TIM_Base_SetConfig+0x120>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d003      	beq.n	8009688 <TIM_Base_SetConfig+0x40>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a3a      	ldr	r2, [pc, #232]	; (800976c <TIM_Base_SetConfig+0x124>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d108      	bne.n	800969a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a2f      	ldr	r2, [pc, #188]	; (800975c <TIM_Base_SetConfig+0x114>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d02b      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a8:	d027      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2c      	ldr	r2, [pc, #176]	; (8009760 <TIM_Base_SetConfig+0x118>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d023      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a2b      	ldr	r2, [pc, #172]	; (8009764 <TIM_Base_SetConfig+0x11c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01f      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a2a      	ldr	r2, [pc, #168]	; (8009768 <TIM_Base_SetConfig+0x120>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d01b      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a29      	ldr	r2, [pc, #164]	; (800976c <TIM_Base_SetConfig+0x124>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d017      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a28      	ldr	r2, [pc, #160]	; (8009770 <TIM_Base_SetConfig+0x128>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d013      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a27      	ldr	r2, [pc, #156]	; (8009774 <TIM_Base_SetConfig+0x12c>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00f      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a26      	ldr	r2, [pc, #152]	; (8009778 <TIM_Base_SetConfig+0x130>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00b      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a25      	ldr	r2, [pc, #148]	; (800977c <TIM_Base_SetConfig+0x134>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d007      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a24      	ldr	r2, [pc, #144]	; (8009780 <TIM_Base_SetConfig+0x138>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d003      	beq.n	80096fa <TIM_Base_SetConfig+0xb2>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a23      	ldr	r2, [pc, #140]	; (8009784 <TIM_Base_SetConfig+0x13c>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d108      	bne.n	800970c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	4313      	orrs	r3, r2
 800970a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a0a      	ldr	r2, [pc, #40]	; (800975c <TIM_Base_SetConfig+0x114>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d003      	beq.n	8009740 <TIM_Base_SetConfig+0xf8>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a0c      	ldr	r2, [pc, #48]	; (800976c <TIM_Base_SetConfig+0x124>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d103      	bne.n	8009748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691a      	ldr	r2, [r3, #16]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	615a      	str	r2, [r3, #20]
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	40010000 	.word	0x40010000
 8009760:	40000400 	.word	0x40000400
 8009764:	40000800 	.word	0x40000800
 8009768:	40000c00 	.word	0x40000c00
 800976c:	40010400 	.word	0x40010400
 8009770:	40014000 	.word	0x40014000
 8009774:	40014400 	.word	0x40014400
 8009778:	40014800 	.word	0x40014800
 800977c:	40001800 	.word	0x40001800
 8009780:	40001c00 	.word	0x40001c00
 8009784:	40002000 	.word	0x40002000

08009788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 030a 	bic.w	r3, r3, #10
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b087      	sub	sp, #28
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	60f8      	str	r0, [r7, #12]
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	f023 0210 	bic.w	r2, r3, #16
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	4313      	orrs	r3, r2
 8009864:	f043 0307 	orr.w	r3, r3, #7
 8009868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	609a      	str	r2, [r3, #8]
}
 8009870:	bf00      	nop
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	021a      	lsls	r2, r3, #8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	431a      	orrs	r2, r3
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	609a      	str	r2, [r3, #8]
}
 80098b0:	bf00      	nop
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098d0:	2302      	movs	r3, #2
 80098d2:	e05a      	b.n	800998a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a21      	ldr	r2, [pc, #132]	; (8009998 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d022      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009920:	d01d      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a1d      	ldr	r2, [pc, #116]	; (800999c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d018      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a1b      	ldr	r2, [pc, #108]	; (80099a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d013      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a1a      	ldr	r2, [pc, #104]	; (80099a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00e      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a18      	ldr	r2, [pc, #96]	; (80099a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d009      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a17      	ldr	r2, [pc, #92]	; (80099ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d004      	beq.n	800995e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d10c      	bne.n	8009978 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4313      	orrs	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	40010000 	.word	0x40010000
 800999c:	40000400 	.word	0x40000400
 80099a0:	40000800 	.word	0x40000800
 80099a4:	40000c00 	.word	0x40000c00
 80099a8:	40010400 	.word	0x40010400
 80099ac:	40014000 	.word	0x40014000
 80099b0:	40001800 	.word	0x40001800

080099b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e03f      	b.n	8009a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fc fb34 	bl	8006070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2224      	movs	r2, #36	; 0x24
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fddb 	bl	800a5dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695a      	ldr	r2, [r3, #20]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b08a      	sub	sp, #40	; 0x28
 8009a7a:	af02      	add	r7, sp, #8
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d17c      	bne.n	8009b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <HAL_UART_Transmit+0x2c>
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e075      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_UART_Transmit+0x3e>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e06e      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2221      	movs	r2, #33	; 0x21
 8009ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aca:	f7fc fbef 	bl	80062ac <HAL_GetTick>
 8009ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	88fa      	ldrh	r2, [r7, #6]
 8009ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae4:	d108      	bne.n	8009af8 <HAL_UART_Transmit+0x82>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	e003      	b.n	8009b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009b08:	e02a      	b.n	8009b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2200      	movs	r2, #0
 8009b12:	2180      	movs	r1, #128	; 0x80
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fb1f 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e036      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	e007      	b.n	8009b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1cf      	bne.n	8009b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2140      	movs	r1, #64	; 0x40
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 faef 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e006      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e000      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b90:	2302      	movs	r3, #2
  }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d11d      	bne.n	8009bf0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_UART_Receive_IT+0x26>
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e016      	b.n	8009bf2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_UART_Receive_IT+0x38>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e00f      	b.n	8009bf2 <HAL_UART_Receive_IT+0x58>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009be0:	88fb      	ldrh	r3, [r7, #6]
 8009be2:	461a      	mov	r2, r3
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fb24 	bl	800a234 <UART_Start_Receive_IT>
 8009bec:	4603      	mov	r3, r0
 8009bee:	e000      	b.n	8009bf2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b0ba      	sub	sp, #232	; 0xe8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c32:	f003 030f 	and.w	r3, r3, #15
 8009c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10f      	bne.n	8009c62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d009      	beq.n	8009c62 <HAL_UART_IRQHandler+0x66>
 8009c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fc03 	bl	800a466 <UART_Receive_IT>
      return;
 8009c60:	e256      	b.n	800a110 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 80de 	beq.w	8009e28 <HAL_UART_IRQHandler+0x22c>
 8009c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80d1 	beq.w	8009e28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <HAL_UART_IRQHandler+0xae>
 8009c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d005      	beq.n	8009caa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f043 0201 	orr.w	r2, r3, #1
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <HAL_UART_IRQHandler+0xd2>
 8009cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f043 0202 	orr.w	r2, r3, #2
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <HAL_UART_IRQHandler+0xf6>
 8009cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cea:	f043 0204 	orr.w	r2, r3, #4
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf6:	f003 0308 	and.w	r3, r3, #8
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <HAL_UART_IRQHandler+0x126>
 8009cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d105      	bne.n	8009d16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d005      	beq.n	8009d22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	f043 0208 	orr.w	r2, r3, #8
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 81ed 	beq.w	800a106 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d30:	f003 0320 	and.w	r3, r3, #32
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d008      	beq.n	8009d4a <HAL_UART_IRQHandler+0x14e>
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d3c:	f003 0320 	and.w	r3, r3, #32
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fb8e 	bl	800a466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	bf0c      	ite	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d103      	bne.n	8009d76 <HAL_UART_IRQHandler+0x17a>
 8009d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d04f      	beq.n	8009e16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fa96 	bl	800a2a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d86:	2b40      	cmp	r3, #64	; 0x40
 8009d88:	d141      	bne.n	8009e0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3314      	adds	r3, #20
 8009d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3314      	adds	r3, #20
 8009db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1d9      	bne.n	8009d8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d013      	beq.n	8009e06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de2:	4a7d      	ldr	r2, [pc, #500]	; (8009fd8 <HAL_UART_IRQHandler+0x3dc>)
 8009de4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fc fc0f 	bl	800660e <HAL_DMA_Abort_IT>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d016      	beq.n	8009e24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e04:	e00e      	b.n	8009e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f990 	bl	800a12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0c:	e00a      	b.n	8009e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f98c 	bl	800a12c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e14:	e006      	b.n	8009e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f988 	bl	800a12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009e22:	e170      	b.n	800a106 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e24:	bf00      	nop
    return;
 8009e26:	e16e      	b.n	800a106 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	f040 814a 	bne.w	800a0c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 8143 	beq.w	800a0c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 813c 	beq.w	800a0c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60bb      	str	r3, [r7, #8]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6e:	2b40      	cmp	r3, #64	; 0x40
 8009e70:	f040 80b4 	bne.w	8009fdc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 8140 	beq.w	800a10a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e92:	429a      	cmp	r2, r3
 8009e94:	f080 8139 	bcs.w	800a10a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eaa:	f000 8088 	beq.w	8009fbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1d9      	bne.n	8009eae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3314      	adds	r3, #20
 8009f00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f0c:	f023 0301 	bic.w	r3, r3, #1
 8009f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3314      	adds	r3, #20
 8009f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e1      	bne.n	8009efa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3314      	adds	r3, #20
 8009f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e3      	bne.n	8009f36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	330c      	adds	r3, #12
 8009f82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f8e:	f023 0310 	bic.w	r3, r3, #16
 8009f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	330c      	adds	r3, #12
 8009f9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8009fa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009fa8:	e841 2300 	strex	r3, r2, [r1]
 8009fac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e3      	bne.n	8009f7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fc fab8 	bl	800652e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f8b6 	bl	800a140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fd4:	e099      	b.n	800a10a <HAL_UART_IRQHandler+0x50e>
 8009fd6:	bf00      	nop
 8009fd8:	0800a36f 	.word	0x0800a36f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 808b 	beq.w	800a10e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 8086 	beq.w	800a10e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	330c      	adds	r3, #12
 800a008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a026:	647a      	str	r2, [r7, #68]	; 0x44
 800a028:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a02c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e3      	bne.n	800a002 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3314      	adds	r3, #20
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	623b      	str	r3, [r7, #32]
   return(result);
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	f023 0301 	bic.w	r3, r3, #1
 800a050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3314      	adds	r3, #20
 800a05a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a05e:	633a      	str	r2, [r7, #48]	; 0x30
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e3      	bne.n	800a03a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2220      	movs	r2, #32
 800a076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	330c      	adds	r3, #12
 800a086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0310 	bic.w	r3, r3, #16
 800a096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	330c      	adds	r3, #12
 800a0a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a0a4:	61fa      	str	r2, [r7, #28]
 800a0a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	69b9      	ldr	r1, [r7, #24]
 800a0aa:	69fa      	ldr	r2, [r7, #28]
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e3      	bne.n	800a080 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f83e 	bl	800a140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0c4:	e023      	b.n	800a10e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x4ea>
 800a0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f959 	bl	800a396 <UART_Transmit_IT>
    return;
 800a0e4:	e014      	b.n	800a110 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00e      	beq.n	800a110 <HAL_UART_IRQHandler+0x514>
 800a0f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f999 	bl	800a436 <UART_EndTransmit_IT>
    return;
 800a104:	e004      	b.n	800a110 <HAL_UART_IRQHandler+0x514>
    return;
 800a106:	bf00      	nop
 800a108:	e002      	b.n	800a110 <HAL_UART_IRQHandler+0x514>
      return;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <HAL_UART_IRQHandler+0x514>
      return;
 800a10e:	bf00      	nop
  }
}
 800a110:	37e8      	adds	r7, #232	; 0xe8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop

0800a118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b090      	sub	sp, #64	; 0x40
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a168:	e050      	b.n	800a20c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d04c      	beq.n	800a20c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <UART_WaitOnFlagUntilTimeout+0x30>
 800a178:	f7fc f898 	bl	80062ac <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a184:	429a      	cmp	r2, r3
 800a186:	d241      	bcs.n	800a20c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	330c      	adds	r3, #12
 800a18e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	e853 3f00 	ldrex	r3, [r3]
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	330c      	adds	r3, #12
 800a1a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a8:	637a      	str	r2, [r7, #52]	; 0x34
 800a1aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b0:	e841 2300 	strex	r3, r2, [r1]
 800a1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e5      	bne.n	800a188 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3314      	adds	r3, #20
 800a1c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	e853 3f00 	ldrex	r3, [r3]
 800a1ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f023 0301 	bic.w	r3, r3, #1
 800a1d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3314      	adds	r3, #20
 800a1da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1dc:	623a      	str	r2, [r7, #32]
 800a1de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e0:	69f9      	ldr	r1, [r7, #28]
 800a1e2:	6a3a      	ldr	r2, [r7, #32]
 800a1e4:	e841 2300 	strex	r3, r2, [r1]
 800a1e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e5      	bne.n	800a1bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2220      	movs	r2, #32
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e00f      	b.n	800a22c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4013      	ands	r3, r2
 800a216:	68ba      	ldr	r2, [r7, #8]
 800a218:	429a      	cmp	r2, r3
 800a21a:	bf0c      	ite	eq
 800a21c:	2301      	moveq	r3, #1
 800a21e:	2300      	movne	r3, #0
 800a220:	b2db      	uxtb	r3, r3
 800a222:	461a      	mov	r2, r3
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	429a      	cmp	r2, r3
 800a228:	d09f      	beq.n	800a16a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3740      	adds	r7, #64	; 0x40
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	4613      	mov	r3, r2
 800a240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	88fa      	ldrh	r2, [r7, #6]
 800a24c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	88fa      	ldrh	r2, [r7, #6]
 800a252:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2222      	movs	r2, #34	; 0x22
 800a25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a278:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f042 0201 	orr.w	r2, r2, #1
 800a288:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f042 0220 	orr.w	r2, r2, #32
 800a298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b095      	sub	sp, #84	; 0x54
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	330c      	adds	r3, #12
 800a2ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2d0:	643a      	str	r2, [r7, #64]	; 0x40
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e5      	bne.n	800a2b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3314      	adds	r3, #20
 800a302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a304:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a30a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d119      	bne.n	800a354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f023 0310 	bic.w	r3, r3, #16
 800a336:	647b      	str	r3, [r7, #68]	; 0x44
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a340:	61ba      	str	r2, [r7, #24]
 800a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	613b      	str	r3, [r7, #16]
   return(result);
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a362:	bf00      	nop
 800a364:	3754      	adds	r7, #84	; 0x54
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b084      	sub	sp, #16
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f7ff fecf 	bl	800a12c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a396:	b480      	push	{r7}
 800a398:	b085      	sub	sp, #20
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b21      	cmp	r3, #33	; 0x21
 800a3a8:	d13e      	bne.n	800a428 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b2:	d114      	bne.n	800a3de <UART_Transmit_IT+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d110      	bne.n	800a3de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	1c9a      	adds	r2, r3, #2
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	621a      	str	r2, [r3, #32]
 800a3dc:	e008      	b.n	800a3f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	1c59      	adds	r1, r3, #1
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6211      	str	r1, [r2, #32]
 800a3e8:	781a      	ldrb	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10f      	bne.n	800a424 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a412:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a422:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	e000      	b.n	800a42a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a428:	2302      	movs	r3, #2
  }
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b082      	sub	sp, #8
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a44c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2220      	movs	r2, #32
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fe5e 	bl	800a118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b08c      	sub	sp, #48	; 0x30
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b22      	cmp	r3, #34	; 0x22
 800a478:	f040 80ab 	bne.w	800a5d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a484:	d117      	bne.n	800a4b6 <UART_Receive_IT+0x50>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d113      	bne.n	800a4b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a48e:	2300      	movs	r3, #0
 800a490:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ae:	1c9a      	adds	r2, r3, #2
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	629a      	str	r2, [r3, #40]	; 0x28
 800a4b4:	e026      	b.n	800a504 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c8:	d007      	beq.n	800a4da <UART_Receive_IT+0x74>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <UART_Receive_IT+0x82>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d106      	bne.n	800a4e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	b2da      	uxtb	r2, r3
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e4:	701a      	strb	r2, [r3, #0]
 800a4e6:	e008      	b.n	800a4fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4619      	mov	r1, r3
 800a512:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a514:	2b00      	cmp	r3, #0
 800a516:	d15a      	bne.n	800a5ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68da      	ldr	r2, [r3, #12]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0220 	bic.w	r2, r2, #32
 800a526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68da      	ldr	r2, [r3, #12]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a536:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695a      	ldr	r2, [r3, #20]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0201 	bic.w	r2, r2, #1
 800a546:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a554:	2b01      	cmp	r3, #1
 800a556:	d135      	bne.n	800a5c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	330c      	adds	r3, #12
 800a564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	e853 3f00 	ldrex	r3, [r3]
 800a56c:	613b      	str	r3, [r7, #16]
   return(result);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f023 0310 	bic.w	r3, r3, #16
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	330c      	adds	r3, #12
 800a57c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57e:	623a      	str	r2, [r7, #32]
 800a580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a582:	69f9      	ldr	r1, [r7, #28]
 800a584:	6a3a      	ldr	r2, [r7, #32]
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d1e5      	bne.n	800a55e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 0310 	and.w	r3, r3, #16
 800a59c:	2b10      	cmp	r3, #16
 800a59e:	d10a      	bne.n	800a5b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7ff fdbf 	bl	800a140 <HAL_UARTEx_RxEventCallback>
 800a5c2:	e002      	b.n	800a5ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7fb fcfd 	bl	8005fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e002      	b.n	800a5d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e000      	b.n	800a5d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a5d2:	2302      	movs	r3, #2
  }
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3730      	adds	r7, #48	; 0x30
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5e0:	b0c0      	sub	sp, #256	; 0x100
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f8:	68d9      	ldr	r1, [r3, #12]
 800a5fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	ea40 0301 	orr.w	r3, r0, r1
 800a604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60a:	689a      	ldr	r2, [r3, #8]
 800a60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	431a      	orrs	r2, r3
 800a614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	431a      	orrs	r2, r3
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	4313      	orrs	r3, r2
 800a624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a634:	f021 010c 	bic.w	r1, r1, #12
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a642:	430b      	orrs	r3, r1
 800a644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a656:	6999      	ldr	r1, [r3, #24]
 800a658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	ea40 0301 	orr.w	r3, r0, r1
 800a662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4b8f      	ldr	r3, [pc, #572]	; (800a8a8 <UART_SetConfig+0x2cc>)
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d005      	beq.n	800a67c <UART_SetConfig+0xa0>
 800a670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4b8d      	ldr	r3, [pc, #564]	; (800a8ac <UART_SetConfig+0x2d0>)
 800a678:	429a      	cmp	r2, r3
 800a67a:	d104      	bne.n	800a686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a67c:	f7fd ff2c 	bl	80084d8 <HAL_RCC_GetPCLK2Freq>
 800a680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a684:	e003      	b.n	800a68e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a686:	f7fd ff13 	bl	80084b0 <HAL_RCC_GetPCLK1Freq>
 800a68a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a698:	f040 810c 	bne.w	800a8b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a69c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a6a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a6aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	1891      	adds	r1, r2, r2
 800a6b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a6b6:	415b      	adcs	r3, r3
 800a6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a6be:	4621      	mov	r1, r4
 800a6c0:	eb12 0801 	adds.w	r8, r2, r1
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	eb43 0901 	adc.w	r9, r3, r1
 800a6ca:	f04f 0200 	mov.w	r2, #0
 800a6ce:	f04f 0300 	mov.w	r3, #0
 800a6d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6de:	4690      	mov	r8, r2
 800a6e0:	4699      	mov	r9, r3
 800a6e2:	4623      	mov	r3, r4
 800a6e4:	eb18 0303 	adds.w	r3, r8, r3
 800a6e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6ec:	462b      	mov	r3, r5
 800a6ee:	eb49 0303 	adc.w	r3, r9, r3
 800a6f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a70a:	460b      	mov	r3, r1
 800a70c:	18db      	adds	r3, r3, r3
 800a70e:	653b      	str	r3, [r7, #80]	; 0x50
 800a710:	4613      	mov	r3, r2
 800a712:	eb42 0303 	adc.w	r3, r2, r3
 800a716:	657b      	str	r3, [r7, #84]	; 0x54
 800a718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a71c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a720:	f7f6 fa94 	bl	8000c4c <__aeabi_uldivmod>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4b61      	ldr	r3, [pc, #388]	; (800a8b0 <UART_SetConfig+0x2d4>)
 800a72a:	fba3 2302 	umull	r2, r3, r3, r2
 800a72e:	095b      	lsrs	r3, r3, #5
 800a730:	011c      	lsls	r4, r3, #4
 800a732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a736:	2200      	movs	r2, #0
 800a738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a73c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a744:	4642      	mov	r2, r8
 800a746:	464b      	mov	r3, r9
 800a748:	1891      	adds	r1, r2, r2
 800a74a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a74c:	415b      	adcs	r3, r3
 800a74e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a754:	4641      	mov	r1, r8
 800a756:	eb12 0a01 	adds.w	sl, r2, r1
 800a75a:	4649      	mov	r1, r9
 800a75c:	eb43 0b01 	adc.w	fp, r3, r1
 800a760:	f04f 0200 	mov.w	r2, #0
 800a764:	f04f 0300 	mov.w	r3, #0
 800a768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a76c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a774:	4692      	mov	sl, r2
 800a776:	469b      	mov	fp, r3
 800a778:	4643      	mov	r3, r8
 800a77a:	eb1a 0303 	adds.w	r3, sl, r3
 800a77e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a782:	464b      	mov	r3, r9
 800a784:	eb4b 0303 	adc.w	r3, fp, r3
 800a788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a79c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	18db      	adds	r3, r3, r3
 800a7a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	eb42 0303 	adc.w	r3, r2, r3
 800a7ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a7b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a7b6:	f7f6 fa49 	bl	8000c4c <__aeabi_uldivmod>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4b3b      	ldr	r3, [pc, #236]	; (800a8b0 <UART_SetConfig+0x2d4>)
 800a7c2:	fba3 2301 	umull	r2, r3, r3, r1
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	2264      	movs	r2, #100	; 0x64
 800a7ca:	fb02 f303 	mul.w	r3, r2, r3
 800a7ce:	1acb      	subs	r3, r1, r3
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a7d6:	4b36      	ldr	r3, [pc, #216]	; (800a8b0 <UART_SetConfig+0x2d4>)
 800a7d8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7dc:	095b      	lsrs	r3, r3, #5
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7e4:	441c      	add	r4, r3
 800a7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a7f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	1891      	adds	r1, r2, r2
 800a7fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800a800:	415b      	adcs	r3, r3
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a808:	4641      	mov	r1, r8
 800a80a:	1851      	adds	r1, r2, r1
 800a80c:	6339      	str	r1, [r7, #48]	; 0x30
 800a80e:	4649      	mov	r1, r9
 800a810:	414b      	adcs	r3, r1
 800a812:	637b      	str	r3, [r7, #52]	; 0x34
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a820:	4659      	mov	r1, fp
 800a822:	00cb      	lsls	r3, r1, #3
 800a824:	4651      	mov	r1, sl
 800a826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a82a:	4651      	mov	r1, sl
 800a82c:	00ca      	lsls	r2, r1, #3
 800a82e:	4610      	mov	r0, r2
 800a830:	4619      	mov	r1, r3
 800a832:	4603      	mov	r3, r0
 800a834:	4642      	mov	r2, r8
 800a836:	189b      	adds	r3, r3, r2
 800a838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a83c:	464b      	mov	r3, r9
 800a83e:	460a      	mov	r2, r1
 800a840:	eb42 0303 	adc.w	r3, r2, r3
 800a844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a85c:	460b      	mov	r3, r1
 800a85e:	18db      	adds	r3, r3, r3
 800a860:	62bb      	str	r3, [r7, #40]	; 0x28
 800a862:	4613      	mov	r3, r2
 800a864:	eb42 0303 	adc.w	r3, r2, r3
 800a868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a86a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a86e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a872:	f7f6 f9eb 	bl	8000c4c <__aeabi_uldivmod>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4b0d      	ldr	r3, [pc, #52]	; (800a8b0 <UART_SetConfig+0x2d4>)
 800a87c:	fba3 1302 	umull	r1, r3, r3, r2
 800a880:	095b      	lsrs	r3, r3, #5
 800a882:	2164      	movs	r1, #100	; 0x64
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	3332      	adds	r3, #50	; 0x32
 800a88e:	4a08      	ldr	r2, [pc, #32]	; (800a8b0 <UART_SetConfig+0x2d4>)
 800a890:	fba2 2303 	umull	r2, r3, r2, r3
 800a894:	095b      	lsrs	r3, r3, #5
 800a896:	f003 0207 	and.w	r2, r3, #7
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4422      	add	r2, r4
 800a8a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a8a4:	e105      	b.n	800aab2 <UART_SetConfig+0x4d6>
 800a8a6:	bf00      	nop
 800a8a8:	40011000 	.word	0x40011000
 800a8ac:	40011400 	.word	0x40011400
 800a8b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a8c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a8c6:	4642      	mov	r2, r8
 800a8c8:	464b      	mov	r3, r9
 800a8ca:	1891      	adds	r1, r2, r2
 800a8cc:	6239      	str	r1, [r7, #32]
 800a8ce:	415b      	adcs	r3, r3
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	1854      	adds	r4, r2, r1
 800a8da:	4649      	mov	r1, r9
 800a8dc:	eb43 0501 	adc.w	r5, r3, r1
 800a8e0:	f04f 0200 	mov.w	r2, #0
 800a8e4:	f04f 0300 	mov.w	r3, #0
 800a8e8:	00eb      	lsls	r3, r5, #3
 800a8ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8ee:	00e2      	lsls	r2, r4, #3
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	4643      	mov	r3, r8
 800a8f6:	18e3      	adds	r3, r4, r3
 800a8f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8fc:	464b      	mov	r3, r9
 800a8fe:	eb45 0303 	adc.w	r3, r5, r3
 800a902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a922:	4629      	mov	r1, r5
 800a924:	008b      	lsls	r3, r1, #2
 800a926:	4621      	mov	r1, r4
 800a928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a92c:	4621      	mov	r1, r4
 800a92e:	008a      	lsls	r2, r1, #2
 800a930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a934:	f7f6 f98a 	bl	8000c4c <__aeabi_uldivmod>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4b60      	ldr	r3, [pc, #384]	; (800aac0 <UART_SetConfig+0x4e4>)
 800a93e:	fba3 2302 	umull	r2, r3, r3, r2
 800a942:	095b      	lsrs	r3, r3, #5
 800a944:	011c      	lsls	r4, r3, #4
 800a946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a958:	4642      	mov	r2, r8
 800a95a:	464b      	mov	r3, r9
 800a95c:	1891      	adds	r1, r2, r2
 800a95e:	61b9      	str	r1, [r7, #24]
 800a960:	415b      	adcs	r3, r3
 800a962:	61fb      	str	r3, [r7, #28]
 800a964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a968:	4641      	mov	r1, r8
 800a96a:	1851      	adds	r1, r2, r1
 800a96c:	6139      	str	r1, [r7, #16]
 800a96e:	4649      	mov	r1, r9
 800a970:	414b      	adcs	r3, r1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a980:	4659      	mov	r1, fp
 800a982:	00cb      	lsls	r3, r1, #3
 800a984:	4651      	mov	r1, sl
 800a986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a98a:	4651      	mov	r1, sl
 800a98c:	00ca      	lsls	r2, r1, #3
 800a98e:	4610      	mov	r0, r2
 800a990:	4619      	mov	r1, r3
 800a992:	4603      	mov	r3, r0
 800a994:	4642      	mov	r2, r8
 800a996:	189b      	adds	r3, r3, r2
 800a998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a99c:	464b      	mov	r3, r9
 800a99e:	460a      	mov	r2, r1
 800a9a0:	eb42 0303 	adc.w	r3, r2, r3
 800a9a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	f04f 0300 	mov.w	r3, #0
 800a9bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	008b      	lsls	r3, r1, #2
 800a9c4:	4641      	mov	r1, r8
 800a9c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	008a      	lsls	r2, r1, #2
 800a9ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a9d2:	f7f6 f93b 	bl	8000c4c <__aeabi_uldivmod>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4b39      	ldr	r3, [pc, #228]	; (800aac0 <UART_SetConfig+0x4e4>)
 800a9dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e0:	095b      	lsrs	r3, r3, #5
 800a9e2:	2164      	movs	r1, #100	; 0x64
 800a9e4:	fb01 f303 	mul.w	r3, r1, r3
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	3332      	adds	r3, #50	; 0x32
 800a9ee:	4a34      	ldr	r2, [pc, #208]	; (800aac0 <UART_SetConfig+0x4e4>)
 800a9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f4:	095b      	lsrs	r3, r3, #5
 800a9f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9fa:	441c      	add	r4, r3
 800a9fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa00:	2200      	movs	r2, #0
 800aa02:	673b      	str	r3, [r7, #112]	; 0x70
 800aa04:	677a      	str	r2, [r7, #116]	; 0x74
 800aa06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	1891      	adds	r1, r2, r2
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	415b      	adcs	r3, r3
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa1a:	4641      	mov	r1, r8
 800aa1c:	1851      	adds	r1, r2, r1
 800aa1e:	6039      	str	r1, [r7, #0]
 800aa20:	4649      	mov	r1, r9
 800aa22:	414b      	adcs	r3, r1
 800aa24:	607b      	str	r3, [r7, #4]
 800aa26:	f04f 0200 	mov.w	r2, #0
 800aa2a:	f04f 0300 	mov.w	r3, #0
 800aa2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800aa32:	4659      	mov	r1, fp
 800aa34:	00cb      	lsls	r3, r1, #3
 800aa36:	4651      	mov	r1, sl
 800aa38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa3c:	4651      	mov	r1, sl
 800aa3e:	00ca      	lsls	r2, r1, #3
 800aa40:	4610      	mov	r0, r2
 800aa42:	4619      	mov	r1, r3
 800aa44:	4603      	mov	r3, r0
 800aa46:	4642      	mov	r2, r8
 800aa48:	189b      	adds	r3, r3, r2
 800aa4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	460a      	mov	r2, r1
 800aa50:	eb42 0303 	adc.w	r3, r2, r3
 800aa54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	663b      	str	r3, [r7, #96]	; 0x60
 800aa60:	667a      	str	r2, [r7, #100]	; 0x64
 800aa62:	f04f 0200 	mov.w	r2, #0
 800aa66:	f04f 0300 	mov.w	r3, #0
 800aa6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa6e:	4649      	mov	r1, r9
 800aa70:	008b      	lsls	r3, r1, #2
 800aa72:	4641      	mov	r1, r8
 800aa74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa78:	4641      	mov	r1, r8
 800aa7a:	008a      	lsls	r2, r1, #2
 800aa7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa80:	f7f6 f8e4 	bl	8000c4c <__aeabi_uldivmod>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4b0d      	ldr	r3, [pc, #52]	; (800aac0 <UART_SetConfig+0x4e4>)
 800aa8a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	2164      	movs	r1, #100	; 0x64
 800aa92:	fb01 f303 	mul.w	r3, r1, r3
 800aa96:	1ad3      	subs	r3, r2, r3
 800aa98:	011b      	lsls	r3, r3, #4
 800aa9a:	3332      	adds	r3, #50	; 0x32
 800aa9c:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <UART_SetConfig+0x4e4>)
 800aa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa2:	095b      	lsrs	r3, r3, #5
 800aaa4:	f003 020f 	and.w	r2, r3, #15
 800aaa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4422      	add	r2, r4
 800aab0:	609a      	str	r2, [r3, #8]
}
 800aab2:	bf00      	nop
 800aab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aab8:	46bd      	mov	sp, r7
 800aaba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aabe:	bf00      	nop
 800aac0:	51eb851f 	.word	0x51eb851f

0800aac4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <FSMC_NORSRAM_Init+0xa0>)
 800aae2:	4013      	ands	r3, r2
 800aae4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aaee:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800aaf4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800aafa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ab00:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ab06:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ab0c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ab12:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ab18:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ab1e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ab24:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800ab2a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ab30:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d103      	bne.n	800ab48 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab46:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	fff00080 	.word	0xfff00080

0800ab68 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab82:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ab8a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ab96:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ab9e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800aba6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	3b01      	subs	r3, #1
 800abae:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800abb0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	3b02      	subs	r3, #2
 800abb8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800abba:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800abc0:	4313      	orrs	r3, r2
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6979      	ldr	r1, [r7, #20]
 800abd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
	...

0800abe4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b087      	sub	sp, #28
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abfc:	d122      	bne.n	800ac44 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ac1a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ac22:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ac2a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ac30:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6979      	ldr	r1, [r7, #20]
 800ac3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ac42:	e005      	b.n	800ac50 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ac4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	cff00000 	.word	0xcff00000

0800ac64 <__errno>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	; (800ac6c <__errno+0x8>)
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	2000002c 	.word	0x2000002c

0800ac70 <__libc_init_array>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	4d0d      	ldr	r5, [pc, #52]	; (800aca8 <__libc_init_array+0x38>)
 800ac74:	4c0d      	ldr	r4, [pc, #52]	; (800acac <__libc_init_array+0x3c>)
 800ac76:	1b64      	subs	r4, r4, r5
 800ac78:	10a4      	asrs	r4, r4, #2
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	42a6      	cmp	r6, r4
 800ac7e:	d109      	bne.n	800ac94 <__libc_init_array+0x24>
 800ac80:	4d0b      	ldr	r5, [pc, #44]	; (800acb0 <__libc_init_array+0x40>)
 800ac82:	4c0c      	ldr	r4, [pc, #48]	; (800acb4 <__libc_init_array+0x44>)
 800ac84:	f001 fd2e 	bl	800c6e4 <_init>
 800ac88:	1b64      	subs	r4, r4, r5
 800ac8a:	10a4      	asrs	r4, r4, #2
 800ac8c:	2600      	movs	r6, #0
 800ac8e:	42a6      	cmp	r6, r4
 800ac90:	d105      	bne.n	800ac9e <__libc_init_array+0x2e>
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac98:	4798      	blx	r3
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7ee      	b.n	800ac7c <__libc_init_array+0xc>
 800ac9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca2:	4798      	blx	r3
 800aca4:	3601      	adds	r6, #1
 800aca6:	e7f2      	b.n	800ac8e <__libc_init_array+0x1e>
 800aca8:	0800fb58 	.word	0x0800fb58
 800acac:	0800fb58 	.word	0x0800fb58
 800acb0:	0800fb58 	.word	0x0800fb58
 800acb4:	0800fb5c 	.word	0x0800fb5c

0800acb8 <memset>:
 800acb8:	4402      	add	r2, r0
 800acba:	4603      	mov	r3, r0
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d100      	bne.n	800acc2 <memset+0xa>
 800acc0:	4770      	bx	lr
 800acc2:	f803 1b01 	strb.w	r1, [r3], #1
 800acc6:	e7f9      	b.n	800acbc <memset+0x4>

0800acc8 <siprintf>:
 800acc8:	b40e      	push	{r1, r2, r3}
 800acca:	b500      	push	{lr}
 800accc:	b09c      	sub	sp, #112	; 0x70
 800acce:	ab1d      	add	r3, sp, #116	; 0x74
 800acd0:	9002      	str	r0, [sp, #8]
 800acd2:	9006      	str	r0, [sp, #24]
 800acd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acd8:	4809      	ldr	r0, [pc, #36]	; (800ad00 <siprintf+0x38>)
 800acda:	9107      	str	r1, [sp, #28]
 800acdc:	9104      	str	r1, [sp, #16]
 800acde:	4909      	ldr	r1, [pc, #36]	; (800ad04 <siprintf+0x3c>)
 800ace0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace4:	9105      	str	r1, [sp, #20]
 800ace6:	6800      	ldr	r0, [r0, #0]
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	a902      	add	r1, sp, #8
 800acec:	f000 f868 	bl	800adc0 <_svfiprintf_r>
 800acf0:	9b02      	ldr	r3, [sp, #8]
 800acf2:	2200      	movs	r2, #0
 800acf4:	701a      	strb	r2, [r3, #0]
 800acf6:	b01c      	add	sp, #112	; 0x70
 800acf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800acfc:	b003      	add	sp, #12
 800acfe:	4770      	bx	lr
 800ad00:	2000002c 	.word	0x2000002c
 800ad04:	ffff0208 	.word	0xffff0208

0800ad08 <__ssputs_r>:
 800ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0c:	688e      	ldr	r6, [r1, #8]
 800ad0e:	429e      	cmp	r6, r3
 800ad10:	4682      	mov	sl, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4690      	mov	r8, r2
 800ad16:	461f      	mov	r7, r3
 800ad18:	d838      	bhi.n	800ad8c <__ssputs_r+0x84>
 800ad1a:	898a      	ldrh	r2, [r1, #12]
 800ad1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad20:	d032      	beq.n	800ad88 <__ssputs_r+0x80>
 800ad22:	6825      	ldr	r5, [r4, #0]
 800ad24:	6909      	ldr	r1, [r1, #16]
 800ad26:	eba5 0901 	sub.w	r9, r5, r1
 800ad2a:	6965      	ldr	r5, [r4, #20]
 800ad2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad34:	3301      	adds	r3, #1
 800ad36:	444b      	add	r3, r9
 800ad38:	106d      	asrs	r5, r5, #1
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	bf38      	it	cc
 800ad3e:	461d      	movcc	r5, r3
 800ad40:	0553      	lsls	r3, r2, #21
 800ad42:	d531      	bpl.n	800ada8 <__ssputs_r+0xa0>
 800ad44:	4629      	mov	r1, r5
 800ad46:	f000 fb63 	bl	800b410 <_malloc_r>
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	b950      	cbnz	r0, 800ad64 <__ssputs_r+0x5c>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	f8ca 3000 	str.w	r3, [sl]
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	6921      	ldr	r1, [r4, #16]
 800ad66:	464a      	mov	r2, r9
 800ad68:	f000 fabe 	bl	800b2e8 <memcpy>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	6126      	str	r6, [r4, #16]
 800ad7a:	6165      	str	r5, [r4, #20]
 800ad7c:	444e      	add	r6, r9
 800ad7e:	eba5 0509 	sub.w	r5, r5, r9
 800ad82:	6026      	str	r6, [r4, #0]
 800ad84:	60a5      	str	r5, [r4, #8]
 800ad86:	463e      	mov	r6, r7
 800ad88:	42be      	cmp	r6, r7
 800ad8a:	d900      	bls.n	800ad8e <__ssputs_r+0x86>
 800ad8c:	463e      	mov	r6, r7
 800ad8e:	6820      	ldr	r0, [r4, #0]
 800ad90:	4632      	mov	r2, r6
 800ad92:	4641      	mov	r1, r8
 800ad94:	f000 fab6 	bl	800b304 <memmove>
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	1b9b      	subs	r3, r3, r6
 800ad9c:	60a3      	str	r3, [r4, #8]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	4433      	add	r3, r6
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	2000      	movs	r0, #0
 800ada6:	e7db      	b.n	800ad60 <__ssputs_r+0x58>
 800ada8:	462a      	mov	r2, r5
 800adaa:	f000 fba5 	bl	800b4f8 <_realloc_r>
 800adae:	4606      	mov	r6, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1e1      	bne.n	800ad78 <__ssputs_r+0x70>
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	f000 fabe 	bl	800b338 <_free_r>
 800adbc:	e7c7      	b.n	800ad4e <__ssputs_r+0x46>
	...

0800adc0 <_svfiprintf_r>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	4698      	mov	r8, r3
 800adc6:	898b      	ldrh	r3, [r1, #12]
 800adc8:	061b      	lsls	r3, r3, #24
 800adca:	b09d      	sub	sp, #116	; 0x74
 800adcc:	4607      	mov	r7, r0
 800adce:	460d      	mov	r5, r1
 800add0:	4614      	mov	r4, r2
 800add2:	d50e      	bpl.n	800adf2 <_svfiprintf_r+0x32>
 800add4:	690b      	ldr	r3, [r1, #16]
 800add6:	b963      	cbnz	r3, 800adf2 <_svfiprintf_r+0x32>
 800add8:	2140      	movs	r1, #64	; 0x40
 800adda:	f000 fb19 	bl	800b410 <_malloc_r>
 800adde:	6028      	str	r0, [r5, #0]
 800ade0:	6128      	str	r0, [r5, #16]
 800ade2:	b920      	cbnz	r0, 800adee <_svfiprintf_r+0x2e>
 800ade4:	230c      	movs	r3, #12
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e0d1      	b.n	800af92 <_svfiprintf_r+0x1d2>
 800adee:	2340      	movs	r3, #64	; 0x40
 800adf0:	616b      	str	r3, [r5, #20]
 800adf2:	2300      	movs	r3, #0
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	2320      	movs	r3, #32
 800adf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae00:	2330      	movs	r3, #48	; 0x30
 800ae02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afac <_svfiprintf_r+0x1ec>
 800ae06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae0a:	f04f 0901 	mov.w	r9, #1
 800ae0e:	4623      	mov	r3, r4
 800ae10:	469a      	mov	sl, r3
 800ae12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae16:	b10a      	cbz	r2, 800ae1c <_svfiprintf_r+0x5c>
 800ae18:	2a25      	cmp	r2, #37	; 0x25
 800ae1a:	d1f9      	bne.n	800ae10 <_svfiprintf_r+0x50>
 800ae1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae20:	d00b      	beq.n	800ae3a <_svfiprintf_r+0x7a>
 800ae22:	465b      	mov	r3, fp
 800ae24:	4622      	mov	r2, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	4638      	mov	r0, r7
 800ae2a:	f7ff ff6d 	bl	800ad08 <__ssputs_r>
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f000 80aa 	beq.w	800af88 <_svfiprintf_r+0x1c8>
 800ae34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae36:	445a      	add	r2, fp
 800ae38:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 80a2 	beq.w	800af88 <_svfiprintf_r+0x1c8>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae4e:	f10a 0a01 	add.w	sl, sl, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	9307      	str	r3, [sp, #28]
 800ae56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae5c:	4654      	mov	r4, sl
 800ae5e:	2205      	movs	r2, #5
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	4851      	ldr	r0, [pc, #324]	; (800afac <_svfiprintf_r+0x1ec>)
 800ae66:	f7f5 f9b3 	bl	80001d0 <memchr>
 800ae6a:	9a04      	ldr	r2, [sp, #16]
 800ae6c:	b9d8      	cbnz	r0, 800aea6 <_svfiprintf_r+0xe6>
 800ae6e:	06d0      	lsls	r0, r2, #27
 800ae70:	bf44      	itt	mi
 800ae72:	2320      	movmi	r3, #32
 800ae74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae78:	0711      	lsls	r1, r2, #28
 800ae7a:	bf44      	itt	mi
 800ae7c:	232b      	movmi	r3, #43	; 0x2b
 800ae7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae82:	f89a 3000 	ldrb.w	r3, [sl]
 800ae86:	2b2a      	cmp	r3, #42	; 0x2a
 800ae88:	d015      	beq.n	800aeb6 <_svfiprintf_r+0xf6>
 800ae8a:	9a07      	ldr	r2, [sp, #28]
 800ae8c:	4654      	mov	r4, sl
 800ae8e:	2000      	movs	r0, #0
 800ae90:	f04f 0c0a 	mov.w	ip, #10
 800ae94:	4621      	mov	r1, r4
 800ae96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae9a:	3b30      	subs	r3, #48	; 0x30
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	d94e      	bls.n	800af3e <_svfiprintf_r+0x17e>
 800aea0:	b1b0      	cbz	r0, 800aed0 <_svfiprintf_r+0x110>
 800aea2:	9207      	str	r2, [sp, #28]
 800aea4:	e014      	b.n	800aed0 <_svfiprintf_r+0x110>
 800aea6:	eba0 0308 	sub.w	r3, r0, r8
 800aeaa:	fa09 f303 	lsl.w	r3, r9, r3
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	46a2      	mov	sl, r4
 800aeb4:	e7d2      	b.n	800ae5c <_svfiprintf_r+0x9c>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	1d19      	adds	r1, r3, #4
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	9103      	str	r1, [sp, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfbb      	ittet	lt
 800aec2:	425b      	neglt	r3, r3
 800aec4:	f042 0202 	orrlt.w	r2, r2, #2
 800aec8:	9307      	strge	r3, [sp, #28]
 800aeca:	9307      	strlt	r3, [sp, #28]
 800aecc:	bfb8      	it	lt
 800aece:	9204      	strlt	r2, [sp, #16]
 800aed0:	7823      	ldrb	r3, [r4, #0]
 800aed2:	2b2e      	cmp	r3, #46	; 0x2e
 800aed4:	d10c      	bne.n	800aef0 <_svfiprintf_r+0x130>
 800aed6:	7863      	ldrb	r3, [r4, #1]
 800aed8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeda:	d135      	bne.n	800af48 <_svfiprintf_r+0x188>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	9203      	str	r2, [sp, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfb8      	it	lt
 800aee8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeec:	3402      	adds	r4, #2
 800aeee:	9305      	str	r3, [sp, #20]
 800aef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afbc <_svfiprintf_r+0x1fc>
 800aef4:	7821      	ldrb	r1, [r4, #0]
 800aef6:	2203      	movs	r2, #3
 800aef8:	4650      	mov	r0, sl
 800aefa:	f7f5 f969 	bl	80001d0 <memchr>
 800aefe:	b140      	cbz	r0, 800af12 <_svfiprintf_r+0x152>
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	eba0 000a 	sub.w	r0, r0, sl
 800af06:	fa03 f000 	lsl.w	r0, r3, r0
 800af0a:	9b04      	ldr	r3, [sp, #16]
 800af0c:	4303      	orrs	r3, r0
 800af0e:	3401      	adds	r4, #1
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af16:	4826      	ldr	r0, [pc, #152]	; (800afb0 <_svfiprintf_r+0x1f0>)
 800af18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af1c:	2206      	movs	r2, #6
 800af1e:	f7f5 f957 	bl	80001d0 <memchr>
 800af22:	2800      	cmp	r0, #0
 800af24:	d038      	beq.n	800af98 <_svfiprintf_r+0x1d8>
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <_svfiprintf_r+0x1f4>)
 800af28:	bb1b      	cbnz	r3, 800af72 <_svfiprintf_r+0x1b2>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	3307      	adds	r3, #7
 800af2e:	f023 0307 	bic.w	r3, r3, #7
 800af32:	3308      	adds	r3, #8
 800af34:	9303      	str	r3, [sp, #12]
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	4433      	add	r3, r6
 800af3a:	9309      	str	r3, [sp, #36]	; 0x24
 800af3c:	e767      	b.n	800ae0e <_svfiprintf_r+0x4e>
 800af3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af42:	460c      	mov	r4, r1
 800af44:	2001      	movs	r0, #1
 800af46:	e7a5      	b.n	800ae94 <_svfiprintf_r+0xd4>
 800af48:	2300      	movs	r3, #0
 800af4a:	3401      	adds	r4, #1
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	4619      	mov	r1, r3
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4620      	mov	r0, r4
 800af56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5a:	3a30      	subs	r2, #48	; 0x30
 800af5c:	2a09      	cmp	r2, #9
 800af5e:	d903      	bls.n	800af68 <_svfiprintf_r+0x1a8>
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0c5      	beq.n	800aef0 <_svfiprintf_r+0x130>
 800af64:	9105      	str	r1, [sp, #20]
 800af66:	e7c3      	b.n	800aef0 <_svfiprintf_r+0x130>
 800af68:	fb0c 2101 	mla	r1, ip, r1, r2
 800af6c:	4604      	mov	r4, r0
 800af6e:	2301      	movs	r3, #1
 800af70:	e7f0      	b.n	800af54 <_svfiprintf_r+0x194>
 800af72:	ab03      	add	r3, sp, #12
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	462a      	mov	r2, r5
 800af78:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <_svfiprintf_r+0x1f8>)
 800af7a:	a904      	add	r1, sp, #16
 800af7c:	4638      	mov	r0, r7
 800af7e:	f3af 8000 	nop.w
 800af82:	1c42      	adds	r2, r0, #1
 800af84:	4606      	mov	r6, r0
 800af86:	d1d6      	bne.n	800af36 <_svfiprintf_r+0x176>
 800af88:	89ab      	ldrh	r3, [r5, #12]
 800af8a:	065b      	lsls	r3, r3, #25
 800af8c:	f53f af2c 	bmi.w	800ade8 <_svfiprintf_r+0x28>
 800af90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af92:	b01d      	add	sp, #116	; 0x74
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <_svfiprintf_r+0x1f8>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4638      	mov	r0, r7
 800afa4:	f000 f87a 	bl	800b09c <_printf_i>
 800afa8:	e7eb      	b.n	800af82 <_svfiprintf_r+0x1c2>
 800afaa:	bf00      	nop
 800afac:	0800f940 	.word	0x0800f940
 800afb0:	0800f94a 	.word	0x0800f94a
 800afb4:	00000000 	.word	0x00000000
 800afb8:	0800ad09 	.word	0x0800ad09
 800afbc:	0800f946 	.word	0x0800f946

0800afc0 <_printf_common>:
 800afc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc4:	4616      	mov	r6, r2
 800afc6:	4699      	mov	r9, r3
 800afc8:	688a      	ldr	r2, [r1, #8]
 800afca:	690b      	ldr	r3, [r1, #16]
 800afcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afd0:	4293      	cmp	r3, r2
 800afd2:	bfb8      	it	lt
 800afd4:	4613      	movlt	r3, r2
 800afd6:	6033      	str	r3, [r6, #0]
 800afd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afdc:	4607      	mov	r7, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	b10a      	cbz	r2, 800afe6 <_printf_common+0x26>
 800afe2:	3301      	adds	r3, #1
 800afe4:	6033      	str	r3, [r6, #0]
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	0699      	lsls	r1, r3, #26
 800afea:	bf42      	ittt	mi
 800afec:	6833      	ldrmi	r3, [r6, #0]
 800afee:	3302      	addmi	r3, #2
 800aff0:	6033      	strmi	r3, [r6, #0]
 800aff2:	6825      	ldr	r5, [r4, #0]
 800aff4:	f015 0506 	ands.w	r5, r5, #6
 800aff8:	d106      	bne.n	800b008 <_printf_common+0x48>
 800affa:	f104 0a19 	add.w	sl, r4, #25
 800affe:	68e3      	ldr	r3, [r4, #12]
 800b000:	6832      	ldr	r2, [r6, #0]
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	42ab      	cmp	r3, r5
 800b006:	dc26      	bgt.n	800b056 <_printf_common+0x96>
 800b008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b00c:	1e13      	subs	r3, r2, #0
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	bf18      	it	ne
 800b012:	2301      	movne	r3, #1
 800b014:	0692      	lsls	r2, r2, #26
 800b016:	d42b      	bmi.n	800b070 <_printf_common+0xb0>
 800b018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b01c:	4649      	mov	r1, r9
 800b01e:	4638      	mov	r0, r7
 800b020:	47c0      	blx	r8
 800b022:	3001      	adds	r0, #1
 800b024:	d01e      	beq.n	800b064 <_printf_common+0xa4>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	68e5      	ldr	r5, [r4, #12]
 800b02a:	6832      	ldr	r2, [r6, #0]
 800b02c:	f003 0306 	and.w	r3, r3, #6
 800b030:	2b04      	cmp	r3, #4
 800b032:	bf08      	it	eq
 800b034:	1aad      	subeq	r5, r5, r2
 800b036:	68a3      	ldr	r3, [r4, #8]
 800b038:	6922      	ldr	r2, [r4, #16]
 800b03a:	bf0c      	ite	eq
 800b03c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b040:	2500      	movne	r5, #0
 800b042:	4293      	cmp	r3, r2
 800b044:	bfc4      	itt	gt
 800b046:	1a9b      	subgt	r3, r3, r2
 800b048:	18ed      	addgt	r5, r5, r3
 800b04a:	2600      	movs	r6, #0
 800b04c:	341a      	adds	r4, #26
 800b04e:	42b5      	cmp	r5, r6
 800b050:	d11a      	bne.n	800b088 <_printf_common+0xc8>
 800b052:	2000      	movs	r0, #0
 800b054:	e008      	b.n	800b068 <_printf_common+0xa8>
 800b056:	2301      	movs	r3, #1
 800b058:	4652      	mov	r2, sl
 800b05a:	4649      	mov	r1, r9
 800b05c:	4638      	mov	r0, r7
 800b05e:	47c0      	blx	r8
 800b060:	3001      	adds	r0, #1
 800b062:	d103      	bne.n	800b06c <_printf_common+0xac>
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06c:	3501      	adds	r5, #1
 800b06e:	e7c6      	b.n	800affe <_printf_common+0x3e>
 800b070:	18e1      	adds	r1, r4, r3
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	2030      	movs	r0, #48	; 0x30
 800b076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b07a:	4422      	add	r2, r4
 800b07c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b084:	3302      	adds	r3, #2
 800b086:	e7c7      	b.n	800b018 <_printf_common+0x58>
 800b088:	2301      	movs	r3, #1
 800b08a:	4622      	mov	r2, r4
 800b08c:	4649      	mov	r1, r9
 800b08e:	4638      	mov	r0, r7
 800b090:	47c0      	blx	r8
 800b092:	3001      	adds	r0, #1
 800b094:	d0e6      	beq.n	800b064 <_printf_common+0xa4>
 800b096:	3601      	adds	r6, #1
 800b098:	e7d9      	b.n	800b04e <_printf_common+0x8e>
	...

0800b09c <_printf_i>:
 800b09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a0:	7e0f      	ldrb	r7, [r1, #24]
 800b0a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0a4:	2f78      	cmp	r7, #120	; 0x78
 800b0a6:	4691      	mov	r9, r2
 800b0a8:	4680      	mov	r8, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	469a      	mov	sl, r3
 800b0ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0b2:	d807      	bhi.n	800b0c4 <_printf_i+0x28>
 800b0b4:	2f62      	cmp	r7, #98	; 0x62
 800b0b6:	d80a      	bhi.n	800b0ce <_printf_i+0x32>
 800b0b8:	2f00      	cmp	r7, #0
 800b0ba:	f000 80d8 	beq.w	800b26e <_printf_i+0x1d2>
 800b0be:	2f58      	cmp	r7, #88	; 0x58
 800b0c0:	f000 80a3 	beq.w	800b20a <_printf_i+0x16e>
 800b0c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b0cc:	e03a      	b.n	800b144 <_printf_i+0xa8>
 800b0ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b0d2:	2b15      	cmp	r3, #21
 800b0d4:	d8f6      	bhi.n	800b0c4 <_printf_i+0x28>
 800b0d6:	a101      	add	r1, pc, #4	; (adr r1, 800b0dc <_printf_i+0x40>)
 800b0d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0dc:	0800b135 	.word	0x0800b135
 800b0e0:	0800b149 	.word	0x0800b149
 800b0e4:	0800b0c5 	.word	0x0800b0c5
 800b0e8:	0800b0c5 	.word	0x0800b0c5
 800b0ec:	0800b0c5 	.word	0x0800b0c5
 800b0f0:	0800b0c5 	.word	0x0800b0c5
 800b0f4:	0800b149 	.word	0x0800b149
 800b0f8:	0800b0c5 	.word	0x0800b0c5
 800b0fc:	0800b0c5 	.word	0x0800b0c5
 800b100:	0800b0c5 	.word	0x0800b0c5
 800b104:	0800b0c5 	.word	0x0800b0c5
 800b108:	0800b255 	.word	0x0800b255
 800b10c:	0800b179 	.word	0x0800b179
 800b110:	0800b237 	.word	0x0800b237
 800b114:	0800b0c5 	.word	0x0800b0c5
 800b118:	0800b0c5 	.word	0x0800b0c5
 800b11c:	0800b277 	.word	0x0800b277
 800b120:	0800b0c5 	.word	0x0800b0c5
 800b124:	0800b179 	.word	0x0800b179
 800b128:	0800b0c5 	.word	0x0800b0c5
 800b12c:	0800b0c5 	.word	0x0800b0c5
 800b130:	0800b23f 	.word	0x0800b23f
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	1d1a      	adds	r2, r3, #4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	602a      	str	r2, [r5, #0]
 800b13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b144:	2301      	movs	r3, #1
 800b146:	e0a3      	b.n	800b290 <_printf_i+0x1f4>
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	6829      	ldr	r1, [r5, #0]
 800b14c:	0606      	lsls	r6, r0, #24
 800b14e:	f101 0304 	add.w	r3, r1, #4
 800b152:	d50a      	bpl.n	800b16a <_printf_i+0xce>
 800b154:	680e      	ldr	r6, [r1, #0]
 800b156:	602b      	str	r3, [r5, #0]
 800b158:	2e00      	cmp	r6, #0
 800b15a:	da03      	bge.n	800b164 <_printf_i+0xc8>
 800b15c:	232d      	movs	r3, #45	; 0x2d
 800b15e:	4276      	negs	r6, r6
 800b160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b164:	485e      	ldr	r0, [pc, #376]	; (800b2e0 <_printf_i+0x244>)
 800b166:	230a      	movs	r3, #10
 800b168:	e019      	b.n	800b19e <_printf_i+0x102>
 800b16a:	680e      	ldr	r6, [r1, #0]
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b172:	bf18      	it	ne
 800b174:	b236      	sxthne	r6, r6
 800b176:	e7ef      	b.n	800b158 <_printf_i+0xbc>
 800b178:	682b      	ldr	r3, [r5, #0]
 800b17a:	6820      	ldr	r0, [r4, #0]
 800b17c:	1d19      	adds	r1, r3, #4
 800b17e:	6029      	str	r1, [r5, #0]
 800b180:	0601      	lsls	r1, r0, #24
 800b182:	d501      	bpl.n	800b188 <_printf_i+0xec>
 800b184:	681e      	ldr	r6, [r3, #0]
 800b186:	e002      	b.n	800b18e <_printf_i+0xf2>
 800b188:	0646      	lsls	r6, r0, #25
 800b18a:	d5fb      	bpl.n	800b184 <_printf_i+0xe8>
 800b18c:	881e      	ldrh	r6, [r3, #0]
 800b18e:	4854      	ldr	r0, [pc, #336]	; (800b2e0 <_printf_i+0x244>)
 800b190:	2f6f      	cmp	r7, #111	; 0x6f
 800b192:	bf0c      	ite	eq
 800b194:	2308      	moveq	r3, #8
 800b196:	230a      	movne	r3, #10
 800b198:	2100      	movs	r1, #0
 800b19a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b19e:	6865      	ldr	r5, [r4, #4]
 800b1a0:	60a5      	str	r5, [r4, #8]
 800b1a2:	2d00      	cmp	r5, #0
 800b1a4:	bfa2      	ittt	ge
 800b1a6:	6821      	ldrge	r1, [r4, #0]
 800b1a8:	f021 0104 	bicge.w	r1, r1, #4
 800b1ac:	6021      	strge	r1, [r4, #0]
 800b1ae:	b90e      	cbnz	r6, 800b1b4 <_printf_i+0x118>
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	d04d      	beq.n	800b250 <_printf_i+0x1b4>
 800b1b4:	4615      	mov	r5, r2
 800b1b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b1ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b1be:	5dc7      	ldrb	r7, [r0, r7]
 800b1c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b1c4:	4637      	mov	r7, r6
 800b1c6:	42bb      	cmp	r3, r7
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	d9f4      	bls.n	800b1b6 <_printf_i+0x11a>
 800b1cc:	2b08      	cmp	r3, #8
 800b1ce:	d10b      	bne.n	800b1e8 <_printf_i+0x14c>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	07de      	lsls	r6, r3, #31
 800b1d4:	d508      	bpl.n	800b1e8 <_printf_i+0x14c>
 800b1d6:	6923      	ldr	r3, [r4, #16]
 800b1d8:	6861      	ldr	r1, [r4, #4]
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	bfde      	ittt	le
 800b1de:	2330      	movle	r3, #48	; 0x30
 800b1e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b1e8:	1b52      	subs	r2, r2, r5
 800b1ea:	6122      	str	r2, [r4, #16]
 800b1ec:	f8cd a000 	str.w	sl, [sp]
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	aa03      	add	r2, sp, #12
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	f7ff fee2 	bl	800afc0 <_printf_common>
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	d14c      	bne.n	800b29a <_printf_i+0x1fe>
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	b004      	add	sp, #16
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	4835      	ldr	r0, [pc, #212]	; (800b2e0 <_printf_i+0x244>)
 800b20c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b210:	6829      	ldr	r1, [r5, #0]
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	f851 6b04 	ldr.w	r6, [r1], #4
 800b218:	6029      	str	r1, [r5, #0]
 800b21a:	061d      	lsls	r5, r3, #24
 800b21c:	d514      	bpl.n	800b248 <_printf_i+0x1ac>
 800b21e:	07df      	lsls	r7, r3, #31
 800b220:	bf44      	itt	mi
 800b222:	f043 0320 	orrmi.w	r3, r3, #32
 800b226:	6023      	strmi	r3, [r4, #0]
 800b228:	b91e      	cbnz	r6, 800b232 <_printf_i+0x196>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	f023 0320 	bic.w	r3, r3, #32
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	2310      	movs	r3, #16
 800b234:	e7b0      	b.n	800b198 <_printf_i+0xfc>
 800b236:	6823      	ldr	r3, [r4, #0]
 800b238:	f043 0320 	orr.w	r3, r3, #32
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	2378      	movs	r3, #120	; 0x78
 800b240:	4828      	ldr	r0, [pc, #160]	; (800b2e4 <_printf_i+0x248>)
 800b242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b246:	e7e3      	b.n	800b210 <_printf_i+0x174>
 800b248:	0659      	lsls	r1, r3, #25
 800b24a:	bf48      	it	mi
 800b24c:	b2b6      	uxthmi	r6, r6
 800b24e:	e7e6      	b.n	800b21e <_printf_i+0x182>
 800b250:	4615      	mov	r5, r2
 800b252:	e7bb      	b.n	800b1cc <_printf_i+0x130>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	6826      	ldr	r6, [r4, #0]
 800b258:	6961      	ldr	r1, [r4, #20]
 800b25a:	1d18      	adds	r0, r3, #4
 800b25c:	6028      	str	r0, [r5, #0]
 800b25e:	0635      	lsls	r5, r6, #24
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	d501      	bpl.n	800b268 <_printf_i+0x1cc>
 800b264:	6019      	str	r1, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0x1d2>
 800b268:	0670      	lsls	r0, r6, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0x1c8>
 800b26c:	8019      	strh	r1, [r3, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	6123      	str	r3, [r4, #16]
 800b272:	4615      	mov	r5, r2
 800b274:	e7ba      	b.n	800b1ec <_printf_i+0x150>
 800b276:	682b      	ldr	r3, [r5, #0]
 800b278:	1d1a      	adds	r2, r3, #4
 800b27a:	602a      	str	r2, [r5, #0]
 800b27c:	681d      	ldr	r5, [r3, #0]
 800b27e:	6862      	ldr	r2, [r4, #4]
 800b280:	2100      	movs	r1, #0
 800b282:	4628      	mov	r0, r5
 800b284:	f7f4 ffa4 	bl	80001d0 <memchr>
 800b288:	b108      	cbz	r0, 800b28e <_printf_i+0x1f2>
 800b28a:	1b40      	subs	r0, r0, r5
 800b28c:	6060      	str	r0, [r4, #4]
 800b28e:	6863      	ldr	r3, [r4, #4]
 800b290:	6123      	str	r3, [r4, #16]
 800b292:	2300      	movs	r3, #0
 800b294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b298:	e7a8      	b.n	800b1ec <_printf_i+0x150>
 800b29a:	6923      	ldr	r3, [r4, #16]
 800b29c:	462a      	mov	r2, r5
 800b29e:	4649      	mov	r1, r9
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	47d0      	blx	sl
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d0ab      	beq.n	800b200 <_printf_i+0x164>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	079b      	lsls	r3, r3, #30
 800b2ac:	d413      	bmi.n	800b2d6 <_printf_i+0x23a>
 800b2ae:	68e0      	ldr	r0, [r4, #12]
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	4298      	cmp	r0, r3
 800b2b4:	bfb8      	it	lt
 800b2b6:	4618      	movlt	r0, r3
 800b2b8:	e7a4      	b.n	800b204 <_printf_i+0x168>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	4632      	mov	r2, r6
 800b2be:	4649      	mov	r1, r9
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	47d0      	blx	sl
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d09b      	beq.n	800b200 <_printf_i+0x164>
 800b2c8:	3501      	adds	r5, #1
 800b2ca:	68e3      	ldr	r3, [r4, #12]
 800b2cc:	9903      	ldr	r1, [sp, #12]
 800b2ce:	1a5b      	subs	r3, r3, r1
 800b2d0:	42ab      	cmp	r3, r5
 800b2d2:	dcf2      	bgt.n	800b2ba <_printf_i+0x21e>
 800b2d4:	e7eb      	b.n	800b2ae <_printf_i+0x212>
 800b2d6:	2500      	movs	r5, #0
 800b2d8:	f104 0619 	add.w	r6, r4, #25
 800b2dc:	e7f5      	b.n	800b2ca <_printf_i+0x22e>
 800b2de:	bf00      	nop
 800b2e0:	0800f951 	.word	0x0800f951
 800b2e4:	0800f962 	.word	0x0800f962

0800b2e8 <memcpy>:
 800b2e8:	440a      	add	r2, r1
 800b2ea:	4291      	cmp	r1, r2
 800b2ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2f0:	d100      	bne.n	800b2f4 <memcpy+0xc>
 800b2f2:	4770      	bx	lr
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2fe:	4291      	cmp	r1, r2
 800b300:	d1f9      	bne.n	800b2f6 <memcpy+0xe>
 800b302:	bd10      	pop	{r4, pc}

0800b304 <memmove>:
 800b304:	4288      	cmp	r0, r1
 800b306:	b510      	push	{r4, lr}
 800b308:	eb01 0402 	add.w	r4, r1, r2
 800b30c:	d902      	bls.n	800b314 <memmove+0x10>
 800b30e:	4284      	cmp	r4, r0
 800b310:	4623      	mov	r3, r4
 800b312:	d807      	bhi.n	800b324 <memmove+0x20>
 800b314:	1e43      	subs	r3, r0, #1
 800b316:	42a1      	cmp	r1, r4
 800b318:	d008      	beq.n	800b32c <memmove+0x28>
 800b31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b322:	e7f8      	b.n	800b316 <memmove+0x12>
 800b324:	4402      	add	r2, r0
 800b326:	4601      	mov	r1, r0
 800b328:	428a      	cmp	r2, r1
 800b32a:	d100      	bne.n	800b32e <memmove+0x2a>
 800b32c:	bd10      	pop	{r4, pc}
 800b32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b336:	e7f7      	b.n	800b328 <memmove+0x24>

0800b338 <_free_r>:
 800b338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b33a:	2900      	cmp	r1, #0
 800b33c:	d044      	beq.n	800b3c8 <_free_r+0x90>
 800b33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b342:	9001      	str	r0, [sp, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	f1a1 0404 	sub.w	r4, r1, #4
 800b34a:	bfb8      	it	lt
 800b34c:	18e4      	addlt	r4, r4, r3
 800b34e:	f000 f913 	bl	800b578 <__malloc_lock>
 800b352:	4a1e      	ldr	r2, [pc, #120]	; (800b3cc <_free_r+0x94>)
 800b354:	9801      	ldr	r0, [sp, #4]
 800b356:	6813      	ldr	r3, [r2, #0]
 800b358:	b933      	cbnz	r3, 800b368 <_free_r+0x30>
 800b35a:	6063      	str	r3, [r4, #4]
 800b35c:	6014      	str	r4, [r2, #0]
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b364:	f000 b90e 	b.w	800b584 <__malloc_unlock>
 800b368:	42a3      	cmp	r3, r4
 800b36a:	d908      	bls.n	800b37e <_free_r+0x46>
 800b36c:	6825      	ldr	r5, [r4, #0]
 800b36e:	1961      	adds	r1, r4, r5
 800b370:	428b      	cmp	r3, r1
 800b372:	bf01      	itttt	eq
 800b374:	6819      	ldreq	r1, [r3, #0]
 800b376:	685b      	ldreq	r3, [r3, #4]
 800b378:	1949      	addeq	r1, r1, r5
 800b37a:	6021      	streq	r1, [r4, #0]
 800b37c:	e7ed      	b.n	800b35a <_free_r+0x22>
 800b37e:	461a      	mov	r2, r3
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	b10b      	cbz	r3, 800b388 <_free_r+0x50>
 800b384:	42a3      	cmp	r3, r4
 800b386:	d9fa      	bls.n	800b37e <_free_r+0x46>
 800b388:	6811      	ldr	r1, [r2, #0]
 800b38a:	1855      	adds	r5, r2, r1
 800b38c:	42a5      	cmp	r5, r4
 800b38e:	d10b      	bne.n	800b3a8 <_free_r+0x70>
 800b390:	6824      	ldr	r4, [r4, #0]
 800b392:	4421      	add	r1, r4
 800b394:	1854      	adds	r4, r2, r1
 800b396:	42a3      	cmp	r3, r4
 800b398:	6011      	str	r1, [r2, #0]
 800b39a:	d1e0      	bne.n	800b35e <_free_r+0x26>
 800b39c:	681c      	ldr	r4, [r3, #0]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	6053      	str	r3, [r2, #4]
 800b3a2:	4421      	add	r1, r4
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	e7da      	b.n	800b35e <_free_r+0x26>
 800b3a8:	d902      	bls.n	800b3b0 <_free_r+0x78>
 800b3aa:	230c      	movs	r3, #12
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	e7d6      	b.n	800b35e <_free_r+0x26>
 800b3b0:	6825      	ldr	r5, [r4, #0]
 800b3b2:	1961      	adds	r1, r4, r5
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	bf04      	itt	eq
 800b3b8:	6819      	ldreq	r1, [r3, #0]
 800b3ba:	685b      	ldreq	r3, [r3, #4]
 800b3bc:	6063      	str	r3, [r4, #4]
 800b3be:	bf04      	itt	eq
 800b3c0:	1949      	addeq	r1, r1, r5
 800b3c2:	6021      	streq	r1, [r4, #0]
 800b3c4:	6054      	str	r4, [r2, #4]
 800b3c6:	e7ca      	b.n	800b35e <_free_r+0x26>
 800b3c8:	b003      	add	sp, #12
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	200003d4 	.word	0x200003d4

0800b3d0 <sbrk_aligned>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	4e0e      	ldr	r6, [pc, #56]	; (800b40c <sbrk_aligned+0x3c>)
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	6831      	ldr	r1, [r6, #0]
 800b3d8:	4605      	mov	r5, r0
 800b3da:	b911      	cbnz	r1, 800b3e2 <sbrk_aligned+0x12>
 800b3dc:	f000 f8bc 	bl	800b558 <_sbrk_r>
 800b3e0:	6030      	str	r0, [r6, #0]
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 f8b7 	bl	800b558 <_sbrk_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d00a      	beq.n	800b404 <sbrk_aligned+0x34>
 800b3ee:	1cc4      	adds	r4, r0, #3
 800b3f0:	f024 0403 	bic.w	r4, r4, #3
 800b3f4:	42a0      	cmp	r0, r4
 800b3f6:	d007      	beq.n	800b408 <sbrk_aligned+0x38>
 800b3f8:	1a21      	subs	r1, r4, r0
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 f8ac 	bl	800b558 <_sbrk_r>
 800b400:	3001      	adds	r0, #1
 800b402:	d101      	bne.n	800b408 <sbrk_aligned+0x38>
 800b404:	f04f 34ff 	mov.w	r4, #4294967295
 800b408:	4620      	mov	r0, r4
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	200003d8 	.word	0x200003d8

0800b410 <_malloc_r>:
 800b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b414:	1ccd      	adds	r5, r1, #3
 800b416:	f025 0503 	bic.w	r5, r5, #3
 800b41a:	3508      	adds	r5, #8
 800b41c:	2d0c      	cmp	r5, #12
 800b41e:	bf38      	it	cc
 800b420:	250c      	movcc	r5, #12
 800b422:	2d00      	cmp	r5, #0
 800b424:	4607      	mov	r7, r0
 800b426:	db01      	blt.n	800b42c <_malloc_r+0x1c>
 800b428:	42a9      	cmp	r1, r5
 800b42a:	d905      	bls.n	800b438 <_malloc_r+0x28>
 800b42c:	230c      	movs	r3, #12
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	2600      	movs	r6, #0
 800b432:	4630      	mov	r0, r6
 800b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b438:	4e2e      	ldr	r6, [pc, #184]	; (800b4f4 <_malloc_r+0xe4>)
 800b43a:	f000 f89d 	bl	800b578 <__malloc_lock>
 800b43e:	6833      	ldr	r3, [r6, #0]
 800b440:	461c      	mov	r4, r3
 800b442:	bb34      	cbnz	r4, 800b492 <_malloc_r+0x82>
 800b444:	4629      	mov	r1, r5
 800b446:	4638      	mov	r0, r7
 800b448:	f7ff ffc2 	bl	800b3d0 <sbrk_aligned>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	4604      	mov	r4, r0
 800b450:	d14d      	bne.n	800b4ee <_malloc_r+0xde>
 800b452:	6834      	ldr	r4, [r6, #0]
 800b454:	4626      	mov	r6, r4
 800b456:	2e00      	cmp	r6, #0
 800b458:	d140      	bne.n	800b4dc <_malloc_r+0xcc>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	4631      	mov	r1, r6
 800b45e:	4638      	mov	r0, r7
 800b460:	eb04 0803 	add.w	r8, r4, r3
 800b464:	f000 f878 	bl	800b558 <_sbrk_r>
 800b468:	4580      	cmp	r8, r0
 800b46a:	d13a      	bne.n	800b4e2 <_malloc_r+0xd2>
 800b46c:	6821      	ldr	r1, [r4, #0]
 800b46e:	3503      	adds	r5, #3
 800b470:	1a6d      	subs	r5, r5, r1
 800b472:	f025 0503 	bic.w	r5, r5, #3
 800b476:	3508      	adds	r5, #8
 800b478:	2d0c      	cmp	r5, #12
 800b47a:	bf38      	it	cc
 800b47c:	250c      	movcc	r5, #12
 800b47e:	4629      	mov	r1, r5
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ffa5 	bl	800b3d0 <sbrk_aligned>
 800b486:	3001      	adds	r0, #1
 800b488:	d02b      	beq.n	800b4e2 <_malloc_r+0xd2>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	442b      	add	r3, r5
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	e00e      	b.n	800b4b0 <_malloc_r+0xa0>
 800b492:	6822      	ldr	r2, [r4, #0]
 800b494:	1b52      	subs	r2, r2, r5
 800b496:	d41e      	bmi.n	800b4d6 <_malloc_r+0xc6>
 800b498:	2a0b      	cmp	r2, #11
 800b49a:	d916      	bls.n	800b4ca <_malloc_r+0xba>
 800b49c:	1961      	adds	r1, r4, r5
 800b49e:	42a3      	cmp	r3, r4
 800b4a0:	6025      	str	r5, [r4, #0]
 800b4a2:	bf18      	it	ne
 800b4a4:	6059      	strne	r1, [r3, #4]
 800b4a6:	6863      	ldr	r3, [r4, #4]
 800b4a8:	bf08      	it	eq
 800b4aa:	6031      	streq	r1, [r6, #0]
 800b4ac:	5162      	str	r2, [r4, r5]
 800b4ae:	604b      	str	r3, [r1, #4]
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f104 060b 	add.w	r6, r4, #11
 800b4b6:	f000 f865 	bl	800b584 <__malloc_unlock>
 800b4ba:	f026 0607 	bic.w	r6, r6, #7
 800b4be:	1d23      	adds	r3, r4, #4
 800b4c0:	1af2      	subs	r2, r6, r3
 800b4c2:	d0b6      	beq.n	800b432 <_malloc_r+0x22>
 800b4c4:	1b9b      	subs	r3, r3, r6
 800b4c6:	50a3      	str	r3, [r4, r2]
 800b4c8:	e7b3      	b.n	800b432 <_malloc_r+0x22>
 800b4ca:	6862      	ldr	r2, [r4, #4]
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	bf0c      	ite	eq
 800b4d0:	6032      	streq	r2, [r6, #0]
 800b4d2:	605a      	strne	r2, [r3, #4]
 800b4d4:	e7ec      	b.n	800b4b0 <_malloc_r+0xa0>
 800b4d6:	4623      	mov	r3, r4
 800b4d8:	6864      	ldr	r4, [r4, #4]
 800b4da:	e7b2      	b.n	800b442 <_malloc_r+0x32>
 800b4dc:	4634      	mov	r4, r6
 800b4de:	6876      	ldr	r6, [r6, #4]
 800b4e0:	e7b9      	b.n	800b456 <_malloc_r+0x46>
 800b4e2:	230c      	movs	r3, #12
 800b4e4:	603b      	str	r3, [r7, #0]
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f000 f84c 	bl	800b584 <__malloc_unlock>
 800b4ec:	e7a1      	b.n	800b432 <_malloc_r+0x22>
 800b4ee:	6025      	str	r5, [r4, #0]
 800b4f0:	e7de      	b.n	800b4b0 <_malloc_r+0xa0>
 800b4f2:	bf00      	nop
 800b4f4:	200003d4 	.word	0x200003d4

0800b4f8 <_realloc_r>:
 800b4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4614      	mov	r4, r2
 800b500:	460e      	mov	r6, r1
 800b502:	b921      	cbnz	r1, 800b50e <_realloc_r+0x16>
 800b504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b508:	4611      	mov	r1, r2
 800b50a:	f7ff bf81 	b.w	800b410 <_malloc_r>
 800b50e:	b92a      	cbnz	r2, 800b51c <_realloc_r+0x24>
 800b510:	f7ff ff12 	bl	800b338 <_free_r>
 800b514:	4625      	mov	r5, r4
 800b516:	4628      	mov	r0, r5
 800b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51c:	f000 f838 	bl	800b590 <_malloc_usable_size_r>
 800b520:	4284      	cmp	r4, r0
 800b522:	4607      	mov	r7, r0
 800b524:	d802      	bhi.n	800b52c <_realloc_r+0x34>
 800b526:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b52a:	d812      	bhi.n	800b552 <_realloc_r+0x5a>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4640      	mov	r0, r8
 800b530:	f7ff ff6e 	bl	800b410 <_malloc_r>
 800b534:	4605      	mov	r5, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d0ed      	beq.n	800b516 <_realloc_r+0x1e>
 800b53a:	42bc      	cmp	r4, r7
 800b53c:	4622      	mov	r2, r4
 800b53e:	4631      	mov	r1, r6
 800b540:	bf28      	it	cs
 800b542:	463a      	movcs	r2, r7
 800b544:	f7ff fed0 	bl	800b2e8 <memcpy>
 800b548:	4631      	mov	r1, r6
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7ff fef4 	bl	800b338 <_free_r>
 800b550:	e7e1      	b.n	800b516 <_realloc_r+0x1e>
 800b552:	4635      	mov	r5, r6
 800b554:	e7df      	b.n	800b516 <_realloc_r+0x1e>
	...

0800b558 <_sbrk_r>:
 800b558:	b538      	push	{r3, r4, r5, lr}
 800b55a:	4d06      	ldr	r5, [pc, #24]	; (800b574 <_sbrk_r+0x1c>)
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	4608      	mov	r0, r1
 800b562:	602b      	str	r3, [r5, #0]
 800b564:	f7fa fbe0 	bl	8005d28 <_sbrk>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_sbrk_r+0x1a>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_sbrk_r+0x1a>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	200003dc 	.word	0x200003dc

0800b578 <__malloc_lock>:
 800b578:	4801      	ldr	r0, [pc, #4]	; (800b580 <__malloc_lock+0x8>)
 800b57a:	f000 b811 	b.w	800b5a0 <__retarget_lock_acquire_recursive>
 800b57e:	bf00      	nop
 800b580:	200003e0 	.word	0x200003e0

0800b584 <__malloc_unlock>:
 800b584:	4801      	ldr	r0, [pc, #4]	; (800b58c <__malloc_unlock+0x8>)
 800b586:	f000 b80c 	b.w	800b5a2 <__retarget_lock_release_recursive>
 800b58a:	bf00      	nop
 800b58c:	200003e0 	.word	0x200003e0

0800b590 <_malloc_usable_size_r>:
 800b590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b594:	1f18      	subs	r0, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	bfbc      	itt	lt
 800b59a:	580b      	ldrlt	r3, [r1, r0]
 800b59c:	18c0      	addlt	r0, r0, r3
 800b59e:	4770      	bx	lr

0800b5a0 <__retarget_lock_acquire_recursive>:
 800b5a0:	4770      	bx	lr

0800b5a2 <__retarget_lock_release_recursive>:
 800b5a2:	4770      	bx	lr
 800b5a4:	0000      	movs	r0, r0
	...

0800b5a8 <cos>:
 800b5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5aa:	ec53 2b10 	vmov	r2, r3, d0
 800b5ae:	4826      	ldr	r0, [pc, #152]	; (800b648 <cos+0xa0>)
 800b5b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b5b4:	4281      	cmp	r1, r0
 800b5b6:	dc06      	bgt.n	800b5c6 <cos+0x1e>
 800b5b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b640 <cos+0x98>
 800b5bc:	b005      	add	sp, #20
 800b5be:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5c2:	f000 baa9 	b.w	800bb18 <__kernel_cos>
 800b5c6:	4821      	ldr	r0, [pc, #132]	; (800b64c <cos+0xa4>)
 800b5c8:	4281      	cmp	r1, r0
 800b5ca:	dd09      	ble.n	800b5e0 <cos+0x38>
 800b5cc:	ee10 0a10 	vmov	r0, s0
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7f4 fe51 	bl	8000278 <__aeabi_dsub>
 800b5d6:	ec41 0b10 	vmov	d0, r0, r1
 800b5da:	b005      	add	sp, #20
 800b5dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5e0:	4668      	mov	r0, sp
 800b5e2:	f000 f88d 	bl	800b700 <__ieee754_rem_pio2>
 800b5e6:	f000 0003 	and.w	r0, r0, #3
 800b5ea:	2801      	cmp	r0, #1
 800b5ec:	d00b      	beq.n	800b606 <cos+0x5e>
 800b5ee:	2802      	cmp	r0, #2
 800b5f0:	d016      	beq.n	800b620 <cos+0x78>
 800b5f2:	b9e0      	cbnz	r0, 800b62e <cos+0x86>
 800b5f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b5f8:	ed9d 0b00 	vldr	d0, [sp]
 800b5fc:	f000 fa8c 	bl	800bb18 <__kernel_cos>
 800b600:	ec51 0b10 	vmov	r0, r1, d0
 800b604:	e7e7      	b.n	800b5d6 <cos+0x2e>
 800b606:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b60a:	ed9d 0b00 	vldr	d0, [sp]
 800b60e:	f000 fe9b 	bl	800c348 <__kernel_sin>
 800b612:	ec53 2b10 	vmov	r2, r3, d0
 800b616:	ee10 0a10 	vmov	r0, s0
 800b61a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b61e:	e7da      	b.n	800b5d6 <cos+0x2e>
 800b620:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b624:	ed9d 0b00 	vldr	d0, [sp]
 800b628:	f000 fa76 	bl	800bb18 <__kernel_cos>
 800b62c:	e7f1      	b.n	800b612 <cos+0x6a>
 800b62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b632:	ed9d 0b00 	vldr	d0, [sp]
 800b636:	2001      	movs	r0, #1
 800b638:	f000 fe86 	bl	800c348 <__kernel_sin>
 800b63c:	e7e0      	b.n	800b600 <cos+0x58>
 800b63e:	bf00      	nop
	...
 800b648:	3fe921fb 	.word	0x3fe921fb
 800b64c:	7fefffff 	.word	0x7fefffff

0800b650 <sin>:
 800b650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b652:	ec53 2b10 	vmov	r2, r3, d0
 800b656:	4828      	ldr	r0, [pc, #160]	; (800b6f8 <sin+0xa8>)
 800b658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b65c:	4281      	cmp	r1, r0
 800b65e:	dc07      	bgt.n	800b670 <sin+0x20>
 800b660:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b6f0 <sin+0xa0>
 800b664:	2000      	movs	r0, #0
 800b666:	b005      	add	sp, #20
 800b668:	f85d eb04 	ldr.w	lr, [sp], #4
 800b66c:	f000 be6c 	b.w	800c348 <__kernel_sin>
 800b670:	4822      	ldr	r0, [pc, #136]	; (800b6fc <sin+0xac>)
 800b672:	4281      	cmp	r1, r0
 800b674:	dd09      	ble.n	800b68a <sin+0x3a>
 800b676:	ee10 0a10 	vmov	r0, s0
 800b67a:	4619      	mov	r1, r3
 800b67c:	f7f4 fdfc 	bl	8000278 <__aeabi_dsub>
 800b680:	ec41 0b10 	vmov	d0, r0, r1
 800b684:	b005      	add	sp, #20
 800b686:	f85d fb04 	ldr.w	pc, [sp], #4
 800b68a:	4668      	mov	r0, sp
 800b68c:	f000 f838 	bl	800b700 <__ieee754_rem_pio2>
 800b690:	f000 0003 	and.w	r0, r0, #3
 800b694:	2801      	cmp	r0, #1
 800b696:	d00c      	beq.n	800b6b2 <sin+0x62>
 800b698:	2802      	cmp	r0, #2
 800b69a:	d011      	beq.n	800b6c0 <sin+0x70>
 800b69c:	b9f0      	cbnz	r0, 800b6dc <sin+0x8c>
 800b69e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6a2:	ed9d 0b00 	vldr	d0, [sp]
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	f000 fe4e 	bl	800c348 <__kernel_sin>
 800b6ac:	ec51 0b10 	vmov	r0, r1, d0
 800b6b0:	e7e6      	b.n	800b680 <sin+0x30>
 800b6b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6b6:	ed9d 0b00 	vldr	d0, [sp]
 800b6ba:	f000 fa2d 	bl	800bb18 <__kernel_cos>
 800b6be:	e7f5      	b.n	800b6ac <sin+0x5c>
 800b6c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6c4:	ed9d 0b00 	vldr	d0, [sp]
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f000 fe3d 	bl	800c348 <__kernel_sin>
 800b6ce:	ec53 2b10 	vmov	r2, r3, d0
 800b6d2:	ee10 0a10 	vmov	r0, s0
 800b6d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6da:	e7d1      	b.n	800b680 <sin+0x30>
 800b6dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6e0:	ed9d 0b00 	vldr	d0, [sp]
 800b6e4:	f000 fa18 	bl	800bb18 <__kernel_cos>
 800b6e8:	e7f1      	b.n	800b6ce <sin+0x7e>
 800b6ea:	bf00      	nop
 800b6ec:	f3af 8000 	nop.w
	...
 800b6f8:	3fe921fb 	.word	0x3fe921fb
 800b6fc:	7fefffff 	.word	0x7fefffff

0800b700 <__ieee754_rem_pio2>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	ed2d 8b02 	vpush	{d8}
 800b708:	ec55 4b10 	vmov	r4, r5, d0
 800b70c:	4bca      	ldr	r3, [pc, #808]	; (800ba38 <__ieee754_rem_pio2+0x338>)
 800b70e:	b08b      	sub	sp, #44	; 0x2c
 800b710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b714:	4598      	cmp	r8, r3
 800b716:	4682      	mov	sl, r0
 800b718:	9502      	str	r5, [sp, #8]
 800b71a:	dc08      	bgt.n	800b72e <__ieee754_rem_pio2+0x2e>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	ed80 0b00 	vstr	d0, [r0]
 800b724:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b728:	f04f 0b00 	mov.w	fp, #0
 800b72c:	e028      	b.n	800b780 <__ieee754_rem_pio2+0x80>
 800b72e:	4bc3      	ldr	r3, [pc, #780]	; (800ba3c <__ieee754_rem_pio2+0x33c>)
 800b730:	4598      	cmp	r8, r3
 800b732:	dc78      	bgt.n	800b826 <__ieee754_rem_pio2+0x126>
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	4ec2      	ldr	r6, [pc, #776]	; (800ba40 <__ieee754_rem_pio2+0x340>)
 800b738:	2b00      	cmp	r3, #0
 800b73a:	ee10 0a10 	vmov	r0, s0
 800b73e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x300>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	4629      	mov	r1, r5
 800b746:	dd39      	ble.n	800b7bc <__ieee754_rem_pio2+0xbc>
 800b748:	f7f4 fd96 	bl	8000278 <__aeabi_dsub>
 800b74c:	45b0      	cmp	r8, r6
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	d01b      	beq.n	800b78c <__ieee754_rem_pio2+0x8c>
 800b754:	a3ac      	add	r3, pc, #688	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x308>)
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f7f4 fd8d 	bl	8000278 <__aeabi_dsub>
 800b75e:	4602      	mov	r2, r0
 800b760:	460b      	mov	r3, r1
 800b762:	e9ca 2300 	strd	r2, r3, [sl]
 800b766:	4620      	mov	r0, r4
 800b768:	4629      	mov	r1, r5
 800b76a:	f7f4 fd85 	bl	8000278 <__aeabi_dsub>
 800b76e:	a3a6      	add	r3, pc, #664	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x308>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fd80 	bl	8000278 <__aeabi_dsub>
 800b778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b77c:	f04f 0b01 	mov.w	fp, #1
 800b780:	4658      	mov	r0, fp
 800b782:	b00b      	add	sp, #44	; 0x2c
 800b784:	ecbd 8b02 	vpop	{d8}
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x310>)
 800b78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b792:	f7f4 fd71 	bl	8000278 <__aeabi_dsub>
 800b796:	a3a0      	add	r3, pc, #640	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x318>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	4604      	mov	r4, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	f7f4 fd6a 	bl	8000278 <__aeabi_dsub>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	460b      	mov	r3, r1
 800b7a8:	e9ca 2300 	strd	r2, r3, [sl]
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 fd62 	bl	8000278 <__aeabi_dsub>
 800b7b4:	a398      	add	r3, pc, #608	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x318>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	e7db      	b.n	800b774 <__ieee754_rem_pio2+0x74>
 800b7bc:	f7f4 fd5e 	bl	800027c <__adddf3>
 800b7c0:	45b0      	cmp	r8, r6
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	460d      	mov	r5, r1
 800b7c6:	d016      	beq.n	800b7f6 <__ieee754_rem_pio2+0xf6>
 800b7c8:	a38f      	add	r3, pc, #572	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x308>)
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f4 fd55 	bl	800027c <__adddf3>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	e9ca 2300 	strd	r2, r3, [sl]
 800b7da:	4620      	mov	r0, r4
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7f4 fd4b 	bl	8000278 <__aeabi_dsub>
 800b7e2:	a389      	add	r3, pc, #548	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x308>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fd48 	bl	800027c <__adddf3>
 800b7ec:	f04f 3bff 	mov.w	fp, #4294967295
 800b7f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7f4:	e7c4      	b.n	800b780 <__ieee754_rem_pio2+0x80>
 800b7f6:	a386      	add	r3, pc, #536	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x310>)
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f7f4 fd3e 	bl	800027c <__adddf3>
 800b800:	a385      	add	r3, pc, #532	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x318>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	f7f4 fd37 	bl	800027c <__adddf3>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	e9ca 2300 	strd	r2, r3, [sl]
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f4 fd2d 	bl	8000278 <__aeabi_dsub>
 800b81e:	a37e      	add	r3, pc, #504	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x318>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	e7e0      	b.n	800b7e8 <__ieee754_rem_pio2+0xe8>
 800b826:	4b87      	ldr	r3, [pc, #540]	; (800ba44 <__ieee754_rem_pio2+0x344>)
 800b828:	4598      	cmp	r8, r3
 800b82a:	f300 80d9 	bgt.w	800b9e0 <__ieee754_rem_pio2+0x2e0>
 800b82e:	f000 fe49 	bl	800c4c4 <fabs>
 800b832:	ec55 4b10 	vmov	r4, r5, d0
 800b836:	ee10 0a10 	vmov	r0, s0
 800b83a:	a379      	add	r3, pc, #484	; (adr r3, 800ba20 <__ieee754_rem_pio2+0x320>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	4629      	mov	r1, r5
 800b842:	f7f4 fed1 	bl	80005e8 <__aeabi_dmul>
 800b846:	4b80      	ldr	r3, [pc, #512]	; (800ba48 <__ieee754_rem_pio2+0x348>)
 800b848:	2200      	movs	r2, #0
 800b84a:	f7f4 fd17 	bl	800027c <__adddf3>
 800b84e:	f7f5 f965 	bl	8000b1c <__aeabi_d2iz>
 800b852:	4683      	mov	fp, r0
 800b854:	f7f4 fe5e 	bl	8000514 <__aeabi_i2d>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	ec43 2b18 	vmov	d8, r2, r3
 800b860:	a367      	add	r3, pc, #412	; (adr r3, 800ba00 <__ieee754_rem_pio2+0x300>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	f7f4 febf 	bl	80005e8 <__aeabi_dmul>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4620      	mov	r0, r4
 800b870:	4629      	mov	r1, r5
 800b872:	f7f4 fd01 	bl	8000278 <__aeabi_dsub>
 800b876:	a364      	add	r3, pc, #400	; (adr r3, 800ba08 <__ieee754_rem_pio2+0x308>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	4606      	mov	r6, r0
 800b87e:	460f      	mov	r7, r1
 800b880:	ec51 0b18 	vmov	r0, r1, d8
 800b884:	f7f4 feb0 	bl	80005e8 <__aeabi_dmul>
 800b888:	f1bb 0f1f 	cmp.w	fp, #31
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	dc0d      	bgt.n	800b8ae <__ieee754_rem_pio2+0x1ae>
 800b892:	4b6e      	ldr	r3, [pc, #440]	; (800ba4c <__ieee754_rem_pio2+0x34c>)
 800b894:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	4543      	cmp	r3, r8
 800b89e:	d006      	beq.n	800b8ae <__ieee754_rem_pio2+0x1ae>
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	f7f4 fce6 	bl	8000278 <__aeabi_dsub>
 800b8ac:	e00f      	b.n	800b8ce <__ieee754_rem_pio2+0x1ce>
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	4639      	mov	r1, r7
 800b8b6:	f7f4 fcdf 	bl	8000278 <__aeabi_dsub>
 800b8ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b8c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b8c8:	f1b8 0f10 	cmp.w	r8, #16
 800b8cc:	dc02      	bgt.n	800b8d4 <__ieee754_rem_pio2+0x1d4>
 800b8ce:	e9ca 0100 	strd	r0, r1, [sl]
 800b8d2:	e039      	b.n	800b948 <__ieee754_rem_pio2+0x248>
 800b8d4:	a34e      	add	r3, pc, #312	; (adr r3, 800ba10 <__ieee754_rem_pio2+0x310>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	ec51 0b18 	vmov	r0, r1, d8
 800b8de:	f7f4 fe83 	bl	80005e8 <__aeabi_dmul>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	460d      	mov	r5, r1
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f4 fcc3 	bl	8000278 <__aeabi_dsub>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4680      	mov	r8, r0
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	f7f4 fcbb 	bl	8000278 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	f7f4 fcb7 	bl	8000278 <__aeabi_dsub>
 800b90a:	a343      	add	r3, pc, #268	; (adr r3, 800ba18 <__ieee754_rem_pio2+0x318>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	4604      	mov	r4, r0
 800b912:	460d      	mov	r5, r1
 800b914:	ec51 0b18 	vmov	r0, r1, d8
 800b918:	f7f4 fe66 	bl	80005e8 <__aeabi_dmul>
 800b91c:	4622      	mov	r2, r4
 800b91e:	462b      	mov	r3, r5
 800b920:	f7f4 fcaa 	bl	8000278 <__aeabi_dsub>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	4640      	mov	r0, r8
 800b92e:	4649      	mov	r1, r9
 800b930:	f7f4 fca2 	bl	8000278 <__aeabi_dsub>
 800b934:	9a03      	ldr	r2, [sp, #12]
 800b936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b31      	cmp	r3, #49	; 0x31
 800b93e:	dc24      	bgt.n	800b98a <__ieee754_rem_pio2+0x28a>
 800b940:	e9ca 0100 	strd	r0, r1, [sl]
 800b944:	4646      	mov	r6, r8
 800b946:	464f      	mov	r7, r9
 800b948:	e9da 8900 	ldrd	r8, r9, [sl]
 800b94c:	4630      	mov	r0, r6
 800b94e:	4642      	mov	r2, r8
 800b950:	464b      	mov	r3, r9
 800b952:	4639      	mov	r1, r7
 800b954:	f7f4 fc90 	bl	8000278 <__aeabi_dsub>
 800b958:	462b      	mov	r3, r5
 800b95a:	4622      	mov	r2, r4
 800b95c:	f7f4 fc8c 	bl	8000278 <__aeabi_dsub>
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b968:	f6bf af0a 	bge.w	800b780 <__ieee754_rem_pio2+0x80>
 800b96c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b970:	f8ca 3004 	str.w	r3, [sl, #4]
 800b974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b978:	f8ca 8000 	str.w	r8, [sl]
 800b97c:	f8ca 0008 	str.w	r0, [sl, #8]
 800b980:	f8ca 300c 	str.w	r3, [sl, #12]
 800b984:	f1cb 0b00 	rsb	fp, fp, #0
 800b988:	e6fa      	b.n	800b780 <__ieee754_rem_pio2+0x80>
 800b98a:	a327      	add	r3, pc, #156	; (adr r3, 800ba28 <__ieee754_rem_pio2+0x328>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	ec51 0b18 	vmov	r0, r1, d8
 800b994:	f7f4 fe28 	bl	80005e8 <__aeabi_dmul>
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fc68 	bl	8000278 <__aeabi_dsub>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	460f      	mov	r7, r1
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f7f4 fc60 	bl	8000278 <__aeabi_dsub>
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	f7f4 fc5c 	bl	8000278 <__aeabi_dsub>
 800b9c0:	a31b      	add	r3, pc, #108	; (adr r3, 800ba30 <__ieee754_rem_pio2+0x330>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	ec51 0b18 	vmov	r0, r1, d8
 800b9ce:	f7f4 fe0b 	bl	80005e8 <__aeabi_dmul>
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	462b      	mov	r3, r5
 800b9d6:	f7f4 fc4f 	bl	8000278 <__aeabi_dsub>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	460d      	mov	r5, r1
 800b9de:	e75f      	b.n	800b8a0 <__ieee754_rem_pio2+0x1a0>
 800b9e0:	4b1b      	ldr	r3, [pc, #108]	; (800ba50 <__ieee754_rem_pio2+0x350>)
 800b9e2:	4598      	cmp	r8, r3
 800b9e4:	dd36      	ble.n	800ba54 <__ieee754_rem_pio2+0x354>
 800b9e6:	ee10 2a10 	vmov	r2, s0
 800b9ea:	462b      	mov	r3, r5
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f7f4 fc42 	bl	8000278 <__aeabi_dsub>
 800b9f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f8:	e9ca 0100 	strd	r0, r1, [sl]
 800b9fc:	e694      	b.n	800b728 <__ieee754_rem_pio2+0x28>
 800b9fe:	bf00      	nop
 800ba00:	54400000 	.word	0x54400000
 800ba04:	3ff921fb 	.word	0x3ff921fb
 800ba08:	1a626331 	.word	0x1a626331
 800ba0c:	3dd0b461 	.word	0x3dd0b461
 800ba10:	1a600000 	.word	0x1a600000
 800ba14:	3dd0b461 	.word	0x3dd0b461
 800ba18:	2e037073 	.word	0x2e037073
 800ba1c:	3ba3198a 	.word	0x3ba3198a
 800ba20:	6dc9c883 	.word	0x6dc9c883
 800ba24:	3fe45f30 	.word	0x3fe45f30
 800ba28:	2e000000 	.word	0x2e000000
 800ba2c:	3ba3198a 	.word	0x3ba3198a
 800ba30:	252049c1 	.word	0x252049c1
 800ba34:	397b839a 	.word	0x397b839a
 800ba38:	3fe921fb 	.word	0x3fe921fb
 800ba3c:	4002d97b 	.word	0x4002d97b
 800ba40:	3ff921fb 	.word	0x3ff921fb
 800ba44:	413921fb 	.word	0x413921fb
 800ba48:	3fe00000 	.word	0x3fe00000
 800ba4c:	0800f974 	.word	0x0800f974
 800ba50:	7fefffff 	.word	0x7fefffff
 800ba54:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ba58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ba5c:	ee10 0a10 	vmov	r0, s0
 800ba60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ba64:	ee10 6a10 	vmov	r6, s0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	f7f5 f857 	bl	8000b1c <__aeabi_d2iz>
 800ba6e:	f7f4 fd51 	bl	8000514 <__aeabi_i2d>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba7e:	f7f4 fbfb 	bl	8000278 <__aeabi_dsub>
 800ba82:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <__ieee754_rem_pio2+0x410>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	f7f4 fdaf 	bl	80005e8 <__aeabi_dmul>
 800ba8a:	460f      	mov	r7, r1
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	f7f5 f845 	bl	8000b1c <__aeabi_d2iz>
 800ba92:	f7f4 fd3f 	bl	8000514 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800baa2:	f7f4 fbe9 	bl	8000278 <__aeabi_dsub>
 800baa6:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <__ieee754_rem_pio2+0x410>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fd9d 	bl	80005e8 <__aeabi_dmul>
 800baae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bab2:	ad04      	add	r5, sp, #16
 800bab4:	f04f 0803 	mov.w	r8, #3
 800bab8:	46a9      	mov	r9, r5
 800baba:	2600      	movs	r6, #0
 800babc:	2700      	movs	r7, #0
 800babe:	4632      	mov	r2, r6
 800bac0:	463b      	mov	r3, r7
 800bac2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bac6:	46c3      	mov	fp, r8
 800bac8:	3d08      	subs	r5, #8
 800baca:	f108 38ff 	add.w	r8, r8, #4294967295
 800bace:	f7f4 fff3 	bl	8000ab8 <__aeabi_dcmpeq>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d1f3      	bne.n	800babe <__ieee754_rem_pio2+0x3be>
 800bad6:	4b0f      	ldr	r3, [pc, #60]	; (800bb14 <__ieee754_rem_pio2+0x414>)
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	2302      	movs	r3, #2
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	4622      	mov	r2, r4
 800bae0:	465b      	mov	r3, fp
 800bae2:	4651      	mov	r1, sl
 800bae4:	4648      	mov	r0, r9
 800bae6:	f000 f8df 	bl	800bca8 <__kernel_rem_pio2>
 800baea:	9b02      	ldr	r3, [sp, #8]
 800baec:	2b00      	cmp	r3, #0
 800baee:	4683      	mov	fp, r0
 800baf0:	f6bf ae46 	bge.w	800b780 <__ieee754_rem_pio2+0x80>
 800baf4:	e9da 2100 	ldrd	r2, r1, [sl]
 800baf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bafc:	e9ca 2300 	strd	r2, r3, [sl]
 800bb00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bb04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bb0c:	e73a      	b.n	800b984 <__ieee754_rem_pio2+0x284>
 800bb0e:	bf00      	nop
 800bb10:	41700000 	.word	0x41700000
 800bb14:	0800f9f4 	.word	0x0800f9f4

0800bb18 <__kernel_cos>:
 800bb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	ec57 6b10 	vmov	r6, r7, d0
 800bb20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bb24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bb28:	ed8d 1b00 	vstr	d1, [sp]
 800bb2c:	da07      	bge.n	800bb3e <__kernel_cos+0x26>
 800bb2e:	ee10 0a10 	vmov	r0, s0
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 fff2 	bl	8000b1c <__aeabi_d2iz>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f000 8088 	beq.w	800bc4e <__kernel_cos+0x136>
 800bb3e:	4632      	mov	r2, r6
 800bb40:	463b      	mov	r3, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fd4f 	bl	80005e8 <__aeabi_dmul>
 800bb4a:	4b51      	ldr	r3, [pc, #324]	; (800bc90 <__kernel_cos+0x178>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	460d      	mov	r5, r1
 800bb52:	f7f4 fd49 	bl	80005e8 <__aeabi_dmul>
 800bb56:	a340      	add	r3, pc, #256	; (adr r3, 800bc58 <__kernel_cos+0x140>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	4682      	mov	sl, r0
 800bb5e:	468b      	mov	fp, r1
 800bb60:	4620      	mov	r0, r4
 800bb62:	4629      	mov	r1, r5
 800bb64:	f7f4 fd40 	bl	80005e8 <__aeabi_dmul>
 800bb68:	a33d      	add	r3, pc, #244	; (adr r3, 800bc60 <__kernel_cos+0x148>)
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f7f4 fb85 	bl	800027c <__adddf3>
 800bb72:	4622      	mov	r2, r4
 800bb74:	462b      	mov	r3, r5
 800bb76:	f7f4 fd37 	bl	80005e8 <__aeabi_dmul>
 800bb7a:	a33b      	add	r3, pc, #236	; (adr r3, 800bc68 <__kernel_cos+0x150>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f7f4 fb7a 	bl	8000278 <__aeabi_dsub>
 800bb84:	4622      	mov	r2, r4
 800bb86:	462b      	mov	r3, r5
 800bb88:	f7f4 fd2e 	bl	80005e8 <__aeabi_dmul>
 800bb8c:	a338      	add	r3, pc, #224	; (adr r3, 800bc70 <__kernel_cos+0x158>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f7f4 fb73 	bl	800027c <__adddf3>
 800bb96:	4622      	mov	r2, r4
 800bb98:	462b      	mov	r3, r5
 800bb9a:	f7f4 fd25 	bl	80005e8 <__aeabi_dmul>
 800bb9e:	a336      	add	r3, pc, #216	; (adr r3, 800bc78 <__kernel_cos+0x160>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 fb68 	bl	8000278 <__aeabi_dsub>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f7f4 fd1c 	bl	80005e8 <__aeabi_dmul>
 800bbb0:	a333      	add	r3, pc, #204	; (adr r3, 800bc80 <__kernel_cos+0x168>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 fb61 	bl	800027c <__adddf3>
 800bbba:	4622      	mov	r2, r4
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	462b      	mov	r3, r5
 800bbc6:	f7f4 fd0f 	bl	80005e8 <__aeabi_dmul>
 800bbca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbce:	4604      	mov	r4, r0
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fd07 	bl	80005e8 <__aeabi_dmul>
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4602      	mov	r2, r0
 800bbde:	4629      	mov	r1, r5
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f7f4 fb49 	bl	8000278 <__aeabi_dsub>
 800bbe6:	4b2b      	ldr	r3, [pc, #172]	; (800bc94 <__kernel_cos+0x17c>)
 800bbe8:	4598      	cmp	r8, r3
 800bbea:	4606      	mov	r6, r0
 800bbec:	460f      	mov	r7, r1
 800bbee:	dc10      	bgt.n	800bc12 <__kernel_cos+0xfa>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4650      	mov	r0, sl
 800bbf6:	4659      	mov	r1, fp
 800bbf8:	f7f4 fb3e 	bl	8000278 <__aeabi_dsub>
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4926      	ldr	r1, [pc, #152]	; (800bc98 <__kernel_cos+0x180>)
 800bc00:	4602      	mov	r2, r0
 800bc02:	2000      	movs	r0, #0
 800bc04:	f7f4 fb38 	bl	8000278 <__aeabi_dsub>
 800bc08:	ec41 0b10 	vmov	d0, r0, r1
 800bc0c:	b003      	add	sp, #12
 800bc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc12:	4b22      	ldr	r3, [pc, #136]	; (800bc9c <__kernel_cos+0x184>)
 800bc14:	4920      	ldr	r1, [pc, #128]	; (800bc98 <__kernel_cos+0x180>)
 800bc16:	4598      	cmp	r8, r3
 800bc18:	bfcc      	ite	gt
 800bc1a:	4d21      	ldrgt	r5, [pc, #132]	; (800bca0 <__kernel_cos+0x188>)
 800bc1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bc20:	2400      	movs	r4, #0
 800bc22:	4622      	mov	r2, r4
 800bc24:	462b      	mov	r3, r5
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7f4 fb26 	bl	8000278 <__aeabi_dsub>
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4680      	mov	r8, r0
 800bc30:	4689      	mov	r9, r1
 800bc32:	462b      	mov	r3, r5
 800bc34:	4650      	mov	r0, sl
 800bc36:	4659      	mov	r1, fp
 800bc38:	f7f4 fb1e 	bl	8000278 <__aeabi_dsub>
 800bc3c:	4632      	mov	r2, r6
 800bc3e:	463b      	mov	r3, r7
 800bc40:	f7f4 fb1a 	bl	8000278 <__aeabi_dsub>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	e7da      	b.n	800bc04 <__kernel_cos+0xec>
 800bc4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bc88 <__kernel_cos+0x170>
 800bc52:	e7db      	b.n	800bc0c <__kernel_cos+0xf4>
 800bc54:	f3af 8000 	nop.w
 800bc58:	be8838d4 	.word	0xbe8838d4
 800bc5c:	bda8fae9 	.word	0xbda8fae9
 800bc60:	bdb4b1c4 	.word	0xbdb4b1c4
 800bc64:	3e21ee9e 	.word	0x3e21ee9e
 800bc68:	809c52ad 	.word	0x809c52ad
 800bc6c:	3e927e4f 	.word	0x3e927e4f
 800bc70:	19cb1590 	.word	0x19cb1590
 800bc74:	3efa01a0 	.word	0x3efa01a0
 800bc78:	16c15177 	.word	0x16c15177
 800bc7c:	3f56c16c 	.word	0x3f56c16c
 800bc80:	5555554c 	.word	0x5555554c
 800bc84:	3fa55555 	.word	0x3fa55555
 800bc88:	00000000 	.word	0x00000000
 800bc8c:	3ff00000 	.word	0x3ff00000
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	3fd33332 	.word	0x3fd33332
 800bc98:	3ff00000 	.word	0x3ff00000
 800bc9c:	3fe90000 	.word	0x3fe90000
 800bca0:	3fd20000 	.word	0x3fd20000
 800bca4:	00000000 	.word	0x00000000

0800bca8 <__kernel_rem_pio2>:
 800bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcac:	ed2d 8b02 	vpush	{d8}
 800bcb0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bcb4:	f112 0f14 	cmn.w	r2, #20
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	9101      	str	r1, [sp, #4]
 800bcbc:	4bc4      	ldr	r3, [pc, #784]	; (800bfd0 <__kernel_rem_pio2+0x328>)
 800bcbe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bcc0:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcc6:	9302      	str	r3, [sp, #8]
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	f103 33ff 	add.w	r3, r3, #4294967295
 800bcce:	bfa8      	it	ge
 800bcd0:	1ed4      	subge	r4, r2, #3
 800bcd2:	9306      	str	r3, [sp, #24]
 800bcd4:	bfb2      	itee	lt
 800bcd6:	2400      	movlt	r4, #0
 800bcd8:	2318      	movge	r3, #24
 800bcda:	fb94 f4f3 	sdivge	r4, r4, r3
 800bcde:	f06f 0317 	mvn.w	r3, #23
 800bce2:	fb04 3303 	mla	r3, r4, r3, r3
 800bce6:	eb03 0a02 	add.w	sl, r3, r2
 800bcea:	9b02      	ldr	r3, [sp, #8]
 800bcec:	9a06      	ldr	r2, [sp, #24]
 800bcee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bfc0 <__kernel_rem_pio2+0x318>
 800bcf2:	eb03 0802 	add.w	r8, r3, r2
 800bcf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bcf8:	1aa7      	subs	r7, r4, r2
 800bcfa:	ae22      	add	r6, sp, #136	; 0x88
 800bcfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bd00:	2500      	movs	r5, #0
 800bd02:	4545      	cmp	r5, r8
 800bd04:	dd13      	ble.n	800bd2e <__kernel_rem_pio2+0x86>
 800bd06:	9b08      	ldr	r3, [sp, #32]
 800bd08:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bfc0 <__kernel_rem_pio2+0x318>
 800bd0c:	aa22      	add	r2, sp, #136	; 0x88
 800bd0e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bd12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	9b02      	ldr	r3, [sp, #8]
 800bd1c:	4598      	cmp	r8, r3
 800bd1e:	dc2f      	bgt.n	800bd80 <__kernel_rem_pio2+0xd8>
 800bd20:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bd24:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bd28:	462f      	mov	r7, r5
 800bd2a:	2600      	movs	r6, #0
 800bd2c:	e01b      	b.n	800bd66 <__kernel_rem_pio2+0xbe>
 800bd2e:	42ef      	cmn	r7, r5
 800bd30:	d407      	bmi.n	800bd42 <__kernel_rem_pio2+0x9a>
 800bd32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bd36:	f7f4 fbed 	bl	8000514 <__aeabi_i2d>
 800bd3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bd3e:	3501      	adds	r5, #1
 800bd40:	e7df      	b.n	800bd02 <__kernel_rem_pio2+0x5a>
 800bd42:	ec51 0b18 	vmov	r0, r1, d8
 800bd46:	e7f8      	b.n	800bd3a <__kernel_rem_pio2+0x92>
 800bd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd50:	f7f4 fc4a 	bl	80005e8 <__aeabi_dmul>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd5c:	f7f4 fa8e 	bl	800027c <__adddf3>
 800bd60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd64:	3601      	adds	r6, #1
 800bd66:	9b06      	ldr	r3, [sp, #24]
 800bd68:	429e      	cmp	r6, r3
 800bd6a:	f1a7 0708 	sub.w	r7, r7, #8
 800bd6e:	ddeb      	ble.n	800bd48 <__kernel_rem_pio2+0xa0>
 800bd70:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bd74:	f108 0801 	add.w	r8, r8, #1
 800bd78:	ecab 7b02 	vstmia	fp!, {d7}
 800bd7c:	3508      	adds	r5, #8
 800bd7e:	e7cc      	b.n	800bd1a <__kernel_rem_pio2+0x72>
 800bd80:	9b02      	ldr	r3, [sp, #8]
 800bd82:	aa0e      	add	r2, sp, #56	; 0x38
 800bd84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd88:	930d      	str	r3, [sp, #52]	; 0x34
 800bd8a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bd8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bd90:	9c02      	ldr	r4, [sp, #8]
 800bd92:	930c      	str	r3, [sp, #48]	; 0x30
 800bd94:	00e3      	lsls	r3, r4, #3
 800bd96:	930a      	str	r3, [sp, #40]	; 0x28
 800bd98:	ab9a      	add	r3, sp, #616	; 0x268
 800bd9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bda2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bda6:	ab72      	add	r3, sp, #456	; 0x1c8
 800bda8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bdac:	46c3      	mov	fp, r8
 800bdae:	46a1      	mov	r9, r4
 800bdb0:	f1b9 0f00 	cmp.w	r9, #0
 800bdb4:	f1a5 0508 	sub.w	r5, r5, #8
 800bdb8:	dc77      	bgt.n	800beaa <__kernel_rem_pio2+0x202>
 800bdba:	ec47 6b10 	vmov	d0, r6, r7
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	f000 fc0a 	bl	800c5d8 <scalbn>
 800bdc4:	ec57 6b10 	vmov	r6, r7, d0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bdce:	ee10 0a10 	vmov	r0, s0
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 fc08 	bl	80005e8 <__aeabi_dmul>
 800bdd8:	ec41 0b10 	vmov	d0, r0, r1
 800bddc:	f000 fb7c 	bl	800c4d8 <floor>
 800bde0:	4b7c      	ldr	r3, [pc, #496]	; (800bfd4 <__kernel_rem_pio2+0x32c>)
 800bde2:	ec51 0b10 	vmov	r0, r1, d0
 800bde6:	2200      	movs	r2, #0
 800bde8:	f7f4 fbfe 	bl	80005e8 <__aeabi_dmul>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fa40 	bl	8000278 <__aeabi_dsub>
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	f7f4 fe8e 	bl	8000b1c <__aeabi_d2iz>
 800be00:	9004      	str	r0, [sp, #16]
 800be02:	f7f4 fb87 	bl	8000514 <__aeabi_i2d>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fa33 	bl	8000278 <__aeabi_dsub>
 800be12:	f1ba 0f00 	cmp.w	sl, #0
 800be16:	4606      	mov	r6, r0
 800be18:	460f      	mov	r7, r1
 800be1a:	dd6d      	ble.n	800bef8 <__kernel_rem_pio2+0x250>
 800be1c:	1e62      	subs	r2, r4, #1
 800be1e:	ab0e      	add	r3, sp, #56	; 0x38
 800be20:	9d04      	ldr	r5, [sp, #16]
 800be22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800be26:	f1ca 0118 	rsb	r1, sl, #24
 800be2a:	fa40 f301 	asr.w	r3, r0, r1
 800be2e:	441d      	add	r5, r3
 800be30:	408b      	lsls	r3, r1
 800be32:	1ac0      	subs	r0, r0, r3
 800be34:	ab0e      	add	r3, sp, #56	; 0x38
 800be36:	9504      	str	r5, [sp, #16]
 800be38:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800be3c:	f1ca 0317 	rsb	r3, sl, #23
 800be40:	fa40 fb03 	asr.w	fp, r0, r3
 800be44:	f1bb 0f00 	cmp.w	fp, #0
 800be48:	dd65      	ble.n	800bf16 <__kernel_rem_pio2+0x26e>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	2200      	movs	r2, #0
 800be4e:	3301      	adds	r3, #1
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	4615      	mov	r5, r2
 800be54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800be58:	4294      	cmp	r4, r2
 800be5a:	f300 809c 	bgt.w	800bf96 <__kernel_rem_pio2+0x2ee>
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	dd07      	ble.n	800be74 <__kernel_rem_pio2+0x1cc>
 800be64:	f1ba 0f01 	cmp.w	sl, #1
 800be68:	f000 80c0 	beq.w	800bfec <__kernel_rem_pio2+0x344>
 800be6c:	f1ba 0f02 	cmp.w	sl, #2
 800be70:	f000 80c6 	beq.w	800c000 <__kernel_rem_pio2+0x358>
 800be74:	f1bb 0f02 	cmp.w	fp, #2
 800be78:	d14d      	bne.n	800bf16 <__kernel_rem_pio2+0x26e>
 800be7a:	4632      	mov	r2, r6
 800be7c:	463b      	mov	r3, r7
 800be7e:	4956      	ldr	r1, [pc, #344]	; (800bfd8 <__kernel_rem_pio2+0x330>)
 800be80:	2000      	movs	r0, #0
 800be82:	f7f4 f9f9 	bl	8000278 <__aeabi_dsub>
 800be86:	4606      	mov	r6, r0
 800be88:	460f      	mov	r7, r1
 800be8a:	2d00      	cmp	r5, #0
 800be8c:	d043      	beq.n	800bf16 <__kernel_rem_pio2+0x26e>
 800be8e:	4650      	mov	r0, sl
 800be90:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bfc8 <__kernel_rem_pio2+0x320>
 800be94:	f000 fba0 	bl	800c5d8 <scalbn>
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	ec53 2b10 	vmov	r2, r3, d0
 800bea0:	f7f4 f9ea 	bl	8000278 <__aeabi_dsub>
 800bea4:	4606      	mov	r6, r0
 800bea6:	460f      	mov	r7, r1
 800bea8:	e035      	b.n	800bf16 <__kernel_rem_pio2+0x26e>
 800beaa:	4b4c      	ldr	r3, [pc, #304]	; (800bfdc <__kernel_rem_pio2+0x334>)
 800beac:	2200      	movs	r2, #0
 800beae:	4630      	mov	r0, r6
 800beb0:	4639      	mov	r1, r7
 800beb2:	f7f4 fb99 	bl	80005e8 <__aeabi_dmul>
 800beb6:	f7f4 fe31 	bl	8000b1c <__aeabi_d2iz>
 800beba:	f7f4 fb2b 	bl	8000514 <__aeabi_i2d>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	ec43 2b18 	vmov	d8, r2, r3
 800bec6:	4b46      	ldr	r3, [pc, #280]	; (800bfe0 <__kernel_rem_pio2+0x338>)
 800bec8:	2200      	movs	r2, #0
 800beca:	f7f4 fb8d 	bl	80005e8 <__aeabi_dmul>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 f9cf 	bl	8000278 <__aeabi_dsub>
 800beda:	f7f4 fe1f 	bl	8000b1c <__aeabi_d2iz>
 800bede:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bee2:	f84b 0b04 	str.w	r0, [fp], #4
 800bee6:	ec51 0b18 	vmov	r0, r1, d8
 800beea:	f7f4 f9c7 	bl	800027c <__adddf3>
 800beee:	f109 39ff 	add.w	r9, r9, #4294967295
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	e75b      	b.n	800bdb0 <__kernel_rem_pio2+0x108>
 800bef8:	d106      	bne.n	800bf08 <__kernel_rem_pio2+0x260>
 800befa:	1e63      	subs	r3, r4, #1
 800befc:	aa0e      	add	r2, sp, #56	; 0x38
 800befe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bf06:	e79d      	b.n	800be44 <__kernel_rem_pio2+0x19c>
 800bf08:	4b36      	ldr	r3, [pc, #216]	; (800bfe4 <__kernel_rem_pio2+0x33c>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f7f4 fdf2 	bl	8000af4 <__aeabi_dcmpge>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d13d      	bne.n	800bf90 <__kernel_rem_pio2+0x2e8>
 800bf14:	4683      	mov	fp, r0
 800bf16:	2200      	movs	r2, #0
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	f7f4 fdcb 	bl	8000ab8 <__aeabi_dcmpeq>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	f000 80c0 	beq.w	800c0a8 <__kernel_rem_pio2+0x400>
 800bf28:	1e65      	subs	r5, r4, #1
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	9902      	ldr	r1, [sp, #8]
 800bf30:	428b      	cmp	r3, r1
 800bf32:	da6c      	bge.n	800c00e <__kernel_rem_pio2+0x366>
 800bf34:	2a00      	cmp	r2, #0
 800bf36:	f000 8089 	beq.w	800c04c <__kernel_rem_pio2+0x3a4>
 800bf3a:	ab0e      	add	r3, sp, #56	; 0x38
 800bf3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bf40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80ad 	beq.w	800c0a4 <__kernel_rem_pio2+0x3fc>
 800bf4a:	4650      	mov	r0, sl
 800bf4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bfc8 <__kernel_rem_pio2+0x320>
 800bf50:	f000 fb42 	bl	800c5d8 <scalbn>
 800bf54:	ab9a      	add	r3, sp, #616	; 0x268
 800bf56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf5a:	ec57 6b10 	vmov	r6, r7, d0
 800bf5e:	00ec      	lsls	r4, r5, #3
 800bf60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bf64:	46aa      	mov	sl, r5
 800bf66:	f1ba 0f00 	cmp.w	sl, #0
 800bf6a:	f280 80d6 	bge.w	800c11a <__kernel_rem_pio2+0x472>
 800bf6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bfc0 <__kernel_rem_pio2+0x318>
 800bf72:	462e      	mov	r6, r5
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	f2c0 8104 	blt.w	800c182 <__kernel_rem_pio2+0x4da>
 800bf7a:	ab72      	add	r3, sp, #456	; 0x1c8
 800bf7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bf80:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bfe8 <__kernel_rem_pio2+0x340>
 800bf84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bf88:	f04f 0800 	mov.w	r8, #0
 800bf8c:	1baf      	subs	r7, r5, r6
 800bf8e:	e0ea      	b.n	800c166 <__kernel_rem_pio2+0x4be>
 800bf90:	f04f 0b02 	mov.w	fp, #2
 800bf94:	e759      	b.n	800be4a <__kernel_rem_pio2+0x1a2>
 800bf96:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9a:	b955      	cbnz	r5, 800bfb2 <__kernel_rem_pio2+0x30a>
 800bf9c:	b123      	cbz	r3, 800bfa8 <__kernel_rem_pio2+0x300>
 800bf9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bfa2:	f8c8 3000 	str.w	r3, [r8]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	3201      	adds	r2, #1
 800bfaa:	f108 0804 	add.w	r8, r8, #4
 800bfae:	461d      	mov	r5, r3
 800bfb0:	e752      	b.n	800be58 <__kernel_rem_pio2+0x1b0>
 800bfb2:	1acb      	subs	r3, r1, r3
 800bfb4:	f8c8 3000 	str.w	r3, [r8]
 800bfb8:	462b      	mov	r3, r5
 800bfba:	e7f5      	b.n	800bfa8 <__kernel_rem_pio2+0x300>
 800bfbc:	f3af 8000 	nop.w
	...
 800bfcc:	3ff00000 	.word	0x3ff00000
 800bfd0:	0800fb40 	.word	0x0800fb40
 800bfd4:	40200000 	.word	0x40200000
 800bfd8:	3ff00000 	.word	0x3ff00000
 800bfdc:	3e700000 	.word	0x3e700000
 800bfe0:	41700000 	.word	0x41700000
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	0800fb00 	.word	0x0800fb00
 800bfec:	1e62      	subs	r2, r4, #1
 800bfee:	ab0e      	add	r3, sp, #56	; 0x38
 800bff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bff8:	a90e      	add	r1, sp, #56	; 0x38
 800bffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bffe:	e739      	b.n	800be74 <__kernel_rem_pio2+0x1cc>
 800c000:	1e62      	subs	r2, r4, #1
 800c002:	ab0e      	add	r3, sp, #56	; 0x38
 800c004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c008:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c00c:	e7f4      	b.n	800bff8 <__kernel_rem_pio2+0x350>
 800c00e:	a90e      	add	r1, sp, #56	; 0x38
 800c010:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c014:	3b01      	subs	r3, #1
 800c016:	430a      	orrs	r2, r1
 800c018:	e789      	b.n	800bf2e <__kernel_rem_pio2+0x286>
 800c01a:	3301      	adds	r3, #1
 800c01c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c020:	2900      	cmp	r1, #0
 800c022:	d0fa      	beq.n	800c01a <__kernel_rem_pio2+0x372>
 800c024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c026:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c02a:	446a      	add	r2, sp
 800c02c:	3a98      	subs	r2, #152	; 0x98
 800c02e:	920a      	str	r2, [sp, #40]	; 0x28
 800c030:	9a08      	ldr	r2, [sp, #32]
 800c032:	18e3      	adds	r3, r4, r3
 800c034:	18a5      	adds	r5, r4, r2
 800c036:	aa22      	add	r2, sp, #136	; 0x88
 800c038:	f104 0801 	add.w	r8, r4, #1
 800c03c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c040:	9304      	str	r3, [sp, #16]
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	4543      	cmp	r3, r8
 800c046:	da04      	bge.n	800c052 <__kernel_rem_pio2+0x3aa>
 800c048:	461c      	mov	r4, r3
 800c04a:	e6a3      	b.n	800bd94 <__kernel_rem_pio2+0xec>
 800c04c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c04e:	2301      	movs	r3, #1
 800c050:	e7e4      	b.n	800c01c <__kernel_rem_pio2+0x374>
 800c052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c054:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c058:	f7f4 fa5c 	bl	8000514 <__aeabi_i2d>
 800c05c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c062:	46ab      	mov	fp, r5
 800c064:	461c      	mov	r4, r3
 800c066:	f04f 0900 	mov.w	r9, #0
 800c06a:	2600      	movs	r6, #0
 800c06c:	2700      	movs	r7, #0
 800c06e:	9b06      	ldr	r3, [sp, #24]
 800c070:	4599      	cmp	r9, r3
 800c072:	dd06      	ble.n	800c082 <__kernel_rem_pio2+0x3da>
 800c074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c076:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c07a:	f108 0801 	add.w	r8, r8, #1
 800c07e:	930a      	str	r3, [sp, #40]	; 0x28
 800c080:	e7df      	b.n	800c042 <__kernel_rem_pio2+0x39a>
 800c082:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c086:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c08a:	f7f4 faad 	bl	80005e8 <__aeabi_dmul>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 f8f1 	bl	800027c <__adddf3>
 800c09a:	f109 0901 	add.w	r9, r9, #1
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	e7e4      	b.n	800c06e <__kernel_rem_pio2+0x3c6>
 800c0a4:	3d01      	subs	r5, #1
 800c0a6:	e748      	b.n	800bf3a <__kernel_rem_pio2+0x292>
 800c0a8:	ec47 6b10 	vmov	d0, r6, r7
 800c0ac:	f1ca 0000 	rsb	r0, sl, #0
 800c0b0:	f000 fa92 	bl	800c5d8 <scalbn>
 800c0b4:	ec57 6b10 	vmov	r6, r7, d0
 800c0b8:	4ba0      	ldr	r3, [pc, #640]	; (800c33c <__kernel_rem_pio2+0x694>)
 800c0ba:	ee10 0a10 	vmov	r0, s0
 800c0be:	2200      	movs	r2, #0
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 fd17 	bl	8000af4 <__aeabi_dcmpge>
 800c0c6:	b1f8      	cbz	r0, 800c108 <__kernel_rem_pio2+0x460>
 800c0c8:	4b9d      	ldr	r3, [pc, #628]	; (800c340 <__kernel_rem_pio2+0x698>)
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 fa8a 	bl	80005e8 <__aeabi_dmul>
 800c0d4:	f7f4 fd22 	bl	8000b1c <__aeabi_d2iz>
 800c0d8:	4680      	mov	r8, r0
 800c0da:	f7f4 fa1b 	bl	8000514 <__aeabi_i2d>
 800c0de:	4b97      	ldr	r3, [pc, #604]	; (800c33c <__kernel_rem_pio2+0x694>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f7f4 fa81 	bl	80005e8 <__aeabi_dmul>
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	4639      	mov	r1, r7
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	f7f4 f8c3 	bl	8000278 <__aeabi_dsub>
 800c0f2:	f7f4 fd13 	bl	8000b1c <__aeabi_d2iz>
 800c0f6:	1c65      	adds	r5, r4, #1
 800c0f8:	ab0e      	add	r3, sp, #56	; 0x38
 800c0fa:	f10a 0a18 	add.w	sl, sl, #24
 800c0fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c102:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c106:	e720      	b.n	800bf4a <__kernel_rem_pio2+0x2a2>
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 fd06 	bl	8000b1c <__aeabi_d2iz>
 800c110:	ab0e      	add	r3, sp, #56	; 0x38
 800c112:	4625      	mov	r5, r4
 800c114:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c118:	e717      	b.n	800bf4a <__kernel_rem_pio2+0x2a2>
 800c11a:	ab0e      	add	r3, sp, #56	; 0x38
 800c11c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c120:	f7f4 f9f8 	bl	8000514 <__aeabi_i2d>
 800c124:	4632      	mov	r2, r6
 800c126:	463b      	mov	r3, r7
 800c128:	f7f4 fa5e 	bl	80005e8 <__aeabi_dmul>
 800c12c:	4b84      	ldr	r3, [pc, #528]	; (800c340 <__kernel_rem_pio2+0x698>)
 800c12e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c132:	2200      	movs	r2, #0
 800c134:	4630      	mov	r0, r6
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fa56 	bl	80005e8 <__aeabi_dmul>
 800c13c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	e70f      	b.n	800bf66 <__kernel_rem_pio2+0x2be>
 800c146:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c14a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c14e:	f7f4 fa4b 	bl	80005e8 <__aeabi_dmul>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c15a:	f7f4 f88f 	bl	800027c <__adddf3>
 800c15e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c162:	f108 0801 	add.w	r8, r8, #1
 800c166:	9b02      	ldr	r3, [sp, #8]
 800c168:	4598      	cmp	r8, r3
 800c16a:	dc01      	bgt.n	800c170 <__kernel_rem_pio2+0x4c8>
 800c16c:	45b8      	cmp	r8, r7
 800c16e:	ddea      	ble.n	800c146 <__kernel_rem_pio2+0x49e>
 800c170:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c174:	ab4a      	add	r3, sp, #296	; 0x128
 800c176:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c17a:	ed87 7b00 	vstr	d7, [r7]
 800c17e:	3e01      	subs	r6, #1
 800c180:	e6f8      	b.n	800bf74 <__kernel_rem_pio2+0x2cc>
 800c182:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c184:	2b02      	cmp	r3, #2
 800c186:	dc0b      	bgt.n	800c1a0 <__kernel_rem_pio2+0x4f8>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dc35      	bgt.n	800c1f8 <__kernel_rem_pio2+0x550>
 800c18c:	d059      	beq.n	800c242 <__kernel_rem_pio2+0x59a>
 800c18e:	9b04      	ldr	r3, [sp, #16]
 800c190:	f003 0007 	and.w	r0, r3, #7
 800c194:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c198:	ecbd 8b02 	vpop	{d8}
 800c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d1f3      	bne.n	800c18e <__kernel_rem_pio2+0x4e6>
 800c1a6:	ab4a      	add	r3, sp, #296	; 0x128
 800c1a8:	4423      	add	r3, r4
 800c1aa:	9306      	str	r3, [sp, #24]
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	469a      	mov	sl, r3
 800c1b0:	9502      	str	r5, [sp, #8]
 800c1b2:	9b02      	ldr	r3, [sp, #8]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f1aa 0a08 	sub.w	sl, sl, #8
 800c1ba:	dc6b      	bgt.n	800c294 <__kernel_rem_pio2+0x5ec>
 800c1bc:	46aa      	mov	sl, r5
 800c1be:	f1ba 0f01 	cmp.w	sl, #1
 800c1c2:	f1a4 0408 	sub.w	r4, r4, #8
 800c1c6:	f300 8085 	bgt.w	800c2d4 <__kernel_rem_pio2+0x62c>
 800c1ca:	9c06      	ldr	r4, [sp, #24]
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	3408      	adds	r4, #8
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2d01      	cmp	r5, #1
 800c1d4:	f300 809d 	bgt.w	800c312 <__kernel_rem_pio2+0x66a>
 800c1d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c1dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c1e0:	f1bb 0f00 	cmp.w	fp, #0
 800c1e4:	f040 809b 	bne.w	800c31e <__kernel_rem_pio2+0x676>
 800c1e8:	9b01      	ldr	r3, [sp, #4]
 800c1ea:	e9c3 5600 	strd	r5, r6, [r3]
 800c1ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c1f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c1f6:	e7ca      	b.n	800c18e <__kernel_rem_pio2+0x4e6>
 800c1f8:	3408      	adds	r4, #8
 800c1fa:	ab4a      	add	r3, sp, #296	; 0x128
 800c1fc:	441c      	add	r4, r3
 800c1fe:	462e      	mov	r6, r5
 800c200:	2000      	movs	r0, #0
 800c202:	2100      	movs	r1, #0
 800c204:	2e00      	cmp	r6, #0
 800c206:	da36      	bge.n	800c276 <__kernel_rem_pio2+0x5ce>
 800c208:	f1bb 0f00 	cmp.w	fp, #0
 800c20c:	d039      	beq.n	800c282 <__kernel_rem_pio2+0x5da>
 800c20e:	4602      	mov	r2, r0
 800c210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c214:	9c01      	ldr	r4, [sp, #4]
 800c216:	e9c4 2300 	strd	r2, r3, [r4]
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c222:	f7f4 f829 	bl	8000278 <__aeabi_dsub>
 800c226:	ae4c      	add	r6, sp, #304	; 0x130
 800c228:	2401      	movs	r4, #1
 800c22a:	42a5      	cmp	r5, r4
 800c22c:	da2c      	bge.n	800c288 <__kernel_rem_pio2+0x5e0>
 800c22e:	f1bb 0f00 	cmp.w	fp, #0
 800c232:	d002      	beq.n	800c23a <__kernel_rem_pio2+0x592>
 800c234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c238:	4619      	mov	r1, r3
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c240:	e7a5      	b.n	800c18e <__kernel_rem_pio2+0x4e6>
 800c242:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c246:	eb0d 0403 	add.w	r4, sp, r3
 800c24a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c24e:	2000      	movs	r0, #0
 800c250:	2100      	movs	r1, #0
 800c252:	2d00      	cmp	r5, #0
 800c254:	da09      	bge.n	800c26a <__kernel_rem_pio2+0x5c2>
 800c256:	f1bb 0f00 	cmp.w	fp, #0
 800c25a:	d002      	beq.n	800c262 <__kernel_rem_pio2+0x5ba>
 800c25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c260:	4619      	mov	r1, r3
 800c262:	9b01      	ldr	r3, [sp, #4]
 800c264:	e9c3 0100 	strd	r0, r1, [r3]
 800c268:	e791      	b.n	800c18e <__kernel_rem_pio2+0x4e6>
 800c26a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c26e:	f7f4 f805 	bl	800027c <__adddf3>
 800c272:	3d01      	subs	r5, #1
 800c274:	e7ed      	b.n	800c252 <__kernel_rem_pio2+0x5aa>
 800c276:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c27a:	f7f3 ffff 	bl	800027c <__adddf3>
 800c27e:	3e01      	subs	r6, #1
 800c280:	e7c0      	b.n	800c204 <__kernel_rem_pio2+0x55c>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	e7c5      	b.n	800c214 <__kernel_rem_pio2+0x56c>
 800c288:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c28c:	f7f3 fff6 	bl	800027c <__adddf3>
 800c290:	3401      	adds	r4, #1
 800c292:	e7ca      	b.n	800c22a <__kernel_rem_pio2+0x582>
 800c294:	e9da 8900 	ldrd	r8, r9, [sl]
 800c298:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c29c:	9b02      	ldr	r3, [sp, #8]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	463b      	mov	r3, r7
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	f7f3 ffe7 	bl	800027c <__adddf3>
 800c2ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f3 ffdd 	bl	8000278 <__aeabi_dsub>
 800c2be:	4632      	mov	r2, r6
 800c2c0:	463b      	mov	r3, r7
 800c2c2:	f7f3 ffdb 	bl	800027c <__adddf3>
 800c2c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c2ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c2ce:	ed8a 7b00 	vstr	d7, [sl]
 800c2d2:	e76e      	b.n	800c1b2 <__kernel_rem_pio2+0x50a>
 800c2d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c2d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c2dc:	4640      	mov	r0, r8
 800c2de:	4632      	mov	r2, r6
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	f7f3 ffca 	bl	800027c <__adddf3>
 800c2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4640      	mov	r0, r8
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	f7f3 ffc0 	bl	8000278 <__aeabi_dsub>
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	f7f3 ffbe 	bl	800027c <__adddf3>
 800c300:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c308:	ed84 7b00 	vstr	d7, [r4]
 800c30c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c310:	e755      	b.n	800c1be <__kernel_rem_pio2+0x516>
 800c312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c316:	f7f3 ffb1 	bl	800027c <__adddf3>
 800c31a:	3d01      	subs	r5, #1
 800c31c:	e759      	b.n	800c1d2 <__kernel_rem_pio2+0x52a>
 800c31e:	9b01      	ldr	r3, [sp, #4]
 800c320:	9a01      	ldr	r2, [sp, #4]
 800c322:	601d      	str	r5, [r3, #0]
 800c324:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c328:	605c      	str	r4, [r3, #4]
 800c32a:	609f      	str	r7, [r3, #8]
 800c32c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c330:	60d3      	str	r3, [r2, #12]
 800c332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c336:	6110      	str	r0, [r2, #16]
 800c338:	6153      	str	r3, [r2, #20]
 800c33a:	e728      	b.n	800c18e <__kernel_rem_pio2+0x4e6>
 800c33c:	41700000 	.word	0x41700000
 800c340:	3e700000 	.word	0x3e700000
 800c344:	00000000 	.word	0x00000000

0800c348 <__kernel_sin>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b04 	vpush	{d8-d9}
 800c350:	eeb0 8a41 	vmov.f32	s16, s2
 800c354:	eef0 8a61 	vmov.f32	s17, s3
 800c358:	ec55 4b10 	vmov	r4, r5, d0
 800c35c:	b083      	sub	sp, #12
 800c35e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c366:	9001      	str	r0, [sp, #4]
 800c368:	da06      	bge.n	800c378 <__kernel_sin+0x30>
 800c36a:	ee10 0a10 	vmov	r0, s0
 800c36e:	4629      	mov	r1, r5
 800c370:	f7f4 fbd4 	bl	8000b1c <__aeabi_d2iz>
 800c374:	2800      	cmp	r0, #0
 800c376:	d051      	beq.n	800c41c <__kernel_sin+0xd4>
 800c378:	4622      	mov	r2, r4
 800c37a:	462b      	mov	r3, r5
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f4 f932 	bl	80005e8 <__aeabi_dmul>
 800c384:	4682      	mov	sl, r0
 800c386:	468b      	mov	fp, r1
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4620      	mov	r0, r4
 800c38e:	4629      	mov	r1, r5
 800c390:	f7f4 f92a 	bl	80005e8 <__aeabi_dmul>
 800c394:	a341      	add	r3, pc, #260	; (adr r3, 800c49c <__kernel_sin+0x154>)
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	4680      	mov	r8, r0
 800c39c:	4689      	mov	r9, r1
 800c39e:	4650      	mov	r0, sl
 800c3a0:	4659      	mov	r1, fp
 800c3a2:	f7f4 f921 	bl	80005e8 <__aeabi_dmul>
 800c3a6:	a33f      	add	r3, pc, #252	; (adr r3, 800c4a4 <__kernel_sin+0x15c>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	f7f3 ff64 	bl	8000278 <__aeabi_dsub>
 800c3b0:	4652      	mov	r2, sl
 800c3b2:	465b      	mov	r3, fp
 800c3b4:	f7f4 f918 	bl	80005e8 <__aeabi_dmul>
 800c3b8:	a33c      	add	r3, pc, #240	; (adr r3, 800c4ac <__kernel_sin+0x164>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	f7f3 ff5d 	bl	800027c <__adddf3>
 800c3c2:	4652      	mov	r2, sl
 800c3c4:	465b      	mov	r3, fp
 800c3c6:	f7f4 f90f 	bl	80005e8 <__aeabi_dmul>
 800c3ca:	a33a      	add	r3, pc, #232	; (adr r3, 800c4b4 <__kernel_sin+0x16c>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 ff52 	bl	8000278 <__aeabi_dsub>
 800c3d4:	4652      	mov	r2, sl
 800c3d6:	465b      	mov	r3, fp
 800c3d8:	f7f4 f906 	bl	80005e8 <__aeabi_dmul>
 800c3dc:	a337      	add	r3, pc, #220	; (adr r3, 800c4bc <__kernel_sin+0x174>)
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	f7f3 ff4b 	bl	800027c <__adddf3>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	460f      	mov	r7, r1
 800c3ec:	b9eb      	cbnz	r3, 800c42a <__kernel_sin+0xe2>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	4659      	mov	r1, fp
 800c3f6:	f7f4 f8f7 	bl	80005e8 <__aeabi_dmul>
 800c3fa:	a325      	add	r3, pc, #148	; (adr r3, 800c490 <__kernel_sin+0x148>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	f7f3 ff3a 	bl	8000278 <__aeabi_dsub>
 800c404:	4642      	mov	r2, r8
 800c406:	464b      	mov	r3, r9
 800c408:	f7f4 f8ee 	bl	80005e8 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	f7f3 ff32 	bl	800027c <__adddf3>
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	ec45 4b10 	vmov	d0, r4, r5
 800c420:	b003      	add	sp, #12
 800c422:	ecbd 8b04 	vpop	{d8-d9}
 800c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42a:	4b1b      	ldr	r3, [pc, #108]	; (800c498 <__kernel_sin+0x150>)
 800c42c:	ec51 0b18 	vmov	r0, r1, d8
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f8d9 	bl	80005e8 <__aeabi_dmul>
 800c436:	4632      	mov	r2, r6
 800c438:	ec41 0b19 	vmov	d9, r0, r1
 800c43c:	463b      	mov	r3, r7
 800c43e:	4640      	mov	r0, r8
 800c440:	4649      	mov	r1, r9
 800c442:	f7f4 f8d1 	bl	80005e8 <__aeabi_dmul>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	ec51 0b19 	vmov	r0, r1, d9
 800c44e:	f7f3 ff13 	bl	8000278 <__aeabi_dsub>
 800c452:	4652      	mov	r2, sl
 800c454:	465b      	mov	r3, fp
 800c456:	f7f4 f8c7 	bl	80005e8 <__aeabi_dmul>
 800c45a:	ec53 2b18 	vmov	r2, r3, d8
 800c45e:	f7f3 ff0b 	bl	8000278 <__aeabi_dsub>
 800c462:	a30b      	add	r3, pc, #44	; (adr r3, 800c490 <__kernel_sin+0x148>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	4606      	mov	r6, r0
 800c46a:	460f      	mov	r7, r1
 800c46c:	4640      	mov	r0, r8
 800c46e:	4649      	mov	r1, r9
 800c470:	f7f4 f8ba 	bl	80005e8 <__aeabi_dmul>
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	4630      	mov	r0, r6
 800c47a:	4639      	mov	r1, r7
 800c47c:	f7f3 fefe 	bl	800027c <__adddf3>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4620      	mov	r0, r4
 800c486:	4629      	mov	r1, r5
 800c488:	f7f3 fef6 	bl	8000278 <__aeabi_dsub>
 800c48c:	e7c4      	b.n	800c418 <__kernel_sin+0xd0>
 800c48e:	bf00      	nop
 800c490:	55555549 	.word	0x55555549
 800c494:	3fc55555 	.word	0x3fc55555
 800c498:	3fe00000 	.word	0x3fe00000
 800c49c:	5acfd57c 	.word	0x5acfd57c
 800c4a0:	3de5d93a 	.word	0x3de5d93a
 800c4a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c4a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c4ac:	57b1fe7d 	.word	0x57b1fe7d
 800c4b0:	3ec71de3 	.word	0x3ec71de3
 800c4b4:	19c161d5 	.word	0x19c161d5
 800c4b8:	3f2a01a0 	.word	0x3f2a01a0
 800c4bc:	1110f8a6 	.word	0x1110f8a6
 800c4c0:	3f811111 	.word	0x3f811111

0800c4c4 <fabs>:
 800c4c4:	ec51 0b10 	vmov	r0, r1, d0
 800c4c8:	ee10 2a10 	vmov	r2, s0
 800c4cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c4d0:	ec43 2b10 	vmov	d0, r2, r3
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <floor>:
 800c4d8:	ec51 0b10 	vmov	r0, r1, d0
 800c4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c4e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c4e8:	2e13      	cmp	r6, #19
 800c4ea:	ee10 5a10 	vmov	r5, s0
 800c4ee:	ee10 8a10 	vmov	r8, s0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	dc32      	bgt.n	800c55c <floor+0x84>
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	da14      	bge.n	800c524 <floor+0x4c>
 800c4fa:	a333      	add	r3, pc, #204	; (adr r3, 800c5c8 <floor+0xf0>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	f7f3 febc 	bl	800027c <__adddf3>
 800c504:	2200      	movs	r2, #0
 800c506:	2300      	movs	r3, #0
 800c508:	f7f4 fafe 	bl	8000b08 <__aeabi_dcmpgt>
 800c50c:	b138      	cbz	r0, 800c51e <floor+0x46>
 800c50e:	2c00      	cmp	r4, #0
 800c510:	da57      	bge.n	800c5c2 <floor+0xea>
 800c512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c516:	431d      	orrs	r5, r3
 800c518:	d001      	beq.n	800c51e <floor+0x46>
 800c51a:	4c2d      	ldr	r4, [pc, #180]	; (800c5d0 <floor+0xf8>)
 800c51c:	2500      	movs	r5, #0
 800c51e:	4621      	mov	r1, r4
 800c520:	4628      	mov	r0, r5
 800c522:	e025      	b.n	800c570 <floor+0x98>
 800c524:	4f2b      	ldr	r7, [pc, #172]	; (800c5d4 <floor+0xfc>)
 800c526:	4137      	asrs	r7, r6
 800c528:	ea01 0307 	and.w	r3, r1, r7
 800c52c:	4303      	orrs	r3, r0
 800c52e:	d01f      	beq.n	800c570 <floor+0x98>
 800c530:	a325      	add	r3, pc, #148	; (adr r3, 800c5c8 <floor+0xf0>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f7f3 fea1 	bl	800027c <__adddf3>
 800c53a:	2200      	movs	r2, #0
 800c53c:	2300      	movs	r3, #0
 800c53e:	f7f4 fae3 	bl	8000b08 <__aeabi_dcmpgt>
 800c542:	2800      	cmp	r0, #0
 800c544:	d0eb      	beq.n	800c51e <floor+0x46>
 800c546:	2c00      	cmp	r4, #0
 800c548:	bfbe      	ittt	lt
 800c54a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c54e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c552:	19a4      	addlt	r4, r4, r6
 800c554:	ea24 0407 	bic.w	r4, r4, r7
 800c558:	2500      	movs	r5, #0
 800c55a:	e7e0      	b.n	800c51e <floor+0x46>
 800c55c:	2e33      	cmp	r6, #51	; 0x33
 800c55e:	dd0b      	ble.n	800c578 <floor+0xa0>
 800c560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c564:	d104      	bne.n	800c570 <floor+0x98>
 800c566:	ee10 2a10 	vmov	r2, s0
 800c56a:	460b      	mov	r3, r1
 800c56c:	f7f3 fe86 	bl	800027c <__adddf3>
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c57c:	f04f 33ff 	mov.w	r3, #4294967295
 800c580:	fa23 f707 	lsr.w	r7, r3, r7
 800c584:	4207      	tst	r7, r0
 800c586:	d0f3      	beq.n	800c570 <floor+0x98>
 800c588:	a30f      	add	r3, pc, #60	; (adr r3, 800c5c8 <floor+0xf0>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f3 fe75 	bl	800027c <__adddf3>
 800c592:	2200      	movs	r2, #0
 800c594:	2300      	movs	r3, #0
 800c596:	f7f4 fab7 	bl	8000b08 <__aeabi_dcmpgt>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d0bf      	beq.n	800c51e <floor+0x46>
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	da02      	bge.n	800c5a8 <floor+0xd0>
 800c5a2:	2e14      	cmp	r6, #20
 800c5a4:	d103      	bne.n	800c5ae <floor+0xd6>
 800c5a6:	3401      	adds	r4, #1
 800c5a8:	ea25 0507 	bic.w	r5, r5, r7
 800c5ac:	e7b7      	b.n	800c51e <floor+0x46>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c5b4:	fa03 f606 	lsl.w	r6, r3, r6
 800c5b8:	4435      	add	r5, r6
 800c5ba:	4545      	cmp	r5, r8
 800c5bc:	bf38      	it	cc
 800c5be:	18e4      	addcc	r4, r4, r3
 800c5c0:	e7f2      	b.n	800c5a8 <floor+0xd0>
 800c5c2:	2500      	movs	r5, #0
 800c5c4:	462c      	mov	r4, r5
 800c5c6:	e7aa      	b.n	800c51e <floor+0x46>
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	bff00000 	.word	0xbff00000
 800c5d4:	000fffff 	.word	0x000fffff

0800c5d8 <scalbn>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	ec55 4b10 	vmov	r4, r5, d0
 800c5de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c5e2:	4606      	mov	r6, r0
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	b99a      	cbnz	r2, 800c610 <scalbn+0x38>
 800c5e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c5ec:	4323      	orrs	r3, r4
 800c5ee:	d036      	beq.n	800c65e <scalbn+0x86>
 800c5f0:	4b39      	ldr	r3, [pc, #228]	; (800c6d8 <scalbn+0x100>)
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	ee10 0a10 	vmov	r0, s0
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f7f3 fff5 	bl	80005e8 <__aeabi_dmul>
 800c5fe:	4b37      	ldr	r3, [pc, #220]	; (800c6dc <scalbn+0x104>)
 800c600:	429e      	cmp	r6, r3
 800c602:	4604      	mov	r4, r0
 800c604:	460d      	mov	r5, r1
 800c606:	da10      	bge.n	800c62a <scalbn+0x52>
 800c608:	a32b      	add	r3, pc, #172	; (adr r3, 800c6b8 <scalbn+0xe0>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	e03a      	b.n	800c686 <scalbn+0xae>
 800c610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c614:	428a      	cmp	r2, r1
 800c616:	d10c      	bne.n	800c632 <scalbn+0x5a>
 800c618:	ee10 2a10 	vmov	r2, s0
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fe2c 	bl	800027c <__adddf3>
 800c624:	4604      	mov	r4, r0
 800c626:	460d      	mov	r5, r1
 800c628:	e019      	b.n	800c65e <scalbn+0x86>
 800c62a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c62e:	460b      	mov	r3, r1
 800c630:	3a36      	subs	r2, #54	; 0x36
 800c632:	4432      	add	r2, r6
 800c634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c638:	428a      	cmp	r2, r1
 800c63a:	dd08      	ble.n	800c64e <scalbn+0x76>
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	a120      	add	r1, pc, #128	; (adr r1, 800c6c0 <scalbn+0xe8>)
 800c640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c644:	da1c      	bge.n	800c680 <scalbn+0xa8>
 800c646:	a120      	add	r1, pc, #128	; (adr r1, 800c6c8 <scalbn+0xf0>)
 800c648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c64c:	e018      	b.n	800c680 <scalbn+0xa8>
 800c64e:	2a00      	cmp	r2, #0
 800c650:	dd08      	ble.n	800c664 <scalbn+0x8c>
 800c652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c65a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c65e:	ec45 4b10 	vmov	d0, r4, r5
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c668:	da19      	bge.n	800c69e <scalbn+0xc6>
 800c66a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c66e:	429e      	cmp	r6, r3
 800c670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c674:	dd0a      	ble.n	800c68c <scalbn+0xb4>
 800c676:	a112      	add	r1, pc, #72	; (adr r1, 800c6c0 <scalbn+0xe8>)
 800c678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1e2      	bne.n	800c646 <scalbn+0x6e>
 800c680:	a30f      	add	r3, pc, #60	; (adr r3, 800c6c0 <scalbn+0xe8>)
 800c682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c686:	f7f3 ffaf 	bl	80005e8 <__aeabi_dmul>
 800c68a:	e7cb      	b.n	800c624 <scalbn+0x4c>
 800c68c:	a10a      	add	r1, pc, #40	; (adr r1, 800c6b8 <scalbn+0xe0>)
 800c68e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0b8      	beq.n	800c608 <scalbn+0x30>
 800c696:	a10e      	add	r1, pc, #56	; (adr r1, 800c6d0 <scalbn+0xf8>)
 800c698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c69c:	e7b4      	b.n	800c608 <scalbn+0x30>
 800c69e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c6a2:	3236      	adds	r2, #54	; 0x36
 800c6a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <scalbn+0x108>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	e7e8      	b.n	800c686 <scalbn+0xae>
 800c6b4:	f3af 8000 	nop.w
 800c6b8:	c2f8f359 	.word	0xc2f8f359
 800c6bc:	01a56e1f 	.word	0x01a56e1f
 800c6c0:	8800759c 	.word	0x8800759c
 800c6c4:	7e37e43c 	.word	0x7e37e43c
 800c6c8:	8800759c 	.word	0x8800759c
 800c6cc:	fe37e43c 	.word	0xfe37e43c
 800c6d0:	c2f8f359 	.word	0xc2f8f359
 800c6d4:	81a56e1f 	.word	0x81a56e1f
 800c6d8:	43500000 	.word	0x43500000
 800c6dc:	ffff3cb0 	.word	0xffff3cb0
 800c6e0:	3c900000 	.word	0x3c900000

0800c6e4 <_init>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	bf00      	nop
 800c6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ea:	bc08      	pop	{r3}
 800c6ec:	469e      	mov	lr, r3
 800c6ee:	4770      	bx	lr

0800c6f0 <_fini>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	bf00      	nop
 800c6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f6:	bc08      	pop	{r3}
 800c6f8:	469e      	mov	lr, r3
 800c6fa:	4770      	bx	lr
