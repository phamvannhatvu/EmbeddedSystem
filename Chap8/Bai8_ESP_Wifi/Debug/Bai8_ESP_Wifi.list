
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c60  08009c60  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c68  08009c68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000036c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a83d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004058  00000000  00000000  0003a881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  0003ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264ff  00000000  00000000  00041448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001efb5  00000000  00000000  00067947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0068  00000000  00000000  000868fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166964  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c7c  00000000  00000000  001669b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c68 	.word	0x08006c68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006c68 	.word	0x08006c68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004e0:	4a3d      	ldr	r2, [pc, #244]	; (80005d8 <MX_ADC1_Init+0x10c>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e4:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004f0:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f6:	4b37      	ldr	r3, [pc, #220]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b35      	ldr	r3, [pc, #212]	; (80005d4 <MX_ADC1_Init+0x108>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <MX_ADC1_Init+0x108>)
 800050c:	4a33      	ldr	r2, [pc, #204]	; (80005dc <MX_ADC1_Init+0x110>)
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000516:	4b2f      	ldr	r3, [pc, #188]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000518:	2205      	movs	r2, #5
 800051a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_ADC1_Init+0x108>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000526:	2201      	movs	r2, #1
 8000528:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052a:	482a      	ldr	r0, [pc, #168]	; (80005d4 <MX_ADC1_Init+0x108>)
 800052c:	f001 feda 	bl	80022e4 <HAL_ADC_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000536:	f001 f99f 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800053a:	2308      	movs	r3, #8
 800053c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053e:	2301      	movs	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	463b      	mov	r3, r7
 8000548:	4619      	mov	r1, r3
 800054a:	4822      	ldr	r0, [pc, #136]	; (80005d4 <MX_ADC1_Init+0x108>)
 800054c:	f002 f83c 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000556:	f001 f98f 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800055a:	2309      	movs	r3, #9
 800055c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	481b      	ldr	r0, [pc, #108]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000568:	f002 f82e 	bl	80025c8 <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000572:	f001 f981 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000576:	230a      	movs	r3, #10
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800057a:	2303      	movs	r3, #3
 800057c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4814      	ldr	r0, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x108>)
 8000584:	f002 f820 	bl	80025c8 <HAL_ADC_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800058e:	f001 f973 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000592:	230b      	movs	r3, #11
 8000594:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000596:	2304      	movs	r3, #4
 8000598:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	4619      	mov	r1, r3
 800059e:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x108>)
 80005a0:	f002 f812 	bl	80025c8 <HAL_ADC_ConfigChannel>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80005aa:	f001 f965 	bl	8001878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005ae:	230c      	movs	r3, #12
 80005b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005b2:	2305      	movs	r3, #5
 80005b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_ADC1_Init+0x108>)
 80005bc:	f002 f804 	bl	80025c8 <HAL_ADC_ConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005c6:	f001 f957 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000030 	.word	0x20000030
 80005d8:	40012000 	.word	0x40012000
 80005dc:	0f000001 	.word	0x0f000001

080005e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <HAL_ADC_MspInit+0x110>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d171      	bne.n	80006e6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	4a3a      	ldr	r2, [pc, #232]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6453      	str	r3, [r2, #68]	; 0x44
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b31      	ldr	r3, [pc, #196]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a2c      	ldr	r2, [pc, #176]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <HAL_ADC_MspInit+0x114>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000656:	2307      	movs	r3, #7
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	2303      	movs	r3, #3
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4823      	ldr	r0, [pc, #140]	; (80006f8 <HAL_ADC_MspInit+0x118>)
 800066a:	f002 ff61 	bl	8003530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800066e:	2303      	movs	r3, #3
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	481e      	ldr	r0, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x11c>)
 8000682:	f002 ff55 	bl	8003530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x120>)
 8000688:	4a1e      	ldr	r2, [pc, #120]	; (8000704 <HAL_ADC_MspInit+0x124>)
 800068a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <HAL_ADC_MspInit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_ADC_MspInit+0x120>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_ADC_MspInit+0x120>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006cc:	f002 fb2e 	bl	8002d2c <HAL_DMA_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006d6:	f001 f8cf 	bl	8001878 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006de:	639a      	str	r2, [r3, #56]	; 0x38
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_ADC_MspInit+0x120>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40012000 	.word	0x40012000
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020400 	.word	0x40020400
 8000700:	20000078 	.word	0x20000078
 8000704:	40026410 	.word	0x40026410

08000708 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <button_init+0x14>)
 8000712:	f003 f8a9 	bl	8003868 <HAL_GPIO_WritePin>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40020c00 	.word	0x40020c00

08000720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <MX_DMA_Init+0x3c>)
 8000730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_DMA_Init+0x3c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2038      	movs	r0, #56	; 0x38
 8000748:	f002 fab9 	bl	8002cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800074c:	2038      	movs	r0, #56	; 0x38
 800074e:	f002 fad2 	bl	8002cf6 <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_FSMC_Init+0xec>)
 800078e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000792:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_FSMC_Init+0xec>)
 8000796:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <MX_FSMC_Init+0xf0>)
 8000798:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_FSMC_Init+0xec>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_FSMC_Init+0xec>)
 80007ae:	2210      	movs	r2, #16
 80007b0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_FSMC_Init+0xec>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_FSMC_Init+0xec>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_FSMC_Init+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_FSMC_Init+0xec>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_FSMC_Init+0xec>)
 80007cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_FSMC_Init+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_FSMC_Init+0xec>)
 80007da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007de:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_FSMC_Init+0xec>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_FSMC_Init+0xec>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_FSMC_Init+0xec>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007f2:	230f      	movs	r3, #15
 80007f4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007f6:	230f      	movs	r3, #15
 80007f8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007fa:	233c      	movs	r3, #60	; 0x3c
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000802:	2310      	movs	r3, #16
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000806:	2311      	movs	r3, #17
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800080e:	2308      	movs	r3, #8
 8000810:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000812:	230f      	movs	r3, #15
 8000814:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000816:	2309      	movs	r3, #9
 8000818:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800081e:	2310      	movs	r3, #16
 8000820:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000822:	2311      	movs	r3, #17
 8000824:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800082a:	463a      	mov	r2, r7
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_FSMC_Init+0xec>)
 8000834:	f004 f89e 	bl	8004974 <HAL_SRAM_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800083e:	f001 f81b 	bl	8001878 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000842:	bf00      	nop
 8000844:	3738      	adds	r7, #56	; 0x38
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000f8 	.word	0x200000f8
 8000850:	a0000104 	.word	0xa0000104

08000854 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_FSMC_MspInit+0x88>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d131      	bne.n	80008d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_FSMC_MspInit+0x88>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_FSMC_MspInit+0x8c>)
 800087c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <HAL_FSMC_MspInit+0x8c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6393      	str	r3, [r2, #56]	; 0x38
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_FSMC_MspInit+0x8c>)
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000892:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000896:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a4:	230c      	movs	r3, #12
 80008a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <HAL_FSMC_MspInit+0x90>)
 80008ae:	f002 fe3f 	bl	8003530 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80008b2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80008b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008c4:	230c      	movs	r3, #12
 80008c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4806      	ldr	r0, [pc, #24]	; (80008e8 <HAL_FSMC_MspInit+0x94>)
 80008ce:	f002 fe2f 	bl	8003530 <HAL_GPIO_Init>
 80008d2:	e000      	b.n	80008d6 <HAL_FSMC_MspInit+0x82>
    return;
 80008d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000148 	.word	0x20000148
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40020c00 	.word	0x40020c00

080008ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008f4:	f7ff ffae 	bl	8000854 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08e      	sub	sp, #56	; 0x38
 8000904:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
 800091a:	4b8f      	ldr	r3, [pc, #572]	; (8000b58 <MX_GPIO_Init+0x258>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a8e      	ldr	r2, [pc, #568]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b8c      	ldr	r3, [pc, #560]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0310 	and.w	r3, r3, #16
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	4b88      	ldr	r3, [pc, #544]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <MX_GPIO_Init+0x258>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b85      	ldr	r3, [pc, #532]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	61fb      	str	r3, [r7, #28]
 800094c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a80      	ldr	r2, [pc, #512]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000958:	f043 0320 	orr.w	r3, r3, #32
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b7e      	ldr	r3, [pc, #504]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0320 	and.w	r3, r3, #32
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a79      	ldr	r2, [pc, #484]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b77      	ldr	r3, [pc, #476]	; (8000b58 <MX_GPIO_Init+0x258>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <MX_GPIO_Init+0x258>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a72      	ldr	r2, [pc, #456]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b70      	ldr	r3, [pc, #448]	; (8000b58 <MX_GPIO_Init+0x258>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a6b      	ldr	r2, [pc, #428]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b65      	ldr	r3, [pc, #404]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a64      	ldr	r2, [pc, #400]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a5d      	ldr	r2, [pc, #372]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b5b      	ldr	r3, [pc, #364]	; (8000b58 <MX_GPIO_Init+0x258>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2170      	movs	r1, #112	; 0x70
 80009fa:	4858      	ldr	r0, [pc, #352]	; (8000b5c <MX_GPIO_Init+0x25c>)
 80009fc:	f002 ff34 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000a06:	4856      	ldr	r0, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x260>)
 8000a08:	f002 ff2e 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <MX_GPIO_Init+0x264>)
 8000a14:	f002 ff28 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000a1e:	4852      	ldr	r0, [pc, #328]	; (8000b68 <MX_GPIO_Init+0x268>)
 8000a20:	f002 ff22 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	4850      	ldr	r0, [pc, #320]	; (8000b6c <MX_GPIO_Init+0x26c>)
 8000a2c:	f002 ff1c 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	484e      	ldr	r0, [pc, #312]	; (8000b70 <MX_GPIO_Init+0x270>)
 8000a36:	f002 ff17 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a3a:	2370      	movs	r3, #112	; 0x70
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4842      	ldr	r0, [pc, #264]	; (8000b5c <MX_GPIO_Init+0x25c>)
 8000a52:	f002 fd6d 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000a56:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	483c      	ldr	r0, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x260>)
 8000a70:	f002 fd5e 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x264>)
 8000a8a:	f002 fd51 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482f      	ldr	r0, [pc, #188]	; (8000b64 <MX_GPIO_Init+0x264>)
 8000aa8:	f002 fd42 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000aac:	23c0      	movs	r3, #192	; 0xc0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	482b      	ldr	r0, [pc, #172]	; (8000b6c <MX_GPIO_Init+0x26c>)
 8000ac0:	f002 fd36 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000ac4:	2330      	movs	r3, #48	; 0x30
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4822      	ldr	r0, [pc, #136]	; (8000b60 <MX_GPIO_Init+0x260>)
 8000ad8:	f002 fd2a 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000adc:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	481c      	ldr	r0, [pc, #112]	; (8000b68 <MX_GPIO_Init+0x268>)
 8000af6:	f002 fd1b 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000afa:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_GPIO_Init+0x260>)
 8000b10:	f002 fd0e 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_GPIO_Init+0x26c>)
 8000b2e:	f002 fcff 	bl	8003530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_GPIO_Init+0x270>)
 8000b4a:	f002 fcf1 	bl	8003530 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3738      	adds	r7, #56	; 0x38
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f002 fe73 	bl	800389c <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f000 fe5c 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000014c 	.word	0x2000014c
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	; 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f002 fc81 	bl	8003530 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <LCD_WR_REG+0x1c>)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	8013      	strh	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	600ffffe 	.word	0x600ffffe

08000c80 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <LCD_WR_DATA+0x1c>)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	8053      	strh	r3, [r2, #2]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	600ffffe 	.word	0x600ffffe

08000ca0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <LCD_RD_DATA+0x20>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b29b      	uxth	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	600ffffe 	.word	0x600ffffe

08000cc4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000ce2:	202a      	movs	r0, #42	; 0x2a
 8000ce4:	f7ff ffbc 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffc6 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffc0 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffba 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffb4 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d18:	202b      	movs	r0, #43	; 0x2b
 8000d1a:	f7ff ffa1 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffab 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffa5 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d36:	883b      	ldrh	r3, [r7, #0]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff9f 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff99 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d4e:	202c      	movs	r0, #44	; 0x2c
 8000d50:	f7ff ff86 	bl	8000c60 <LCD_WR_REG>
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <lcd_Clear+0x60>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <lcd_Clear+0x60>)
 8000d70:	885b      	ldrh	r3, [r3, #2]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff ffa3 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	81fb      	strh	r3, [r7, #14]
 8000d82:	e011      	b.n	8000da8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	81bb      	strh	r3, [r7, #12]
 8000d88:	e006      	b.n	8000d98 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff77 	bl	8000c80 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d92:	89bb      	ldrh	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <lcd_Clear+0x60>)
 8000d9a:	885b      	ldrh	r3, [r3, #2]
 8000d9c:	89ba      	ldrh	r2, [r7, #12]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d3f3      	bcc.n	8000d8a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81fb      	strh	r3, [r7, #14]
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <lcd_Clear+0x60>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	89fa      	ldrh	r2, [r7, #14]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3e8      	bcc.n	8000d84 <lcd_Clear+0x28>
		}
	}
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001a0 	.word	0x200001a0

08000dc0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	88fa      	ldrh	r2, [r7, #6]
 8000dd6:	88b9      	ldrh	r1, [r7, #4]
 8000dd8:	88f8      	ldrh	r0, [r7, #6]
 8000dda:	f7ff ff73 	bl	8000cc4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff4d 	bl	8000c80 <LCD_WR_DATA>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e1a:	085b      	lsrs	r3, r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	08db      	lsrs	r3, r3, #3
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	fb12 f303 	smulbb	r3, r2, r3
 8000e46:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	3b20      	subs	r3, #32
 8000e4c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29c      	uxth	r4, r3
 8000e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	88bb      	ldrh	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	88b9      	ldrh	r1, [r7, #4]
 8000e6e:	88f8      	ldrh	r0, [r7, #6]
 8000e70:	4622      	mov	r2, r4
 8000e72:	f7ff ff27 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	827b      	strh	r3, [r7, #18]
 8000e7a:	e07a      	b.n	8000f72 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e80:	2b0c      	cmp	r3, #12
 8000e82:	d028      	beq.n	8000ed6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000e84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e88:	2b10      	cmp	r3, #16
 8000e8a:	d108      	bne.n	8000e9e <lcd_ShowChar+0xae>
 8000e8c:	78fa      	ldrb	r2, [r7, #3]
 8000e8e:	8a7b      	ldrh	r3, [r7, #18]
 8000e90:	493c      	ldr	r1, [pc, #240]	; (8000f84 <lcd_ShowChar+0x194>)
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	440a      	add	r2, r1
 8000e96:	4413      	add	r3, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	75fb      	strb	r3, [r7, #23]
 8000e9c:	e01b      	b.n	8000ed6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea2:	2b18      	cmp	r3, #24
 8000ea4:	d10b      	bne.n	8000ebe <lcd_ShowChar+0xce>
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	8a79      	ldrh	r1, [r7, #18]
 8000eaa:	4837      	ldr	r0, [pc, #220]	; (8000f88 <lcd_ShowChar+0x198>)
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4403      	add	r3, r0
 8000eb6:	440b      	add	r3, r1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	75fb      	strb	r3, [r7, #23]
 8000ebc:	e00b      	b.n	8000ed6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000ebe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	d15a      	bne.n	8000f7c <lcd_ShowChar+0x18c>
 8000ec6:	78fa      	ldrb	r2, [r7, #3]
 8000ec8:	8a7b      	ldrh	r3, [r7, #18]
 8000eca:	4930      	ldr	r1, [pc, #192]	; (8000f8c <lcd_ShowChar+0x19c>)
 8000ecc:	0192      	lsls	r2, r2, #6
 8000ece:	440a      	add	r2, r1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75bb      	strb	r3, [r7, #22]
 8000eda:	e044      	b.n	8000f66 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000edc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d120      	bne.n	8000f26 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ee4:	7dfa      	ldrb	r2, [r7, #23]
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	fa42 f303 	asr.w	r3, r2, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <lcd_ShowChar+0x10e>
 8000ef4:	883b      	ldrh	r3, [r7, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fec2 	bl	8000c80 <LCD_WR_DATA>
 8000efc:	e003      	b.n	8000f06 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff febd 	bl	8000c80 <LCD_WR_DATA>
				m++;
 8000f06:	7d7b      	ldrb	r3, [r7, #21]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f14:	fb01 f202 	mul.w	r2, r1, r2
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d11f      	bne.n	8000f60 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	757b      	strb	r3, [r7, #21]
					break;
 8000f24:	e022      	b.n	8000f6c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f26:	7dfa      	ldrb	r2, [r7, #23]
 8000f28:	7dbb      	ldrb	r3, [r7, #22]
 8000f2a:	fa42 f303 	asr.w	r3, r2, r3
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <lcd_ShowChar+0x152>
 8000f36:	883a      	ldrh	r2, [r7, #0]
 8000f38:	88b9      	ldrh	r1, [r7, #4]
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff3f 	bl	8000dc0 <lcd_DrawPoint>
				x++;
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	3301      	adds	r3, #1
 8000f46:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	8a3b      	ldrh	r3, [r7, #16]
 8000f4c:	1ad2      	subs	r2, r2, r3
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d105      	bne.n	8000f60 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f54:	8a3b      	ldrh	r3, [r7, #16]
 8000f56:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f58:	88bb      	ldrh	r3, [r7, #4]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	80bb      	strh	r3, [r7, #4]
					break;
 8000f5e:	e005      	b.n	8000f6c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	3301      	adds	r3, #1
 8000f64:	75bb      	strb	r3, [r7, #22]
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	d9b7      	bls.n	8000edc <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f6c:	8a7b      	ldrh	r3, [r7, #18]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	827b      	strh	r3, [r7, #18]
 8000f72:	8a7a      	ldrh	r2, [r7, #18]
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d380      	bcc.n	8000e7c <lcd_ShowChar+0x8c>
 8000f7a:	e000      	b.n	8000f7e <lcd_ShowChar+0x18e>
		else return;
 8000f7c:	bf00      	nop
				}
			}
		}
	}
}
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	08006cc0 	.word	0x08006cc0
 8000f88:	080072b0 	.word	0x080072b0
 8000f8c:	08008480 	.word	0x08008480

08000f90 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fa4:	e004      	b.n	8000fb0 <mypow+0x20>
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	71ba      	strb	r2, [r7, #6]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f5      	bne.n	8000fa6 <mypow+0x16>
	return result;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b08b      	sub	sp, #44	; 0x2c
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	81bb      	strh	r3, [r7, #12]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	71fb      	strb	r3, [r7, #7]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8000fea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8000ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ff6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80010d0 <lcd_ShowFloatNum+0x108>
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	ee17 3a90 	vmov	r3, s15
 8001006:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001008:	2300      	movs	r3, #0
 800100a:	75fb      	strb	r3, [r7, #23]
 800100c:	e057      	b.n	80010be <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 800100e:	8abc      	ldrh	r4, [r7, #20]
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	7dfb      	ldrb	r3, [r7, #23]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4619      	mov	r1, r3
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff ffb6 	bl	8000f90 <mypow>
 8001024:	4603      	mov	r3, r0
 8001026:	fbb4 f1f3 	udiv	r1, r4, r3
 800102a:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <lcd_ShowFloatNum+0x10c>)
 800102c:	fba3 2301 	umull	r2, r3, r3, r1
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1aca      	subs	r2, r1, r3
 800103c:	4613      	mov	r3, r2
 800103e:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3b02      	subs	r3, #2
 8001046:	429a      	cmp	r2, r3
 8001048:	d11d      	bne.n	8001086 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	3b02      	subs	r3, #2
 800104e:	b29a      	uxth	r2, r3
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	b29b      	uxth	r3, r3
 8001054:	fb12 f303 	smulbb	r3, r2, r3
 8001058:	b29a      	uxth	r2, r3
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	4413      	add	r3, r2
 800105e:	b298      	uxth	r0, r3
 8001060:	88ba      	ldrh	r2, [r7, #4]
 8001062:	89b9      	ldrh	r1, [r7, #12]
 8001064:	2300      	movs	r3, #0
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	222e      	movs	r2, #46	; 0x2e
 8001076:	f7ff febb 	bl	8000df0 <lcd_ShowChar>
			t++;
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	3301      	adds	r3, #1
 800107e:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3301      	adds	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001086:	7dfb      	ldrb	r3, [r7, #23]
 8001088:	b29a      	uxth	r2, r3
 800108a:	7dbb      	ldrb	r3, [r7, #22]
 800108c:	b29b      	uxth	r3, r3
 800108e:	fb12 f303 	smulbb	r3, r2, r3
 8001092:	b29a      	uxth	r2, r3
 8001094:	89fb      	ldrh	r3, [r7, #14]
 8001096:	4413      	add	r3, r2
 8001098:	b298      	uxth	r0, r3
 800109a:	7cfb      	ldrb	r3, [r7, #19]
 800109c:	3330      	adds	r3, #48	; 0x30
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	88bc      	ldrh	r4, [r7, #4]
 80010a2:	89b9      	ldrh	r1, [r7, #12]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	4623      	mov	r3, r4
 80010b4:	f7ff fe9c 	bl	8000df0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	3301      	adds	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
 80010be:	7dfa      	ldrb	r2, [r7, #23]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3a3      	bcc.n	800100e <lcd_ShowFloatNum+0x46>
	}
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	42c80000 	.word	0x42c80000
 80010d4:	cccccccd 	.word	0xcccccccd

080010d8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <lcd_SetDir+0x44>)
 80010f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010f8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <lcd_SetDir+0x44>)
 80010fc:	22f0      	movs	r2, #240	; 0xf0
 80010fe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001100:	e006      	b.n	8001110 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <lcd_SetDir+0x44>)
 8001104:	22f0      	movs	r2, #240	; 0xf0
 8001106:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <lcd_SetDir+0x44>)
 800110a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800110e:	805a      	strh	r2, [r3, #2]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	200001a0 	.word	0x200001a0

08001120 <lcd_init>:


void lcd_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	48aa      	ldr	r0, [pc, #680]	; (80013d4 <lcd_init+0x2b4>)
 800112c:	f002 fb9c 	bl	8003868 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f001 f8b2 	bl	800229c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	48a5      	ldr	r0, [pc, #660]	; (80013d4 <lcd_init+0x2b4>)
 8001140:	f002 fb92 	bl	8003868 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f001 f8a8 	bl	800229c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ffc3 	bl	80010d8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001152:	20d3      	movs	r0, #211	; 0xd3
 8001154:	f7ff fd84 	bl	8000c60 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001158:	f7ff fda2 	bl	8000ca0 <LCD_RD_DATA>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b9d      	ldr	r3, [pc, #628]	; (80013d8 <lcd_init+0x2b8>)
 8001162:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001164:	f7ff fd9c 	bl	8000ca0 <LCD_RD_DATA>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <lcd_init+0x2b8>)
 800116e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001170:	f7ff fd96 	bl	8000ca0 <LCD_RD_DATA>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <lcd_init+0x2b8>)
 800117a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800117c:	4b96      	ldr	r3, [pc, #600]	; (80013d8 <lcd_init+0x2b8>)
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b94      	ldr	r3, [pc, #592]	; (80013d8 <lcd_init+0x2b8>)
 8001186:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001188:	f7ff fd8a 	bl	8000ca0 <LCD_RD_DATA>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <lcd_init+0x2b8>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b8f      	ldr	r3, [pc, #572]	; (80013d8 <lcd_init+0x2b8>)
 800119a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800119c:	20cf      	movs	r0, #207	; 0xcf
 800119e:	f7ff fd5f 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff fd6c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011a8:	20c1      	movs	r0, #193	; 0xc1
 80011aa:	f7ff fd69 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011ae:	2030      	movs	r0, #48	; 0x30
 80011b0:	f7ff fd66 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011b4:	20ed      	movs	r0, #237	; 0xed
 80011b6:	f7ff fd53 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f7ff fd60 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f7ff fd5d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011c6:	2012      	movs	r0, #18
 80011c8:	f7ff fd5a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011cc:	2081      	movs	r0, #129	; 0x81
 80011ce:	f7ff fd57 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011d2:	20e8      	movs	r0, #232	; 0xe8
 80011d4:	f7ff fd44 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011d8:	2085      	movs	r0, #133	; 0x85
 80011da:	f7ff fd51 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011de:	2010      	movs	r0, #16
 80011e0:	f7ff fd4e 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011e4:	207a      	movs	r0, #122	; 0x7a
 80011e6:	f7ff fd4b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011ea:	20cb      	movs	r0, #203	; 0xcb
 80011ec:	f7ff fd38 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011f0:	2039      	movs	r0, #57	; 0x39
 80011f2:	f7ff fd45 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011f6:	202c      	movs	r0, #44	; 0x2c
 80011f8:	f7ff fd42 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff fd3f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001202:	2034      	movs	r0, #52	; 0x34
 8001204:	f7ff fd3c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff fd39 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800120e:	20f7      	movs	r0, #247	; 0xf7
 8001210:	f7ff fd26 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001214:	2020      	movs	r0, #32
 8001216:	f7ff fd33 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800121a:	20ea      	movs	r0, #234	; 0xea
 800121c:	f7ff fd20 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fd2d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fd2a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800122c:	20c0      	movs	r0, #192	; 0xc0
 800122e:	f7ff fd17 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001232:	201b      	movs	r0, #27
 8001234:	f7ff fd24 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001238:	20c1      	movs	r0, #193	; 0xc1
 800123a:	f7ff fd11 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fd1e 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001244:	20c5      	movs	r0, #197	; 0xc5
 8001246:	f7ff fd0b 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800124a:	2030      	movs	r0, #48	; 0x30
 800124c:	f7ff fd18 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001250:	2030      	movs	r0, #48	; 0x30
 8001252:	f7ff fd15 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001256:	20c7      	movs	r0, #199	; 0xc7
 8001258:	f7ff fd02 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800125c:	20b7      	movs	r0, #183	; 0xb7
 800125e:	f7ff fd0f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001262:	2036      	movs	r0, #54	; 0x36
 8001264:	f7ff fcfc 	bl	8000c60 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff fd09 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800126e:	203a      	movs	r0, #58	; 0x3a
 8001270:	f7ff fcf6 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001274:	2055      	movs	r0, #85	; 0x55
 8001276:	f7ff fd03 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800127a:	20b1      	movs	r0, #177	; 0xb1
 800127c:	f7ff fcf0 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff fcfd 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001286:	201a      	movs	r0, #26
 8001288:	f7ff fcfa 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800128c:	20b6      	movs	r0, #182	; 0xb6
 800128e:	f7ff fce7 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001292:	200a      	movs	r0, #10
 8001294:	f7ff fcf4 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001298:	20a2      	movs	r0, #162	; 0xa2
 800129a:	f7ff fcf1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800129e:	20f2      	movs	r0, #242	; 0xf2
 80012a0:	f7ff fcde 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fceb 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012aa:	2026      	movs	r0, #38	; 0x26
 80012ac:	f7ff fcd8 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fce5 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012b6:	20e0      	movs	r0, #224	; 0xe0
 80012b8:	f7ff fcd2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012bc:	200f      	movs	r0, #15
 80012be:	f7ff fcdf 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012c2:	202a      	movs	r0, #42	; 0x2a
 80012c4:	f7ff fcdc 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012c8:	2028      	movs	r0, #40	; 0x28
 80012ca:	f7ff fcd9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012ce:	2008      	movs	r0, #8
 80012d0:	f7ff fcd6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012d4:	200e      	movs	r0, #14
 80012d6:	f7ff fcd3 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012da:	2008      	movs	r0, #8
 80012dc:	f7ff fcd0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012e0:	2054      	movs	r0, #84	; 0x54
 80012e2:	f7ff fccd 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012e6:	20a9      	movs	r0, #169	; 0xa9
 80012e8:	f7ff fcca 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012ec:	2043      	movs	r0, #67	; 0x43
 80012ee:	f7ff fcc7 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff fcc4 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fcc1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fcbe 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fcbb 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fcb8 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fcb5 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001316:	20e1      	movs	r0, #225	; 0xe1
 8001318:	f7ff fca2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fcaf 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001322:	2015      	movs	r0, #21
 8001324:	f7ff fcac 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001328:	2017      	movs	r0, #23
 800132a:	f7ff fca9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800132e:	2007      	movs	r0, #7
 8001330:	f7ff fca6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001334:	2011      	movs	r0, #17
 8001336:	f7ff fca3 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800133a:	2006      	movs	r0, #6
 800133c:	f7ff fca0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001340:	202b      	movs	r0, #43	; 0x2b
 8001342:	f7ff fc9d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001346:	2056      	movs	r0, #86	; 0x56
 8001348:	f7ff fc9a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800134c:	203c      	movs	r0, #60	; 0x3c
 800134e:	f7ff fc97 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001352:	2005      	movs	r0, #5
 8001354:	f7ff fc94 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001358:	2010      	movs	r0, #16
 800135a:	f7ff fc91 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800135e:	200f      	movs	r0, #15
 8001360:	f7ff fc8e 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001364:	203f      	movs	r0, #63	; 0x3f
 8001366:	f7ff fc8b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800136a:	203f      	movs	r0, #63	; 0x3f
 800136c:	f7ff fc88 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001370:	200f      	movs	r0, #15
 8001372:	f7ff fc85 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001376:	202b      	movs	r0, #43	; 0x2b
 8001378:	f7ff fc72 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fc7f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fc7c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fc79 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800138e:	203f      	movs	r0, #63	; 0x3f
 8001390:	f7ff fc76 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001394:	202a      	movs	r0, #42	; 0x2a
 8001396:	f7ff fc63 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fc70 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fc6d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fc6a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013ac:	20ef      	movs	r0, #239	; 0xef
 80013ae:	f7ff fc67 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013b2:	2011      	movs	r0, #17
 80013b4:	f7ff fc54 	bl	8000c60 <LCD_WR_REG>
	HAL_Delay(120);
 80013b8:	2078      	movs	r0, #120	; 0x78
 80013ba:	f000 ff6f 	bl	800229c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013be:	2029      	movs	r0, #41	; 0x29
 80013c0:	f7ff fc4e 	bl	8000c60 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <lcd_init+0x2bc>)
 80013cc:	f002 fa4c 	bl	8003868 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020800 	.word	0x40020800
 80013d8:	200001a0 	.word	0x200001a0
 80013dc:	40020000 	.word	0x40020000

080013e0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	; 0x2c
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	60ba      	str	r2, [r7, #8]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	81fb      	strh	r3, [r7, #14]
 80013ee:	460b      	mov	r3, r1
 80013f0:	81bb      	strh	r3, [r7, #12]
 80013f2:	4613      	mov	r3, r2
 80013f4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013fe:	e048      	b.n	8001492 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d145      	bne.n	8001492 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <lcd_ShowStr+0xc4>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	dc3f      	bgt.n	800149c <lcd_ShowStr+0xbc>
 800141c:	89ba      	ldrh	r2, [r7, #12]
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <lcd_ShowStr+0xc4>)
 8001420:	885b      	ldrh	r3, [r3, #2]
 8001422:	4619      	mov	r1, r3
 8001424:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001428:	1acb      	subs	r3, r1, r3
 800142a:	429a      	cmp	r2, r3
 800142c:	dc36      	bgt.n	800149c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b80      	cmp	r3, #128	; 0x80
 8001434:	d902      	bls.n	800143c <lcd_ShowStr+0x5c>
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
 800143a:	e02a      	b.n	8001492 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0d      	cmp	r3, #13
 8001442:	d10b      	bne.n	800145c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001444:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001448:	b29a      	uxth	r2, r3
 800144a:	89bb      	ldrh	r3, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001450:	8abb      	ldrh	r3, [r7, #20]
 8001452:	81fb      	strh	r3, [r7, #14]
					str++;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	e017      	b.n	800148c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	88fc      	ldrh	r4, [r7, #6]
 8001462:	89b9      	ldrh	r1, [r7, #12]
 8001464:	89f8      	ldrh	r0, [r7, #14]
 8001466:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4623      	mov	r3, r4
 8001478:	f7ff fcba 	bl	8000df0 <lcd_ShowChar>
					x+=sizey/2;
 800147c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	b29a      	uxth	r2, r3
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	4413      	add	r3, r2
 800148a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1b2      	bne.n	8001400 <lcd_ShowStr+0x20>
 800149a:	e000      	b.n	800149e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800149c:	bf00      	nop
			}
		}
	}
}
 800149e:	371c      	adds	r7, #28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	200001a0 	.word	0x200001a0

080014a8 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014ac:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <led7_Scan+0x104>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <led7_Scan+0x104>)
 80014b6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <led7_Scan+0x108>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3d      	ldr	r2, [pc, #244]	; (80015b4 <led7_Scan+0x10c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <led7_Scan+0x104>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <led7_Scan+0x104>)
 80014d2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <led7_Scan+0x108>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d847      	bhi.n	800156c <led7_Scan+0xc4>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <led7_Scan+0x3c>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f5 	.word	0x080014f5
 80014e8:	08001513 	.word	0x08001513
 80014ec:	08001531 	.word	0x08001531
 80014f0:	0800154f 	.word	0x0800154f
	case 0:
		spi_buffer |= 0x00b0;
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <led7_Scan+0x104>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <led7_Scan+0x104>)
 8001500:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <led7_Scan+0x104>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <led7_Scan+0x104>)
 800150e:	801a      	strh	r2, [r3, #0]
		break;
 8001510:	e02d      	b.n	800156e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <led7_Scan+0x104>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <led7_Scan+0x104>)
 800151e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <led7_Scan+0x104>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	f023 0320 	bic.w	r3, r3, #32
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <led7_Scan+0x104>)
 800152c:	801a      	strh	r2, [r3, #0]
		break;
 800152e:	e01e      	b.n	800156e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <led7_Scan+0x104>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <led7_Scan+0x104>)
 800153c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <led7_Scan+0x104>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	f023 0310 	bic.w	r3, r3, #16
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <led7_Scan+0x104>)
 800154a:	801a      	strh	r2, [r3, #0]
		break;
 800154c:	e00f      	b.n	800156e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <led7_Scan+0x104>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <led7_Scan+0x104>)
 800155a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <led7_Scan+0x104>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <led7_Scan+0x104>)
 8001568:	801a      	strh	r2, [r3, #0]
		break;
 800156a:	e000      	b.n	800156e <led7_Scan+0xc6>
	default:
		break;
 800156c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <led7_Scan+0x108>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	425a      	negs	r2, r3
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	f002 0203 	and.w	r2, r2, #3
 800157e:	bf58      	it	pl
 8001580:	4253      	negpl	r3, r2
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <led7_Scan+0x108>)
 8001584:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <led7_Scan+0x110>)
 800158c:	f002 f96c 	bl	8003868 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001590:	2301      	movs	r3, #1
 8001592:	2202      	movs	r2, #2
 8001594:	4905      	ldr	r1, [pc, #20]	; (80015ac <led7_Scan+0x104>)
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <led7_Scan+0x114>)
 8001598:	f002 ffe5 	bl	8004566 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800159c:	2201      	movs	r2, #1
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <led7_Scan+0x110>)
 80015a2:	f002 f961 	bl	8003868 <HAL_GPIO_WritePin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000004 	.word	0x20000004
 80015b0:	200001a8 	.word	0x200001a8
 80015b4:	20000000 	.word	0x20000000
 80015b8:	40021800 	.word	0x40021800
 80015bc:	200001c0 	.word	0x200001c0

080015c0 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <lightProcess+0x58>)
 80015c6:	8b5b      	ldrh	r3, [r3, #26]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d113      	bne.n	80015f4 <lightProcess+0x34>
		light_status = 1 - light_status;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <lightProcess+0x5c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f1c3 0301 	rsb	r3, r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <lightProcess+0x5c>)
 80015d8:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <lightProcess+0x5c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 80015e2:	2101      	movs	r1, #1
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <lightProcess+0x60>)
 80015e6:	f000 fc71 	bl	8001ecc <uart_EspSendBytes>
 80015ea:	e003      	b.n	80015f4 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 80015ec:	2101      	movs	r1, #1
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <lightProcess+0x64>)
 80015f0:	f000 fc6c 	bl	8001ecc <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <lightProcess+0x5c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <lightProcess+0x68>)
 8001602:	f002 f931 	bl	8003868 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 8001606:	e004      	b.n	8001612 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2120      	movs	r1, #32
 800160c:	4806      	ldr	r0, [pc, #24]	; (8001628 <lightProcess+0x68>)
 800160e:	f002 f92b 	bl	8003868 <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000d8 	.word	0x200000d8
 800161c:	200001ac 	.word	0x200001ac
 8001620:	08006c80 	.word	0x08006c80
 8001624:	08006c84 	.word	0x08006c84
 8001628:	40021000 	.word	0x40021000

0800162c <test_Esp>:

void test_Esp(){
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af04      	add	r7, sp, #16
	if(uart_EspCheck() == 0)
 8001632:	f000 fca7 	bl	8001f84 <uart_EspCheck>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d111      	bne.n	8001660 <test_Esp+0x34>
		{

		lcd_ShowStr(10, 50, "ESP Disconnected", RED, BLACK, 24, 0);
 800163c:	2300      	movs	r3, #0
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	2318      	movs	r3, #24
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2300      	movs	r3, #0
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <test_Esp+0x5c>)
 800164e:	2132      	movs	r1, #50	; 0x32
 8001650:	200a      	movs	r0, #10
 8001652:	f7ff fec5 	bl	80013e0 <lcd_ShowStr>
		uart_EspSendBytes("o", 1);
 8001656:	2101      	movs	r1, #1
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <test_Esp+0x60>)
 800165a:	f000 fc37 	bl	8001ecc <uart_EspSendBytes>
	else
		{
			lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
			uart_EspSendBytes("!", 1);
		}
}
 800165e:	e010      	b.n	8001682 <test_Esp+0x56>
			lcd_ShowStr(10, 50, "ESP Connect", GREEN, BLACK, 24, 0);
 8001660:	2300      	movs	r3, #0
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	2318      	movs	r3, #24
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <test_Esp+0x64>)
 8001672:	2132      	movs	r1, #50	; 0x32
 8001674:	200a      	movs	r0, #10
 8001676:	f7ff feb3 	bl	80013e0 <lcd_ShowStr>
			uart_EspSendBytes("!", 1);
 800167a:	2101      	movs	r1, #1
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <test_Esp+0x68>)
 800167e:	f000 fc25 	bl	8001ecc <uart_EspSendBytes>
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08006c88 	.word	0x08006c88
 800168c:	08006c9c 	.word	0x08006c9c
 8001690:	08006ca0 	.word	0x08006ca0
 8001694:	08006cac 	.word	0x08006cac

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 fd8c 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f82c 	bl	80016fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f7ff f92c 	bl	8000900 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a8:	f7ff f83a 	bl	8000720 <MX_DMA_Init>
  MX_SPI1_Init();
 80016ac:	f000 f978 	bl	80019a0 <MX_SPI1_Init>
  MX_FSMC_Init();
 80016b0:	f7ff f856 	bl	8000760 <MX_FSMC_Init>
  MX_I2C1_Init();
 80016b4:	f7ff fa5e 	bl	8000b74 <MX_I2C1_Init>
  MX_TIM13_Init();
 80016b8:	f000 fb18 	bl	8001cec <MX_TIM13_Init>
  MX_TIM2_Init();
 80016bc:	f000 faca 	bl	8001c54 <MX_TIM2_Init>
  MX_ADC1_Init();
 80016c0:	f7fe ff04 	bl	80004cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80016c4:	f000 fa76 	bl	8001bb4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80016c8:	f000 fc96 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80016cc:	f000 fc6a 	bl	8001fa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80016d0:	f000 f87e 	bl	80017d0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff fb41 	bl	8000d5c <lcd_Clear>
  while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1)
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <main+0x60>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d1fb      	bne.n	80016da <main+0x42>
	  {
		  flag_timer2 = 0;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <main+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	801a      	strh	r2, [r3, #0]
		  test_Esp();
 80016e8:	f7ff ffa0 	bl	800162c <test_Esp>
		  test_Adc();
 80016ec:	f000 f882 	bl	80017f4 <test_Adc>
		  lightProcess();
 80016f0:	f7ff ff66 	bl	80015c0 <lightProcess>
	  if(flag_timer2 == 1)
 80016f4:	e7f1      	b.n	80016da <main+0x42>
 80016f6:	bf00      	nop
 80016f8:	200001ba 	.word	0x200001ba

080016fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b094      	sub	sp, #80	; 0x50
 8001700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001702:	f107 0320 	add.w	r3, r7, #32
 8001706:	2230      	movs	r2, #48	; 0x30
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f005 faa4 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <SystemClock_Config+0xcc>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a27      	ldr	r2, [pc, #156]	; (80017c8 <SystemClock_Config+0xcc>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
 8001730:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SystemClock_Config+0xcc>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <SystemClock_Config+0xd0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <SystemClock_Config+0xd0>)
 8001746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xd0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001760:	2310      	movs	r3, #16
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	2302      	movs	r3, #2
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001768:	2300      	movs	r3, #0
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800176c:	2308      	movs	r3, #8
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001770:	23a8      	movs	r3, #168	; 0xa8
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001774:	2302      	movs	r3, #2
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001778:	2304      	movs	r3, #4
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4618      	mov	r0, r3
 8001782:	f002 f9cf 	bl	8003b24 <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800178c:	f000 f874 	bl	8001878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	2302      	movs	r3, #2
 8001796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2105      	movs	r1, #5
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fc30 	bl	8004014 <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017ba:	f000 f85d 	bl	8001878 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3750      	adds	r7, #80	; 0x50
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	  timer_init();
 80017d4:	f000 f890 	bl	80018f8 <timer_init>
	  button_init();
 80017d8:	f7fe ff96 	bl	8000708 <button_init>
	  sensor_init();
 80017dc:	f000 f852 	bl	8001884 <sensor_init>
	  lcd_init();
 80017e0:	f7ff fc9e 	bl	8001120 <lcd_init>
	  uart_init_esp();
 80017e4:	f000 fb5c 	bl	8001ea0 <uart_init_esp>
	  setTimer2(50);
 80017e8:	2032      	movs	r0, #50	; 0x32
 80017ea:	f000 f893 	bl	8001914 <setTimer2>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <test_Adc>:
//		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
//	}
//}

uint8_t count_adc = 0;
void test_Adc() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1) % 20;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <test_Adc+0x78>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <test_Adc+0x7c>)
 8001802:	fb83 1302 	smull	r1, r3, r3, r2
 8001806:	10d9      	asrs	r1, r3, #3
 8001808:	17d3      	asrs	r3, r2, #31
 800180a:	1ac9      	subs	r1, r1, r3
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	1ad1      	subs	r1, r2, r3
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	4b14      	ldr	r3, [pc, #80]	; (800186c <test_Adc+0x78>)
 800181a:	701a      	strb	r2, [r3, #0]
	if (count_adc == 0){
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <test_Adc+0x78>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11f      	bne.n	8001864 <test_Adc+0x70>
		sensor_Read();
 8001824:	f000 f83c 	bl	80018a0 <sensor_Read>
		lcd_ShowStr(10, 180, "Temperature:", RED, BLACK, 16, 0);
 8001828:	2300      	movs	r3, #0
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	2310      	movs	r3, #16
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <test_Adc+0x80>)
 800183a:	21b4      	movs	r1, #180	; 0xb4
 800183c:	200a      	movs	r0, #10
 800183e:	f7ff fdcf 	bl	80013e0 <lcd_ShowStr>

		float currentTemperature = sensor_GetTemperature();
 8001842:	f000 f83b 	bl	80018bc <sensor_GetTemperature>
 8001846:	ed87 0a01 	vstr	s0, [r7, #4]
//		uint8_t bytes[] = {'!'};
//		uart_EspSendBytes("!", 1);
//		uart_EspSendBytes(floatBytesArray, 4);

//		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		lcd_ShowFloatNum(130, 180,currentTemperature, 4, RED, BLACK, 16);
 800184a:	2310      	movs	r3, #16
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	2300      	movs	r3, #0
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001856:	2204      	movs	r2, #4
 8001858:	ed97 0a01 	vldr	s0, [r7, #4]
 800185c:	21b4      	movs	r1, #180	; 0xb4
 800185e:	2082      	movs	r0, #130	; 0x82
 8001860:	f7ff fbb2 	bl	8000fc8 <lcd_ShowFloatNum>
	}
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200001ad 	.word	0x200001ad
 8001870:	66666667 	.word	0x66666667
 8001874:	08006cb0 	.word	0x08006cb0

08001878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001880:	e7fe      	b.n	8001880 <Error_Handler+0x8>
	...

08001884 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001888:	2205      	movs	r2, #5
 800188a:	4903      	ldr	r1, [pc, #12]	; (8001898 <sensor_init+0x14>)
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <sensor_init+0x18>)
 800188e:	f000 fd6d 	bl	800236c <HAL_ADC_Start_DMA>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200001b0 	.word	0x200001b0
 800189c:	20000030 	.word	0x20000030

080018a0 <sensor_Read>:

void sensor_Read(){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80018a4:	2205      	movs	r2, #5
 80018a6:	4903      	ldr	r1, [pc, #12]	; (80018b4 <sensor_Read+0x14>)
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <sensor_Read+0x18>)
 80018aa:	f000 fd5f 	bl	800236c <HAL_ADC_Start_DMA>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001b0 	.word	0x200001b0
 80018b8:	20000030 	.word	0x20000030

080018bc <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <sensor_GetTemperature+0x30>)
 80018c2:	891b      	ldrh	r3, [r3, #8]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80018f0 <sensor_GetTemperature+0x34>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80018f4 <sensor_GetTemperature+0x38>
 80018d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200001b0 	.word	0x200001b0
 80018f0:	43a50000 	.word	0x43a50000
 80018f4:	457ff000 	.word	0x457ff000

080018f8 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <timer_init+0x14>)
 80018fe:	f003 f939 	bl	8004b74 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <timer_init+0x18>)
 8001904:	f003 f8ce 	bl	8004aa4 <HAL_TIM_Base_Start>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000260 	.word	0x20000260
 8001910:	20000218 	.word	0x20000218

08001914 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <setTimer2+0x2c>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <setTimer2+0x2c>)
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <setTimer2+0x30>)
 800192a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <setTimer2+0x34>)
 800192e:	2200      	movs	r2, #0
 8001930:	801a      	strh	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	200001be 	.word	0x200001be
 8001944:	200001bc 	.word	0x200001bc
 8001948:	200001ba 	.word	0x200001ba

0800194c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d116      	bne.n	800198c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001970:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800197c:	2201      	movs	r2, #1
 800197e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001982:	881a      	ldrh	r2, [r3, #0]
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001986:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001988:	f7ff fd8e 	bl	80014a8 <led7_Scan>
	}
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001bc 	.word	0x200001bc
 8001998:	200001ba 	.word	0x200001ba
 800199c:	200001be 	.word	0x200001be

080019a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <MX_SPI1_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019ec:	220a      	movs	r2, #10
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SPI1_Init+0x64>)
 80019f2:	f002 fd2f 	bl	8004454 <HAL_SPI_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019fc:	f7ff ff3c 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200001c0 	.word	0x200001c0
 8001a08:	40013000 	.word	0x40013000

08001a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	; (8001a90 <HAL_SPI_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12b      	bne.n	8001a86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_MspInit+0x88>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a66:	2338      	movs	r3, #56	; 0x38
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a76:	2305      	movs	r3, #5
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x8c>)
 8001a82:	f001 fd55 	bl	8003530 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020400 	.word	0x40020400

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b38:	f000 fb90 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <TIM2_IRQHandler+0x10>)
 8001b46:	f003 f8de 	bl	8004d06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000260 	.word	0x20000260

08001b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <USART1_IRQHandler+0x10>)
 8001b5a:	f004 f819 	bl	8005b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200002f4 	.word	0x200002f4

08001b68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <USART2_IRQHandler+0x10>)
 8001b6e:	f004 f80f 	bl	8005b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000338 	.word	0x20000338

08001b7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Stream0_IRQHandler+0x10>)
 8001b82:	f001 fa6b 	bl	800305c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000078 	.word	0x20000078

08001b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <SystemInit+0x20>)
 8001b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <SystemInit+0x20>)
 8001b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <MX_TIM1_Init+0x9c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bd8:	2253      	movs	r2, #83	; 0x53
 8001bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bfc:	4813      	ldr	r0, [pc, #76]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001bfe:	f002 ff01 	bl	8004a04 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c08:	f7ff fe36 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001c1a:	f003 fa3f 	bl	800509c <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c24:	f7ff fe28 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c30:	463b      	mov	r3, r7
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_TIM1_Init+0x98>)
 8001c36:	f003 fe0b 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c40:	f7ff fe1a 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000218 	.word	0x20000218
 8001c50:	40010000 	.word	0x40010000

08001c54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c7a:	f240 3247 	movw	r2, #839	; 0x347
 8001c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c88:	2263      	movs	r2, #99	; 0x63
 8001c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c98:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001c9a:	f002 feb3 	bl	8004a04 <HAL_TIM_Base_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ca4:	f7ff fde8 	bl	8001878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001cb6:	f003 f9f1 	bl	800509c <HAL_TIM_ConfigClockSource>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cc0:	f7ff fdda 	bl	8001878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_TIM2_Init+0x94>)
 8001cd2:	f003 fdbd 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cdc:	f7ff fdcc 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000260 	.word	0x20000260

08001cec <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <MX_TIM13_Init+0x98>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d0c:	f240 3247 	movw	r2, #839	; 0x347
 8001d10:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d1a:	2263      	movs	r2, #99	; 0x63
 8001d1c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d2a:	4815      	ldr	r0, [pc, #84]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d2c:	f002 fe6a 	bl	8004a04 <HAL_TIM_Base_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001d36:	f7ff fd9f 	bl	8001878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001d3a:	4811      	ldr	r0, [pc, #68]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d3c:	f002 ff8a 	bl	8004c54 <HAL_TIM_PWM_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001d46:	f7ff fd97 	bl	8001878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4a:	2360      	movs	r3, #96	; 0x60
 8001d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4807      	ldr	r0, [pc, #28]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d62:	f003 f8d9 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001d6c:	f7ff fd84 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <MX_TIM13_Init+0x94>)
 8001d72:	f000 f85b 	bl	8001e2c <HAL_TIM_MspPostInit>

}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002a8 	.word	0x200002a8
 8001d84:	40001c00 	.word	0x40001c00

08001d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_TIM_Base_MspInit+0x98>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001db6:	e02e      	b.n	8001e16 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d116      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	201c      	movs	r0, #28
 8001de4:	f000 ff6b 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de8:	201c      	movs	r0, #28
 8001dea:	f000 ff84 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 8001dee:	e012      	b.n	8001e16 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_TIM_Base_MspInit+0xa0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10d      	bne.n	8001e16 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_TIM_Base_MspInit+0x9c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40001c00 	.word	0x40001c00

08001e2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_TIM_MspPostInit+0x68>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11e      	bne.n	8001e8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e7c:	2309      	movs	r3, #9
 8001e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	4619      	mov	r1, r3
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_TIM_MspPostInit+0x70>)
 8001e88:	f001 fb52 	bl	8003530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40001c00 	.word	0x40001c00
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40021400 	.word	0x40021400

08001ea0 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4906      	ldr	r1, [pc, #24]	; (8001ec0 <uart_init_esp+0x20>)
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <uart_init_esp+0x24>)
 8001eaa:	f003 fe40 	bl	8005b2e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <uart_init_esp+0x28>)
 8001eb6:	f001 fcd7 	bl	8003868 <HAL_GPIO_WritePin>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200002f1 	.word	0x200002f1
 8001ec4:	20000338 	.word	0x20000338
 8001ec8:	40021400 	.word	0x40021400

08001ecc <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	230a      	movs	r3, #10
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4803      	ldr	r0, [pc, #12]	; (8001eec <uart_EspSendBytes+0x20>)
 8001ee0:	f003 fd93 	bl	8005a0a <HAL_UART_Transmit>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000338 	.word	0x20000338

08001ef0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_UART_RxCpltCallback+0x74>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d10a      	bne.n	8001f18 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001f02:	230a      	movs	r3, #10
 8001f04:	2201      	movs	r2, #1
 8001f06:	4918      	ldr	r1, [pc, #96]	; (8001f68 <HAL_UART_RxCpltCallback+0x78>)
 8001f08:	4818      	ldr	r0, [pc, #96]	; (8001f6c <HAL_UART_RxCpltCallback+0x7c>)
 8001f0a:	f003 fd7e 	bl	8005a0a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4915      	ldr	r1, [pc, #84]	; (8001f68 <HAL_UART_RxCpltCallback+0x78>)
 8001f12:	4816      	ldr	r0, [pc, #88]	; (8001f6c <HAL_UART_RxCpltCallback+0x7c>)
 8001f14:	f003 fe0b 	bl	8005b2e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <HAL_UART_RxCpltCallback+0x80>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d11b      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_UART_RxCpltCallback+0x84>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b4f      	cmp	r3, #79	; 0x4f
 8001f28:	d103      	bne.n	8001f32 <HAL_UART_RxCpltCallback+0x42>
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_UART_RxCpltCallback+0x88>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e00e      	b.n	8001f50 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_UART_RxCpltCallback+0x84>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b61      	cmp	r3, #97	; 0x61
 8001f38:	d103      	bne.n	8001f42 <HAL_UART_RxCpltCallback+0x52>
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_UART_RxCpltCallback+0x8c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e006      	b.n	8001f50 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_UART_RxCpltCallback+0x84>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b41      	cmp	r3, #65	; 0x41
 8001f48:	d102      	bne.n	8001f50 <HAL_UART_RxCpltCallback+0x60>
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_UART_RxCpltCallback+0x8c>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001f50:	2201      	movs	r2, #1
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <HAL_UART_RxCpltCallback+0x84>)
 8001f54:	480a      	ldr	r0, [pc, #40]	; (8001f80 <HAL_UART_RxCpltCallback+0x90>)
 8001f56:	f003 fdea 	bl	8005b2e <HAL_UART_Receive_IT>
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40011000 	.word	0x40011000
 8001f68:	200002f0 	.word	0x200002f0
 8001f6c:	200002f4 	.word	0x200002f4
 8001f70:	40004400 	.word	0x40004400
 8001f74:	200002f1 	.word	0x200002f1
 8001f78:	200002f2 	.word	0x200002f2
 8001f7c:	200001ac 	.word	0x200001ac
 8001f80:	20000338 	.word	0x20000338

08001f84 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <uart_EspCheck+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <uart_EspCheck+0x10>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <uart_EspCheck+0x12>
	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200002f2 	.word	0x200002f2

08001fa4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART1_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART1_UART_Init+0x4c>)
 8001fdc:	f003 fcc8 	bl	8005970 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f7ff fc47 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002f4 	.word	0x200002f4
 8001ff4:	40011000 	.word	0x40011000

08001ff8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_USART2_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002030:	f003 fc9e 	bl	8005970 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f7ff fc1d 	bl	8001878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000338 	.word	0x20000338
 8002048:	40004400 	.word	0x40004400

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_UART_MspInit+0x108>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d135      	bne.n	80020da <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	4b32      	ldr	r3, [pc, #200]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_UART_MspInit+0x10c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020b8:	2307      	movs	r3, #7
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4826      	ldr	r0, [pc, #152]	; (800215c <HAL_UART_MspInit+0x110>)
 80020c4:	f001 fa34 	bl	8003530 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2025      	movs	r0, #37	; 0x25
 80020ce:	f000 fdf6 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020d2:	2025      	movs	r0, #37	; 0x25
 80020d4:	f000 fe0f 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020d8:	e038      	b.n	800214c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_UART_MspInit+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d133      	bne.n	800214c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_UART_MspInit+0x10c>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_UART_MspInit+0x10c>)
 80020ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_UART_MspInit+0x10c>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_UART_MspInit+0x10c>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_UART_MspInit+0x10c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800211c:	230c      	movs	r3, #12
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800212c:	2307      	movs	r3, #7
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4809      	ldr	r0, [pc, #36]	; (800215c <HAL_UART_MspInit+0x110>)
 8002138:	f001 f9fa 	bl	8003530 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2026      	movs	r0, #38	; 0x26
 8002142:	f000 fdbc 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002146:	2026      	movs	r0, #38	; 0x26
 8002148:	f000 fdd5 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3730      	adds	r7, #48	; 0x30
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40011000 	.word	0x40011000
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40004400 	.word	0x40004400

08002164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002168:	480d      	ldr	r0, [pc, #52]	; (80021a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002170:	e002      	b.n	8002178 <LoopCopyDataInit>

08002172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002176:	3304      	adds	r3, #4

08002178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800217c:	d3f9      	bcc.n	8002172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217e:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002180:	4c0b      	ldr	r4, [pc, #44]	; (80021b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002184:	e001      	b.n	800218a <LoopFillZerobss>

08002186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002188:	3204      	adds	r2, #4

0800218a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800218c:	d3fb      	bcc.n	8002186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800218e:	f7ff fcff 	bl	8001b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002192:	f004 fd3d 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002196:	f7ff fa7f 	bl	8001698 <main>
  bx  lr    
 800219a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800219c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80021a8:	08009c70 	.word	0x08009c70
  ldr r2, =_sbss
 80021ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80021b0:	20000380 	.word	0x20000380

080021b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC_IRQHandler>
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 fd61 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fc56 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fd79 	bl	8002d12 <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 fd41 	bl	8002cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000008 	.word	0x20000008
 8002254:	20000010 	.word	0x20000010
 8002258:	2000000c 	.word	0x2000000c

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000010 	.word	0x20000010
 8002280:	2000037c 	.word	0x2000037c

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000037c 	.word	0x2000037c

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000010 	.word	0x20000010

080022e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e033      	b.n	8002362 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f96c 	bl	80005e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800232a:	f023 0302 	bic.w	r3, r3, #2
 800232e:	f043 0202 	orr.w	r2, r3, #2
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa68 	bl	800280c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f023 0303 	bic.w	r3, r3, #3
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
 8002352:	e001      	b.n	8002358 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Start_DMA+0x1e>
 8002386:	2302      	movs	r3, #2
 8002388:	e0e9      	b.n	800255e <HAL_ADC_Start_DMA+0x1f2>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d018      	beq.n	80023d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023b0:	4b6d      	ldr	r3, [pc, #436]	; (8002568 <HAL_ADC_Start_DMA+0x1fc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6d      	ldr	r2, [pc, #436]	; (800256c <HAL_ADC_Start_DMA+0x200>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9a      	lsrs	r2, r3, #18
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e0:	d107      	bne.n	80023f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	f040 80a1 	bne.w	8002544 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800242c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002440:	d106      	bne.n	8002450 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f023 0206 	bic.w	r2, r3, #6
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
 800244e:	e002      	b.n	8002456 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_ADC_Start_DMA+0x204>)
 8002460:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <HAL_ADC_Start_DMA+0x208>)
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4a42      	ldr	r2, [pc, #264]	; (8002578 <HAL_ADC_Start_DMA+0x20c>)
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	4a41      	ldr	r2, [pc, #260]	; (800257c <HAL_ADC_Start_DMA+0x210>)
 8002478:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002482:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002492:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	334c      	adds	r3, #76	; 0x4c
 80024ae:	4619      	mov	r1, r3
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f000 fce8 	bl	8002e88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d12a      	bne.n	800251a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <HAL_ADC_Start_DMA+0x214>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d015      	beq.n	80024fa <HAL_ADC_Start_DMA+0x18e>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <HAL_ADC_Start_DMA+0x218>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d105      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x178>
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <HAL_ADC_Start_DMA+0x204>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <HAL_ADC_Start_DMA+0x21c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d136      	bne.n	800255c <HAL_ADC_Start_DMA+0x1f0>
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <HAL_ADC_Start_DMA+0x204>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d130      	bne.n	800255c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d129      	bne.n	800255c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e020      	b.n	800255c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_ADC_Start_DMA+0x214>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d11b      	bne.n	800255c <HAL_ADC_Start_DMA+0x1f0>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d114      	bne.n	800255c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	e00b      	b.n	800255c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0210 	orr.w	r2, r3, #16
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008
 800256c:	431bde83 	.word	0x431bde83
 8002570:	40012300 	.word	0x40012300
 8002574:	08002a05 	.word	0x08002a05
 8002578:	08002abf 	.word	0x08002abf
 800257c:	08002adb 	.word	0x08002adb
 8002580:	40012000 	.word	0x40012000
 8002584:	40012100 	.word	0x40012100
 8002588:	40012200 	.word	0x40012200

0800258c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1c>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e105      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x228>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b09      	cmp	r3, #9
 80025f2:	d925      	bls.n	8002640 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	461a      	mov	r2, r3
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	3b1e      	subs	r3, #30
 800260a:	2207      	movs	r2, #7
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68d9      	ldr	r1, [r3, #12]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	4603      	mov	r3, r0
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4403      	add	r3, r0
 8002632:	3b1e      	subs	r3, #30
 8002634:	409a      	lsls	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	e022      	b.n	8002686 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6919      	ldr	r1, [r3, #16]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	2207      	movs	r2, #7
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6919      	ldr	r1, [r3, #16]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	4618      	mov	r0, r3
 8002676:	4603      	mov	r3, r0
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4403      	add	r3, r0
 800267c:	409a      	lsls	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b06      	cmp	r3, #6
 800268c:	d824      	bhi.n	80026d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	3b05      	subs	r3, #5
 80026a0:	221f      	movs	r2, #31
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	400a      	ands	r2, r1
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4618      	mov	r0, r3
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b05      	subs	r3, #5
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
 80026d6:	e04c      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d824      	bhi.n	800272a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b23      	subs	r3, #35	; 0x23
 80026f2:	221f      	movs	r2, #31
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43da      	mvns	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	400a      	ands	r2, r1
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4618      	mov	r0, r3
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	3b23      	subs	r3, #35	; 0x23
 800271c:	fa00 f203 	lsl.w	r2, r0, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
 8002728:	e023      	b.n	8002772 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3b41      	subs	r3, #65	; 0x41
 800273c:	221f      	movs	r2, #31
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	400a      	ands	r2, r1
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	4618      	mov	r0, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b41      	subs	r3, #65	; 0x41
 8002766:	fa00 f203 	lsl.w	r2, r0, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_ADC_ConfigChannel+0x234>)
 8002774:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <HAL_ADC_ConfigChannel+0x238>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d109      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1cc>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b12      	cmp	r3, #18
 8002786:	d105      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_ADC_ConfigChannel+0x238>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d123      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x21e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d003      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x1e6>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b11      	cmp	r3, #17
 80027ac:	d11b      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d111      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_ADC_ConfigChannel+0x23c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <HAL_ADC_ConfigChannel+0x240>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9a      	lsrs	r2, r3, #18
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40012300 	.word	0x40012300
 8002800:	40012000 	.word	0x40012000
 8002804:	20000008 	.word	0x20000008
 8002808:	431bde83 	.word	0x431bde83

0800280c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002814:	4b79      	ldr	r3, [pc, #484]	; (80029fc <ADC_Init+0x1f0>)
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6859      	ldr	r1, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	021a      	lsls	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6899      	ldr	r1, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <ADC_Init+0x1f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d022      	beq.n	80028ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	e00f      	b.n	800290a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002908:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0202 	bic.w	r2, r2, #2
 8002918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7e1b      	ldrb	r3, [r3, #24]
 8002924:	005a      	lsls	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01b      	beq.n	8002970 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002946:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002956:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	3b01      	subs	r3, #1
 8002964:	035a      	lsls	r2, r3, #13
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	e007      	b.n	8002980 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	3b01      	subs	r3, #1
 800299c:	051a      	lsls	r2, r3, #20
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029c2:	025a      	lsls	r2, r3, #9
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	029a      	lsls	r2, r3, #10
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40012300 	.word	0x40012300
 8002a00:	0f000001 	.word	0x0f000001

08002a04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d13c      	bne.n	8002a98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d12b      	bne.n	8002a90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d127      	bne.n	8002a90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d119      	bne.n	8002a90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0220 	bic.w	r2, r2, #32
 8002a6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff fd7b 	bl	800258c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a96:	e00e      	b.n	8002ab6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff fd85 	bl	80025b4 <HAL_ADC_ErrorCallback>
}
 8002aaa:	e004      	b.n	8002ab6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b084      	sub	sp, #16
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff fd67 	bl	80025a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2240      	movs	r2, #64	; 0x40
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	f043 0204 	orr.w	r2, r3, #4
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff fd5a 	bl	80025b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db0a      	blt.n	8002bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <__NVIC_SetPriority+0x4c>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00a      	b.n	8002be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <__NVIC_SetPriority+0x50>)
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	3b04      	subs	r3, #4
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	761a      	strb	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000e100 	.word	0xe000e100
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d301      	bcc.n	8002c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <SysTick_Config+0x40>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c82:	210f      	movs	r1, #15
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f7ff ff8e 	bl	8002ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <SysTick_Config+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SysTick_Config+0x40>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000e010 	.word	0xe000e010

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff29 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff ff3e 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff8e 	bl	8002bfc <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5d 	bl	8002ba8 <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff31 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa2 	bl	8002c64 <SysTick_Config>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff faa4 	bl	8002284 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e099      	b.n	8002e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d68:	e00f      	b.n	8002d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6a:	f7ff fa8b 	bl	8002284 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d908      	bls.n	8002d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2203      	movs	r2, #3
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e078      	b.n	8002e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e8      	bne.n	8002d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_DMA_Init+0x158>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d107      	bne.n	8002df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4313      	orrs	r3, r2
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d117      	bne.n	8002e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fb01 	bl	8003438 <DMA_CheckFifoParam>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e016      	b.n	8002e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fab8 	bl	80033cc <DMA_CalcBaseAndBitshift>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	223f      	movs	r2, #63	; 0x3f
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	f010803f 	.word	0xf010803f

08002e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_DMA_Start_IT+0x26>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e040      	b.n	8002f30 <HAL_DMA_Start_IT+0xa8>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d12f      	bne.n	8002f22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa4a 	bl	8003370 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee0:	223f      	movs	r2, #63	; 0x3f
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0216 	orr.w	r2, r2, #22
 8002ef6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0208 	orr.w	r2, r2, #8
 8002f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e005      	b.n	8002f2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f46:	f7ff f99d 	bl	8002284 <HAL_GetTick>
 8002f4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d008      	beq.n	8002f6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e052      	b.n	8003010 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0216 	bic.w	r2, r2, #22
 8002f78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_DMA_Abort+0x62>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0208 	bic.w	r2, r2, #8
 8002fa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fba:	e013      	b.n	8002fe4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbc:	f7ff f962 	bl	8002284 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e015      	b.n	8003010 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1e4      	bne.n	8002fbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e00c      	b.n	8003050 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2205      	movs	r2, #5
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003068:	4b8e      	ldr	r3, [pc, #568]	; (80032a4 <HAL_DMA_IRQHandler+0x248>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a8e      	ldr	r2, [pc, #568]	; (80032a8 <HAL_DMA_IRQHandler+0x24c>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	0a9b      	lsrs	r3, r3, #10
 8003074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2208      	movs	r2, #8
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01a      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b4:	2208      	movs	r2, #8
 80030b6:	409a      	lsls	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2201      	movs	r2, #1
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d012      	beq.n	80030fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	2201      	movs	r2, #1
 80030ec:	409a      	lsls	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f043 0202 	orr.w	r2, r3, #2
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2204      	movs	r2, #4
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d012      	beq.n	8003134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	2204      	movs	r2, #4
 8003122:	409a      	lsls	r2, r3
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f043 0204 	orr.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003138:	2210      	movs	r2, #16
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d043      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d03c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	2210      	movs	r2, #16
 8003158:	409a      	lsls	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d018      	beq.n	800319e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d024      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e01f      	b.n	80031cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e016      	b.n	80031cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0208 	bic.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2220      	movs	r2, #32
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808f 	beq.w	80032fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8087 	beq.w	80032fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	2220      	movs	r2, #32
 80031f4:	409a      	lsls	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b05      	cmp	r3, #5
 8003204:	d136      	bne.n	8003274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0216 	bic.w	r2, r2, #22
 8003214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <HAL_DMA_IRQHandler+0x1da>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	223f      	movs	r2, #63	; 0x3f
 800324c:	409a      	lsls	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07e      	beq.n	8003368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
        }
        return;
 8003272:	e079      	b.n	8003368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01d      	beq.n	80032be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10d      	bne.n	80032ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	2b00      	cmp	r3, #0
 8003296:	d031      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e02c      	b.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
 80032a2:	bf00      	nop
 80032a4:	20000008 	.word	0x20000008
 80032a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d023      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
 80032bc:	e01e      	b.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10f      	bne.n	80032ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0210 	bic.w	r2, r2, #16
 80032da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d022      	beq.n	8003356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2205      	movs	r2, #5
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3301      	adds	r3, #1
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	429a      	cmp	r2, r3
 8003332:	d307      	bcc.n	8003344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f2      	bne.n	8003328 <HAL_DMA_IRQHandler+0x2cc>
 8003342:	e000      	b.n	8003346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
 8003366:	e000      	b.n	800336a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003368:	bf00      	nop
    }
  }
}
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800338c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d108      	bne.n	80033b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ae:	e007      	b.n	80033c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	3b10      	subs	r3, #16
 80033dc:	4a14      	ldr	r2, [pc, #80]	; (8003430 <DMA_CalcBaseAndBitshift+0x64>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	091b      	lsrs	r3, r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e6:	4a13      	ldr	r2, [pc, #76]	; (8003434 <DMA_CalcBaseAndBitshift+0x68>)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d909      	bls.n	800340e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	659a      	str	r2, [r3, #88]	; 0x58
 800340c:	e007      	b.n	800341e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003416:	f023 0303 	bic.w	r3, r3, #3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	aaaaaaab 	.word	0xaaaaaaab
 8003434:	08009c58 	.word	0x08009c58

08003438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11f      	bne.n	8003492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d856      	bhi.n	8003506 <DMA_CheckFifoParam+0xce>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <DMA_CheckFifoParam+0x28>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003471 	.word	0x08003471
 8003464:	08003483 	.word	0x08003483
 8003468:	08003471 	.word	0x08003471
 800346c:	08003507 	.word	0x08003507
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d046      	beq.n	800350a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003480:	e043      	b.n	800350a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800348a:	d140      	bne.n	800350e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003490:	e03d      	b.n	800350e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349a:	d121      	bne.n	80034e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d837      	bhi.n	8003512 <DMA_CheckFifoParam+0xda>
 80034a2:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <DMA_CheckFifoParam+0x70>)
 80034a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034bf 	.word	0x080034bf
 80034b0:	080034b9 	.word	0x080034b9
 80034b4:	080034d1 	.word	0x080034d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e030      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d025      	beq.n	8003516 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ce:	e022      	b.n	8003516 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d8:	d11f      	bne.n	800351a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034de:	e01c      	b.n	800351a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d903      	bls.n	80034ee <DMA_CheckFifoParam+0xb6>
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d003      	beq.n	80034f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034ec:	e018      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
      break;
 80034f2:	e015      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      break;
 8003504:	e00b      	b.n	800351e <DMA_CheckFifoParam+0xe6>
      break;
 8003506:	bf00      	nop
 8003508:	e00a      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e008      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e006      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e004      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
 8003518:	e002      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;   
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <DMA_CheckFifoParam+0xe8>
      break;
 800351e:	bf00      	nop
    }
  } 
  
  return status; 
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	e16b      	b.n	8003824 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	429a      	cmp	r2, r3
 8003566:	f040 815a 	bne.w	800381e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d005      	beq.n	8003582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357e:	2b02      	cmp	r3, #2
 8003580:	d130      	bne.n	80035e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	2203      	movs	r2, #3
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 0201 	and.w	r2, r3, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0303 	and.w	r3, r3, #3
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d017      	beq.n	8003620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	2203      	movs	r2, #3
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d123      	bne.n	8003674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	08da      	lsrs	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3208      	adds	r2, #8
 8003634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	220f      	movs	r2, #15
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	08da      	lsrs	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3208      	adds	r2, #8
 800366e:	69b9      	ldr	r1, [r7, #24]
 8003670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2203      	movs	r2, #3
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0203 	and.w	r2, r3, #3
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80b4 	beq.w	800381e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	4b60      	ldr	r3, [pc, #384]	; (800383c <HAL_GPIO_Init+0x30c>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a5f      	ldr	r2, [pc, #380]	; (800383c <HAL_GPIO_Init+0x30c>)
 80036c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b5d      	ldr	r3, [pc, #372]	; (800383c <HAL_GPIO_Init+0x30c>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036d2:	4a5b      	ldr	r2, [pc, #364]	; (8003840 <HAL_GPIO_Init+0x310>)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	089b      	lsrs	r3, r3, #2
 80036d8:	3302      	adds	r3, #2
 80036da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_GPIO_Init+0x314>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d02b      	beq.n	8003756 <HAL_GPIO_Init+0x226>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a51      	ldr	r2, [pc, #324]	; (8003848 <HAL_GPIO_Init+0x318>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d025      	beq.n	8003752 <HAL_GPIO_Init+0x222>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a50      	ldr	r2, [pc, #320]	; (800384c <HAL_GPIO_Init+0x31c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <HAL_GPIO_Init+0x21e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4f      	ldr	r2, [pc, #316]	; (8003850 <HAL_GPIO_Init+0x320>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x21a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4e      	ldr	r2, [pc, #312]	; (8003854 <HAL_GPIO_Init+0x324>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x216>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4d      	ldr	r2, [pc, #308]	; (8003858 <HAL_GPIO_Init+0x328>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x212>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4c      	ldr	r2, [pc, #304]	; (800385c <HAL_GPIO_Init+0x32c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x20e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4b      	ldr	r2, [pc, #300]	; (8003860 <HAL_GPIO_Init+0x330>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x20a>
 8003736:	2307      	movs	r3, #7
 8003738:	e00e      	b.n	8003758 <HAL_GPIO_Init+0x228>
 800373a:	2308      	movs	r3, #8
 800373c:	e00c      	b.n	8003758 <HAL_GPIO_Init+0x228>
 800373e:	2306      	movs	r3, #6
 8003740:	e00a      	b.n	8003758 <HAL_GPIO_Init+0x228>
 8003742:	2305      	movs	r3, #5
 8003744:	e008      	b.n	8003758 <HAL_GPIO_Init+0x228>
 8003746:	2304      	movs	r3, #4
 8003748:	e006      	b.n	8003758 <HAL_GPIO_Init+0x228>
 800374a:	2303      	movs	r3, #3
 800374c:	e004      	b.n	8003758 <HAL_GPIO_Init+0x228>
 800374e:	2302      	movs	r3, #2
 8003750:	e002      	b.n	8003758 <HAL_GPIO_Init+0x228>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_GPIO_Init+0x228>
 8003756:	2300      	movs	r3, #0
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f002 0203 	and.w	r2, r2, #3
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4093      	lsls	r3, r2
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003768:	4935      	ldr	r1, [pc, #212]	; (8003840 <HAL_GPIO_Init+0x310>)
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	089b      	lsrs	r3, r3, #2
 800376e:	3302      	adds	r3, #2
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_GPIO_Init+0x334>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_GPIO_Init+0x334>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_GPIO_Init+0x334>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037c4:	4a27      	ldr	r2, [pc, #156]	; (8003864 <HAL_GPIO_Init+0x334>)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_GPIO_Init+0x334>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_GPIO_Init+0x334>)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_GPIO_Init+0x334>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_GPIO_Init+0x334>)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	f67f ae90 	bls.w	800354c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3724      	adds	r7, #36	; 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	40013800 	.word	0x40013800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800
 8003850:	40020c00 	.word	0x40020c00
 8003854:	40021000 	.word	0x40021000
 8003858:	40021400 	.word	0x40021400
 800385c:	40021800 	.word	0x40021800
 8003860:	40021c00 	.word	0x40021c00
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e12b      	b.n	8003b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd f984 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0201 	bic.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003900:	f000 fd80 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8003904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4a81      	ldr	r2, [pc, #516]	; (8003b10 <HAL_I2C_Init+0x274>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d807      	bhi.n	8003920 <HAL_I2C_Init+0x84>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a80      	ldr	r2, [pc, #512]	; (8003b14 <HAL_I2C_Init+0x278>)
 8003914:	4293      	cmp	r3, r2
 8003916:	bf94      	ite	ls
 8003918:	2301      	movls	r3, #1
 800391a:	2300      	movhi	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e006      	b.n	800392e <HAL_I2C_Init+0x92>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a7d      	ldr	r2, [pc, #500]	; (8003b18 <HAL_I2C_Init+0x27c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	bf94      	ite	ls
 8003928:	2301      	movls	r3, #1
 800392a:	2300      	movhi	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0e7      	b.n	8003b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a78      	ldr	r2, [pc, #480]	; (8003b1c <HAL_I2C_Init+0x280>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a6a      	ldr	r2, [pc, #424]	; (8003b10 <HAL_I2C_Init+0x274>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d802      	bhi.n	8003970 <HAL_I2C_Init+0xd4>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3301      	adds	r3, #1
 800396e:	e009      	b.n	8003984 <HAL_I2C_Init+0xe8>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	4a69      	ldr	r2, [pc, #420]	; (8003b20 <HAL_I2C_Init+0x284>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	3301      	adds	r3, #1
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	495c      	ldr	r1, [pc, #368]	; (8003b10 <HAL_I2C_Init+0x274>)
 80039a0:	428b      	cmp	r3, r1
 80039a2:	d819      	bhi.n	80039d8 <HAL_I2C_Init+0x13c>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e59      	subs	r1, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b2:	1c59      	adds	r1, r3, #1
 80039b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80039b8:	400b      	ands	r3, r1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_I2C_Init+0x138>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1e59      	subs	r1, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039cc:	3301      	adds	r3, #1
 80039ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d2:	e051      	b.n	8003a78 <HAL_I2C_Init+0x1dc>
 80039d4:	2304      	movs	r3, #4
 80039d6:	e04f      	b.n	8003a78 <HAL_I2C_Init+0x1dc>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d111      	bne.n	8003a04 <HAL_I2C_Init+0x168>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e58      	subs	r0, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	440b      	add	r3, r1
 80039ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f2:	3301      	adds	r3, #1
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bf0c      	ite	eq
 80039fc:	2301      	moveq	r3, #1
 80039fe:	2300      	movne	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e012      	b.n	8003a2a <HAL_I2C_Init+0x18e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Init+0x196>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e022      	b.n	8003a78 <HAL_I2C_Init+0x1dc>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10e      	bne.n	8003a58 <HAL_I2C_Init+0x1bc>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1e58      	subs	r0, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6859      	ldr	r1, [r3, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	440b      	add	r3, r1
 8003a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	e00f      	b.n	8003a78 <HAL_I2C_Init+0x1dc>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	0099      	lsls	r1, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	6809      	ldr	r1, [r1, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69da      	ldr	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6911      	ldr	r1, [r2, #16]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	000186a0 	.word	0x000186a0
 8003b14:	001e847f 	.word	0x001e847f
 8003b18:	003d08ff 	.word	0x003d08ff
 8003b1c:	431bde83 	.word	0x431bde83
 8003b20:	10624dd3 	.word	0x10624dd3

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e267      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d075      	beq.n	8003c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d00c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d112      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b66:	d10b      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b68:	4b7e      	ldr	r3, [pc, #504]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05b      	beq.n	8003c2c <HAL_RCC_OscConfig+0x108>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d157      	bne.n	8003c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e242      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	d106      	bne.n	8003b98 <HAL_RCC_OscConfig+0x74>
 8003b8a:	4b76      	ldr	r3, [pc, #472]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a75      	ldr	r2, [pc, #468]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e01d      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x98>
 8003ba2:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6f      	ldr	r2, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b6d      	ldr	r3, [pc, #436]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6c      	ldr	r2, [pc, #432]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0xb0>
 8003bbc:	4b69      	ldr	r3, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a68      	ldr	r2, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fb52 	bl	8002284 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe fb4e 	bl	8002284 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e207      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0xc0>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb3e 	bl	8002284 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fe fb3a 	bl	8002284 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e1f3      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0xe8>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d063      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3a:	4b4a      	ldr	r3, [pc, #296]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c46:	4b47      	ldr	r3, [pc, #284]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d11c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b44      	ldr	r3, [pc, #272]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d116      	bne.n	8003c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5e:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1c7      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	4b3b      	ldr	r3, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4937      	ldr	r1, [pc, #220]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8a:	e03a      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d020      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fe faf3 	bl	8002284 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe faef 	bl	8002284 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e1a8      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4925      	ldr	r1, [pc, #148]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	e015      	b.n	8003d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_OscConfig+0x244>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fad2 	bl	8002284 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fe face 	bl	8002284 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e187      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d016      	beq.n	8003d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1c:	f7fe fab2 	bl	8002284 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d24:	f7fe faae 	bl	8002284 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e167      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x240>)
 8003d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x200>
 8003d42:	e01b      	b.n	8003d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_RCC_OscConfig+0x248>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4a:	f7fe fa9b 	bl	8002284 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	e00e      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fe fa97 	bl	8002284 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d907      	bls.n	8003d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e150      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	42470000 	.word	0x42470000
 8003d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b88      	ldr	r3, [pc, #544]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ea      	bne.n	8003d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8097 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b81      	ldr	r3, [pc, #516]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b7d      	ldr	r3, [pc, #500]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a7c      	ldr	r2, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b7a      	ldr	r3, [pc, #488]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b77      	ldr	r3, [pc, #476]	; (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d118      	bne.n	8003df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b74      	ldr	r3, [pc, #464]	; (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a73      	ldr	r2, [pc, #460]	; (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fa57 	bl	8002284 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fe fa53 	bl	8002284 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e10c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x474>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2ea>
 8003e00:	4b64      	ldr	r3, [pc, #400]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a63      	ldr	r2, [pc, #396]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	e01c      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x30c>
 8003e16:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a5e      	ldr	r2, [pc, #376]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	f043 0304 	orr.w	r3, r3, #4
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	4b5c      	ldr	r3, [pc, #368]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a5b      	ldr	r2, [pc, #364]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0x324>
 8003e30:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	4a57      	ldr	r2, [pc, #348]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3c:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e40:	4a54      	ldr	r2, [pc, #336]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e50:	f7fe fa18 	bl	8002284 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe fa14 	bl	8002284 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0cb      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <HAL_RCC_OscConfig+0x334>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fa02 	bl	8002284 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fe f9fe 	bl	8002284 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e0b5      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ee      	bne.n	8003e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	4a38      	ldr	r2, [pc, #224]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a1 	beq.w	8004004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec2:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d05c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d141      	bne.n	8003f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe f9d2 	bl	8002284 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe f9ce 	bl	8002284 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e087      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	061b      	lsls	r3, r3, #24
 8003f26:	491b      	ldr	r1, [pc, #108]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f32:	f7fe f9a7 	bl	8002284 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3a:	f7fe f9a3 	bl	8002284 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e05c      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x416>
 8003f58:	e054      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_OscConfig+0x478>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe f990 	bl	8002284 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe f98c 	bl	8002284 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e045      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x444>
 8003f86:	e03d      	b.n	8004004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e038      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <HAL_RCC_OscConfig+0x4ec>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d028      	beq.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d121      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d111      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0cc      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d90c      	bls.n	8004050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800408a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d119      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d003      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d107      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e067      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040f2:	4b37      	ldr	r3, [pc, #220]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f023 0203 	bic.w	r2, r3, #3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4934      	ldr	r1, [pc, #208]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004104:	f7fe f8be 	bl	8002284 <HAL_GetTick>
 8004108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	e00a      	b.n	8004122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800410c:	f7fe f8ba 	bl	8002284 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	; 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e04f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 020c 	and.w	r2, r3, #12
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d1eb      	bne.n	800410c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d20c      	bcs.n	800415c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b22      	ldr	r3, [pc, #136]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	4313      	orrs	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4602      	mov	r2, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	490a      	ldr	r1, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	5ccb      	ldrb	r3, [r1, r3]
 80041ae:	fa22 f303 	lsr.w	r3, r2, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe f81e 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023c00 	.word	0x40023c00
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08009c40 	.word	0x08009c40
 80041d8:	20000008 	.word	0x20000008
 80041dc:	2000000c 	.word	0x2000000c

080041e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b094      	sub	sp, #80	; 0x50
 80041e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
 80041ec:	2300      	movs	r3, #0
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	2300      	movs	r3, #0
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f8:	4b79      	ldr	r3, [pc, #484]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	d00d      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x40>
 8004204:	2b08      	cmp	r3, #8
 8004206:	f200 80e1 	bhi.w	80043cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_RCC_GetSysClockFreq+0x34>
 800420e:	2b04      	cmp	r3, #4
 8004210:	d003      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x3a>
 8004212:	e0db      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004216:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004218:	e0db      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800421a:	4b73      	ldr	r3, [pc, #460]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800421c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421e:	e0d8      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800422a:	4b6d      	ldr	r3, [pc, #436]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d063      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004236:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	099b      	lsrs	r3, r3, #6
 800423c:	2200      	movs	r2, #0
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	2300      	movs	r3, #0
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004252:	4622      	mov	r2, r4
 8004254:	462b      	mov	r3, r5
 8004256:	f04f 0000 	mov.w	r0, #0
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	0159      	lsls	r1, r3, #5
 8004260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004264:	0150      	lsls	r0, r2, #5
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4621      	mov	r1, r4
 800426c:	1a51      	subs	r1, r2, r1
 800426e:	6139      	str	r1, [r7, #16]
 8004270:	4629      	mov	r1, r5
 8004272:	eb63 0301 	sbc.w	r3, r3, r1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004284:	4659      	mov	r1, fp
 8004286:	018b      	lsls	r3, r1, #6
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428e:	4651      	mov	r1, sl
 8004290:	018a      	lsls	r2, r1, #6
 8004292:	4651      	mov	r1, sl
 8004294:	ebb2 0801 	subs.w	r8, r2, r1
 8004298:	4659      	mov	r1, fp
 800429a:	eb63 0901 	sbc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	462b      	mov	r3, r5
 80042c0:	eb49 0303 	adc.w	r3, r9, r3
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042d2:	4629      	mov	r1, r5
 80042d4:	024b      	lsls	r3, r1, #9
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042dc:	4621      	mov	r1, r4
 80042de:	024a      	lsls	r2, r1, #9
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	2200      	movs	r2, #0
 80042e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042f0:	f7fb ff6a 	bl	80001c8 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	e058      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b38      	ldr	r3, [pc, #224]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	2200      	movs	r2, #0
 8004306:	4618      	mov	r0, r3
 8004308:	4611      	mov	r1, r2
 800430a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0159      	lsls	r1, r3, #5
 8004326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800432a:	0150      	lsls	r0, r2, #5
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4641      	mov	r1, r8
 8004332:	ebb2 0a01 	subs.w	sl, r2, r1
 8004336:	4649      	mov	r1, r9
 8004338:	eb63 0b01 	sbc.w	fp, r3, r1
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800434c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004350:	ebb2 040a 	subs.w	r4, r2, sl
 8004354:	eb63 050b 	sbc.w	r5, r3, fp
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	00eb      	lsls	r3, r5, #3
 8004362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004366:	00e2      	lsls	r2, r4, #3
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	4643      	mov	r3, r8
 800436e:	18e3      	adds	r3, r4, r3
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	464b      	mov	r3, r9
 8004374:	eb45 0303 	adc.w	r3, r5, r3
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004386:	4629      	mov	r1, r5
 8004388:	028b      	lsls	r3, r1, #10
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004390:	4621      	mov	r1, r4
 8004392:	028a      	lsls	r2, r1, #10
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	2200      	movs	r2, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	61fa      	str	r2, [r7, #28]
 80043a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a4:	f7fb ff10 	bl	80001c8 <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3750      	adds	r7, #80	; 0x50
 80043d8:	46bd      	mov	sp, r7
 80043da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000008 	.word	0x20000008

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a9b      	lsrs	r3, r3, #10
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	08009c50 	.word	0x08009c50

0800442c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004430:	f7ff ffdc 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0b5b      	lsrs	r3, r3, #13
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4903      	ldr	r1, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004448:	4618      	mov	r0, r3
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	08009c50 	.word	0x08009c50

08004454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07b      	b.n	800455e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d009      	beq.n	800448c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	61da      	str	r2, [r3, #28]
 800447e:	e005      	b.n	800448c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fd fab0 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	ea42 0103 	orr.w	r1, r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0104 	and.w	r1, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	f003 0210 	and.w	r2, r3, #16
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_SPI_Transmit+0x22>
 8004584:	2302      	movs	r3, #2
 8004586:	e126      	b.n	80047d6 <HAL_SPI_Transmit+0x270>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004590:	f7fd fe78 	bl	8002284 <HAL_GetTick>
 8004594:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d002      	beq.n	80045ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
 80045a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045aa:	e10b      	b.n	80047c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_SPI_Transmit+0x52>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045bc:	e102      	b.n	80047c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2203      	movs	r2, #3
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004604:	d10f      	bne.n	8004626 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d007      	beq.n	8004644 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464c:	d14b      	bne.n	80046e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_SPI_Transmit+0xf6>
 8004656:	8afb      	ldrh	r3, [r7, #22]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d13e      	bne.n	80046da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004680:	e02b      	b.n	80046da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b02      	cmp	r3, #2
 800468e:	d112      	bne.n	80046b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	881a      	ldrh	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b4:	e011      	b.n	80046da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b6:	f7fd fde5 	bl	8002284 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d803      	bhi.n	80046ce <HAL_SPI_Transmit+0x168>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d102      	bne.n	80046d4 <HAL_SPI_Transmit+0x16e>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d8:	e074      	b.n	80047c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ce      	bne.n	8004682 <HAL_SPI_Transmit+0x11c>
 80046e4:	e04c      	b.n	8004780 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_SPI_Transmit+0x18e>
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d140      	bne.n	8004776 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800471a:	e02c      	b.n	8004776 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d113      	bne.n	8004752 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004750:	e011      	b.n	8004776 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004752:	f7fd fd97 	bl	8002284 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d803      	bhi.n	800476a <HAL_SPI_Transmit+0x204>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d102      	bne.n	8004770 <HAL_SPI_Transmit+0x20a>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d102      	bne.n	8004776 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004774:	e026      	b.n	80047c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1cd      	bne.n	800471c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	6839      	ldr	r1, [r7, #0]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f8b3 	bl	80048f0 <SPI_EndRxTxTransaction>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10a      	bne.n	80047b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e000      	b.n	80047c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3720      	adds	r7, #32
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047f0:	f7fd fd48 	bl	8002284 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004800:	f7fd fd40 	bl	8002284 <HAL_GetTick>
 8004804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	0d1b      	lsrs	r3, r3, #20
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004816:	e054      	b.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d050      	beq.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004820:	f7fd fd30 	bl	8002284 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	429a      	cmp	r2, r3
 800482e:	d902      	bls.n	8004836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13d      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484e:	d111      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	d004      	beq.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	d107      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800487c:	d10f      	bne.n	800489e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800489c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e017      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	3b01      	subs	r3, #1
 80048c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d19b      	bne.n	8004818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000008 	.word	0x20000008

080048f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048fc:	4b1b      	ldr	r3, [pc, #108]	; (800496c <SPI_EndRxTxTransaction+0x7c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1b      	ldr	r2, [pc, #108]	; (8004970 <SPI_EndRxTxTransaction+0x80>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0d5b      	lsrs	r3, r3, #21
 8004908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491a:	d112      	bne.n	8004942 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2200      	movs	r2, #0
 8004924:	2180      	movs	r1, #128	; 0x80
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff ff5a 	bl	80047e0 <SPI_WaitFlagStateUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d016      	beq.n	8004960 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e00f      	b.n	8004962 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	3b01      	subs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004958:	2b80      	cmp	r3, #128	; 0x80
 800495a:	d0f2      	beq.n	8004942 <SPI_EndRxTxTransaction+0x52>
 800495c:	e000      	b.n	8004960 <SPI_EndRxTxTransaction+0x70>
        break;
 800495e:	bf00      	nop
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000008 	.word	0x20000008
 8004970:	165e9f81 	.word	0x165e9f81

08004974 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e038      	b.n	80049fc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7fb ffa4 	bl	80008ec <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3308      	adds	r3, #8
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f002 f856 	bl	8006a60 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	461a      	mov	r2, r3
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	f002 f8b8 	bl	8006b34 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6858      	ldr	r0, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	f002 f8e5 	bl	8006ba0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	6892      	ldr	r2, [r2, #8]
 80049de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	6892      	ldr	r2, [r2, #8]
 80049ea:	f041 0101 	orr.w	r1, r1, #1
 80049ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e041      	b.n	8004a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fd f9ac 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f000 fc1a 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e046      	b.n	8004b4a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	; (8004b58 <HAL_TIM_Base_Start+0xb4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d01d      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <HAL_TIM_Base_Start+0xb8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <HAL_TIM_Base_Start+0xbc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1c      	ldr	r2, [pc, #112]	; (8004b64 <HAL_TIM_Base_Start+0xc0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	; (8004b68 <HAL_TIM_Base_Start+0xc4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <HAL_TIM_Base_Start+0xc8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_TIM_Base_Start+0x70>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_TIM_Base_Start+0xcc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d010      	beq.n	8004b48 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e007      	b.n	8004b48 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40001800 	.word	0x40001800

08004b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d001      	beq.n	8004b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e04e      	b.n	8004c2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d022      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1f      	ldr	r2, [pc, #124]	; (8004c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d018      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	; (8004c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d013      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1c      	ldr	r2, [pc, #112]	; (8004c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a18      	ldr	r2, [pc, #96]	; (8004c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d111      	bne.n	8004c18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b06      	cmp	r3, #6
 8004c04:	d010      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	e007      	b.n	8004c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40010000 	.word	0x40010000
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	40010400 	.word	0x40010400
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40001800 	.word	0x40001800

08004c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e041      	b.n	8004cea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f839 	bl	8004cf2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 faf2 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d122      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d11b      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0202 	mvn.w	r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fa78 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fa6a 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa7b 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d122      	bne.n	8004db6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d11b      	bne.n	8004db6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0204 	mvn.w	r2, #4
 8004d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fa4e 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8004da2:	e005      	b.n	8004db0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa40 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa51 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d122      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d11b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0208 	mvn.w	r2, #8
 8004dda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2204      	movs	r2, #4
 8004de0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa24 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8004df6:	e005      	b.n	8004e04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa16 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fa27 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d122      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d11b      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f06f 0210 	mvn.w	r2, #16
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2208      	movs	r2, #8
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9fa 	bl	800523e <HAL_TIM_IC_CaptureCallback>
 8004e4a:	e005      	b.n	8004e58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9ec 	bl	800522a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9fd 	bl	8005252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10e      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0201 	mvn.w	r2, #1
 8004e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fc fd61 	bl	800194c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d10e      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d107      	bne.n	8004eb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fd53 	bl	800595c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d10e      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d107      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9c2 	bl	8005266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d10e      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d107      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f06f 0220 	mvn.w	r2, #32
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fd1d 	bl	8005948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0ae      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	f200 809f 	bhi.w	8005084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f46:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08005085 	.word	0x08005085
 8004f54:	08005085 	.word	0x08005085
 8004f58:	08005085 	.word	0x08005085
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08005085 	.word	0x08005085
 8004f64:	08005085 	.word	0x08005085
 8004f68:	08005085 	.word	0x08005085
 8004f6c:	08005003 	.word	0x08005003
 8004f70:	08005085 	.word	0x08005085
 8004f74:	08005085 	.word	0x08005085
 8004f78:	08005085 	.word	0x08005085
 8004f7c:	08005043 	.word	0x08005043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fa18 	bl	80053bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	619a      	str	r2, [r3, #24]
      break;
 8004fbe:	e064      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fa68 	bl	800549c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	619a      	str	r2, [r3, #24]
      break;
 8005000:	e043      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fabd 	bl	8005588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0204 	bic.w	r2, r2, #4
 800502c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      break;
 8005040:	e023      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fb11 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	61da      	str	r2, [r3, #28]
      break;
 8005082:	e002      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      break;
 8005088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_ConfigClockSource+0x1c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0b4      	b.n	8005222 <HAL_TIM_ConfigClockSource+0x186>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d03e      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0xd4>
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	f200 8087 	bhi.w	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	f000 8086 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x172>
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d87f      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b70      	cmp	r3, #112	; 0x70
 800510a:	d01a      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0xa6>
 800510c:	2b70      	cmp	r3, #112	; 0x70
 800510e:	d87b      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b60      	cmp	r3, #96	; 0x60
 8005112:	d050      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005114:	2b60      	cmp	r3, #96	; 0x60
 8005116:	d877      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b50      	cmp	r3, #80	; 0x50
 800511a:	d03c      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xfa>
 800511c:	2b50      	cmp	r3, #80	; 0x50
 800511e:	d873      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d058      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d86f      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b30      	cmp	r3, #48	; 0x30
 800512a:	d064      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d86b      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005130:	2b20      	cmp	r3, #32
 8005132:	d060      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d867      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05c      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 800513c:	2b10      	cmp	r3, #16
 800513e:	d05a      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	e062      	b.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f000 fb5d 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	609a      	str	r2, [r3, #8]
      break;
 800516e:	e04f      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f000 fb46 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005192:	609a      	str	r2, [r3, #8]
      break;
 8005194:	e03c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f000 faba 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2150      	movs	r1, #80	; 0x50
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fb13 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80051b4:	e02c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f000 fad9 	bl	800577a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2160      	movs	r1, #96	; 0x60
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb03 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80051d4:	e01c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 fa9a 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 faf3 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 80051f4:	e00c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f000 faea 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005206:	e003      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	e000      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800520e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <TIM_Base_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_Base_SetConfig+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001800 	.word	0x40001800
 80053b4:	40001c00 	.word	0x40001c00
 80053b8:	40002000 	.word	0x40002000

080053bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0302 	bic.w	r3, r3, #2
 8005404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a20      	ldr	r2, [pc, #128]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC1_SetConfig+0x64>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10c      	bne.n	800543a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0308 	bic.w	r3, r3, #8
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC1_SetConfig+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a14      	ldr	r2, [pc, #80]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d111      	bne.n	800546e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000
 8005498:	40010400 	.word	0x40010400

0800549c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0210 	bic.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0320 	bic.w	r3, r3, #32
 80054e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x68>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10d      	bne.n	8005520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC2_SetConfig+0x94>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d113      	bne.n	8005558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x66>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC3_SetConfig+0x92>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <TIM_OC4_SetConfig+0xa4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC4_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a11      	ldr	r2, [pc, #68]	; (8005718 <TIM_OC4_SetConfig+0xa8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d109      	bne.n	80056ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 030a 	bic.w	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0210 	bic.w	r2, r3, #16
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	031b      	lsls	r3, r3, #12
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	431a      	orrs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005864:	2302      	movs	r3, #2
 8005866:	e05a      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b4:	d01d      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1a      	ldr	r2, [pc, #104]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a18      	ldr	r2, [pc, #96]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a15      	ldr	r2, [pc, #84]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10c      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e03f      	b.n	8005a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fb58 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2224      	movs	r2, #36	; 0x24
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fddf 	bl	8006578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695a      	ldr	r2, [r3, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3708      	adds	r7, #8
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b08a      	sub	sp, #40	; 0x28
 8005a0e:	af02      	add	r7, sp, #8
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d17c      	bne.n	8005b24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_UART_Transmit+0x2c>
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e075      	b.n	8005b26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Transmit+0x3e>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e06e      	b.n	8005b26 <HAL_UART_Transmit+0x11c>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2221      	movs	r2, #33	; 0x21
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5e:	f7fc fc11 	bl	8002284 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	88fa      	ldrh	r2, [r7, #6]
 8005a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d108      	bne.n	8005a8c <HAL_UART_Transmit+0x82>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	e003      	b.n	8005a94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a9c:	e02a      	b.n	8005af4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fb1f 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e036      	b.n	8005b26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	3302      	adds	r3, #2
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	e007      	b.n	8005ae6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b01      	subs	r3, #1
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1cf      	bne.n	8005a9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	2140      	movs	r1, #64	; 0x40
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f000 faef 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e006      	b.n	8005b26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e000      	b.n	8005b26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b24:	2302      	movs	r3, #2
  }
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d11d      	bne.n	8005b84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_UART_Receive_IT+0x26>
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e016      	b.n	8005b86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Receive_IT+0x38>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e00f      	b.n	8005b86 <HAL_UART_Receive_IT+0x58>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	461a      	mov	r2, r3
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fb24 	bl	80061c8 <UART_Start_Receive_IT>
 8005b80:	4603      	mov	r3, r0
 8005b82:	e000      	b.n	8005b86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b0ba      	sub	sp, #232	; 0xe8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10f      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x66>
 8005be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fc07 	bl	8006402 <UART_Receive_IT>
      return;
 8005bf4:	e256      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80de 	beq.w	8005dbc <HAL_UART_IRQHandler+0x22c>
 8005c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 80d1 	beq.w	8005dbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_UART_IRQHandler+0xae>
 8005c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_UART_IRQHandler+0xd2>
 8005c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	f043 0202 	orr.w	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_UART_IRQHandler+0xf6>
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d011      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x126>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d105      	bne.n	8005caa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f043 0208 	orr.w	r2, r3, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 81ed 	beq.w	800609a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_UART_IRQHandler+0x14e>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fb92 	bl	8006402 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	bf0c      	ite	eq
 8005cec:	2301      	moveq	r3, #1
 8005cee:	2300      	movne	r3, #0
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 0308 	and.w	r3, r3, #8
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <HAL_UART_IRQHandler+0x17a>
 8005d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04f      	beq.n	8005daa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa9a 	bl	8006244 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d141      	bne.n	8005da2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3314      	adds	r3, #20
 8005d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1d9      	bne.n	8005d1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d013      	beq.n	8005d9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4a7d      	ldr	r2, [pc, #500]	; (8005f6c <HAL_UART_IRQHandler+0x3dc>)
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd f94a 	bl	8003018 <HAL_DMA_Abort_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e00e      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f990 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	e00a      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f98c 	bl	80060c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da8:	e006      	b.n	8005db8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f988 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005db6:	e170      	b.n	800609a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db8:	bf00      	nop
    return;
 8005dba:	e16e      	b.n	800609a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 814a 	bne.w	800605a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8143 	beq.w	800605a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 813c 	beq.w	800605a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	f040 80b4 	bne.w	8005f70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8140 	beq.w	800609e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e26:	429a      	cmp	r2, r3
 8005e28:	f080 8139 	bcs.w	800609e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	f000 8088 	beq.w	8005f52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	330c      	adds	r3, #12
 8005e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e1      	bne.n	8005e8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e3      	bne.n	8005eca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f22:	f023 0310 	bic.w	r3, r3, #16
 8005f26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f34:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e3      	bne.n	8005f10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fc fff3 	bl	8002f38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8b6 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f68:	e099      	b.n	800609e <HAL_UART_IRQHandler+0x50e>
 8005f6a:	bf00      	nop
 8005f6c:	0800630b 	.word	0x0800630b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 808b 	beq.w	80060a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8086 	beq.w	80060a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fba:	647a      	str	r2, [r7, #68]	; 0x44
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3314      	adds	r3, #20
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f023 0301 	bic.w	r3, r3, #1
 8005fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ff2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e3      	bne.n	8005fce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	e853 3f00 	ldrex	r3, [r3]
 8006022:	60fb      	str	r3, [r7, #12]
   return(result);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0310 	bic.w	r3, r3, #16
 800602a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006038:	61fa      	str	r2, [r7, #28]
 800603a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	617b      	str	r3, [r7, #20]
   return(result);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e3      	bne.n	8006014 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800604c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f83e 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006058:	e023      	b.n	80060a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_UART_IRQHandler+0x4ea>
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f95d 	bl	8006332 <UART_Transmit_IT>
    return;
 8006078:	e014      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <HAL_UART_IRQHandler+0x514>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f99d 	bl	80063d2 <UART_EndTransmit_IT>
    return;
 8006098:	e004      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
    return;
 800609a:	bf00      	nop
 800609c:	e002      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
      return;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_UART_IRQHandler+0x514>
      return;
 80060a2:	bf00      	nop
  }
}
 80060a4:	37e8      	adds	r7, #232	; 0xe8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b090      	sub	sp, #64	; 0x40
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	4613      	mov	r3, r2
 80060fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	e050      	b.n	80061a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d04c      	beq.n	80061a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0x30>
 800610c:	f7fc f8ba 	bl	8002284 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006118:	429a      	cmp	r2, r3
 800611a:	d241      	bcs.n	80061a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800613c:	637a      	str	r2, [r7, #52]	; 0x34
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800614a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	63bb      	str	r3, [r7, #56]	; 0x38
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006170:	623a      	str	r2, [r7, #32]
 8006172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	61bb      	str	r3, [r7, #24]
   return(result);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e00f      	b.n	80061c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	4013      	ands	r3, r2
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d09f      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3740      	adds	r7, #64	; 0x40
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2222      	movs	r2, #34	; 0x22
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006214:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0220 	orr.w	r2, r2, #32
 8006234:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b095      	sub	sp, #84	; 0x54
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800626c:	643a      	str	r2, [r7, #64]	; 0x40
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006272:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	64bb      	str	r3, [r7, #72]	; 0x48
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d119      	bne.n	80062f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	330c      	adds	r3, #12
 80062c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 0310 	bic.w	r3, r3, #16
 80062d2:	647b      	str	r3, [r7, #68]	; 0x44
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062dc:	61ba      	str	r2, [r7, #24]
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	6979      	ldr	r1, [r7, #20]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062fe:	bf00      	nop
 8006300:	3754      	adds	r7, #84	; 0x54
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b084      	sub	sp, #16
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f7ff fecb 	bl	80060c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b21      	cmp	r3, #33	; 0x21
 8006344:	d13e      	bne.n	80063c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634e:	d114      	bne.n	800637a <UART_Transmit_IT+0x48>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d110      	bne.n	800637a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800636c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]
 8006378:	e008      	b.n	800638c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6211      	str	r1, [r2, #32]
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10f      	bne.n	80063c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	e000      	b.n	80063c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
  }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7ff fe5a 	bl	80060ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b08c      	sub	sp, #48	; 0x30
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b22      	cmp	r3, #34	; 0x22
 8006414:	f040 80ab 	bne.w	800656e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d117      	bne.n	8006452 <UART_Receive_IT+0x50>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d113      	bne.n	8006452 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	b29a      	uxth	r2, r3
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	1c9a      	adds	r2, r3, #2
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	629a      	str	r2, [r3, #40]	; 0x28
 8006450:	e026      	b.n	80064a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006464:	d007      	beq.n	8006476 <UART_Receive_IT+0x74>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <UART_Receive_IT+0x82>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e008      	b.n	8006496 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	b2da      	uxtb	r2, r3
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4619      	mov	r1, r3
 80064ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d15a      	bne.n	800656a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0220 	bic.w	r2, r2, #32
 80064c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0201 	bic.w	r2, r2, #1
 80064e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d135      	bne.n	8006560 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	330c      	adds	r3, #12
 8006500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	613b      	str	r3, [r7, #16]
   return(result);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	623a      	str	r2, [r7, #32]
 800651c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	69f9      	ldr	r1, [r7, #28]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	61bb      	str	r3, [r7, #24]
   return(result);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e5      	bne.n	80064fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d10a      	bne.n	8006552 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fdbb 	bl	80060d4 <HAL_UARTEx_RxEventCallback>
 800655e:	e002      	b.n	8006566 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fb fcc5 	bl	8001ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e002      	b.n	8006570 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3730      	adds	r7, #48	; 0x30
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800657c:	b0c0      	sub	sp, #256	; 0x100
 800657e:	af00      	add	r7, sp, #0
 8006580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	68d9      	ldr	r1, [r3, #12]
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	ea40 0301 	orr.w	r3, r0, r1
 80065a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065d0:	f021 010c 	bic.w	r1, r1, #12
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065de:	430b      	orrs	r3, r1
 80065e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f2:	6999      	ldr	r1, [r3, #24]
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	ea40 0301 	orr.w	r3, r0, r1
 80065fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b8f      	ldr	r3, [pc, #572]	; (8006844 <UART_SetConfig+0x2cc>)
 8006608:	429a      	cmp	r2, r3
 800660a:	d005      	beq.n	8006618 <UART_SetConfig+0xa0>
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b8d      	ldr	r3, [pc, #564]	; (8006848 <UART_SetConfig+0x2d0>)
 8006614:	429a      	cmp	r2, r3
 8006616:	d104      	bne.n	8006622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fd ff08 	bl	800442c <HAL_RCC_GetPCLK2Freq>
 800661c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006620:	e003      	b.n	800662a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006622:	f7fd feef 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 8006626:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006634:	f040 810c 	bne.w	8006850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663c:	2200      	movs	r2, #0
 800663e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006642:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	1891      	adds	r1, r2, r2
 8006650:	65b9      	str	r1, [r7, #88]	; 0x58
 8006652:	415b      	adcs	r3, r3
 8006654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800665a:	4621      	mov	r1, r4
 800665c:	eb12 0801 	adds.w	r8, r2, r1
 8006660:	4629      	mov	r1, r5
 8006662:	eb43 0901 	adc.w	r9, r3, r1
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800667a:	4690      	mov	r8, r2
 800667c:	4699      	mov	r9, r3
 800667e:	4623      	mov	r3, r4
 8006680:	eb18 0303 	adds.w	r3, r8, r3
 8006684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006688:	462b      	mov	r3, r5
 800668a:	eb49 0303 	adc.w	r3, r9, r3
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800669e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066a6:	460b      	mov	r3, r1
 80066a8:	18db      	adds	r3, r3, r3
 80066aa:	653b      	str	r3, [r7, #80]	; 0x50
 80066ac:	4613      	mov	r3, r2
 80066ae:	eb42 0303 	adc.w	r3, r2, r3
 80066b2:	657b      	str	r3, [r7, #84]	; 0x54
 80066b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066bc:	f7f9 fd84 	bl	80001c8 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4b61      	ldr	r3, [pc, #388]	; (800684c <UART_SetConfig+0x2d4>)
 80066c6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	011c      	lsls	r4, r3, #4
 80066ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80066e8:	415b      	adcs	r3, r3
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066f0:	4641      	mov	r1, r8
 80066f2:	eb12 0a01 	adds.w	sl, r2, r1
 80066f6:	4649      	mov	r1, r9
 80066f8:	eb43 0b01 	adc.w	fp, r3, r1
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800670c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006710:	4692      	mov	sl, r2
 8006712:	469b      	mov	fp, r3
 8006714:	4643      	mov	r3, r8
 8006716:	eb1a 0303 	adds.w	r3, sl, r3
 800671a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800671e:	464b      	mov	r3, r9
 8006720:	eb4b 0303 	adc.w	r3, fp, r3
 8006724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006734:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800673c:	460b      	mov	r3, r1
 800673e:	18db      	adds	r3, r3, r3
 8006740:	643b      	str	r3, [r7, #64]	; 0x40
 8006742:	4613      	mov	r3, r2
 8006744:	eb42 0303 	adc.w	r3, r2, r3
 8006748:	647b      	str	r3, [r7, #68]	; 0x44
 800674a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800674e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006752:	f7f9 fd39 	bl	80001c8 <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4611      	mov	r1, r2
 800675c:	4b3b      	ldr	r3, [pc, #236]	; (800684c <UART_SetConfig+0x2d4>)
 800675e:	fba3 2301 	umull	r2, r3, r3, r1
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	2264      	movs	r2, #100	; 0x64
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	1acb      	subs	r3, r1, r3
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006772:	4b36      	ldr	r3, [pc, #216]	; (800684c <UART_SetConfig+0x2d4>)
 8006774:	fba3 2302 	umull	r2, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006780:	441c      	add	r4, r3
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006786:	2200      	movs	r2, #0
 8006788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800678c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	1891      	adds	r1, r2, r2
 800679a:	63b9      	str	r1, [r7, #56]	; 0x38
 800679c:	415b      	adcs	r3, r3
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067a4:	4641      	mov	r1, r8
 80067a6:	1851      	adds	r1, r2, r1
 80067a8:	6339      	str	r1, [r7, #48]	; 0x30
 80067aa:	4649      	mov	r1, r9
 80067ac:	414b      	adcs	r3, r1
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067bc:	4659      	mov	r1, fp
 80067be:	00cb      	lsls	r3, r1, #3
 80067c0:	4651      	mov	r1, sl
 80067c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c6:	4651      	mov	r1, sl
 80067c8:	00ca      	lsls	r2, r1, #3
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	4642      	mov	r2, r8
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067d8:	464b      	mov	r3, r9
 80067da:	460a      	mov	r2, r1
 80067dc:	eb42 0303 	adc.w	r3, r2, r3
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067f8:	460b      	mov	r3, r1
 80067fa:	18db      	adds	r3, r3, r3
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067fe:	4613      	mov	r3, r2
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800680a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800680e:	f7f9 fcdb 	bl	80001c8 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <UART_SetConfig+0x2d4>)
 8006818:	fba3 1302 	umull	r1, r3, r3, r2
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	2164      	movs	r1, #100	; 0x64
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	3332      	adds	r3, #50	; 0x32
 800682a:	4a08      	ldr	r2, [pc, #32]	; (800684c <UART_SetConfig+0x2d4>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f003 0207 	and.w	r2, r3, #7
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4422      	add	r2, r4
 800683e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006840:	e105      	b.n	8006a4e <UART_SetConfig+0x4d6>
 8006842:	bf00      	nop
 8006844:	40011000 	.word	0x40011000
 8006848:	40011400 	.word	0x40011400
 800684c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800685a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800685e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006862:	4642      	mov	r2, r8
 8006864:	464b      	mov	r3, r9
 8006866:	1891      	adds	r1, r2, r2
 8006868:	6239      	str	r1, [r7, #32]
 800686a:	415b      	adcs	r3, r3
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
 800686e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006872:	4641      	mov	r1, r8
 8006874:	1854      	adds	r4, r2, r1
 8006876:	4649      	mov	r1, r9
 8006878:	eb43 0501 	adc.w	r5, r3, r1
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	00eb      	lsls	r3, r5, #3
 8006886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800688a:	00e2      	lsls	r2, r4, #3
 800688c:	4614      	mov	r4, r2
 800688e:	461d      	mov	r5, r3
 8006890:	4643      	mov	r3, r8
 8006892:	18e3      	adds	r3, r4, r3
 8006894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006898:	464b      	mov	r3, r9
 800689a:	eb45 0303 	adc.w	r3, r5, r3
 800689e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068be:	4629      	mov	r1, r5
 80068c0:	008b      	lsls	r3, r1, #2
 80068c2:	4621      	mov	r1, r4
 80068c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c8:	4621      	mov	r1, r4
 80068ca:	008a      	lsls	r2, r1, #2
 80068cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068d0:	f7f9 fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4b60      	ldr	r3, [pc, #384]	; (8006a5c <UART_SetConfig+0x4e4>)
 80068da:	fba3 2302 	umull	r2, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	011c      	lsls	r4, r3, #4
 80068e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068f4:	4642      	mov	r2, r8
 80068f6:	464b      	mov	r3, r9
 80068f8:	1891      	adds	r1, r2, r2
 80068fa:	61b9      	str	r1, [r7, #24]
 80068fc:	415b      	adcs	r3, r3
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006904:	4641      	mov	r1, r8
 8006906:	1851      	adds	r1, r2, r1
 8006908:	6139      	str	r1, [r7, #16]
 800690a:	4649      	mov	r1, r9
 800690c:	414b      	adcs	r3, r1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800691c:	4659      	mov	r1, fp
 800691e:	00cb      	lsls	r3, r1, #3
 8006920:	4651      	mov	r1, sl
 8006922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006926:	4651      	mov	r1, sl
 8006928:	00ca      	lsls	r2, r1, #3
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	4603      	mov	r3, r0
 8006930:	4642      	mov	r2, r8
 8006932:	189b      	adds	r3, r3, r2
 8006934:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006938:	464b      	mov	r3, r9
 800693a:	460a      	mov	r2, r1
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	67bb      	str	r3, [r7, #120]	; 0x78
 800694e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800695c:	4649      	mov	r1, r9
 800695e:	008b      	lsls	r3, r1, #2
 8006960:	4641      	mov	r1, r8
 8006962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006966:	4641      	mov	r1, r8
 8006968:	008a      	lsls	r2, r1, #2
 800696a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800696e:	f7f9 fc2b 	bl	80001c8 <__aeabi_uldivmod>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <UART_SetConfig+0x4e4>)
 8006978:	fba3 1302 	umull	r1, r3, r3, r2
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	2164      	movs	r1, #100	; 0x64
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	3332      	adds	r3, #50	; 0x32
 800698a:	4a34      	ldr	r2, [pc, #208]	; (8006a5c <UART_SetConfig+0x4e4>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006996:	441c      	add	r4, r3
 8006998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800699c:	2200      	movs	r2, #0
 800699e:	673b      	str	r3, [r7, #112]	; 0x70
 80069a0:	677a      	str	r2, [r7, #116]	; 0x74
 80069a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	1891      	adds	r1, r2, r2
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	415b      	adcs	r3, r3
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069b6:	4641      	mov	r1, r8
 80069b8:	1851      	adds	r1, r2, r1
 80069ba:	6039      	str	r1, [r7, #0]
 80069bc:	4649      	mov	r1, r9
 80069be:	414b      	adcs	r3, r1
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069ce:	4659      	mov	r1, fp
 80069d0:	00cb      	lsls	r3, r1, #3
 80069d2:	4651      	mov	r1, sl
 80069d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069d8:	4651      	mov	r1, sl
 80069da:	00ca      	lsls	r2, r1, #3
 80069dc:	4610      	mov	r0, r2
 80069de:	4619      	mov	r1, r3
 80069e0:	4603      	mov	r3, r0
 80069e2:	4642      	mov	r2, r8
 80069e4:	189b      	adds	r3, r3, r2
 80069e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e8:	464b      	mov	r3, r9
 80069ea:	460a      	mov	r2, r1
 80069ec:	eb42 0303 	adc.w	r3, r2, r3
 80069f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	663b      	str	r3, [r7, #96]	; 0x60
 80069fc:	667a      	str	r2, [r7, #100]	; 0x64
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	008b      	lsls	r3, r1, #2
 8006a0e:	4641      	mov	r1, r8
 8006a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a14:	4641      	mov	r1, r8
 8006a16:	008a      	lsls	r2, r1, #2
 8006a18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a1c:	f7f9 fbd4 	bl	80001c8 <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <UART_SetConfig+0x4e4>)
 8006a26:	fba3 1302 	umull	r1, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	2164      	movs	r1, #100	; 0x64
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	3332      	adds	r3, #50	; 0x32
 8006a38:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <UART_SetConfig+0x4e4>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4422      	add	r2, r4
 8006a4c:	609a      	str	r2, [r3, #8]
}
 8006a4e:	bf00      	nop
 8006a50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a54:	46bd      	mov	sp, r7
 8006a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5a:	bf00      	nop
 8006a5c:	51eb851f 	.word	0x51eb851f

08006a60 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	f023 0101 	bic.w	r1, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d102      	bne.n	8006a90 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	e001      	b.n	8006a94 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006aa0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006aa6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006aac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006ab2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006ab8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006abe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006ac4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006aca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006ad0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006aee:	4b10      	ldr	r3, [pc, #64]	; (8006b30 <FSMC_NORSRAM_Init+0xd0>)
 8006af0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006af8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006b00:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	ea02 0103 	and.w	r1, r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4319      	orrs	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	0008fb7f 	.word	0x0008fb7f

08006b34 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	011b      	lsls	r3, r3, #4
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	431a      	orrs	r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	041b      	lsls	r3, r3, #16
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	051b      	lsls	r3, r3, #20
 8006b72:	431a      	orrs	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	3b02      	subs	r3, #2
 8006b7a:	061b      	lsls	r3, r3, #24
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	3201      	adds	r2, #1
 8006b88:	4319      	orrs	r1, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
	...

08006ba0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb4:	d11d      	bne.n	8006bf2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	6811      	ldr	r1, [r2, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	6852      	ldr	r2, [r2, #4]
 8006bca:	0112      	lsls	r2, r2, #4
 8006bcc:	4311      	orrs	r1, r2
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	6892      	ldr	r2, [r2, #8]
 8006bd2:	0212      	lsls	r2, r2, #8
 8006bd4:	4311      	orrs	r1, r2
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	6992      	ldr	r2, [r2, #24]
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	68d2      	ldr	r2, [r2, #12]
 8006be0:	0412      	lsls	r2, r2, #16
 8006be2:	430a      	orrs	r2, r1
 8006be4:	ea43 0102 	orr.w	r1, r3, r2
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bf0:	e005      	b.n	8006bfe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	cff00000 	.word	0xcff00000

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	; (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	; (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	; (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	; (8006c54 <__libc_init_array+0x44>)
 8006c24:	f000 f820 	bl	8006c68 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08009c68 	.word	0x08009c68
 8006c4c:	08009c68 	.word	0x08009c68
 8006c50:	08009c68 	.word	0x08009c68
 8006c54:	08009c6c 	.word	0x08009c6c

08006c58 <memset>:
 8006c58:	4402      	add	r2, r0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
