
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f18  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d0  0800b8d0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d0  0800b8d0  0001b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8d8  0800b8d8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800b8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          00000198  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001379e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002de2  00000000  00000000  000337f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  000365d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000da8  00000000  00000000  00037500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229d9  00000000  00000000  000382a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d71  00000000  00000000  0005ac81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd28a  00000000  00000000  0006f9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cc7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ce8  00000000  00000000  0013ccd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049a0 	.word	0x080049a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080049a0 	.word	0x080049a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fa83 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fa76 	bl	80029e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fa71 	bl	80029e4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f003 f8a4 	bl	8003656 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000040 	.word	0x20000040
 80005b8:	20000108 	.word	0x20000108
 80005bc:	2000005c 	.word	0x2000005c

080005c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	; 0x38
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
 80005e8:	615a      	str	r2, [r3, #20]
 80005ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <MX_FSMC_Init+0xec>)
 80005ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <MX_FSMC_Init+0xec>)
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <MX_FSMC_Init+0xf0>)
 80005f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <MX_FSMC_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_FSMC_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <MX_FSMC_Init+0xec>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_FSMC_Init+0xec>)
 800060e:	2210      	movs	r2, #16
 8000610:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_FSMC_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <MX_FSMC_Init+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_FSMC_Init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <MX_FSMC_Init+0xec>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_FSMC_Init+0xec>)
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_FSMC_Init+0xec>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_FSMC_Init+0xec>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_FSMC_Init+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_FSMC_Init+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000652:	230f      	movs	r3, #15
 8000654:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000656:	230f      	movs	r3, #15
 8000658:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065a:	233c      	movs	r3, #60	; 0x3c
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000662:	2310      	movs	r3, #16
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000666:	2311      	movs	r3, #17
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066a:	2300      	movs	r3, #0
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800066e:	2308      	movs	r3, #8
 8000670:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000676:	2309      	movs	r3, #9
 8000678:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800067e:	2310      	movs	r3, #16
 8000680:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000682:	2311      	movs	r3, #17
 8000684:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068a:	463a      	mov	r2, r7
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <MX_FSMC_Init+0xec>)
 8000694:	f003 fbc2 	bl	8003e1c <HAL_SRAM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800069e:	f001 f9e9 	bl	8001a74 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a2:	bf00      	nop
 80006a4:	3738      	adds	r7, #56	; 0x38
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	a0000104 	.word	0xa0000104

080006b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d131      	bne.n	8000734 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <HAL_FSMC_MspInit+0x88>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6393      	str	r3, [r2, #56]	; 0x38
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <HAL_FSMC_MspInit+0x8c>)
 80006e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000704:	230c      	movs	r3, #12
 8000706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <HAL_FSMC_MspInit+0x90>)
 800070e:	f001 ffcd 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000712:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_FSMC_MspInit+0x94>)
 800072e:	f001 ffbd 	bl	80026ac <HAL_GPIO_Init>
 8000732:	e000      	b.n	8000736 <HAL_FSMC_MspInit+0x82>
    return;
 8000734:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000044 	.word	0x20000044
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000
 8000748:	40020c00 	.word	0x40020c00

0800074c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000754:	f7ff ffae 	bl	80006b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b6f      	ldr	r3, [pc, #444]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a6e      	ldr	r2, [pc, #440]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b6c      	ldr	r3, [pc, #432]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b68      	ldr	r3, [pc, #416]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a67      	ldr	r2, [pc, #412]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b65      	ldr	r3, [pc, #404]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b61      	ldr	r3, [pc, #388]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a60      	ldr	r2, [pc, #384]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b5a      	ldr	r3, [pc, #360]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a59      	ldr	r2, [pc, #356]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b57      	ldr	r3, [pc, #348]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b53      	ldr	r3, [pc, #332]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a52      	ldr	r2, [pc, #328]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b50      	ldr	r3, [pc, #320]	; (8000938 <MX_GPIO_Init+0x1d8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <MX_GPIO_Init+0x1d8>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b49      	ldr	r3, [pc, #292]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b45      	ldr	r3, [pc, #276]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a44      	ldr	r2, [pc, #272]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b42      	ldr	r3, [pc, #264]	; (8000938 <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2170      	movs	r1, #112	; 0x70
 800083e:	483f      	ldr	r0, [pc, #252]	; (800093c <MX_GPIO_Init+0x1dc>)
 8000840:	f002 f8d0 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	483d      	ldr	r0, [pc, #244]	; (8000940 <MX_GPIO_Init+0x1e0>)
 800084c:	f002 f8ca 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	483b      	ldr	r0, [pc, #236]	; (8000944 <MX_GPIO_Init+0x1e4>)
 8000856:	f002 f8c5 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000860:	4839      	ldr	r0, [pc, #228]	; (8000948 <MX_GPIO_Init+0x1e8>)
 8000862:	f002 f8bf 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_GPIO_Init+0x1ec>)
 800086c:	f002 f8ba 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000870:	2370      	movs	r3, #112	; 0x70
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	482d      	ldr	r0, [pc, #180]	; (800093c <MX_GPIO_Init+0x1dc>)
 8000888:	f001 ff10 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_GPIO_Init+0x1e0>)
 80008a6:	f001 ff01 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008aa:	23c0      	movs	r3, #192	; 0xc0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4822      	ldr	r0, [pc, #136]	; (8000948 <MX_GPIO_Init+0x1e8>)
 80008be:	f001 fef5 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008c2:	2330      	movs	r3, #48	; 0x30
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <MX_GPIO_Init+0x1e0>)
 80008d6:	f001 fee9 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <MX_GPIO_Init+0x1e4>)
 80008f2:	f001 fedb 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_GPIO_Init+0x1e8>)
 8000910:	f001 fecc 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000914:	2308      	movs	r3, #8
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <MX_GPIO_Init+0x1ec>)
 800092c:	f001 febe 	bl	80026ac <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40021000 	.word	0x40021000
 8000940:	40020800 	.word	0x40020800
 8000944:	40021800 	.word	0x40021800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020c00 	.word	0x40020c00

08000950 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <LCD_WR_REG+0x1c>)
 800095c:	88fb      	ldrh	r3, [r7, #6]
 800095e:	8013      	strh	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	600ffffe 	.word	0x600ffffe

08000970 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800097a:	4a04      	ldr	r2, [pc, #16]	; (800098c <LCD_WR_DATA+0x1c>)
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	8053      	strh	r3, [r2, #2]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	600ffffe 	.word	0x600ffffe

08000990 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LCD_RD_DATA+0x20>)
 8000998:	885b      	ldrh	r3, [r3, #2]
 800099a:	b29b      	uxth	r3, r3
 800099c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	b29b      	uxth	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	600ffffe 	.word	0x600ffffe

080009b4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4604      	mov	r4, r0
 80009bc:	4608      	mov	r0, r1
 80009be:	4611      	mov	r1, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	4623      	mov	r3, r4
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	4603      	mov	r3, r0
 80009c8:	80bb      	strh	r3, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	807b      	strh	r3, [r7, #2]
 80009ce:	4613      	mov	r3, r2
 80009d0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009d2:	202a      	movs	r0, #42	; 0x2a
 80009d4:	f7ff ffbc 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	0a1b      	lsrs	r3, r3, #8
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffc6 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ffc0 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009f0:	887b      	ldrh	r3, [r7, #2]
 80009f2:	0a1b      	lsrs	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffba 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ffb4 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000a08:	202b      	movs	r0, #43	; 0x2b
 8000a0a:	f7ff ffa1 	bl	8000950 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000a0e:	88bb      	ldrh	r3, [r7, #4]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffab 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ffa5 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff9f 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a32:	883b      	ldrh	r3, [r7, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff99 	bl	8000970 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a3e:	202c      	movs	r0, #44	; 0x2c
 8000a40:	f7ff ff86 	bl	8000950 <LCD_WR_REG>
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd90      	pop	{r4, r7, pc}

08000a4c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <lcd_Clear+0x60>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <lcd_Clear+0x60>)
 8000a60:	885b      	ldrh	r3, [r3, #2]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffa3 	bl	80009b4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	81fb      	strh	r3, [r7, #14]
 8000a72:	e011      	b.n	8000a98 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	81bb      	strh	r3, [r7, #12]
 8000a78:	e006      	b.n	8000a88 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff77 	bl	8000970 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81bb      	strh	r3, [r7, #12]
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <lcd_Clear+0x60>)
 8000a8a:	885b      	ldrh	r3, [r3, #2]
 8000a8c:	89ba      	ldrh	r2, [r7, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d3f3      	bcc.n	8000a7a <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <lcd_Clear+0x60>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3e8      	bcc.n	8000a74 <lcd_Clear+0x28>
		}
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000cc 	.word	0x200000cc

08000ab0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000ace:	887b      	ldrh	r3, [r7, #2]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	883b      	ldrh	r3, [r7, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	f7ff ff69 	bl	80009b4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	81fb      	strh	r3, [r7, #14]
 8000ae6:	e010      	b.n	8000b0a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	81bb      	strh	r3, [r7, #12]
 8000aec:	e006      	b.n	8000afc <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000aee:	8c3b      	ldrh	r3, [r7, #32]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff3d 	bl	8000970 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000af6:	89bb      	ldrh	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	81bb      	strh	r3, [r7, #12]
 8000afc:	89ba      	ldrh	r2, [r7, #12]
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d3f4      	bcc.n	8000aee <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	3301      	adds	r3, #1
 8000b08:	81fb      	strh	r3, [r7, #14]
 8000b0a:	89fa      	ldrh	r2, [r7, #14]
 8000b0c:	883b      	ldrh	r3, [r7, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d3ea      	bcc.n	8000ae8 <lcd_Fill+0x38>
		}
	}
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}

08000b1c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
 8000b26:	460b      	mov	r3, r1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	88fa      	ldrh	r2, [r7, #6]
 8000b32:	88b9      	ldrh	r1, [r7, #4]
 8000b34:	88f8      	ldrh	r0, [r7, #6]
 8000b36:	f7ff ff3d 	bl	80009b4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff17 	bl	8000970 <LCD_WR_DATA>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4623      	mov	r3, r4
 8000b5c:	80fb      	strh	r3, [r7, #6]
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80bb      	strh	r3, [r7, #4]
 8000b62:	460b      	mov	r3, r1
 8000b64:	70fb      	strb	r3, [r7, #3]
 8000b66:	4613      	mov	r3, r2
 8000b68:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf14      	ite	ne
 8000b8e:	2301      	movne	r3, #1
 8000b90:	2300      	moveq	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	fb12 f303 	smulbb	r3, r2, r3
 8000ba2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	3b20      	subs	r3, #32
 8000ba8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	b29c      	uxth	r4, r3
 8000bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	88b9      	ldrh	r1, [r7, #4]
 8000bca:	88f8      	ldrh	r0, [r7, #6]
 8000bcc:	4622      	mov	r2, r4
 8000bce:	f7ff fef1 	bl	80009b4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	827b      	strh	r3, [r7, #18]
 8000bd6:	e07a      	b.n	8000cce <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bdc:	2b0c      	cmp	r3, #12
 8000bde:	d028      	beq.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000be4:	2b10      	cmp	r3, #16
 8000be6:	d108      	bne.n	8000bfa <lcd_ShowChar+0xae>
 8000be8:	78fa      	ldrb	r2, [r7, #3]
 8000bea:	8a7b      	ldrh	r3, [r7, #18]
 8000bec:	493c      	ldr	r1, [pc, #240]	; (8000ce0 <lcd_ShowChar+0x194>)
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	440a      	add	r2, r1
 8000bf2:	4413      	add	r3, r2
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	75fb      	strb	r3, [r7, #23]
 8000bf8:	e01b      	b.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bfe:	2b18      	cmp	r3, #24
 8000c00:	d10b      	bne.n	8000c1a <lcd_ShowChar+0xce>
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	8a79      	ldrh	r1, [r7, #18]
 8000c06:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <lcd_ShowChar+0x198>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	4403      	add	r3, r0
 8000c12:	440b      	add	r3, r1
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	75fb      	strb	r3, [r7, #23]
 8000c18:	e00b      	b.n	8000c32 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c1e:	2b20      	cmp	r3, #32
 8000c20:	d15a      	bne.n	8000cd8 <lcd_ShowChar+0x18c>
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	8a7b      	ldrh	r3, [r7, #18]
 8000c26:	4930      	ldr	r1, [pc, #192]	; (8000ce8 <lcd_ShowChar+0x19c>)
 8000c28:	0192      	lsls	r2, r2, #6
 8000c2a:	440a      	add	r2, r1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	75bb      	strb	r3, [r7, #22]
 8000c36:	e044      	b.n	8000cc2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000c38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d120      	bne.n	8000c82 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000c40:	7dfa      	ldrb	r2, [r7, #23]
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	fa42 f303 	asr.w	r3, r2, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <lcd_ShowChar+0x10e>
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe8c 	bl	8000970 <LCD_WR_DATA>
 8000c58:	e003      	b.n	8000c62 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe87 	bl	8000970 <LCD_WR_DATA>
				m++;
 8000c62:	7d7b      	ldrb	r3, [r7, #21]
 8000c64:	3301      	adds	r3, #1
 8000c66:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000c68:	7d7b      	ldrb	r3, [r7, #21]
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c70:	fb02 f201 	mul.w	r2, r2, r1
 8000c74:	1a9b      	subs	r3, r3, r2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11f      	bne.n	8000cbc <lcd_ShowChar+0x170>
				{
					m=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	757b      	strb	r3, [r7, #21]
					break;
 8000c80:	e022      	b.n	8000cc8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c82:	7dfa      	ldrb	r2, [r7, #23]
 8000c84:	7dbb      	ldrb	r3, [r7, #22]
 8000c86:	fa42 f303 	asr.w	r3, r2, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <lcd_ShowChar+0x152>
 8000c92:	883a      	ldrh	r2, [r7, #0]
 8000c94:	88b9      	ldrh	r1, [r7, #4]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff3f 	bl	8000b1c <lcd_DrawPoint>
				x++;
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ca4:	88fa      	ldrh	r2, [r7, #6]
 8000ca6:	8a3b      	ldrh	r3, [r7, #16]
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d105      	bne.n	8000cbc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000cb0:	8a3b      	ldrh	r3, [r7, #16]
 8000cb2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	80bb      	strh	r3, [r7, #4]
					break;
 8000cba:	e005      	b.n	8000cc8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	75bb      	strb	r3, [r7, #22]
 8000cc2:	7dbb      	ldrb	r3, [r7, #22]
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	d9b7      	bls.n	8000c38 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000cc8:	8a7b      	ldrh	r3, [r7, #18]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	827b      	strh	r3, [r7, #18]
 8000cce:	8a7a      	ldrh	r2, [r7, #18]
 8000cd0:	89bb      	ldrh	r3, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d380      	bcc.n	8000bd8 <lcd_ShowChar+0x8c>
 8000cd6:	e000      	b.n	8000cda <lcd_ShowChar+0x18e>
		else return;
 8000cd8:	bf00      	nop
				}
			}
		}
	}
}
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	080049f8 	.word	0x080049f8
 8000ce4:	08004fe8 	.word	0x08004fe8
 8000ce8:	080061b8 	.word	0x080061b8

08000cec <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000d00:	e004      	b.n	8000d0c <mypow+0x20>
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	fb02 f303 	mul.w	r3, r2, r3
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	71ba      	strb	r2, [r7, #6]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f5      	bne.n	8000d02 <mypow+0x16>
	return result;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af04      	add	r7, sp, #16
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	4611      	mov	r1, r2
 8000d30:	461a      	mov	r2, r3
 8000d32:	4623      	mov	r3, r4
 8000d34:	80fb      	strh	r3, [r7, #6]
 8000d36:	4603      	mov	r3, r0
 8000d38:	80bb      	strh	r3, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d4a:	085b      	lsrs	r3, r3, #1
 8000d4c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e059      	b.n	8000e08 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000d54:	887c      	ldrh	r4, [r7, #2]
 8000d56:	787a      	ldrb	r2, [r7, #1]
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4619      	mov	r1, r3
 8000d64:	200a      	movs	r0, #10
 8000d66:	f7ff ffc1 	bl	8000cec <mypow>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <lcd_ShowIntNum+0xf8>)
 8000d72:	fba3 2301 	umull	r2, r3, r3, r1
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1aca      	subs	r2, r1, r3
 8000d82:	4613      	mov	r3, r2
 8000d84:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d121      	bne.n	8000dd0 <lcd_ShowIntNum+0xac>
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	787b      	ldrb	r3, [r7, #1]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da1c      	bge.n	8000dd0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d96:	7b3b      	ldrb	r3, [r7, #12]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d117      	bne.n	8000dcc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	fb12 f303 	smulbb	r3, r2, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4413      	add	r3, r2
 8000dae:	b298      	uxth	r0, r3
 8000db0:	8c3a      	ldrh	r2, [r7, #32]
 8000db2:	88b9      	ldrh	r1, [r7, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	f7ff fec1 	bl	8000b4c <lcd_ShowChar>
				continue;
 8000dca:	e01a      	b.n	8000e02 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	7b7b      	ldrb	r3, [r7, #13]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	fb12 f303 	smulbb	r3, r2, r3
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	4413      	add	r3, r2
 8000de2:	b298      	uxth	r0, r3
 8000de4:	7b3b      	ldrb	r3, [r7, #12]
 8000de6:	3330      	adds	r3, #48	; 0x30
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	8c3c      	ldrh	r4, [r7, #32]
 8000dec:	88b9      	ldrh	r1, [r7, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	9302      	str	r3, [sp, #8]
 8000df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	f7ff fea5 	bl	8000b4c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	3301      	adds	r3, #1
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	787b      	ldrb	r3, [r7, #1]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d3a1      	bcc.n	8000d54 <lcd_ShowIntNum+0x30>
	}
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	cccccccd 	.word	0xcccccccd

08000e20 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4623      	mov	r3, r4
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	4603      	mov	r3, r0
 8000e34:	80bb      	strh	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	807b      	strh	r3, [r7, #2]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8000e42:	88fa      	ldrh	r2, [r7, #6]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4413      	add	r3, r2
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29c      	uxth	r4, r3
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	88b9      	ldrh	r1, [r7, #4]
 8000e5c:	88f8      	ldrh	r0, [r7, #6]
 8000e5e:	4622      	mov	r2, r4
 8000e60:	f7ff fda8 	bl	80009b4 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	82fb      	strh	r3, [r7, #22]
 8000e68:	e027      	b.n	8000eba <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	82bb      	strh	r3, [r7, #20]
 8000e6e:	e01d      	b.n	8000eac <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	3301      	adds	r3, #1
 8000e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e84:	4413      	add	r3, r2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fd68 	bl	8000970 <LCD_WR_DATA>
			k++;
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8000ea6:	8abb      	ldrh	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	82bb      	strh	r3, [r7, #20]
 8000eac:	8aba      	ldrh	r2, [r7, #20]
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3dd      	bcc.n	8000e70 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8000eb4:	8afb      	ldrh	r3, [r7, #22]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	82fb      	strh	r3, [r7, #22]
 8000eba:	8afa      	ldrh	r2, [r7, #22]
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3d3      	bcc.n	8000e6a <lcd_ShowPicture+0x4a>
		}
	}
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	371c      	adds	r7, #28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}

08000ecc <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	091b      	lsrs	r3, r3, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <lcd_SetDir+0x44>)
 8000ee8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eec:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <lcd_SetDir+0x44>)
 8000ef0:	22f0      	movs	r2, #240	; 0xf0
 8000ef2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000ef4:	e006      	b.n	8000f04 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <lcd_SetDir+0x44>)
 8000ef8:	22f0      	movs	r2, #240	; 0xf0
 8000efa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <lcd_SetDir+0x44>)
 8000efe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f02:	805a      	strh	r2, [r3, #2]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	200000cc 	.word	0x200000cc

08000f14 <lcd_init>:


void lcd_init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	48aa      	ldr	r0, [pc, #680]	; (80011c8 <lcd_init+0x2b4>)
 8000f20:	f001 fd60 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f28:	f001 fa8a 	bl	8002440 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f32:	48a5      	ldr	r0, [pc, #660]	; (80011c8 <lcd_init+0x2b4>)
 8000f34:	f001 fd56 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3c:	f001 fa80 	bl	8002440 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff ffc3 	bl	8000ecc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f46:	20d3      	movs	r0, #211	; 0xd3
 8000f48:	f7ff fd02 	bl	8000950 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000f4c:	f7ff fd20 	bl	8000990 <LCD_RD_DATA>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b9d      	ldr	r3, [pc, #628]	; (80011cc <lcd_init+0x2b8>)
 8000f56:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f58:	f7ff fd1a 	bl	8000990 <LCD_RD_DATA>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b9a      	ldr	r3, [pc, #616]	; (80011cc <lcd_init+0x2b8>)
 8000f62:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000f64:	f7ff fd14 	bl	8000990 <LCD_RD_DATA>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b97      	ldr	r3, [pc, #604]	; (80011cc <lcd_init+0x2b8>)
 8000f6e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000f70:	4b96      	ldr	r3, [pc, #600]	; (80011cc <lcd_init+0x2b8>)
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b94      	ldr	r3, [pc, #592]	; (80011cc <lcd_init+0x2b8>)
 8000f7a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000f7c:	f7ff fd08 	bl	8000990 <LCD_RD_DATA>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b91      	ldr	r3, [pc, #580]	; (80011cc <lcd_init+0x2b8>)
 8000f86:	889b      	ldrh	r3, [r3, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b8f      	ldr	r3, [pc, #572]	; (80011cc <lcd_init+0x2b8>)
 8000f8e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f90:	20cf      	movs	r0, #207	; 0xcf
 8000f92:	f7ff fcdd 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fcea 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f9c:	20c1      	movs	r0, #193	; 0xc1
 8000f9e:	f7ff fce7 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000fa2:	2030      	movs	r0, #48	; 0x30
 8000fa4:	f7ff fce4 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000fa8:	20ed      	movs	r0, #237	; 0xed
 8000faa:	f7ff fcd1 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f7ff fcde 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f7ff fcdb 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000fba:	2012      	movs	r0, #18
 8000fbc:	f7ff fcd8 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000fc0:	2081      	movs	r0, #129	; 0x81
 8000fc2:	f7ff fcd5 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000fc6:	20e8      	movs	r0, #232	; 0xe8
 8000fc8:	f7ff fcc2 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000fcc:	2085      	movs	r0, #133	; 0x85
 8000fce:	f7ff fccf 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f7ff fccc 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000fd8:	207a      	movs	r0, #122	; 0x7a
 8000fda:	f7ff fcc9 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000fde:	20cb      	movs	r0, #203	; 0xcb
 8000fe0:	f7ff fcb6 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000fe4:	2039      	movs	r0, #57	; 0x39
 8000fe6:	f7ff fcc3 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000fea:	202c      	movs	r0, #44	; 0x2c
 8000fec:	f7ff fcc0 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fcbd 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000ff6:	2034      	movs	r0, #52	; 0x34
 8000ff8:	f7ff fcba 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff fcb7 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001002:	20f7      	movs	r0, #247	; 0xf7
 8001004:	f7ff fca4 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001008:	2020      	movs	r0, #32
 800100a:	f7ff fcb1 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800100e:	20ea      	movs	r0, #234	; 0xea
 8001010:	f7ff fc9e 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fcab 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fca8 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001020:	20c0      	movs	r0, #192	; 0xc0
 8001022:	f7ff fc95 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001026:	201b      	movs	r0, #27
 8001028:	f7ff fca2 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800102c:	20c1      	movs	r0, #193	; 0xc1
 800102e:	f7ff fc8f 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff fc9c 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001038:	20c5      	movs	r0, #197	; 0xc5
 800103a:	f7ff fc89 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800103e:	2030      	movs	r0, #48	; 0x30
 8001040:	f7ff fc96 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001044:	2030      	movs	r0, #48	; 0x30
 8001046:	f7ff fc93 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800104a:	20c7      	movs	r0, #199	; 0xc7
 800104c:	f7ff fc80 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001050:	20b7      	movs	r0, #183	; 0xb7
 8001052:	f7ff fc8d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001056:	2036      	movs	r0, #54	; 0x36
 8001058:	f7ff fc7a 	bl	8000950 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800105c:	2008      	movs	r0, #8
 800105e:	f7ff fc87 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001062:	203a      	movs	r0, #58	; 0x3a
 8001064:	f7ff fc74 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001068:	2055      	movs	r0, #85	; 0x55
 800106a:	f7ff fc81 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800106e:	20b1      	movs	r0, #177	; 0xb1
 8001070:	f7ff fc6e 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fc7b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800107a:	201a      	movs	r0, #26
 800107c:	f7ff fc78 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001080:	20b6      	movs	r0, #182	; 0xb6
 8001082:	f7ff fc65 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001086:	200a      	movs	r0, #10
 8001088:	f7ff fc72 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800108c:	20a2      	movs	r0, #162	; 0xa2
 800108e:	f7ff fc6f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001092:	20f2      	movs	r0, #242	; 0xf2
 8001094:	f7ff fc5c 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fc69 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f7ff fc56 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fc63 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80010aa:	20e0      	movs	r0, #224	; 0xe0
 80010ac:	f7ff fc50 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80010b0:	200f      	movs	r0, #15
 80010b2:	f7ff fc5d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80010b6:	202a      	movs	r0, #42	; 0x2a
 80010b8:	f7ff fc5a 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f7ff fc57 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010c2:	2008      	movs	r0, #8
 80010c4:	f7ff fc54 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010c8:	200e      	movs	r0, #14
 80010ca:	f7ff fc51 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010ce:	2008      	movs	r0, #8
 80010d0:	f7ff fc4e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80010d4:	2054      	movs	r0, #84	; 0x54
 80010d6:	f7ff fc4b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80010da:	20a9      	movs	r0, #169	; 0xa9
 80010dc:	f7ff fc48 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80010e0:	2043      	movs	r0, #67	; 0x43
 80010e2:	f7ff fc45 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f7ff fc42 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010ec:	200f      	movs	r0, #15
 80010ee:	f7ff fc3f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fc3c 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fc39 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fc36 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fc33 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800110a:	20e1      	movs	r0, #225	; 0xe1
 800110c:	f7ff fc20 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fc2d 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001116:	2015      	movs	r0, #21
 8001118:	f7ff fc2a 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800111c:	2017      	movs	r0, #23
 800111e:	f7ff fc27 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001122:	2007      	movs	r0, #7
 8001124:	f7ff fc24 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001128:	2011      	movs	r0, #17
 800112a:	f7ff fc21 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800112e:	2006      	movs	r0, #6
 8001130:	f7ff fc1e 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001134:	202b      	movs	r0, #43	; 0x2b
 8001136:	f7ff fc1b 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800113a:	2056      	movs	r0, #86	; 0x56
 800113c:	f7ff fc18 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001140:	203c      	movs	r0, #60	; 0x3c
 8001142:	f7ff fc15 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001146:	2005      	movs	r0, #5
 8001148:	f7ff fc12 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800114c:	2010      	movs	r0, #16
 800114e:	f7ff fc0f 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001152:	200f      	movs	r0, #15
 8001154:	f7ff fc0c 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001158:	203f      	movs	r0, #63	; 0x3f
 800115a:	f7ff fc09 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800115e:	203f      	movs	r0, #63	; 0x3f
 8001160:	f7ff fc06 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001164:	200f      	movs	r0, #15
 8001166:	f7ff fc03 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800116a:	202b      	movs	r0, #43	; 0x2b
 800116c:	f7ff fbf0 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fbfd 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fbfa 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff fbf7 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001182:	203f      	movs	r0, #63	; 0x3f
 8001184:	f7ff fbf4 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001188:	202a      	movs	r0, #42	; 0x2a
 800118a:	f7ff fbe1 	bl	8000950 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fbee 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fbeb 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fbe8 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80011a0:	20ef      	movs	r0, #239	; 0xef
 80011a2:	f7ff fbe5 	bl	8000970 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80011a6:	2011      	movs	r0, #17
 80011a8:	f7ff fbd2 	bl	8000950 <LCD_WR_REG>
	HAL_Delay(120);
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f001 f947 	bl	8002440 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80011b2:	2029      	movs	r0, #41	; 0x29
 80011b4:	f7ff fbcc 	bl	8000950 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <lcd_init+0x2bc>)
 80011c0:	f001 fc10 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020800 	.word	0x40020800
 80011cc:	200000cc 	.word	0x200000cc
 80011d0:	40020000 	.word	0x40020000

080011d4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4413      	add	r3, r2
 80011ec:	b298      	uxth	r0, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	8b3a      	ldrh	r2, [r7, #24]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fc8d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	b29a      	uxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	b29b      	uxth	r3, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b298      	uxth	r0, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	b29a      	uxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	8b3a      	ldrh	r2, [r7, #24]
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc7d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	b29a      	uxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b298      	uxth	r0, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	b29a      	uxth	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	8b3a      	ldrh	r2, [r7, #24]
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc6d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	b29b      	uxth	r3, r3
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b298      	uxth	r0, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	b29a      	uxth	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	8b3a      	ldrh	r2, [r7, #24]
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc5d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	b29a      	uxth	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4413      	add	r3, r2
 800126c:	b298      	uxth	r0, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	b29a      	uxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	8b3a      	ldrh	r2, [r7, #24]
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc4d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	b29a      	uxth	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b29b      	uxth	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b298      	uxth	r0, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	b29a      	uxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4413      	add	r3, r2
 8001298:	b29b      	uxth	r3, r3
 800129a:	8b3a      	ldrh	r2, [r7, #24]
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fc3d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b298      	uxth	r0, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	8b3a      	ldrh	r2, [r7, #24]
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc2d 	bl	8000b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b298      	uxth	r0, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	8b3a      	ldrh	r2, [r7, #24]
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc1d 	bl	8000b1c <lcd_DrawPoint>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b08a      	sub	sp, #40	; 0x28
 80012ee:	af02      	add	r7, sp, #8
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	f1c3 0303 	rsb	r3, r3, #3
 800130a:	613b      	str	r3, [r7, #16]


	if (fill)
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	2b00      	cmp	r3, #0
 8001310:	d04f      	beq.n	80013b2 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001312:	e029      	b.n	8001368 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00a      	b.n	8001330 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff ff55 	bl	80011d4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	429a      	cmp	r2, r3
 8001336:	ddf0      	ble.n	800131a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da06      	bge.n	800134c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4413      	add	r3, r2
 8001346:	3306      	adds	r3, #6
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	e00a      	b.n	8001362 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	009a      	lsls	r2, r3, #2
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4413      	add	r3, r2
 8001358:	330a      	adds	r3, #10
 800135a:	613b      	str	r3, [r7, #16]
				y--;
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3b01      	subs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	429a      	cmp	r2, r3
 800136e:	ddd1      	ble.n	8001314 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001370:	e023      	b.n	80013ba <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	68b9      	ldr	r1, [r7, #8]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff ff29 	bl	80011d4 <_draw_circle_8>
			if (d < 0) {
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da06      	bge.n	8001396 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	009a      	lsls	r2, r3, #2
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	3306      	adds	r3, #6
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e00a      	b.n	80013ac <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	009a      	lsls	r2, r3, #2
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4413      	add	r3, r2
 80013a2:	330a      	adds	r3, #10
 80013a4:	613b      	str	r3, [r7, #16]
				y--;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
			x++;
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	3301      	adds	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	dddb      	ble.n	8001372 <lcd_DrawCircle+0x88>
}
 80013ba:	bf00      	nop
 80013bc:	3720      	adds	r7, #32
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b08b      	sub	sp, #44	; 0x2c
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	60ba      	str	r2, [r7, #8]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	460b      	mov	r3, r1
 80013d4:	81bb      	strh	r3, [r7, #12]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013de:	2300      	movs	r3, #0
 80013e0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013e2:	e048      	b.n	8001476 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d145      	bne.n	8001476 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013ea:	89fa      	ldrh	r2, [r7, #14]
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <lcd_ShowStr+0xc4>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	1acb      	subs	r3, r1, r3
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dc3f      	bgt.n	8001480 <lcd_ShowStr+0xbc>
 8001400:	89ba      	ldrh	r2, [r7, #12]
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <lcd_ShowStr+0xc4>)
 8001404:	885b      	ldrh	r3, [r3, #2]
 8001406:	4619      	mov	r1, r3
 8001408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	429a      	cmp	r2, r3
 8001410:	dc36      	bgt.n	8001480 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b80      	cmp	r3, #128	; 0x80
 8001418:	d902      	bls.n	8001420 <lcd_ShowStr+0x5c>
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	e02a      	b.n	8001476 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b0d      	cmp	r3, #13
 8001426:	d10b      	bne.n	8001440 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800142c:	b29a      	uxth	r2, r3
 800142e:	89bb      	ldrh	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001434:	8abb      	ldrh	r3, [r7, #20]
 8001436:	81fb      	strh	r3, [r7, #14]
					str++;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3301      	adds	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	e017      	b.n	8001470 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	88fc      	ldrh	r4, [r7, #6]
 8001446:	89b9      	ldrh	r1, [r7, #12]
 8001448:	89f8      	ldrh	r0, [r7, #14]
 800144a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4623      	mov	r3, r4
 800145c:	f7ff fb76 	bl	8000b4c <lcd_ShowChar>
					x+=sizey/2;
 8001460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b29a      	uxth	r2, r3
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	4413      	add	r3, r2
 800146e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	3301      	adds	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1b2      	bne.n	80013e4 <lcd_ShowStr+0x20>
 800147e:	e000      	b.n	8001482 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001480:	bf00      	nop
			}
		}
	}
}
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd90      	pop	{r4, r7, pc}
 8001488:	200000cc 	.word	0x200000cc

0800148c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af04      	add	r7, sp, #16
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	461a      	mov	r2, r3
 8001496:	4603      	mov	r3, r0
 8001498:	81fb      	strh	r3, [r7, #14]
 800149a:	460b      	mov	r3, r1
 800149c:	81bb      	strh	r3, [r7, #12]
 800149e:	4613      	mov	r3, r2
 80014a0:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 80014a2:	68b8      	ldr	r0, [r7, #8]
 80014a4:	f7fe fe90 	bl	80001c8 <strlen>
 80014a8:	4603      	mov	r3, r0
 80014aa:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <lcd_StrCenter+0x60>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	8afb      	ldrh	r3, [r7, #22]
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	0fda      	lsrs	r2, r3, #31
 80014ba:	4413      	add	r3, r2
 80014bc:	105b      	asrs	r3, r3, #1
 80014be:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014c0:	89fa      	ldrh	r2, [r7, #14]
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	b298      	uxth	r0, r3
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	89b9      	ldrh	r1, [r7, #12]
 80014cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	8c3b      	ldrh	r3, [r7, #32]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f7ff ff70 	bl	80013c4 <lcd_ShowStr>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200000cc 	.word	0x200000cc

080014f0 <lcd_clearScr>:
void lcd_clearScr(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af04      	add	r7, sp, #16
	lcd_Clear(WHITE);
 80014f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014fa:	f7ff faa7 	bl	8000a4c <lcd_Clear>
	lcd_Fill(0, 0, 240, 20, BLUE);
 80014fe:	231f      	movs	r3, #31
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2314      	movs	r3, #20
 8001504:	22f0      	movs	r2, #240	; 0xf0
 8001506:	2100      	movs	r1, #0
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff fad1 	bl	8000ab0 <lcd_Fill>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <lcd_clearScr+0x50>)
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	235a      	movs	r3, #90	; 0x5a
 8001514:	225a      	movs	r2, #90	; 0x5a
 8001516:	21c8      	movs	r1, #200	; 0xc8
 8001518:	2050      	movs	r0, #80	; 0x50
 800151a:	f7ff fc81 	bl	8000e20 <lcd_ShowPicture>
	lcd_StrCenter(0, 2, "Lab 3", WHITE, BLUE, 16, 1);
 800151e:	2301      	movs	r3, #1
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2310      	movs	r3, #16
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	231f      	movs	r3, #31
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <lcd_clearScr+0x54>)
 8001530:	2102      	movs	r1, #2
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ffaa 	bl	800148c <lcd_StrCenter>
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	08007978 	.word	0x08007978
 8001544:	080049b8 	.word	0x080049b8

08001548 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <led7_init+0x2c>)
 8001552:	f001 fa47 	bl	80029e4 <HAL_GPIO_WritePin>
	  led_On(0);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f8be 	bl	80016d8 <led_On>
	  led_On(1);
 800155c:	2001      	movs	r0, #1
 800155e:	f000 f8bb 	bl	80016d8 <led_On>
	  led_On(2);
 8001562:	2002      	movs	r0, #2
 8001564:	f000 f8b8 	bl	80016d8 <led_On>
	  led_On(3);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f8b5 	bl	80016d8 <led_On>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021800 	.word	0x40021800

08001578 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <led7_Scan+0x104>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <led7_Scan+0x104>)
 8001586:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001588:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <led7_Scan+0x108>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <led7_Scan+0x10c>)
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b39      	ldr	r3, [pc, #228]	; (800167c <led7_Scan+0x104>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <led7_Scan+0x104>)
 80015a4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <led7_Scan+0x108>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d846      	bhi.n	800163c <led7_Scan+0xc4>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <led7_Scan+0x3c>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	080015e3 	.word	0x080015e3
 80015bc:	08001601 	.word	0x08001601
 80015c0:	0800161f 	.word	0x0800161f
	case 0:
		spi_buffer |= 0x00b0;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <led7_Scan+0x104>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <led7_Scan+0x104>)
 80015d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <led7_Scan+0x104>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <led7_Scan+0x104>)
 80015de:	801a      	strh	r2, [r3, #0]
		break;
 80015e0:	e02d      	b.n	800163e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <led7_Scan+0x104>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <led7_Scan+0x104>)
 80015ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <led7_Scan+0x104>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f023 0320 	bic.w	r3, r3, #32
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <led7_Scan+0x104>)
 80015fc:	801a      	strh	r2, [r3, #0]
		break;
 80015fe:	e01e      	b.n	800163e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <led7_Scan+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <led7_Scan+0x104>)
 800160c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <led7_Scan+0x104>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	f023 0310 	bic.w	r3, r3, #16
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <led7_Scan+0x104>)
 800161a:	801a      	strh	r2, [r3, #0]
		break;
 800161c:	e00f      	b.n	800163e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <led7_Scan+0x104>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <led7_Scan+0x104>)
 800162a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <led7_Scan+0x104>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001634:	b29a      	uxth	r2, r3
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <led7_Scan+0x104>)
 8001638:	801a      	strh	r2, [r3, #0]
		break;
 800163a:	e000      	b.n	800163e <led7_Scan+0xc6>
	default:
		break;
 800163c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <led7_Scan+0x108>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	425a      	negs	r2, r3
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	bf58      	it	pl
 8001650:	4253      	negpl	r3, r2
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <led7_Scan+0x108>)
 8001656:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	480a      	ldr	r0, [pc, #40]	; (8001688 <led7_Scan+0x110>)
 800165e:	f001 f9c1 	bl	80029e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001662:	2301      	movs	r3, #1
 8001664:	2202      	movs	r2, #2
 8001666:	4905      	ldr	r1, [pc, #20]	; (800167c <led7_Scan+0x104>)
 8001668:	4808      	ldr	r0, [pc, #32]	; (800168c <led7_Scan+0x114>)
 800166a:	f001 feb8 	bl	80033de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <led7_Scan+0x110>)
 8001674:	f001 f9b6 	bl	80029e4 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000000e 	.word	0x2000000e
 8001680:	20000048 	.word	0x20000048
 8001684:	20000000 	.word	0x20000000
 8001688:	40021800 	.word	0x40021800
 800168c:	20000108 	.word	0x20000108

08001690 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	4613      	mov	r3, r2
 800169c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0e      	blt.n	80016c2 <led7_SetDigit+0x32>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b09      	cmp	r3, #9
 80016a8:	dc0b      	bgt.n	80016c2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80016aa:	4a09      	ldr	r2, [pc, #36]	; (80016d0 <led7_SetDigit+0x40>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b2d9      	uxtb	r1, r3
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <led7_SetDigit+0x44>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
	}
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000004 	.word	0x20000004
 80016d4:	20000000 	.word	0x20000000

080016d8 <led_On>:
  *            @arg 6
  *            @arg 7
  *            @arg 8
  * @retval None
  */
void led_On(uint8_t index){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d910      	bls.n	800170a <led_On+0x32>
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b08      	cmp	r3, #8
 80016ec:	d80d      	bhi.n	800170a <led_On+0x32>
		spi_buffer |= 1 << (index-6);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	3b06      	subs	r3, #6
 80016f2:	2201      	movs	r2, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <led_On+0x48>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <led_On+0x48>)
 8001708:	801a      	strh	r2, [r3, #0]
	}
	led7_state[index] = GPIO_PIN_SET;
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <led_On+0x4c>)
 800170e:	2101      	movs	r1, #1
 8001710:	54d1      	strb	r1, [r2, r3]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000000e 	.word	0x2000000e
 8001724:	2000004c 	.word	0x2000004c

08001728 <led_Off>:
  *            @arg 6
  *            @arg 7
  *            @arg 8
  * @retval None
  */
void led_Off(uint8_t index){
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
	if(index >= 6 && index <=8){
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d912      	bls.n	800175e <led_Off+0x36>
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d80f      	bhi.n	800175e <led_Off+0x36>
		spi_buffer &= ~(1 << (index-6));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	3b06      	subs	r3, #6
 8001742:	2201      	movs	r2, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	b21b      	sxth	r3, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	b21a      	sxth	r2, r3
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <led_Off+0x4c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	b21b      	sxth	r3, r3
 8001754:	4013      	ands	r3, r2
 8001756:	b21b      	sxth	r3, r3
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <led_Off+0x4c>)
 800175c:	801a      	strh	r2, [r3, #0]
	}
	led7_state[index] = GPIO_PIN_RESET;
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	4a05      	ldr	r2, [pc, #20]	; (8001778 <led_Off+0x50>)
 8001762:	2100      	movs	r1, #0
 8001764:	54d1      	strb	r1, [r2, r3]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000000e 	.word	0x2000000e
 8001778:	2000004c 	.word	0x2000004c

0800177c <toggle_led7seg>:

void toggle_led7seg(uint8_t index){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	if(led7_state[index] == GPIO_PIN_RESET)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <toggle_led7seg+0x30>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d104      	bne.n	800179a <toggle_led7seg+0x1e>
		led_On(index);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ffa0 	bl	80016d8 <led_On>
	else
		led_Off(index);
}
 8001798:	e003      	b.n	80017a2 <toggle_led7seg+0x26>
		led_Off(index);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ffc3 	bl	8001728 <led_Off>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000004c 	.word	0x2000004c

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f000 fdd2 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f8ce 	bl	8001958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017bc:	f7fe ffd0 	bl	8000760 <MX_GPIO_Init>
  MX_TIM2_Init();
 80017c0:	f000 fa9e 	bl	8001d00 <MX_TIM2_Init>
  MX_SPI1_Init();
 80017c4:	f000 f9b0 	bl	8001b28 <MX_SPI1_Init>
  MX_FSMC_Init();
 80017c8:	f7fe fefa 	bl	80005c0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80017cc:	f000 f92e 	bl	8001a2c <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 80017d0:	bf00      	nop
 80017d2:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <main+0x190>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0fb      	beq.n	80017d2 <main+0x22>
	  flag_timer2 = 0;
 80017da:	4b59      	ldr	r3, [pc, #356]	; (8001940 <main+0x190>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80017e0:	f7fe fe82 	bl	80004e8 <button_Scan>
	  switch(current_mode){
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <main+0x194>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d8f1      	bhi.n	80017d0 <main+0x20>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <main+0x44>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001805 	.word	0x08001805
 80017f8:	0800184f 	.word	0x0800184f
 80017fc:	0800189b 	.word	0x0800189b
 8001800:	080018e7 	.word	0x080018e7
	  case MODE_NORMAL:
		  fsm_normal(mode_counter);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <main+0x198>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fb9b 	bl	8001f44 <fsm_normal>
		  // Running system timer
		  mode_counter = (mode_counter + 1) % MODE_NORMAL_TICKS;
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <main+0x198>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <main+0x19c>)
 8001816:	fb83 1302 	smull	r1, r3, r3, r2
 800181a:	10d9      	asrs	r1, r3, #3
 800181c:	17d3      	asrs	r3, r2, #31
 800181e:	1ac9      	subs	r1, r1, r3
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	1ad1      	subs	r1, r2, r3
 800182a:	b28a      	uxth	r2, r1
 800182c:	4b46      	ldr	r3, [pc, #280]	; (8001948 <main+0x198>)
 800182e:	801a      	strh	r2, [r3, #0]
		  // Switch mode
		  if(button_count[12] == 1){
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <main+0x1a0>)
 8001832:	8b1b      	ldrh	r3, [r3, #24]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d17b      	bne.n	8001930 <main+0x180>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001838:	2110      	movs	r1, #16
 800183a:	4846      	ldr	r0, [pc, #280]	; (8001954 <main+0x1a4>)
 800183c:	f001 f8eb 	bl	8002a16 <HAL_GPIO_TogglePin>
			  current_mode = MODE_MODIFY_RED;
 8001840:	4b40      	ldr	r3, [pc, #256]	; (8001944 <main+0x194>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
			  fsm_modify_init(RED_LIGHT);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 fb56 	bl	8001ef8 <fsm_modify_init>
		  }
		  break;
 800184c:	e070      	b.n	8001930 <main+0x180>
	  case MODE_MODIFY_RED:
		  // Running system timer
		  fsm_modify_light(mode_counter, RED_LIGHT);
 800184e:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <main+0x198>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fc6d 	bl	8002134 <fsm_modify_light>
		  mode_counter = (mode_counter + 1) % MODE_MODIFY_TICKS;
 800185a:	4b3b      	ldr	r3, [pc, #236]	; (8001948 <main+0x198>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <main+0x19c>)
 8001862:	fb83 1302 	smull	r1, r3, r3, r2
 8001866:	1119      	asrs	r1, r3, #4
 8001868:	17d3      	asrs	r3, r2, #31
 800186a:	1ac9      	subs	r1, r1, r3
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1ad1      	subs	r1, r2, r3
 8001876:	b28a      	uxth	r2, r1
 8001878:	4b33      	ldr	r3, [pc, #204]	; (8001948 <main+0x198>)
 800187a:	801a      	strh	r2, [r3, #0]
		  // Switch mode
		  if(button_count[12] == 1){
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <main+0x1a0>)
 800187e:	8b1b      	ldrh	r3, [r3, #24]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d157      	bne.n	8001934 <main+0x184>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001884:	2110      	movs	r1, #16
 8001886:	4833      	ldr	r0, [pc, #204]	; (8001954 <main+0x1a4>)
 8001888:	f001 f8c5 	bl	8002a16 <HAL_GPIO_TogglePin>
			  current_mode = MODE_MODIFY_GREEN;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <main+0x194>)
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
			  fsm_modify_init(GREEN_LIGHT);
 8001892:	2001      	movs	r0, #1
 8001894:	f000 fb30 	bl	8001ef8 <fsm_modify_init>
		  }
		  break;
 8001898:	e04c      	b.n	8001934 <main+0x184>
	  case MODE_MODIFY_GREEN:
		  // Running system timer
		  mode_counter = (mode_counter + 1) % MODE_MODIFY_TICKS;
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <main+0x198>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <main+0x19c>)
 80018a2:	fb83 1302 	smull	r1, r3, r3, r2
 80018a6:	1119      	asrs	r1, r3, #4
 80018a8:	17d3      	asrs	r3, r2, #31
 80018aa:	1ac9      	subs	r1, r1, r3
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	1ad1      	subs	r1, r2, r3
 80018b6:	b28a      	uxth	r2, r1
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <main+0x198>)
 80018ba:	801a      	strh	r2, [r3, #0]
		  fsm_modify_light(mode_counter, GREEN_LIGHT);
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <main+0x198>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fc36 	bl	8002134 <fsm_modify_light>
		  // Switch mode
		  if(button_count[12] == 1){
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <main+0x1a0>)
 80018ca:	8b1b      	ldrh	r3, [r3, #24]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d133      	bne.n	8001938 <main+0x188>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80018d0:	2110      	movs	r1, #16
 80018d2:	4820      	ldr	r0, [pc, #128]	; (8001954 <main+0x1a4>)
 80018d4:	f001 f89f 	bl	8002a16 <HAL_GPIO_TogglePin>
			  current_mode = MODE_MODIFY_YELLOW;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <main+0x194>)
 80018da:	2203      	movs	r2, #3
 80018dc:	701a      	strb	r2, [r3, #0]
			  fsm_modify_init(YELLOW_LIGHT);
 80018de:	2002      	movs	r0, #2
 80018e0:	f000 fb0a 	bl	8001ef8 <fsm_modify_init>
		  }
		  break;
 80018e4:	e028      	b.n	8001938 <main+0x188>
	  case MODE_MODIFY_YELLOW:
		  // Running system timer
		  mode_counter = (mode_counter + 1) % MODE_MODIFY_TICKS;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <main+0x198>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <main+0x19c>)
 80018ee:	fb83 1302 	smull	r1, r3, r3, r2
 80018f2:	1119      	asrs	r1, r3, #4
 80018f4:	17d3      	asrs	r3, r2, #31
 80018f6:	1ac9      	subs	r1, r1, r3
 80018f8:	460b      	mov	r3, r1
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1ad1      	subs	r1, r2, r3
 8001902:	b28a      	uxth	r2, r1
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <main+0x198>)
 8001906:	801a      	strh	r2, [r3, #0]
		  fsm_modify_light(mode_counter, YELLOW_LIGHT);
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <main+0x198>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2102      	movs	r1, #2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fc10 	bl	8002134 <fsm_modify_light>
		  // Switch mode
		  if(button_count[12] == 1){
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <main+0x1a0>)
 8001916:	8b1b      	ldrh	r3, [r3, #24]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d10f      	bne.n	800193c <main+0x18c>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800191c:	2110      	movs	r1, #16
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <main+0x1a4>)
 8001920:	f001 f879 	bl	8002a16 <HAL_GPIO_TogglePin>
			  current_mode = MODE_NORMAL;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <main+0x194>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
			  fsm_normal_init();
 800192a:	f000 fad7 	bl	8001edc <fsm_normal_init>
		  }
		  break;
 800192e:	e005      	b.n	800193c <main+0x18c>
		  break;
 8001930:	bf00      	nop
 8001932:	e74d      	b.n	80017d0 <main+0x20>
		  break;
 8001934:	bf00      	nop
 8001936:	e74b      	b.n	80017d0 <main+0x20>
		  break;
 8001938:	bf00      	nop
 800193a:	e749      	b.n	80017d0 <main+0x20>
		  break;
 800193c:	bf00      	nop
	  while(!flag_timer2);
 800193e:	e747      	b.n	80017d0 <main+0x20>
 8001940:	20000050 	.word	0x20000050
 8001944:	20000058 	.word	0x20000058
 8001948:	20000056 	.word	0x20000056
 800194c:	66666667 	.word	0x66666667
 8001950:	2000005c 	.word	0x2000005c
 8001954:	40021000 	.word	0x40021000

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	; 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2230      	movs	r2, #48	; 0x30
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f003 f812 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <SystemClock_Config+0xcc>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <SystemClock_Config+0xcc>)
 8001986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <SystemClock_Config+0xcc>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <SystemClock_Config+0xd0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a21      	ldr	r2, [pc, #132]	; (8001a28 <SystemClock_Config+0xd0>)
 80019a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <SystemClock_Config+0xd0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019bc:	2310      	movs	r3, #16
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c0:	2302      	movs	r3, #2
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c8:	2308      	movs	r3, #8
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019cc:	23a8      	movs	r3, #168	; 0xa8
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 f835 	bl	8002a4c <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e8:	f000 f844 	bl	8001a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2105      	movs	r1, #5
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fa96 	bl	8002f3c <HAL_RCC_ClockConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a16:	f000 f82d 	bl	8001a74 <Error_Handler>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3750      	adds	r7, #80	; 0x50
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000

08001a2c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2120      	movs	r1, #32
 8001a34:	480e      	ldr	r0, [pc, #56]	; (8001a70 <system_init+0x44>)
 8001a36:	f000 ffd5 	bl	80029e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2140      	movs	r1, #64	; 0x40
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <system_init+0x44>)
 8001a40:	f000 ffd0 	bl	80029e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2110      	movs	r1, #16
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <system_init+0x44>)
 8001a4a:	f000 ffcb 	bl	80029e4 <HAL_GPIO_WritePin>
	  timer_init();
 8001a4e:	f000 f817 	bl	8001a80 <timer_init>
	  led7_init();
 8001a52:	f7ff fd79 	bl	8001548 <led7_init>
	  button_init();
 8001a56:	f7fe fd3b 	bl	80004d0 <button_init>
	  lcd_init();
 8001a5a:	f7ff fa5b 	bl	8000f14 <lcd_init>
	  traffic_light_init();
 8001a5e:	f000 f9c1 	bl	8001de4 <traffic_light_init>
	  lcd_clearScr();
 8001a62:	f7ff fd45 	bl	80014f0 <lcd_clearScr>
	  setTimer2(50);
 8001a66:	2032      	movs	r0, #50	; 0x32
 8001a68:	f000 f814 	bl	8001a94 <setTimer2>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <timer_init+0x10>)
 8001a86:	f002 fa5d 	bl	8003f44 <HAL_TIM_Base_Start_IT>
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000160 	.word	0x20000160

08001a94 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <setTimer2+0x30>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <setTimer2+0x30>)
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <setTimer2+0x34>)
 8001aaa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <setTimer2+0x38>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	801a      	strh	r2, [r3, #0]
	mode_counter = 0;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <setTimer2+0x3c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	20000054 	.word	0x20000054
 8001ac8:	20000052 	.word	0x20000052
 8001acc:	20000050 	.word	0x20000050
 8001ad0:	20000056 	.word	0x20000056

08001ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae4:	d116      	bne.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001af8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b0e:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001b10:	f7ff fd32 	bl	8001578 <led7_Scan>
	}
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000052 	.word	0x20000052
 8001b20:	20000050 	.word	0x20000050
 8001b24:	20000054 	.word	0x20000054

08001b28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <MX_SPI1_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b74:	220a      	movs	r2, #10
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b7a:	f001 fba7 	bl	80032cc <HAL_SPI_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b84:	f7ff ff76 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000108 	.word	0x20000108
 8001b90:	40013000 	.word	0x40013000

08001b94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bee:	2338      	movs	r3, #56	; 0x38
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001c0a:	f000 fd4f 	bl	80026ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40013000 	.word	0x40013000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler+0x4>

08001c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc0:	f000 fb9e 	bl	8002400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM2_IRQHandler+0x10>)
 8001cce:	f002 f9a9 	bl	8004024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000160 	.word	0x20000160

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	463b      	mov	r3, r7
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d26:	f240 3247 	movw	r2, #839	; 0x347
 8001d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d34:	2263      	movs	r2, #99	; 0x63
 8001d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d44:	4813      	ldr	r0, [pc, #76]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d46:	f002 f8ad 	bl	8003ea4 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d50:	f7ff fe90 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d62:	f002 fa67 	bl	8004234 <HAL_TIM_ConfigClockSource>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d6c:	f7ff fe82 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM2_Init+0x94>)
 8001d7e:	f002 fc83 	bl	8004688 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d88:	f7ff fe74 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000160 	.word	0x20000160

08001d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da8:	d115      	bne.n	8001dd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201c      	movs	r0, #28
 8001dcc:	f000 fc37 	bl	800263e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd0:	201c      	movs	r0, #28
 8001dd2:	f000 fc50 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <traffic_light_init>:

// Modify mode
uint8_t edit_index = 0;
uint16_t temp_max_counter = 0;

void traffic_light_init(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	// Setup left side
	traffic_light_reset(LEFT_SIDE, RED_LIGHT);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 f832 	bl	8001e54 <traffic_light_reset>
	traffic_light_led_coordinate[LEFT_SIDE][X_COR] = 60;
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <traffic_light_init+0x5c>)
 8001df2:	223c      	movs	r2, #60	; 0x3c
 8001df4:	701a      	strb	r2, [r3, #0]
	traffic_light_led_coordinate[LEFT_SIDE][Y_COR] = 120;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <traffic_light_init+0x5c>)
 8001df8:	2278      	movs	r2, #120	; 0x78
 8001dfa:	705a      	strb	r2, [r3, #1]
	traffic_light_number_coordinate[LEFT_SIDE][X_COR] = 35;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <traffic_light_init+0x60>)
 8001dfe:	2223      	movs	r2, #35	; 0x23
 8001e00:	701a      	strb	r2, [r3, #0]
	traffic_light_number_coordinate[LEFT_SIDE][Y_COR] = 110;
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <traffic_light_init+0x60>)
 8001e04:	226e      	movs	r2, #110	; 0x6e
 8001e06:	705a      	strb	r2, [r3, #1]

	// Setup right side
	traffic_light_reset(RIGHT_SIDE, GREEN_LIGHT);
 8001e08:	2101      	movs	r1, #1
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 f822 	bl	8001e54 <traffic_light_reset>
	traffic_light_led_coordinate[RIGHT_SIDE][X_COR] = 160;
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <traffic_light_init+0x5c>)
 8001e12:	22a0      	movs	r2, #160	; 0xa0
 8001e14:	709a      	strb	r2, [r3, #2]
	traffic_light_led_coordinate[RIGHT_SIDE][Y_COR] = 120;
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <traffic_light_init+0x5c>)
 8001e18:	2278      	movs	r2, #120	; 0x78
 8001e1a:	70da      	strb	r2, [r3, #3]
	traffic_light_number_coordinate[RIGHT_SIDE][X_COR] = 135;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <traffic_light_init+0x60>)
 8001e1e:	2287      	movs	r2, #135	; 0x87
 8001e20:	709a      	strb	r2, [r3, #2]
	traffic_light_number_coordinate[RIGHT_SIDE][Y_COR] = 110;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <traffic_light_init+0x60>)
 8001e24:	226e      	movs	r2, #110	; 0x6e
 8001e26:	70da      	strb	r2, [r3, #3]

	current_mode = MODE_NORMAL;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <traffic_light_init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
	// Modify mode
	edit_index = 0;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <traffic_light_init+0x68>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
	temp_max_counter = 0;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <traffic_light_init+0x6c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	801a      	strh	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200001b0 	.word	0x200001b0
 8001e44:	200001b4 	.word	0x200001b4
 8001e48:	20000058 	.word	0x20000058
 8001e4c:	20000059 	.word	0x20000059
 8001e50:	2000005a 	.word	0x2000005a

08001e54 <traffic_light_reset>:
void traffic_light_reset(uint8_t side, uint8_t color){
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
	traffic_light_counter[side] = traffic_light_max_time[color];
 8001e64:	79ba      	ldrb	r2, [r7, #6]
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <traffic_light_reset+0x48>)
 8001e6a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <traffic_light_reset+0x4c>)
 8001e70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	traffic_light_counter[side] = (traffic_light_counter[side] + 1);
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <traffic_light_reset+0x4c>)
 8001e78:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3201      	adds	r2, #1
 8001e80:	b291      	uxth	r1, r2
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <traffic_light_reset+0x4c>)
 8001e84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	traffic_light_state[side] = color;
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4906      	ldr	r1, [pc, #24]	; (8001ea4 <traffic_light_reset+0x50>)
 8001e8c:	79ba      	ldrb	r2, [r7, #6]
 8001e8e:	54ca      	strb	r2, [r1, r3]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	200001ac 	.word	0x200001ac
 8001ea4:	200001a8 	.word	0x200001a8

08001ea8 <blink_edit_mode>:
void blink_edit_mode(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	if(edit_index == 4){
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <blink_edit_mode+0x30>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d109      	bne.n	8001ec8 <blink_edit_mode+0x20>
		toggle_led7seg(1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff fc61 	bl	800177c <toggle_led7seg>
		toggle_led7seg(2);
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f7ff fc5e 	bl	800177c <toggle_led7seg>
		toggle_led7seg(3);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f7ff fc5b 	bl	800177c <toggle_led7seg>
	}
	else
		toggle_led7seg(edit_index);
}
 8001ec6:	e004      	b.n	8001ed2 <blink_edit_mode+0x2a>
		toggle_led7seg(edit_index);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <blink_edit_mode+0x30>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fc55 	bl	800177c <toggle_led7seg>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000059 	.word	0x20000059

08001edc <fsm_normal_init>:

// Finite state machine init
void fsm_normal_init(){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	lcd_clearScr();
 8001ee0:	f7ff fb06 	bl	80014f0 <lcd_clearScr>
	traffic_light_reset(LEFT_SIDE, RED_LIGHT);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ffb4 	bl	8001e54 <traffic_light_reset>
	traffic_light_reset(RIGHT_SIDE, GREEN_LIGHT);
 8001eec:	2101      	movs	r1, #1
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff ffb0 	bl	8001e54 <traffic_light_reset>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <fsm_modify_init>:
void fsm_modify_init(uint8_t color){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	lcd_clearScr();
 8001f02:	f7ff faf5 	bl	80014f0 <lcd_clearScr>
	edit_index = 0;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <fsm_modify_init+0x40>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
	temp_max_counter = traffic_light_max_time[color];
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <fsm_modify_init+0x44>)
 8001f10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <fsm_modify_init+0x48>)
 8001f16:	801a      	strh	r2, [r3, #0]
	led_Off(0);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff fc05 	bl	8001728 <led_Off>
	led_On(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff fbda 	bl	80016d8 <led_On>
	led_On(2);
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7ff fbd7 	bl	80016d8 <led_On>
	led_On(3);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f7ff fbd4 	bl	80016d8 <led_On>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000059 	.word	0x20000059
 8001f3c:	20000014 	.word	0x20000014
 8001f40:	2000005a 	.word	0x2000005a

08001f44 <fsm_normal>:
// Finite state machine operate
void fsm_normal(uint16_t system_timer){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
	if(system_timer > 0) return;
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 80e1 	bne.w	8002118 <fsm_normal+0x1d4>

	// Running traffic light timer
	traffic_light_counter[LEFT_SIDE]--;
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <fsm_normal+0x1dc>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <fsm_normal+0x1dc>)
 8001f60:	801a      	strh	r2, [r3, #0]
	traffic_light_counter[RIGHT_SIDE]--;
 8001f62:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <fsm_normal+0x1dc>)
 8001f64:	885b      	ldrh	r3, [r3, #2]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b6d      	ldr	r3, [pc, #436]	; (8002120 <fsm_normal+0x1dc>)
 8001f6c:	805a      	strh	r2, [r3, #2]

	// Display mode
	lcd_ShowStr(50, 30, "NORMAL MODE", WHITE, RED, 24, 0);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	2318      	movs	r3, #24
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f80:	4a68      	ldr	r2, [pc, #416]	; (8002124 <fsm_normal+0x1e0>)
 8001f82:	211e      	movs	r1, #30
 8001f84:	2032      	movs	r0, #50	; 0x32
 8001f86:	f7ff fa1d 	bl	80013c4 <lcd_ShowStr>

	// Display & switch LED mode
	for(int side = LEFT_SIDE; side <= RIGHT_SIDE; side++){
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e0be      	b.n	800210e <fsm_normal+0x1ca>
		switch(traffic_light_state[side]) {
 8001f90:	4a65      	ldr	r2, [pc, #404]	; (8002128 <fsm_normal+0x1e4>)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d078      	beq.n	800208e <fsm_normal+0x14a>
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	f300 80b3 	bgt.w	8002108 <fsm_normal+0x1c4>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <fsm_normal+0x68>
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d039      	beq.n	800201e <fsm_normal+0xda>
 8001faa:	e0ad      	b.n	8002108 <fsm_normal+0x1c4>
		case RED_LIGHT:
			// Display traffic light led & number
			lcd_DrawCircle(traffic_light_led_coordinate[side][X_COR], traffic_light_led_coordinate[side][Y_COR], RED, 40, 1);
 8001fac:	4a5f      	ldr	r2, [pc, #380]	; (800212c <fsm_normal+0x1e8>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	4a5d      	ldr	r2, [pc, #372]	; (800212c <fsm_normal+0x1e8>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2328      	movs	r3, #40	; 0x28
 8001fc8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fcc:	f7ff f98d 	bl	80012ea <lcd_DrawCircle>
			lcd_ShowIntNum(traffic_light_number_coordinate[side][X_COR], traffic_light_number_coordinate[side][Y_COR], traffic_light_counter[side], 3, WHITE, RED, 24);
 8001fd0:	4a57      	ldr	r2, [pc, #348]	; (8002130 <fsm_normal+0x1ec>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	4a55      	ldr	r2, [pc, #340]	; (8002130 <fsm_normal+0x1ec>)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	b299      	uxth	r1, r3
 8001fe6:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <fsm_normal+0x1dc>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fee:	2318      	movs	r3, #24
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2303      	movs	r3, #3
 8002000:	f7fe fe90 	bl	8000d24 <lcd_ShowIntNum>
			if(traffic_light_counter[side] <= 1) {// Change from RED to GREEN
 8002004:	4a46      	ldr	r2, [pc, #280]	; (8002120 <fsm_normal+0x1dc>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d876      	bhi.n	80020fe <fsm_normal+0x1ba>
				traffic_light_reset(side, GREEN_LIGHT);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff1c 	bl	8001e54 <traffic_light_reset>
			}
			break;
 800201c:	e06f      	b.n	80020fe <fsm_normal+0x1ba>
		case GREEN_LIGHT:
			// Display traffic light led & number
			lcd_DrawCircle(traffic_light_led_coordinate[side][X_COR], traffic_light_led_coordinate[side][Y_COR], GREEN, 40, 1);
 800201e:	4a43      	ldr	r2, [pc, #268]	; (800212c <fsm_normal+0x1e8>)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002026:	4618      	mov	r0, r3
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <fsm_normal+0x1e8>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	4619      	mov	r1, r3
 8002034:	2301      	movs	r3, #1
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2328      	movs	r3, #40	; 0x28
 800203a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800203e:	f7ff f954 	bl	80012ea <lcd_DrawCircle>
			lcd_ShowIntNum(traffic_light_number_coordinate[side][X_COR], traffic_light_number_coordinate[side][Y_COR], traffic_light_counter[side], 3, BLACK, GREEN, 24);
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <fsm_normal+0x1ec>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800204a:	b298      	uxth	r0, r3
 800204c:	4a38      	ldr	r2, [pc, #224]	; (8002130 <fsm_normal+0x1ec>)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	b299      	uxth	r1, r3
 8002058:	4a31      	ldr	r2, [pc, #196]	; (8002120 <fsm_normal+0x1dc>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002060:	2318      	movs	r3, #24
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2303      	movs	r3, #3
 8002070:	f7fe fe58 	bl	8000d24 <lcd_ShowIntNum>
			if(traffic_light_counter[side] <= 1) {// Change from GREEN to YELLOW
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <fsm_normal+0x1dc>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d840      	bhi.n	8002102 <fsm_normal+0x1be>
				traffic_light_reset(side, YELLOW_LIGHT);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fee4 	bl	8001e54 <traffic_light_reset>
			}
			break;
 800208c:	e039      	b.n	8002102 <fsm_normal+0x1be>
		case YELLOW_LIGHT:
			// Display traffic light led & number
			lcd_DrawCircle(traffic_light_led_coordinate[side][X_COR], traffic_light_led_coordinate[side][Y_COR], YELLOW, 40, 1);
 800208e:	4a27      	ldr	r2, [pc, #156]	; (800212c <fsm_normal+0x1e8>)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002096:	4618      	mov	r0, r3
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <fsm_normal+0x1e8>)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	785b      	ldrb	r3, [r3, #1]
 80020a2:	4619      	mov	r1, r3
 80020a4:	2301      	movs	r3, #1
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2328      	movs	r3, #40	; 0x28
 80020aa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80020ae:	f7ff f91c 	bl	80012ea <lcd_DrawCircle>
			lcd_ShowIntNum(traffic_light_number_coordinate[side][X_COR], traffic_light_number_coordinate[side][Y_COR], traffic_light_counter[side], 3, BLACK, YELLOW, 24);
 80020b2:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <fsm_normal+0x1ec>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80020ba:	b298      	uxth	r0, r3
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <fsm_normal+0x1ec>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	785b      	ldrb	r3, [r3, #1]
 80020c6:	b299      	uxth	r1, r3
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <fsm_normal+0x1dc>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d0:	2318      	movs	r3, #24
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2300      	movs	r3, #0
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2303      	movs	r3, #3
 80020e0:	f7fe fe20 	bl	8000d24 <lcd_ShowIntNum>
			if(traffic_light_counter[side] <= 1) {// Change from YELLOW to RED
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <fsm_normal+0x1dc>)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d80a      	bhi.n	8002106 <fsm_normal+0x1c2>
				traffic_light_reset(side, RED_LIGHT);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff feac 	bl	8001e54 <traffic_light_reset>
			}
			break;
 80020fc:	e003      	b.n	8002106 <fsm_normal+0x1c2>
			break;
 80020fe:	bf00      	nop
 8002100:	e002      	b.n	8002108 <fsm_normal+0x1c4>
			break;
 8002102:	bf00      	nop
 8002104:	e000      	b.n	8002108 <fsm_normal+0x1c4>
			break;
 8002106:	bf00      	nop
	for(int side = LEFT_SIDE; side <= RIGHT_SIDE; side++){
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3301      	adds	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	f77f af3d 	ble.w	8001f90 <fsm_normal+0x4c>
 8002116:	e000      	b.n	800211a <fsm_normal+0x1d6>
	if(system_timer > 0) return;
 8002118:	bf00      	nop
		}
	}
}
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200001ac 	.word	0x200001ac
 8002124:	080049c0 	.word	0x080049c0
 8002128:	200001a8 	.word	0x200001a8
 800212c:	200001b0 	.word	0x200001b0
 8002130:	200001b4 	.word	0x200001b4

08002134 <fsm_modify_light>:
void fsm_modify_light(uint16_t system_timer, uint8_t color){
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af04      	add	r7, sp, #16
 800213a:	4603      	mov	r3, r0
 800213c:	460a      	mov	r2, r1
 800213e:	80fb      	strh	r3, [r7, #6]
 8002140:	4613      	mov	r3, r2
 8002142:	717b      	strb	r3, [r7, #5]
	if(system_timer > 0) return;
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f040 80c9 	bne.w	80022de <fsm_modify_light+0x1aa>
	else blink_edit_mode();
 800214c:	f7ff feac 	bl	8001ea8 <blink_edit_mode>
	// Display LED 7 segments
	led7_SetDigit(temp_max_counter / 100, 1, 0);
 8002150:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <fsm_modify_light+0x1b4>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	; (80022ec <fsm_modify_light+0x1b8>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	b29b      	uxth	r3, r3
 800215e:	2200      	movs	r2, #0
 8002160:	2101      	movs	r1, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa94 	bl	8001690 <led7_SetDigit>
	led7_SetDigit((temp_max_counter / 10) % 10, 2, 0);
 8002168:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <fsm_modify_light+0x1b4>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <fsm_modify_light+0x1bc>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	08db      	lsrs	r3, r3, #3
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <fsm_modify_light+0x1bc>)
 8002178:	fba3 1302 	umull	r1, r3, r3, r2
 800217c:	08d9      	lsrs	r1, r3, #3
 800217e:	460b      	mov	r3, r1
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b29b      	uxth	r3, r3
 800218a:	2200      	movs	r2, #0
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fa7e 	bl	8001690 <led7_SetDigit>
	led7_SetDigit(temp_max_counter % 10, 3, 0);
 8002194:	4b54      	ldr	r3, [pc, #336]	; (80022e8 <fsm_modify_light+0x1b4>)
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <fsm_modify_light+0x1bc>)
 800219a:	fba3 1302 	umull	r1, r3, r3, r2
 800219e:	08d9      	lsrs	r1, r3, #3
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	2103      	movs	r1, #3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fa6d 	bl	8001690 <led7_SetDigit>

	// Display mode
	switch(color){
 80021b6:	797b      	ldrb	r3, [r7, #5]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d063      	beq.n	8002284 <fsm_modify_light+0x150>
 80021bc:	2b02      	cmp	r3, #2
 80021be:	f300 808f 	bgt.w	80022e0 <fsm_modify_light+0x1ac>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <fsm_modify_light+0x98>
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d02f      	beq.n	800222a <fsm_modify_light+0xf6>
 80021ca:	e089      	b.n	80022e0 <fsm_modify_light+0x1ac>
	case RED_LIGHT:
		lcd_ShowStr(50, 30, "MODIFY RED", WHITE, RED, 24, 0);
 80021cc:	2300      	movs	r3, #0
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2318      	movs	r3, #24
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021de:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <fsm_modify_light+0x1c0>)
 80021e0:	211e      	movs	r1, #30
 80021e2:	2032      	movs	r0, #50	; 0x32
 80021e4:	f7ff f8ee 	bl	80013c4 <lcd_ShowStr>
		lcd_DrawCircle(traffic_light_led_coordinate[LEFT_SIDE][X_COR], traffic_light_led_coordinate[LEFT_SIDE][Y_COR], RED, 40, 1);
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <fsm_modify_light+0x1c4>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <fsm_modify_light+0x1c4>)
 80021f0:	785b      	ldrb	r3, [r3, #1]
 80021f2:	4619      	mov	r1, r3
 80021f4:	2301      	movs	r3, #1
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2328      	movs	r3, #40	; 0x28
 80021fa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021fe:	f7ff f874 	bl	80012ea <lcd_DrawCircle>
		lcd_ShowIntNum(traffic_light_number_coordinate[RIGHT_SIDE][X_COR], traffic_light_number_coordinate[RIGHT_SIDE][Y_COR], temp_max_counter, 4, WHITE, RED, 24);
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <fsm_modify_light+0x1c8>)
 8002204:	789b      	ldrb	r3, [r3, #2]
 8002206:	b298      	uxth	r0, r3
 8002208:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <fsm_modify_light+0x1c8>)
 800220a:	78db      	ldrb	r3, [r3, #3]
 800220c:	b299      	uxth	r1, r3
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <fsm_modify_light+0x1b4>)
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	2318      	movs	r3, #24
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2304      	movs	r3, #4
 8002224:	f7fe fd7e 	bl	8000d24 <lcd_ShowIntNum>
		break;
 8002228:	e05a      	b.n	80022e0 <fsm_modify_light+0x1ac>
	case GREEN_LIGHT:
		lcd_ShowStr(50, 30, "NORMAL GREEN", BLACK, GREEN, 24, 0);
 800222a:	2300      	movs	r3, #0
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	2318      	movs	r3, #24
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	4a31      	ldr	r2, [pc, #196]	; (8002300 <fsm_modify_light+0x1cc>)
 800223c:	211e      	movs	r1, #30
 800223e:	2032      	movs	r0, #50	; 0x32
 8002240:	f7ff f8c0 	bl	80013c4 <lcd_ShowStr>
		lcd_DrawCircle(traffic_light_led_coordinate[LEFT_SIDE][X_COR], traffic_light_led_coordinate[LEFT_SIDE][Y_COR], GREEN, 40, 1);
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <fsm_modify_light+0x1c4>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <fsm_modify_light+0x1c4>)
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	4619      	mov	r1, r3
 8002250:	2301      	movs	r3, #1
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2328      	movs	r3, #40	; 0x28
 8002256:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800225a:	f7ff f846 	bl	80012ea <lcd_DrawCircle>
		lcd_ShowIntNum(traffic_light_number_coordinate[RIGHT_SIDE][X_COR], traffic_light_number_coordinate[RIGHT_SIDE][Y_COR], temp_max_counter, 4, BLACK, GREEN, 24);
 800225e:	4b27      	ldr	r3, [pc, #156]	; (80022fc <fsm_modify_light+0x1c8>)
 8002260:	789b      	ldrb	r3, [r3, #2]
 8002262:	b298      	uxth	r0, r3
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <fsm_modify_light+0x1c8>)
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	b299      	uxth	r1, r3
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <fsm_modify_light+0x1b4>)
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	2318      	movs	r3, #24
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	2300      	movs	r3, #0
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2304      	movs	r3, #4
 800227e:	f7fe fd51 	bl	8000d24 <lcd_ShowIntNum>
		break;
 8002282:	e02d      	b.n	80022e0 <fsm_modify_light+0x1ac>
	case YELLOW_LIGHT:
		lcd_ShowStr(50, 30, "NORMAL YELLOW", BLACK, YELLOW, 24, 0);
 8002284:	2300      	movs	r3, #0
 8002286:	9302      	str	r3, [sp, #8]
 8002288:	2318      	movs	r3, #24
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <fsm_modify_light+0x1d0>)
 8002296:	211e      	movs	r1, #30
 8002298:	2032      	movs	r0, #50	; 0x32
 800229a:	f7ff f893 	bl	80013c4 <lcd_ShowStr>
		lcd_DrawCircle(traffic_light_led_coordinate[LEFT_SIDE][X_COR], traffic_light_led_coordinate[LEFT_SIDE][Y_COR], YELLOW, 40, 1);
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <fsm_modify_light+0x1c4>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <fsm_modify_light+0x1c4>)
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	4619      	mov	r1, r3
 80022aa:	2301      	movs	r3, #1
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2328      	movs	r3, #40	; 0x28
 80022b0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80022b4:	f7ff f819 	bl	80012ea <lcd_DrawCircle>
		lcd_ShowIntNum(traffic_light_number_coordinate[RIGHT_SIDE][X_COR], traffic_light_number_coordinate[RIGHT_SIDE][Y_COR], temp_max_counter, 4, BLACK, YELLOW, 24);
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <fsm_modify_light+0x1c8>)
 80022ba:	789b      	ldrb	r3, [r3, #2]
 80022bc:	b298      	uxth	r0, r3
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <fsm_modify_light+0x1c8>)
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	b299      	uxth	r1, r3
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <fsm_modify_light+0x1b4>)
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	2318      	movs	r3, #24
 80022ca:	9302      	str	r3, [sp, #8]
 80022cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2300      	movs	r3, #0
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2304      	movs	r3, #4
 80022d8:	f7fe fd24 	bl	8000d24 <lcd_ShowIntNum>
		break;
 80022dc:	e000      	b.n	80022e0 <fsm_modify_light+0x1ac>
	if(system_timer > 0) return;
 80022de:	bf00      	nop
	}

	// User edit

}
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000005a 	.word	0x2000005a
 80022ec:	51eb851f 	.word	0x51eb851f
 80022f0:	cccccccd 	.word	0xcccccccd
 80022f4:	080049cc 	.word	0x080049cc
 80022f8:	200001b0 	.word	0x200001b0
 80022fc:	200001b4 	.word	0x200001b4
 8002300:	080049d8 	.word	0x080049d8
 8002304:	080049e8 	.word	0x080049e8

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002332:	f7ff fcd3 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f002 fb07 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233a:	f7ff fa39 	bl	80017b0 <main>
  bx  lr    
 800233e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800234c:	0800b8e0 	.word	0x0800b8e0
  ldr r2, =_sbss
 8002350:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002354:	200001bc 	.word	0x200001bc

08002358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>
	...

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_Init+0x40>)
 8002366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0a      	ldr	r2, [pc, #40]	; (800239c <HAL_Init+0x40>)
 8002372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_Init+0x40>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f94f 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238a:	200f      	movs	r0, #15
 800238c:	f000 f808 	bl	80023a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002390:	f7ff fc48 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x54>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_InitTick+0x58>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f967 	bl	8002692 <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00e      	b.n	80023ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d80a      	bhi.n	80023ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f000 f92f 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e0:	4a06      	ldr	r2, [pc, #24]	; (80023fc <HAL_InitTick+0x5c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000010 	.word	0x20000010
 80023f8:	20000020 	.word	0x20000020
 80023fc:	2000001c 	.word	0x2000001c

08002400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_IncTick+0x20>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <HAL_IncTick+0x24>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_IncTick+0x24>)
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000020 	.word	0x20000020
 8002424:	200001b8 	.word	0x200001b8

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200001b8 	.word	0x200001b8

08002440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002448:	f7ff ffee 	bl	8002428 <HAL_GetTick>
 800244c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002458:	d005      	beq.n	8002466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <HAL_Delay+0x44>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002466:	bf00      	nop
 8002468:	f7ff ffde 	bl	8002428 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d8f7      	bhi.n	8002468 <HAL_Delay+0x28>
  {
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000020 	.word	0x20000020

08002488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a4:	4013      	ands	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ba:	4a04      	ldr	r2, [pc, #16]	; (80024cc <__NVIC_SetPriorityGrouping+0x44>)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <__NVIC_GetPriorityGrouping+0x18>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0307 	and.w	r3, r3, #7
}
 80024de:	4618      	mov	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db0b      	blt.n	8002516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <__NVIC_EnableIRQ+0x38>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff29 	bl	8002488 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff3e 	bl	80024d0 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff31 	bl	80024ec <__NVIC_EnableIRQ>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffa2 	bl	80025e4 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e16b      	b.n	80029a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 815a 	bne.w	800299a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80b4 	beq.w	800299a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b60      	ldr	r3, [pc, #384]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5d      	ldr	r3, [pc, #372]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a5b      	ldr	r2, [pc, #364]	; (80029bc <HAL_GPIO_Init+0x310>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x314>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_GPIO_Init+0x318>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_GPIO_Init+0x31c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x320>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4e      	ldr	r2, [pc, #312]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x216>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4d      	ldr	r2, [pc, #308]	; (80029d4 <HAL_GPIO_Init+0x328>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x212>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <HAL_GPIO_Init+0x32c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x20e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4b      	ldr	r2, [pc, #300]	; (80029dc <HAL_GPIO_Init+0x330>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x20a>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e00e      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028b6:	2308      	movs	r3, #8
 80028b8:	e00c      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ba:	2306      	movs	r3, #6
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028be:	2305      	movs	r3, #5
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x228>
 80028d2:	2300      	movs	r3, #0
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	f002 0203 	and.w	r2, r2, #3
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x310>)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_GPIO_Init+0x334>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800291c:	4b30      	ldr	r3, [pc, #192]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296a:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_GPIO_Init+0x334>)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002970:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002994:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3301      	adds	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b0f      	cmp	r3, #15
 80029a4:	f67f ae90 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3724      	adds	r7, #36	; 0x24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40020000 	.word	0x40020000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020c00 	.word	0x40020c00
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021400 	.word	0x40021400
 80029d8:	40021800 	.word	0x40021800
 80029dc:	40021c00 	.word	0x40021c00
 80029e0:	40013c00 	.word	0x40013c00

080029e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fa:	887a      	ldrh	r2, [r7, #2]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	041a      	lsls	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	619a      	str	r2, [r3, #24]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a28:	887a      	ldrh	r2, [r7, #2]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	400b      	ands	r3, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	619a      	str	r2, [r3, #24]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e264      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d075      	beq.n	8002b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6a:	4ba3      	ldr	r3, [pc, #652]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d00c      	beq.n	8002a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a76:	4ba0      	ldr	r3, [pc, #640]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d112      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a82:	4b9d      	ldr	r3, [pc, #628]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a90:	4b99      	ldr	r3, [pc, #612]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d05b      	beq.n	8002b54 <HAL_RCC_OscConfig+0x108>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d157      	bne.n	8002b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e23f      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x74>
 8002ab2:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a90      	ldr	r2, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e01d      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x98>
 8002aca:	4b8b      	ldr	r3, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a8a      	ldr	r2, [pc, #552]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	4b88      	ldr	r3, [pc, #544]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a87      	ldr	r2, [pc, #540]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0xb0>
 8002ae4:	4b84      	ldr	r3, [pc, #528]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a83      	ldr	r2, [pc, #524]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b81      	ldr	r3, [pc, #516]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d013      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b04:	f7ff fc90 	bl	8002428 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7ff fc8c 	bl	8002428 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e204      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0xc0>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fc7c 	bl	8002428 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff fc78 	bl	8002428 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1f0      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b46:	4b6c      	ldr	r3, [pc, #432]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0xe8>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d063      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	4b62      	ldr	r3, [pc, #392]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d11c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d116      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e1c4      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4952      	ldr	r1, [pc, #328]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	e03a      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <HAL_RCC_OscConfig+0x2b0>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fc31 	bl	8002428 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bca:	f7ff fc2d 	bl	8002428 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1a5      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4940      	ldr	r1, [pc, #256]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
 8002bfc:	e015      	b.n	8002c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x2b0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7ff fc10 	bl	8002428 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0c:	f7ff fc0c 	bl	8002428 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e184      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d030      	beq.n	8002c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_OscConfig+0x2b4>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7ff fbf0 	bl	8002428 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c4c:	f7ff fbec 	bl	8002428 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e164      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x200>
 8002c6a:	e015      	b.n	8002c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6c:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <HAL_RCC_OscConfig+0x2b4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c72:	f7ff fbd9 	bl	8002428 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7a:	f7ff fbd5 	bl	8002428 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e14d      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a0 	beq.w	8002de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_RCC_OscConfig+0x2b8>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7ff fb9b 	bl	8002428 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x2ce>
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	42470000 	.word	0x42470000
 8002d00:	42470e80 	.word	0x42470e80
 8002d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d08:	f7ff fb8e 	bl	8002428 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e106      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x4e4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2f0>
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	4a80      	ldr	r2, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	; 0x70
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x312>
 8002d44:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d50:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x32a>
 8002d5e:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a71      	ldr	r2, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7e:	f7ff fb53 	bl	8002428 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7ff fb4f 	bl	8002428 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0c5      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x33a>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7ff fb3d 	bl	8002428 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7ff fb39 	bl	8002428 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0af      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a55      	ldr	r2, [pc, #340]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 809b 	beq.w	8002f26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d05c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d141      	bne.n	8002e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fb0d 	bl	8002428 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7ff fb09 	bl	8002428 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e081      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	431a      	orrs	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4937      	ldr	r1, [pc, #220]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7ff fae2 	bl	8002428 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7ff fade 	bl	8002428 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e056      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x41c>
 8002e86:	e04e      	b.n	8002f26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_OscConfig+0x4ec>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7ff facb 	bl	8002428 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e96:	f7ff fac7 	bl	8002428 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e03f      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x44a>
 8002eb4:	e037      	b.n	8002f26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e032      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d028      	beq.n	8002f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d121      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d11a      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40007000 	.word	0x40007000
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470060 	.word	0x42470060

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0cc      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d90c      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b63      	ldr	r3, [pc, #396]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb4:	4b50      	ldr	r3, [pc, #320]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	494d      	ldr	r1, [pc, #308]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d044      	beq.n	800305c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d119      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e07f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e067      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4934      	ldr	r1, [pc, #208]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	4313      	orrs	r3, r2
 800302a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800302c:	f7ff f9fc 	bl	8002428 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	e00a      	b.n	800304a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003034:	f7ff f9f8 	bl	8002428 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e04f      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 020c 	and.w	r2, r3, #12
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	429a      	cmp	r2, r3
 800305a:	d1eb      	bne.n	8003034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d20c      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306a:	4b22      	ldr	r3, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e032      	b.n	80030ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c2:	f000 f821 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f95c 	bl	80023a0 <HAL_InitTick>

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023c00 	.word	0x40023c00
 80030f8:	40023800 	.word	0x40023800
 80030fc:	0800b8c0 	.word	0x0800b8c0
 8003100:	20000010 	.word	0x20000010
 8003104:	2000001c 	.word	0x2000001c

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	2300      	movs	r3, #0
 800311a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003120:	4b67      	ldr	r3, [pc, #412]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d00d      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x40>
 800312c:	2b08      	cmp	r3, #8
 800312e:	f200 80bd 	bhi.w	80032ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x34>
 8003136:	2b04      	cmp	r3, #4
 8003138:	d003      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x3a>
 800313a:	e0b7      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800313e:	60bb      	str	r3, [r7, #8]
       break;
 8003140:	e0b7      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003142:	4b61      	ldr	r3, [pc, #388]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e0b4      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003148:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003150:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003152:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04d      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315e:	4b58      	ldr	r3, [pc, #352]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	099b      	lsrs	r3, r3, #6
 8003164:	461a      	mov	r2, r3
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800316e:	f04f 0100 	mov.w	r1, #0
 8003172:	ea02 0800 	and.w	r8, r2, r0
 8003176:	ea03 0901 	and.w	r9, r3, r1
 800317a:	4640      	mov	r0, r8
 800317c:	4649      	mov	r1, r9
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	014b      	lsls	r3, r1, #5
 8003188:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800318c:	0142      	lsls	r2, r0, #5
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	ebb0 0008 	subs.w	r0, r0, r8
 8003196:	eb61 0109 	sbc.w	r1, r1, r9
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031a8:	0182      	lsls	r2, r0, #6
 80031aa:	1a12      	subs	r2, r2, r0
 80031ac:	eb63 0301 	sbc.w	r3, r3, r1
 80031b0:	f04f 0000 	mov.w	r0, #0
 80031b4:	f04f 0100 	mov.w	r1, #0
 80031b8:	00d9      	lsls	r1, r3, #3
 80031ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031be:	00d0      	lsls	r0, r2, #3
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	eb12 0208 	adds.w	r2, r2, r8
 80031c8:	eb43 0309 	adc.w	r3, r3, r9
 80031cc:	f04f 0000 	mov.w	r0, #0
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	0259      	lsls	r1, r3, #9
 80031d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031da:	0250      	lsls	r0, r2, #9
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	f7fc fff4 	bl	80001d8 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	e04a      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	461a      	mov	r2, r3
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	f240 10ff 	movw	r0, #511	; 0x1ff
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	ea02 0400 	and.w	r4, r2, r0
 8003212:	ea03 0501 	and.w	r5, r3, r1
 8003216:	4620      	mov	r0, r4
 8003218:	4629      	mov	r1, r5
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	014b      	lsls	r3, r1, #5
 8003224:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003228:	0142      	lsls	r2, r0, #5
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	1b00      	subs	r0, r0, r4
 8003230:	eb61 0105 	sbc.w	r1, r1, r5
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	018b      	lsls	r3, r1, #6
 800323e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003242:	0182      	lsls	r2, r0, #6
 8003244:	1a12      	subs	r2, r2, r0
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	f04f 0000 	mov.w	r0, #0
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	00d9      	lsls	r1, r3, #3
 8003254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003258:	00d0      	lsls	r0, r2, #3
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	1912      	adds	r2, r2, r4
 8003260:	eb45 0303 	adc.w	r3, r5, r3
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0299      	lsls	r1, r3, #10
 800326e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003272:	0290      	lsls	r0, r2, #10
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f7fc ffa8 	bl	80001d8 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	3301      	adds	r3, #1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	60bb      	str	r3, [r7, #8]
      break;
 80032aa:	e002      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032ae:	60bb      	str	r3, [r7, #8]
      break;
 80032b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b2:	68bb      	ldr	r3, [r7, #8]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400
 80032c8:	007a1200 	.word	0x007a1200

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07b      	b.n	80033d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	61da      	str	r2, [r3, #28]
 80032f6:	e005      	b.n	8003304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fc38 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	f003 0104 	and.w	r1, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	f003 0210 	and.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_SPI_Transmit+0x22>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e126      	b.n	800364e <HAL_SPI_Transmit+0x270>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003408:	f7ff f80e 	bl	8002428 <HAL_GetTick>
 800340c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003422:	e10b      	b.n	800363c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_Transmit+0x52>
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003434:	e102      	b.n	800363c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	88fa      	ldrh	r2, [r7, #6]
 8003454:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347c:	d10f      	bne.n	800349e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d007      	beq.n	80034bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c4:	d14b      	bne.n	800355e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_SPI_Transmit+0xf6>
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d13e      	bne.n	8003552 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034f8:	e02b      	b.n	8003552 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d112      	bne.n	800352e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	881a      	ldrh	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	1c9a      	adds	r2, r3, #2
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	86da      	strh	r2, [r3, #54]	; 0x36
 800352c:	e011      	b.n	8003552 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800352e:	f7fe ff7b 	bl	8002428 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d803      	bhi.n	8003546 <HAL_SPI_Transmit+0x168>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d102      	bne.n	800354c <HAL_SPI_Transmit+0x16e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003550:	e074      	b.n	800363c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ce      	bne.n	80034fa <HAL_SPI_Transmit+0x11c>
 800355c:	e04c      	b.n	80035f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_SPI_Transmit+0x18e>
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d140      	bne.n	80035ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	330c      	adds	r3, #12
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003592:	e02c      	b.n	80035ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d113      	bne.n	80035ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80035c8:	e011      	b.n	80035ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ca:	f7fe ff2d 	bl	8002428 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d803      	bhi.n	80035e2 <HAL_SPI_Transmit+0x204>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d102      	bne.n	80035e8 <HAL_SPI_Transmit+0x20a>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035ec:	e026      	b.n	800363c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1cd      	bne.n	8003594 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	6839      	ldr	r1, [r7, #0]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 fbcb 	bl	8003d98 <SPI_EndRxTxTransaction>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e000      	b.n	800363c <HAL_SPI_Transmit+0x25e>
  }

error:
 800363a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800364c:	7ffb      	ldrb	r3, [r7, #31]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b088      	sub	sp, #32
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003672:	d112      	bne.n	800369a <HAL_SPI_Receive+0x44>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10e      	bne.n	800369a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2204      	movs	r2, #4
 8003680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f8f1 	bl	8003878 <HAL_SPI_TransmitReceive>
 8003696:	4603      	mov	r3, r0
 8003698:	e0ea      	b.n	8003870 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_SPI_Receive+0x52>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0e3      	b.n	8003870 <HAL_SPI_Receive+0x21a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b0:	f7fe feba 	bl	8002428 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
 80036c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036c6:	e0ca      	b.n	800385e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_SPI_Receive+0x7e>
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036d8:	e0c1      	b.n	800385e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2204      	movs	r2, #4
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d10f      	bne.n	8003742 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d007      	beq.n	8003760 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d162      	bne.n	800382e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003768:	e02e      	b.n	80037c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d115      	bne.n	80037a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f103 020c 	add.w	r2, r3, #12
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037a2:	e011      	b.n	80037c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a4:	f7fe fe40 	bl	8002428 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d803      	bhi.n	80037bc <HAL_SPI_Receive+0x166>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d102      	bne.n	80037c2 <HAL_SPI_Receive+0x16c>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80037c6:	e04a      	b.n	800385e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1cb      	bne.n	800376a <HAL_SPI_Receive+0x114>
 80037d2:	e031      	b.n	8003838 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d113      	bne.n	800380a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	b292      	uxth	r2, r2
 80037ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	1c9a      	adds	r2, r3, #2
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003808:	e011      	b.n	800382e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800380a:	f7fe fe0d 	bl	8002428 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d803      	bhi.n	8003822 <HAL_SPI_Receive+0x1cc>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d102      	bne.n	8003828 <HAL_SPI_Receive+0x1d2>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800382c:	e017      	b.n	800385e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1cd      	bne.n	80037d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fa45 	bl	8003ccc <SPI_EndRxTransaction>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
 800385a:	e000      	b.n	800385e <HAL_SPI_Receive+0x208>
  }

error :
 800385c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003886:	2301      	movs	r3, #1
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_SPI_TransmitReceive+0x26>
 800389a:	2302      	movs	r3, #2
 800389c:	e18a      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x33c>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a6:	f7fe fdbf 	bl	8002428 <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d00f      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x70>
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d107      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x68>
 80038d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d003      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038e6:	e15b      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_SPI_TransmitReceive+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_TransmitReceive+0x82>
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003900:	e14e      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b04      	cmp	r3, #4
 800390c:	d003      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2205      	movs	r2, #5
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	887a      	ldrh	r2, [r7, #2]
 800393e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d007      	beq.n	800396a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d178      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x10a>
 800397c:	8b7b      	ldrh	r3, [r7, #26]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d166      	bne.n	8003a50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a6:	e053      	b.n	8003a50 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d11b      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x176>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x176>
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d113      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	1c9a      	adds	r2, r3, #2
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d119      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x1b8>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d014      	beq.n	8003a30 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	b292      	uxth	r2, r2
 8003a12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a30:	f7fe fcfa 	bl	8002428 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d807      	bhi.n	8003a50 <HAL_SPI_TransmitReceive+0x1d8>
 8003a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d003      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a4e:	e0a7      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1a6      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x130>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1a1      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x130>
 8003a64:	e07c      	b.n	8003b60 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x1fc>
 8003a6e:	8b7b      	ldrh	r3, [r7, #26]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d16b      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9a:	e057      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x26c>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d017      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x26c>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d114      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d119      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x2ae>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d014      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b26:	f7fe fc7f 	bl	8002428 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d803      	bhi.n	8003b3e <HAL_SPI_TransmitReceive+0x2c6>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d102      	bne.n	8003b44 <HAL_SPI_TransmitReceive+0x2cc>
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d103      	bne.n	8003b4c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b4a:	e029      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1a2      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x224>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d19d      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f917 	bl	8003d98 <SPI_EndRxTxTransaction>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b7c:	e010      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e000      	b.n	8003ba0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3730      	adds	r7, #48	; 0x30
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bcc:	f7fe fc2c 	bl	8002428 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bdc:	f7fe fc24 	bl	8002428 <HAL_GetTick>
 8003be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	015b      	lsls	r3, r3, #5
 8003be8:	0d1b      	lsrs	r3, r3, #20
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf2:	e054      	b.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d050      	beq.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bfc:	f7fe fc14 	bl	8002428 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d902      	bls.n	8003c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d13d      	bne.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c2a:	d111      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c34:	d004      	beq.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d107      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c58:	d10f      	bne.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e017      	b.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	bf0c      	ite	eq
 8003cae:	2301      	moveq	r3, #1
 8003cb0:	2300      	movne	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d19b      	bne.n	8003bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000010 	.word	0x20000010

08003ccc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce0:	d111      	bne.n	8003d06 <SPI_EndRxTransaction+0x3a>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cea:	d004      	beq.n	8003cf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d107      	bne.n	8003d06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d0e:	d12a      	bne.n	8003d66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d012      	beq.n	8003d40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff ff49 	bl	8003bbc <SPI_WaitFlagStateUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d02d      	beq.n	8003d8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0220 	orr.w	r2, r3, #32
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e026      	b.n	8003d8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	2101      	movs	r1, #1
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f7ff ff36 	bl	8003bbc <SPI_WaitFlagStateUntilTimeout>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01a      	beq.n	8003d8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e013      	b.n	8003d8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2101      	movs	r1, #1
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff23 	bl	8003bbc <SPI_WaitFlagStateUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d007      	beq.n	8003d8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e000      	b.n	8003d8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <SPI_EndRxTxTransaction+0x7c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <SPI_EndRxTxTransaction+0x80>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0d5b      	lsrs	r3, r3, #21
 8003db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003db4:	fb02 f303 	mul.w	r3, r2, r3
 8003db8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc2:	d112      	bne.n	8003dea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fef4 	bl	8003bbc <SPI_WaitFlagStateUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e00f      	b.n	8003e0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e00:	2b80      	cmp	r3, #128	; 0x80
 8003e02:	d0f2      	beq.n	8003dea <SPI_EndRxTxTransaction+0x52>
 8003e04:	e000      	b.n	8003e08 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e06:	bf00      	nop
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000010 	.word	0x20000010
 8003e18:	165e9f81 	.word	0x165e9f81

08003e1c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e034      	b.n	8003e9c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7fc fc80 	bl	800074c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3308      	adds	r3, #8
 8003e54:	4619      	mov	r1, r3
 8003e56:	4610      	mov	r0, r2
 8003e58:	f000 fca6 	bl	80047a8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68b9      	ldr	r1, [r7, #8]
 8003e68:	f000 fcf0 	bl	800484c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6858      	ldr	r0, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	f000 fd25 	bl	80048c8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	f041 0101 	orr.w	r1, r1, #1
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e041      	b.n	8003f3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd ff64 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f000 fa96 	bl	8004414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d001      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e04e      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a23      	ldr	r2, [pc, #140]	; (8004008 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d022      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d01d      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_TIM_Base_Start_IT+0xc8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_Base_Start_IT+0x80>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d111      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d010      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e007      	b.n	8003ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40010000 	.word	0x40010000
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40010400 	.word	0x40010400
 800401c:	40014000 	.word	0x40014000
 8004020:	40001800 	.word	0x40001800

08004024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d122      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d11b      	bne.n	8004080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0202 	mvn.w	r2, #2
 8004050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9b5 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f9a7 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9b8 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d122      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11b      	bne.n	80040d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f06f 0204 	mvn.w	r2, #4
 80040a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f98b 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 80040c0:	e005      	b.n	80040ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f97d 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f98e 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0208 	mvn.w	r2, #8
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f961 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f953 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f964 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b10      	cmp	r3, #16
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0210 	mvn.w	r2, #16
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2208      	movs	r2, #8
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f937 	bl	80043d6 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f929 	bl	80043c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f93a 	bl	80043ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10e      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0201 	mvn.w	r2, #1
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fc96 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d10e      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d107      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fae0 	bl	8004794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8ff 	bl	80043fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0220 	mvn.w	r2, #32
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 faaa 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIM_ConfigClockSource+0x1c>
 800424c:	2302      	movs	r3, #2
 800424e:	e0b4      	b.n	80043ba <HAL_TIM_ConfigClockSource+0x186>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800426e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004288:	d03e      	beq.n	8004308 <HAL_TIM_ConfigClockSource+0xd4>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428e:	f200 8087 	bhi.w	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	f000 8086 	beq.w	80043a6 <HAL_TIM_ConfigClockSource+0x172>
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d87f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b70      	cmp	r3, #112	; 0x70
 80042a2:	d01a      	beq.n	80042da <HAL_TIM_ConfigClockSource+0xa6>
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d87b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b60      	cmp	r3, #96	; 0x60
 80042aa:	d050      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x11a>
 80042ac:	2b60      	cmp	r3, #96	; 0x60
 80042ae:	d877      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b50      	cmp	r3, #80	; 0x50
 80042b2:	d03c      	beq.n	800432e <HAL_TIM_ConfigClockSource+0xfa>
 80042b4:	2b50      	cmp	r3, #80	; 0x50
 80042b6:	d873      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d058      	beq.n	800436e <HAL_TIM_ConfigClockSource+0x13a>
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d86f      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b30      	cmp	r3, #48	; 0x30
 80042c2:	d064      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d86b      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d060      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d867      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05c      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d05a      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x15a>
 80042d8:	e062      	b.n	80043a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f000 f9ad 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	609a      	str	r2, [r3, #8]
      break;
 8004306:	e04f      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f000 f996 	bl	8004648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432a:	609a      	str	r2, [r3, #8]
      break;
 800432c:	e03c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 f90a 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2150      	movs	r1, #80	; 0x50
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f963 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800434c:	e02c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6859      	ldr	r1, [r3, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	461a      	mov	r2, r3
 800435c:	f000 f929 	bl	80045b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2160      	movs	r1, #96	; 0x60
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f953 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800436c:	e01c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	461a      	mov	r2, r3
 800437c:	f000 f8ea 	bl	8004554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2140      	movs	r1, #64	; 0x40
 8004386:	4618      	mov	r0, r3
 8004388:	f000 f943 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800438c:	e00c      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f000 f93a 	bl	8004612 <TIM_ITRx_SetConfig>
      break;
 800439e:	e003      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e000      	b.n	80043a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a40      	ldr	r2, [pc, #256]	; (8004528 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d013      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004432:	d00f      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a3d      	ldr	r2, [pc, #244]	; (800452c <TIM_Base_SetConfig+0x118>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00b      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <TIM_Base_SetConfig+0x11c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <TIM_Base_SetConfig+0x120>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a3a      	ldr	r2, [pc, #232]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d108      	bne.n	8004466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <TIM_Base_SetConfig+0x114>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d02b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d027      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2c      	ldr	r2, [pc, #176]	; (800452c <TIM_Base_SetConfig+0x118>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d023      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <TIM_Base_SetConfig+0x11c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2a      	ldr	r2, [pc, #168]	; (8004534 <TIM_Base_SetConfig+0x120>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <TIM_Base_SetConfig+0x128>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <TIM_Base_SetConfig+0x12c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <TIM_Base_SetConfig+0x130>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a25      	ldr	r2, [pc, #148]	; (8004548 <TIM_Base_SetConfig+0x134>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a24      	ldr	r2, [pc, #144]	; (800454c <TIM_Base_SetConfig+0x138>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0xb2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a23      	ldr	r2, [pc, #140]	; (8004550 <TIM_Base_SetConfig+0x13c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <TIM_Base_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0c      	ldr	r2, [pc, #48]	; (8004538 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	615a      	str	r2, [r3, #20]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800
 8004548:	40001800 	.word	0x40001800
 800454c:	40001c00 	.word	0x40001c00
 8004550:	40002000 	.word	0x40002000

08004554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f023 0201 	bic.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 030a 	bic.w	r3, r3, #10
 8004590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f023 0210 	bic.w	r2, r3, #16
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	621a      	str	r2, [r3, #32]
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	f043 0307 	orr.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800469c:	2302      	movs	r3, #2
 800469e:	e05a      	b.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a21      	ldr	r2, [pc, #132]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d01d      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10c      	bne.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4313      	orrs	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40010000 	.word	0x40010000
 8004768:	40000400 	.word	0x40000400
 800476c:	40000800 	.word	0x40000800
 8004770:	40000c00 	.word	0x40000c00
 8004774:	40010400 	.word	0x40010400
 8004778:	40014000 	.word	0x40014000
 800477c:	40001800 	.word	0x40001800

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <FSMC_NORSRAM_Init+0xa0>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80047d2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80047d8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80047de:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80047e4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80047ea:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80047f0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80047f6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80047fc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004802:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004808:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800480e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004814:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d103      	bne.n	800482c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	fff00080 	.word	0xfff00080

0800484c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800486e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800487a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004882:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800488a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004894:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	3b02      	subs	r3, #2
 800489c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800489e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80048a4:	4313      	orrs	r3, r2
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e0:	d122      	bne.n	8004928 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ea:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80048fe:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004906:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800490e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004914:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6979      	ldr	r1, [r7, #20]
 8004922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004926:	e005      	b.n	8004934 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	cff00000 	.word	0xcff00000

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	; (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	; (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	; (800498c <__libc_init_array+0x44>)
 800495c:	f000 f820 	bl	80049a0 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	0800b8d8 	.word	0x0800b8d8
 8004984:	0800b8d8 	.word	0x0800b8d8
 8004988:	0800b8d8 	.word	0x0800b8d8
 800498c:	0800b8dc 	.word	0x0800b8dc

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_init>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr

080049ac <_fini>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	bf00      	nop
 80049b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b2:	bc08      	pop	{r3}
 80049b4:	469e      	mov	lr, r3
 80049b6:	4770      	bx	lr
