
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  08006378  08006378  00007378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009354  08009354  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  08009354  08009354  0000a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800935c  0800935c  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800935c  0800935c  0000a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009360  08009360  0000a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009364  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b014  2**0
                  CONTENTS
 10 .bss          000001d0  20000014  20000014  0000b014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  0000b014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001281c  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b2  00000000  00000000  0001d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00020b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023265  00000000  00000000  00022b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180b4  00000000  00000000  00045de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0623  00000000  00000000  0005de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e4bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b3c  00000000  00000000  0012e500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0013303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006360 	.word	0x08006360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006360 	.word	0x08006360

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2108      	movs	r1, #8
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <button_init+0x14>)
 80004d2:	f002 fdbd 	bl	8003050 <HAL_GPIO_WritePin>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40020c00 	.word	0x40020c00

080004e0 <button_Scan>:

void button_Scan(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2108      	movs	r1, #8
 80004ea:	482f      	ldr	r0, [pc, #188]	@ (80005a8 <button_Scan+0xc8>)
 80004ec:	f002 fdb0 	bl	8003050 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2108      	movs	r1, #8
 80004f4:	482c      	ldr	r0, [pc, #176]	@ (80005a8 <button_Scan+0xc8>)
 80004f6:	f002 fdab 	bl	8003050 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fa:	230a      	movs	r3, #10
 80004fc:	2202      	movs	r2, #2
 80004fe:	492b      	ldr	r1, [pc, #172]	@ (80005ac <button_Scan+0xcc>)
 8000500:	482b      	ldr	r0, [pc, #172]	@ (80005b0 <button_Scan+0xd0>)
 8000502:	f004 fd61 	bl	8004fc8 <HAL_SPI_Receive>
	  int button_index = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800050e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e03f      	b.n	8000596 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db06      	blt.n	800052a <button_Scan+0x4a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dc03      	bgt.n	800052a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e018      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dd07      	ble.n	8000540 <button_Scan+0x60>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dc04      	bgt.n	8000540 <button_Scan+0x60>
			  button_index = 7 - i;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f1c3 0307 	rsb	r3, r3, #7
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e00d      	b.n	800055c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	dd06      	ble.n	8000554 <button_Scan+0x74>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0b      	cmp	r3, #11
 800054a:	dc03      	bgt.n	8000554 <button_Scan+0x74>
			  button_index = i + 4;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e003      	b.n	800055c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f1c3 0317 	rsb	r3, r3, #23
 800055a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <button_Scan+0xcc>)
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	4013      	ands	r3, r2
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <button_Scan+0x96>
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <button_Scan+0xd4>)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2100      	movs	r1, #0
 8000570:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000574:	e009      	b.n	800058a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000576:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <button_Scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057e:	3301      	adds	r3, #1
 8000580:	b299      	uxth	r1, r3
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <button_Scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800058a:	897b      	ldrh	r3, [r7, #10]
 800058c:	085b      	lsrs	r3, r3, #1
 800058e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3301      	adds	r3, #1
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	ddbc      	ble.n	8000516 <button_Scan+0x36>
	  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	20000050 	.word	0x20000050
 80005b0:	20000140 	.word	0x20000140
 80005b4:	20000030 	.word	0x20000030

080005b8 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80005bc:	201e      	movs	r0, #30
 80005be:	f002 f9b5 	bl	800292c <DEC2BCD>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <ds3231_init+0x80>)
 80005c8:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80005ca:	2016      	movs	r0, #22
 80005cc:	f002 f9ae 	bl	800292c <DEC2BCD>
 80005d0:	4603      	mov	r3, r0
 80005d2:	461a      	mov	r2, r3
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <ds3231_init+0x80>)
 80005d6:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80005d8:	2015      	movs	r0, #21
 80005da:	f002 f9a7 	bl	800292c <DEC2BCD>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <ds3231_init+0x80>)
 80005e4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005e6:	2006      	movs	r0, #6
 80005e8:	f002 f9a0 	bl	800292c <DEC2BCD>
 80005ec:	4603      	mov	r3, r0
 80005ee:	461a      	mov	r2, r3
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <ds3231_init+0x80>)
 80005f2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80005f4:	200f      	movs	r0, #15
 80005f6:	f002 f999 	bl	800292c <DEC2BCD>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <ds3231_init+0x80>)
 8000600:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000602:	2009      	movs	r0, #9
 8000604:	f002 f992 	bl	800292c <DEC2BCD>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <ds3231_init+0x80>)
 800060e:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000610:	2017      	movs	r0, #23
 8000612:	f002 f98b 	bl	800292c <DEC2BCD>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <ds3231_init+0x80>)
 800061c:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800061e:	2332      	movs	r3, #50	@ 0x32
 8000620:	2203      	movs	r2, #3
 8000622:	21d0      	movs	r1, #208	@ 0xd0
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <ds3231_init+0x84>)
 8000626:	f003 f99d 	bl	8003964 <HAL_I2C_IsDeviceReady>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <ds3231_init+0x7c>
		while(1);
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <ds3231_init+0x78>
	};
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000054 	.word	0x20000054
 800063c:	200000b8 	.word	0x200000b8

08000640 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af04      	add	r7, sp, #16
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f96a 	bl	800292c <DEC2BCD>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29a      	uxth	r2, r3
 8000660:	230a      	movs	r3, #10
 8000662:	9302      	str	r3, [sp, #8]
 8000664:	2301      	movs	r3, #1
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	f107 030f 	add.w	r3, r7, #15
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	21d0      	movs	r1, #208	@ 0xd0
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <ds3231_Write+0x40>)
 8000674:	f002 fe4a 	bl	800330c <HAL_I2C_Mem_Write>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000b8 	.word	0x200000b8

08000684 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800068a:	230a      	movs	r3, #10
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2307      	movs	r3, #7
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <ds3231_ReadTime+0xa4>)
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	2200      	movs	r2, #0
 800069a:	21d0      	movs	r1, #208	@ 0xd0
 800069c:	4823      	ldr	r0, [pc, #140]	@ (800072c <ds3231_ReadTime+0xa8>)
 800069e:	f002 ff2f 	bl	8003500 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f926 	bl	80028f8 <BCD2DEC>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <ds3231_ReadTime+0xac>)
 80006b2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 f91d 	bl	80028f8 <BCD2DEC>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <ds3231_ReadTime+0xb0>)
 80006c4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 f914 	bl	80028f8 <BCD2DEC>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <ds3231_ReadTime+0xb4>)
 80006d6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006da:	78db      	ldrb	r3, [r3, #3]
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f90b 	bl	80028f8 <BCD2DEC>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <ds3231_ReadTime+0xb8>)
 80006e8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f902 	bl	80028f8 <BCD2DEC>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <ds3231_ReadTime+0xbc>)
 80006fa:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <ds3231_ReadTime+0xa4>)
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f8f9 	bl	80028f8 <BCD2DEC>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <ds3231_ReadTime+0xc0>)
 800070c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <ds3231_ReadTime+0xa4>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	4618      	mov	r0, r3
 8000714:	f002 f8f0 	bl	80028f8 <BCD2DEC>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <ds3231_ReadTime+0xc4>)
 800071e:	701a      	strb	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000054 	.word	0x20000054
 800072c:	200000b8 	.word	0x200000b8
 8000730:	2000005d 	.word	0x2000005d
 8000734:	2000005c 	.word	0x2000005c
 8000738:	2000005b 	.word	0x2000005b
 800073c:	2000005f 	.word	0x2000005f
 8000740:	2000005e 	.word	0x2000005e
 8000744:	20000060 	.word	0x20000060
 8000748:	20000061 	.word	0x20000061

0800074c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000778:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_FSMC_Init+0xec>)
 800077a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800077e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000782:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <MX_FSMC_Init+0xf0>)
 8000784:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_FSMC_Init+0xec>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_FSMC_Init+0xec>)
 800079a:	2210      	movs	r2, #16
 800079c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_FSMC_Init+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007de:	230f      	movs	r3, #15
 80007e0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007e2:	230f      	movs	r3, #15
 80007e4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007e6:	233c      	movs	r3, #60	@ 0x3c
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80007ee:	2310      	movs	r3, #16
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80007f2:	2311      	movs	r3, #17
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007fa:	2308      	movs	r3, #8
 80007fc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000802:	2309      	movs	r3, #9
 8000804:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800080a:	2310      	movs	r3, #16
 800080c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800080e:	2311      	movs	r3, #17
 8000810:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000816:	463a      	mov	r2, r7
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_FSMC_Init+0xec>)
 8000820:	f004 ffdc 	bl	80057dc <HAL_SRAM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800082a:	f001 feab 	bl	8002584 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800082e:	bf00      	nop
 8000830:	3738      	adds	r7, #56	@ 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000064 	.word	0x20000064
 800083c:	a0000104 	.word	0xa0000104

08000840 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000854:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <HAL_FSMC_MspInit+0x88>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d131      	bne.n	80008c0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <HAL_FSMC_MspInit+0x88>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 8000868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800086a:	4a18      	ldr	r2, [pc, #96]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6393      	str	r3, [r2, #56]	@ 0x38
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <HAL_FSMC_MspInit+0x8c>)
 8000874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800087e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000882:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000890:	230c      	movs	r3, #12
 8000892:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <HAL_FSMC_MspInit+0x90>)
 800089a:	f002 fa3d 	bl	8002d18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800089e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80008a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008b0:	230c      	movs	r3, #12
 80008b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <HAL_FSMC_MspInit+0x94>)
 80008ba:	f002 fa2d 	bl	8002d18 <HAL_GPIO_Init>
 80008be:	e000      	b.n	80008c2 <HAL_FSMC_MspInit+0x82>
    return;
 80008c0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000b4 	.word	0x200000b4
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40020c00 	.word	0x40020c00

080008d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008e0:	f7ff ffae 	bl	8000840 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	4b6f      	ldr	r3, [pc, #444]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a6e      	ldr	r2, [pc, #440]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b6c      	ldr	r3, [pc, #432]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	4b68      	ldr	r3, [pc, #416]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a67      	ldr	r2, [pc, #412]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b65      	ldr	r3, [pc, #404]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b61      	ldr	r3, [pc, #388]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a60      	ldr	r2, [pc, #384]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a59      	ldr	r2, [pc, #356]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b57      	ldr	r3, [pc, #348]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b53      	ldr	r3, [pc, #332]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a52      	ldr	r2, [pc, #328]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b50      	ldr	r3, [pc, #320]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a4b      	ldr	r2, [pc, #300]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b49      	ldr	r3, [pc, #292]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a44      	ldr	r2, [pc, #272]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b42      	ldr	r3, [pc, #264]	@ (8000ac4 <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2170      	movs	r1, #112	@ 0x70
 80009ca:	483f      	ldr	r0, [pc, #252]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 80009cc:	f002 fb40 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d6:	483d      	ldr	r0, [pc, #244]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 80009d8:	f002 fb3a 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	@ 0x40
 80009e0:	483b      	ldr	r0, [pc, #236]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 80009e2:	f002 fb35 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ec:	4839      	ldr	r0, [pc, #228]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 80009ee:	f002 fb2f 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2108      	movs	r1, #8
 80009f6:	4838      	ldr	r0, [pc, #224]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 80009f8:	f002 fb2a 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009fc:	2370      	movs	r3, #112	@ 0x70
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	482d      	ldr	r0, [pc, #180]	@ (8000ac8 <MX_GPIO_Init+0x1dc>)
 8000a14:	f002 f980 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4826      	ldr	r0, [pc, #152]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 8000a32:	f002 f971 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a36:	23c0      	movs	r3, #192	@ 0xc0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4822      	ldr	r0, [pc, #136]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a4a:	f002 f965 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a4e:	2330      	movs	r3, #48	@ 0x30
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <MX_GPIO_Init+0x1e0>)
 8000a62:	f002 f959 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_GPIO_Init+0x1e4>)
 8000a7e:	f002 f94b 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a9c:	f002 f93c 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000ab8:	f002 f92e 	bl	8002d18 <HAL_GPIO_Init>

}
 8000abc:	bf00      	nop
 8000abe:	3730      	adds	r7, #48	@ 0x30
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f002 fab3 	bl	8003084 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f001 fd2e 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000b8 	.word	0x200000b8
 8000b30:	40005400 	.word	0x40005400
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_I2C_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b76:	23c0      	movs	r3, #192	@ 0xc0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b86:	2304      	movs	r3, #4
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	@ (8000bc4 <HAL_I2C_MspInit+0x8c>)
 8000b92:	f002 f8c1 	bl	8002d18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_I2C_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020400 	.word	0x40020400

08000bc8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <LCD_WR_REG+0x1c>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	8013      	strh	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	600ffffe 	.word	0x600ffffe

08000be8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <LCD_WR_DATA+0x1c>)
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	8053      	strh	r3, [r2, #2]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	600ffffe 	.word	0x600ffffe

08000c08 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <LCD_RD_DATA+0x20>)
 8000c10:	885b      	ldrh	r3, [r3, #2]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	b29b      	uxth	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	600ffffe 	.word	0x600ffffe

08000c2c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4604      	mov	r4, r0
 8000c34:	4608      	mov	r0, r1
 8000c36:	4611      	mov	r1, r2
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
 8000c46:	4613      	mov	r3, r2
 8000c48:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c4a:	202a      	movs	r0, #42	@ 0x2a
 8000c4c:	f7ff ffbc 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c50:	88fb      	ldrh	r3, [r7, #6]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffc6 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffc0 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffba 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c74:	887b      	ldrh	r3, [r7, #2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ffb4 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c80:	202b      	movs	r0, #43	@ 0x2b
 8000c82:	f7ff ffa1 	bl	8000bc8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c86:	88bb      	ldrh	r3, [r7, #4]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffab 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ffa5 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c9e:	883b      	ldrh	r3, [r7, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff9f 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000caa:	883b      	ldrh	r3, [r7, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff99 	bl	8000be8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000cb6:	202c      	movs	r0, #44	@ 0x2c
 8000cb8:	f7ff ff86 	bl	8000bc8 <LCD_WR_REG>
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <lcd_Clear+0x70>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <lcd_Clear+0x70>)
 8000ce8:	885b      	ldrh	r3, [r3, #2]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f7ff ff9b 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	81fb      	strh	r3, [r7, #14]
 8000cfa:	e011      	b.n	8000d20 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	e006      	b.n	8000d10 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff6f 	bl	8000be8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000d0a:	89bb      	ldrh	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	81bb      	strh	r3, [r7, #12]
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <lcd_Clear+0x70>)
 8000d12:	885b      	ldrh	r3, [r3, #2]
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3f3      	bcc.n	8000d02 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	81fb      	strh	r3, [r7, #14]
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <lcd_Clear+0x70>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3e8      	bcc.n	8000cfc <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000010c 	.word	0x2000010c

08000d38 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	4608      	mov	r0, r1
 8000d42:	4611      	mov	r1, r2
 8000d44:	461a      	mov	r2, r3
 8000d46:	4623      	mov	r3, r4
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80bb      	strh	r3, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	807b      	strh	r3, [r7, #2]
 8000d52:	4613      	mov	r3, r2
 8000d54:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	883b      	ldrh	r3, [r7, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	88b9      	ldrh	r1, [r7, #4]
 8000d64:	88f8      	ldrh	r0, [r7, #6]
 8000d66:	f7ff ff61 	bl	8000c2c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d6a:	88bb      	ldrh	r3, [r7, #4]
 8000d6c:	81fb      	strh	r3, [r7, #14]
 8000d6e:	e010      	b.n	8000d92 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	81bb      	strh	r3, [r7, #12]
 8000d74:	e006      	b.n	8000d84 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d76:	8c3b      	ldrh	r3, [r7, #32]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff35 	bl	8000be8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d7e:	89bb      	ldrh	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	81bb      	strh	r3, [r7, #12]
 8000d84:	89ba      	ldrh	r2, [r7, #12]
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3f4      	bcc.n	8000d76 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	89fa      	ldrh	r2, [r7, #14]
 8000d94:	883b      	ldrh	r3, [r7, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3ea      	bcc.n	8000d70 <lcd_Fill+0x38>
		}
	}
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd90      	pop	{r4, r7, pc}

08000da4 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	80fb      	strh	r3, [r7, #6]
 8000dae:	460b      	mov	r3, r1
 8000db0:	80bb      	strh	r3, [r7, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	88b9      	ldrh	r1, [r7, #4]
 8000dbc:	88f8      	ldrh	r0, [r7, #6]
 8000dbe:	f7ff ff35 	bl	8000c2c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff0f 	bl	8000be8 <LCD_WR_DATA>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	70fb      	strb	r3, [r7, #3]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000dfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	fb12 f303 	smulbb	r3, r2, r3
 8000e2a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	3b20      	subs	r3, #32
 8000e30:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29c      	uxth	r4, r3
 8000e40:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	88bb      	ldrh	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	88b9      	ldrh	r1, [r7, #4]
 8000e52:	88f8      	ldrh	r0, [r7, #6]
 8000e54:	4622      	mov	r2, r4
 8000e56:	f7ff fee9 	bl	8000c2c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	827b      	strh	r3, [r7, #18]
 8000e5e:	e07a      	b.n	8000f56 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e64:	2b0c      	cmp	r3, #12
 8000e66:	d028      	beq.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d108      	bne.n	8000e82 <lcd_ShowChar+0xae>
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	8a7b      	ldrh	r3, [r7, #18]
 8000e74:	493c      	ldr	r1, [pc, #240]	@ (8000f68 <lcd_ShowChar+0x194>)
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	440a      	add	r2, r1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	e01b      	b.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e86:	2b18      	cmp	r3, #24
 8000e88:	d10b      	bne.n	8000ea2 <lcd_ShowChar+0xce>
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	8a79      	ldrh	r1, [r7, #18]
 8000e8e:	4837      	ldr	r0, [pc, #220]	@ (8000f6c <lcd_ShowChar+0x198>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4403      	add	r3, r0
 8000e9a:	440b      	add	r3, r1
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	75fb      	strb	r3, [r7, #23]
 8000ea0:	e00b      	b.n	8000eba <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ea6:	2b20      	cmp	r3, #32
 8000ea8:	d15a      	bne.n	8000f60 <lcd_ShowChar+0x18c>
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	8a7b      	ldrh	r3, [r7, #18]
 8000eae:	4930      	ldr	r1, [pc, #192]	@ (8000f70 <lcd_ShowChar+0x19c>)
 8000eb0:	0192      	lsls	r2, r2, #6
 8000eb2:	440a      	add	r2, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	75bb      	strb	r3, [r7, #22]
 8000ebe:	e044      	b.n	8000f4a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000ec0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d120      	bne.n	8000f0a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000ec8:	7dfa      	ldrb	r2, [r7, #23]
 8000eca:	7dbb      	ldrb	r3, [r7, #22]
 8000ecc:	fa42 f303 	asr.w	r3, r2, r3
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d004      	beq.n	8000ee2 <lcd_ShowChar+0x10e>
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe84 	bl	8000be8 <LCD_WR_DATA>
 8000ee0:	e003      	b.n	8000eea <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000ee2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe7f 	bl	8000be8 <LCD_WR_DATA>
				m++;
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	3301      	adds	r3, #1
 8000eee:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ef0:	7d7b      	ldrb	r3, [r7, #21]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ef8:	fb01 f202 	mul.w	r2, r1, r2
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11f      	bne.n	8000f44 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	757b      	strb	r3, [r7, #21]
					break;
 8000f08:	e022      	b.n	8000f50 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	7dbb      	ldrb	r3, [r7, #22]
 8000f0e:	fa42 f303 	asr.w	r3, r2, r3
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <lcd_ShowChar+0x152>
 8000f1a:	883a      	ldrh	r2, [r7, #0]
 8000f1c:	88b9      	ldrh	r1, [r7, #4]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff3f 	bl	8000da4 <lcd_DrawPoint>
				x++;
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f2c:	88fa      	ldrh	r2, [r7, #6]
 8000f2e:	8a3b      	ldrh	r3, [r7, #16]
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d105      	bne.n	8000f44 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f38:	8a3b      	ldrh	r3, [r7, #16]
 8000f3a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	80bb      	strh	r3, [r7, #4]
					break;
 8000f42:	e005      	b.n	8000f50 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f44:	7dbb      	ldrb	r3, [r7, #22]
 8000f46:	3301      	adds	r3, #1
 8000f48:	75bb      	strb	r3, [r7, #22]
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	2b07      	cmp	r3, #7
 8000f4e:	d9b7      	bls.n	8000ec0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f50:	8a7b      	ldrh	r3, [r7, #18]
 8000f52:	3301      	adds	r3, #1
 8000f54:	827b      	strh	r3, [r7, #18]
 8000f56:	8a7a      	ldrh	r2, [r7, #18]
 8000f58:	89bb      	ldrh	r3, [r7, #12]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d380      	bcc.n	8000e60 <lcd_ShowChar+0x8c>
 8000f5e:	e000      	b.n	8000f62 <lcd_ShowChar+0x18e>
		else return;
 8000f60:	bf00      	nop
				}
			}
		}
	}
}
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	080063bc 	.word	0x080063bc
 8000f6c:	080069ac 	.word	0x080069ac
 8000f70:	08007b7c 	.word	0x08007b7c

08000f74 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f88:	e004      	b.n	8000f94 <mypow+0x20>
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	71ba      	strb	r2, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f5      	bne.n	8000f8a <mypow+0x16>
	return result;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af04      	add	r7, sp, #16
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4623      	mov	r3, r4
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	807b      	strh	r3, [r7, #2]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e059      	b.n	8001090 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000fdc:	887c      	ldrh	r4, [r7, #2]
 8000fde:	787a      	ldrb	r2, [r7, #1]
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4619      	mov	r1, r3
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff ffc1 	bl	8000f74 <mypow>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <lcd_ShowIntNum+0xf8>)
 8000ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	1aca      	subs	r2, r1, r3
 800100a:	4613      	mov	r3, r2
 800100c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d121      	bne.n	8001058 <lcd_ShowIntNum+0xac>
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	787b      	ldrb	r3, [r7, #1]
 8001018:	3b01      	subs	r3, #1
 800101a:	429a      	cmp	r2, r3
 800101c:	da1c      	bge.n	8001058 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d117      	bne.n	8001054 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	b29a      	uxth	r2, r3
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	b29b      	uxth	r3, r3
 800102c:	fb12 f303 	smulbb	r3, r2, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4413      	add	r3, r2
 8001036:	b298      	uxth	r0, r3
 8001038:	8c3a      	ldrh	r2, [r7, #32]
 800103a:	88b9      	ldrh	r1, [r7, #4]
 800103c:	2300      	movs	r3, #0
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4613      	mov	r3, r2
 800104c:	2220      	movs	r2, #32
 800104e:	f7ff fec1 	bl	8000dd4 <lcd_ShowChar>
				continue;
 8001052:	e01a      	b.n	800108a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001054:	2301      	movs	r3, #1
 8001056:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	b29a      	uxth	r2, r3
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	b29b      	uxth	r3, r3
 8001060:	fb12 f303 	smulbb	r3, r2, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	3330      	adds	r3, #48	@ 0x30
 8001070:	b2da      	uxtb	r2, r3
 8001072:	8c3c      	ldrh	r4, [r7, #32]
 8001074:	88b9      	ldrh	r1, [r7, #4]
 8001076:	2300      	movs	r3, #0
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4623      	mov	r3, r4
 8001086:	f7ff fea5 	bl	8000dd4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	787b      	ldrb	r3, [r7, #1]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3a1      	bcc.n	8000fdc <lcd_ShowIntNum+0x30>
	}
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	cccccccd 	.word	0xcccccccd

080010a8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <lcd_SetDir+0x44>)
 80010c4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010c8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <lcd_SetDir+0x44>)
 80010cc:	22f0      	movs	r2, #240	@ 0xf0
 80010ce:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010d0:	e006      	b.n	80010e0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <lcd_SetDir+0x44>)
 80010d4:	22f0      	movs	r2, #240	@ 0xf0
 80010d6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <lcd_SetDir+0x44>)
 80010da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010de:	805a      	strh	r2, [r3, #2]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	2000010c 	.word	0x2000010c

080010f0 <lcd_init>:


void lcd_init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fa:	48aa      	ldr	r0, [pc, #680]	@ (80013a4 <lcd_init+0x2b4>)
 80010fc:	f001 ffa8 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001100:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001104:	f001 fcd2 	bl	8002aac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110e:	48a5      	ldr	r0, [pc, #660]	@ (80013a4 <lcd_init+0x2b4>)
 8001110:	f001 ff9e 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001118:	f001 fcc8 	bl	8002aac <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ffc3 	bl	80010a8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001122:	20d3      	movs	r0, #211	@ 0xd3
 8001124:	f7ff fd50 	bl	8000bc8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001128:	f7ff fd6e 	bl	8000c08 <LCD_RD_DATA>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b9d      	ldr	r3, [pc, #628]	@ (80013a8 <lcd_init+0x2b8>)
 8001132:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001134:	f7ff fd68 	bl	8000c08 <LCD_RD_DATA>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b9a      	ldr	r3, [pc, #616]	@ (80013a8 <lcd_init+0x2b8>)
 800113e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001140:	f7ff fd62 	bl	8000c08 <LCD_RD_DATA>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b97      	ldr	r3, [pc, #604]	@ (80013a8 <lcd_init+0x2b8>)
 800114a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800114c:	4b96      	ldr	r3, [pc, #600]	@ (80013a8 <lcd_init+0x2b8>)
 800114e:	889b      	ldrh	r3, [r3, #4]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b94      	ldr	r3, [pc, #592]	@ (80013a8 <lcd_init+0x2b8>)
 8001156:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001158:	f7ff fd56 	bl	8000c08 <LCD_RD_DATA>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b91      	ldr	r3, [pc, #580]	@ (80013a8 <lcd_init+0x2b8>)
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b8f      	ldr	r3, [pc, #572]	@ (80013a8 <lcd_init+0x2b8>)
 800116a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800116c:	20cf      	movs	r0, #207	@ 0xcf
 800116e:	f7ff fd2b 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fd38 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001178:	20c1      	movs	r0, #193	@ 0xc1
 800117a:	f7ff fd35 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800117e:	2030      	movs	r0, #48	@ 0x30
 8001180:	f7ff fd32 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001184:	20ed      	movs	r0, #237	@ 0xed
 8001186:	f7ff fd1f 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800118a:	2064      	movs	r0, #100	@ 0x64
 800118c:	f7ff fd2c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001190:	2003      	movs	r0, #3
 8001192:	f7ff fd29 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001196:	2012      	movs	r0, #18
 8001198:	f7ff fd26 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800119c:	2081      	movs	r0, #129	@ 0x81
 800119e:	f7ff fd23 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011a2:	20e8      	movs	r0, #232	@ 0xe8
 80011a4:	f7ff fd10 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011a8:	2085      	movs	r0, #133	@ 0x85
 80011aa:	f7ff fd1d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff fd1a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011b4:	207a      	movs	r0, #122	@ 0x7a
 80011b6:	f7ff fd17 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011ba:	20cb      	movs	r0, #203	@ 0xcb
 80011bc:	f7ff fd04 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011c0:	2039      	movs	r0, #57	@ 0x39
 80011c2:	f7ff fd11 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011c6:	202c      	movs	r0, #44	@ 0x2c
 80011c8:	f7ff fd0e 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff fd0b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011d2:	2034      	movs	r0, #52	@ 0x34
 80011d4:	f7ff fd08 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fd05 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011de:	20f7      	movs	r0, #247	@ 0xf7
 80011e0:	f7ff fcf2 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011e4:	2020      	movs	r0, #32
 80011e6:	f7ff fcff 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011ea:	20ea      	movs	r0, #234	@ 0xea
 80011ec:	f7ff fcec 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fcf9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fcf6 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011fc:	20c0      	movs	r0, #192	@ 0xc0
 80011fe:	f7ff fce3 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001202:	201b      	movs	r0, #27
 8001204:	f7ff fcf0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001208:	20c1      	movs	r0, #193	@ 0xc1
 800120a:	f7ff fcdd 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fcea 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001214:	20c5      	movs	r0, #197	@ 0xc5
 8001216:	f7ff fcd7 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800121a:	2030      	movs	r0, #48	@ 0x30
 800121c:	f7ff fce4 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001220:	2030      	movs	r0, #48	@ 0x30
 8001222:	f7ff fce1 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001226:	20c7      	movs	r0, #199	@ 0xc7
 8001228:	f7ff fcce 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800122c:	20b7      	movs	r0, #183	@ 0xb7
 800122e:	f7ff fcdb 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001232:	2036      	movs	r0, #54	@ 0x36
 8001234:	f7ff fcc8 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001238:	2008      	movs	r0, #8
 800123a:	f7ff fcd5 	bl	8000be8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800123e:	203a      	movs	r0, #58	@ 0x3a
 8001240:	f7ff fcc2 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001244:	2055      	movs	r0, #85	@ 0x55
 8001246:	f7ff fccf 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800124a:	20b1      	movs	r0, #177	@ 0xb1
 800124c:	f7ff fcbc 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fcc9 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001256:	201a      	movs	r0, #26
 8001258:	f7ff fcc6 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800125c:	20b6      	movs	r0, #182	@ 0xb6
 800125e:	f7ff fcb3 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001262:	200a      	movs	r0, #10
 8001264:	f7ff fcc0 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001268:	20a2      	movs	r0, #162	@ 0xa2
 800126a:	f7ff fcbd 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800126e:	20f2      	movs	r0, #242	@ 0xf2
 8001270:	f7ff fcaa 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcb7 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800127a:	2026      	movs	r0, #38	@ 0x26
 800127c:	f7ff fca4 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fcb1 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001286:	20e0      	movs	r0, #224	@ 0xe0
 8001288:	f7ff fc9e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800128c:	200f      	movs	r0, #15
 800128e:	f7ff fcab 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001292:	202a      	movs	r0, #42	@ 0x2a
 8001294:	f7ff fca8 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001298:	2028      	movs	r0, #40	@ 0x28
 800129a:	f7ff fca5 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800129e:	2008      	movs	r0, #8
 80012a0:	f7ff fca2 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012a4:	200e      	movs	r0, #14
 80012a6:	f7ff fc9f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012aa:	2008      	movs	r0, #8
 80012ac:	f7ff fc9c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012b0:	2054      	movs	r0, #84	@ 0x54
 80012b2:	f7ff fc99 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012b6:	20a9      	movs	r0, #169	@ 0xa9
 80012b8:	f7ff fc96 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012bc:	2043      	movs	r0, #67	@ 0x43
 80012be:	f7ff fc93 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f7ff fc90 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012c8:	200f      	movs	r0, #15
 80012ca:	f7ff fc8d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fc8a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc87 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff fc84 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fc81 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012e6:	20e1      	movs	r0, #225	@ 0xe1
 80012e8:	f7ff fc6e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff fc7b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012f2:	2015      	movs	r0, #21
 80012f4:	f7ff fc78 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012f8:	2017      	movs	r0, #23
 80012fa:	f7ff fc75 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012fe:	2007      	movs	r0, #7
 8001300:	f7ff fc72 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001304:	2011      	movs	r0, #17
 8001306:	f7ff fc6f 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800130a:	2006      	movs	r0, #6
 800130c:	f7ff fc6c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001310:	202b      	movs	r0, #43	@ 0x2b
 8001312:	f7ff fc69 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001316:	2056      	movs	r0, #86	@ 0x56
 8001318:	f7ff fc66 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800131c:	203c      	movs	r0, #60	@ 0x3c
 800131e:	f7ff fc63 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001322:	2005      	movs	r0, #5
 8001324:	f7ff fc60 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001328:	2010      	movs	r0, #16
 800132a:	f7ff fc5d 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800132e:	200f      	movs	r0, #15
 8001330:	f7ff fc5a 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001334:	203f      	movs	r0, #63	@ 0x3f
 8001336:	f7ff fc57 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800133a:	203f      	movs	r0, #63	@ 0x3f
 800133c:	f7ff fc54 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001340:	200f      	movs	r0, #15
 8001342:	f7ff fc51 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001346:	202b      	movs	r0, #43	@ 0x2b
 8001348:	f7ff fc3e 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff fc4b 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fc48 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fc45 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800135e:	203f      	movs	r0, #63	@ 0x3f
 8001360:	f7ff fc42 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001364:	202a      	movs	r0, #42	@ 0x2a
 8001366:	f7ff fc2f 	bl	8000bc8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fc3c 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fc39 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc36 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800137c:	20ef      	movs	r0, #239	@ 0xef
 800137e:	f7ff fc33 	bl	8000be8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001382:	2011      	movs	r0, #17
 8001384:	f7ff fc20 	bl	8000bc8 <LCD_WR_REG>
	HAL_Delay(120);
 8001388:	2078      	movs	r0, #120	@ 0x78
 800138a:	f001 fb8f 	bl	8002aac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800138e:	2029      	movs	r0, #41	@ 0x29
 8001390:	f7ff fc1a 	bl	8000bc8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800139a:	4804      	ldr	r0, [pc, #16]	@ (80013ac <lcd_init+0x2bc>)
 800139c:	f001 fe58 	bl	8003050 <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40020800 	.word	0x40020800
 80013a8:	2000010c 	.word	0x2000010c
 80013ac:	40020000 	.word	0x40020000

080013b0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	@ 0x2c
 80013b4:	af04      	add	r7, sp, #16
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	81fb      	strh	r3, [r7, #14]
 80013be:	460b      	mov	r3, r1
 80013c0:	81bb      	strh	r3, [r7, #12]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013ce:	e048      	b.n	8001462 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d145      	bne.n	8001462 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013d6:	89fa      	ldrh	r2, [r7, #14]
 80013d8:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <lcd_ShowStr+0xc4>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	1acb      	subs	r3, r1, r3
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dc3f      	bgt.n	800146c <lcd_ShowStr+0xbc>
 80013ec:	89ba      	ldrh	r2, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <lcd_ShowStr+0xc4>)
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dc36      	bgt.n	800146c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b80      	cmp	r3, #128	@ 0x80
 8001404:	d902      	bls.n	800140c <lcd_ShowStr+0x5c>
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
 800140a:	e02a      	b.n	8001462 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b0d      	cmp	r3, #13
 8001412:	d10b      	bne.n	800142c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001414:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001418:	b29a      	uxth	r2, r3
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001420:	8abb      	ldrh	r3, [r7, #20]
 8001422:	81fb      	strh	r3, [r7, #14]
					str++;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	3301      	adds	r3, #1
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e017      	b.n	800145c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	88fc      	ldrh	r4, [r7, #6]
 8001432:	89b9      	ldrh	r1, [r7, #12]
 8001434:	89f8      	ldrh	r0, [r7, #14]
 8001436:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	4623      	mov	r3, r4
 8001448:	f7ff fcc4 	bl	8000dd4 <lcd_ShowChar>
					x+=sizey/2;
 800144c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	4413      	add	r3, r2
 800145a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3301      	adds	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1b2      	bne.n	80013d0 <lcd_ShowStr+0x20>
 800146a:	e000      	b.n	800146e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800146c:	bf00      	nop
			}
		}
	}
}
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	2000010c 	.word	0x2000010c

08001478 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af04      	add	r7, sp, #16
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	460b      	mov	r3, r1
 8001488:	81bb      	strh	r3, [r7, #12]
 800148a:	4613      	mov	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7fe fe9a 	bl	80001c8 <strlen>
 8001494:	4603      	mov	r3, r0
 8001496:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <lcd_StrCenter+0x60>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	8afb      	ldrh	r3, [r7, #22]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 80014ac:	89fa      	ldrh	r2, [r7, #14]
 80014ae:	8abb      	ldrh	r3, [r7, #20]
 80014b0:	4413      	add	r3, r2
 80014b2:	b298      	uxth	r0, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	89b9      	ldrh	r1, [r7, #12]
 80014b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	8c3b      	ldrh	r3, [r7, #32]
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f7ff ff70 	bl	80013b0 <lcd_ShowStr>
}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000010c 	.word	0x2000010c

080014dc <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2140      	movs	r1, #64	@ 0x40
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <led7_init+0x14>)
 80014e6:	f001 fdb3 	bl	8003050 <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021800 	.word	0x40021800

080014f4 <led7_Scan>:

void led7_Scan(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80014f8:	4b3f      	ldr	r3, [pc, #252]	@ (80015f8 <led7_Scan+0x104>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	b29a      	uxth	r2, r3
 8001500:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <led7_Scan+0x104>)
 8001502:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001504:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <led7_Scan+0x108>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3d      	ldr	r2, [pc, #244]	@ (8001600 <led7_Scan+0x10c>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b39      	ldr	r3, [pc, #228]	@ (80015f8 <led7_Scan+0x104>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <led7_Scan+0x104>)
 800151e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <led7_Scan+0x108>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d847      	bhi.n	80015b8 <led7_Scan+0xc4>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <led7_Scan+0x3c>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	0800155f 	.word	0x0800155f
 8001538:	0800157d 	.word	0x0800157d
 800153c:	0800159b 	.word	0x0800159b
	case 0:
		spi_buffer |= 0x00b0;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <led7_Scan+0x104>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b2b      	ldr	r3, [pc, #172]	@ (80015f8 <led7_Scan+0x104>)
 800154c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <led7_Scan+0x104>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b27      	ldr	r3, [pc, #156]	@ (80015f8 <led7_Scan+0x104>)
 800155a:	801a      	strh	r2, [r3, #0]
		break;
 800155c:	e02d      	b.n	80015ba <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <led7_Scan+0x104>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <led7_Scan+0x104>)
 800156a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <led7_Scan+0x104>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	f023 0320 	bic.w	r3, r3, #32
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <led7_Scan+0x104>)
 8001578:	801a      	strh	r2, [r3, #0]
		break;
 800157a:	e01e      	b.n	80015ba <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <led7_Scan+0x104>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <led7_Scan+0x104>)
 8001588:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <led7_Scan+0x104>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	f023 0310 	bic.w	r3, r3, #16
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <led7_Scan+0x104>)
 8001596:	801a      	strh	r2, [r3, #0]
		break;
 8001598:	e00f      	b.n	80015ba <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <led7_Scan+0x104>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <led7_Scan+0x104>)
 80015a6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015a8:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <led7_Scan+0x104>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <led7_Scan+0x104>)
 80015b4:	801a      	strh	r2, [r3, #0]
		break;
 80015b6:	e000      	b.n	80015ba <led7_Scan+0xc6>
	default:
		break;
 80015b8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <led7_Scan+0x108>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	425a      	negs	r2, r3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	f002 0203 	and.w	r2, r2, #3
 80015ca:	bf58      	it	pl
 80015cc:	4253      	negpl	r3, r2
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <led7_Scan+0x108>)
 80015d0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2140      	movs	r1, #64	@ 0x40
 80015d6:	480b      	ldr	r0, [pc, #44]	@ (8001604 <led7_Scan+0x110>)
 80015d8:	f001 fd3a 	bl	8003050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80015dc:	2301      	movs	r3, #1
 80015de:	2202      	movs	r2, #2
 80015e0:	4905      	ldr	r1, [pc, #20]	@ (80015f8 <led7_Scan+0x104>)
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <led7_Scan+0x114>)
 80015e4:	f003 fbad 	bl	8004d42 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <led7_Scan+0x110>)
 80015ee:	f001 fd2f 	bl	8003050 <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000114 	.word	0x20000114
 8001600:	20000000 	.word	0x20000000
 8001604:	40021800 	.word	0x40021800
 8001608:	20000140 	.word	0x20000140

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f001 f9da 	bl	80029c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f822 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f7ff f968 	bl	80008ec <MX_GPIO_Init>
  MX_TIM2_Init();
 800161c:	f001 f8fa 	bl	8002814 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001620:	f001 f806 	bl	8002630 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001624:	f7ff f892 	bl	800074c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001628:	f7ff fa58 	bl	8000adc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800162c:	f000 f880 	bl	8001730 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fb47 	bl	8000cc4 <lcd_Clear>
 updateTime();
 8001636:	f000 f89d 	bl	8001774 <updateTime>
  while (1)
  {
	  while(!flag_timer2);
 800163a:	bf00      	nop
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <main+0x4c>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0fb      	beq.n	800163c <main+0x30>
	  flag_timer2 = 0;
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <main+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 800164a:	f7fe ff49 	bl	80004e0 <button_Scan>
	  ds3231_ReadTime();
 800164e:	f7ff f819 	bl	8000684 <ds3231_ReadTime>
//	  displayTime();
	  fsm();
 8001652:	f000 fde7 	bl	8002224 <fsm>
	  while(!flag_timer2);
 8001656:	e7f0      	b.n	800163a <main+0x2e>
 8001658:	20000138 	.word	0x20000138

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	@ 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	@ 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fe4c 	bl	8006308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	4a27      	ldr	r2, [pc, #156]	@ (8001728 <SystemClock_Config+0xcc>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001690:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b22      	ldr	r3, [pc, #136]	@ (800172c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	@ (800172c <SystemClock_Config+0xd0>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c0:	2310      	movs	r3, #16
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c4:	2302      	movs	r3, #2
 80016c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016c8:	2300      	movs	r3, #0
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016d0:	23a8      	movs	r3, #168	@ 0xa8
 80016d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016d8:	2304      	movs	r3, #4
 80016da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fe21 	bl	8004328 <HAL_RCC_OscConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016ec:	f000 ff4a 	bl	8002584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f0:	230f      	movs	r3, #15
 80016f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2105      	movs	r1, #5
 800170e:	4618      	mov	r0, r3
 8001710:	f003 f882 	bl	8004818 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800171a:	f000 ff33 	bl	8002584 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	@ 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2120      	movs	r1, #32
 8001738:	480d      	ldr	r0, [pc, #52]	@ (8001770 <system_init+0x40>)
 800173a:	f001 fc89 	bl	8003050 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	@ 0x40
 8001742:	480b      	ldr	r0, [pc, #44]	@ (8001770 <system_init+0x40>)
 8001744:	f001 fc84 	bl	8003050 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4808      	ldr	r0, [pc, #32]	@ (8001770 <system_init+0x40>)
 800174e:	f001 fc7f 	bl	8003050 <HAL_GPIO_WritePin>
	  timer_init();
 8001752:	f000 ff1d 	bl	8002590 <timer_init>
	  led7_init();
 8001756:	f7ff fec1 	bl	80014dc <led7_init>
	  button_init();
 800175a:	f7fe feb5 	bl	80004c8 <button_init>
	  lcd_init();
 800175e:	f7ff fcc7 	bl	80010f0 <lcd_init>
	  ds3231_init();
 8001762:	f7fe ff29 	bl	80005b8 <ds3231_init>
	  setTimer2(50);
 8001766:	2032      	movs	r0, #50	@ 0x32
 8001768:	f000 ff1c 	bl	80025a4 <setTimer2>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000

08001774 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001778:	2118      	movs	r1, #24
 800177a:	2006      	movs	r0, #6
 800177c:	f7fe ff60 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 5);
 8001780:	2105      	movs	r1, #5
 8001782:	2005      	movs	r0, #5
 8001784:	f7fe ff5c 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 30);
 8001788:	211e      	movs	r1, #30
 800178a:	2004      	movs	r0, #4
 800178c:	f7fe ff58 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 5);
 8001790:	2105      	movs	r1, #5
 8001792:	2003      	movs	r0, #3
 8001794:	f7fe ff54 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 8001798:	2109      	movs	r1, #9
 800179a:	2002      	movs	r0, #2
 800179c:	f7fe ff50 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 47);
 80017a0:	212f      	movs	r1, #47	@ 0x2f
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7fe ff4c 	bl	8000640 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 50);
 80017a8:	2132      	movs	r1, #50	@ 0x32
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7fe ff48 	bl	8000640 <ds3231_Write>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <returnMode>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
char* returnMode() {
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
	switch (currentMode) {
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <returnMode+0x40>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d813      	bhi.n	80017e8 <returnMode+0x34>
 80017c0:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <returnMode+0x14>)
 80017c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c6:	bf00      	nop
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e5 	.word	0x080017e5
		case modeInit:
			return "Initial";
 80017d8:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <returnMode+0x44>)
 80017da:	e006      	b.n	80017ea <returnMode+0x36>
			break;
		case modeNormal:
			return "Time Now";
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <returnMode+0x48>)
 80017de:	e004      	b.n	80017ea <returnMode+0x36>
			break;
		case modeModify:
			return "Modify Time";
 80017e0:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <returnMode+0x4c>)
 80017e2:	e002      	b.n	80017ea <returnMode+0x36>
			break;
		case modeTimer:
			return "Alarm";
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <returnMode+0x50>)
 80017e6:	e000      	b.n	80017ea <returnMode+0x36>
			break;
	}
	return "Unknown!";
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <returnMode+0x54>)
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	2000011d 	.word	0x2000011d
 80017f8:	08006378 	.word	0x08006378
 80017fc:	08006380 	.word	0x08006380
 8001800:	0800638c 	.word	0x0800638c
 8001804:	08006398 	.word	0x08006398
 8001808:	080063a0 	.word	0x080063a0

0800180c <checkTime>:

void checkTime() {
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	switch (temp) {
 8001810:	4b44      	ldr	r3, [pc, #272]	@ (8001924 <checkTime+0x118>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b06      	cmp	r3, #6
 8001816:	f200 8080 	bhi.w	800191a <checkTime+0x10e>
 800181a:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <checkTime+0x14>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	0800183d 	.word	0x0800183d
 8001824:	08001859 	.word	0x08001859
 8001828:	08001875 	.word	0x08001875
 800182c:	08001891 	.word	0x08001891
 8001830:	080018ad 	.word	0x080018ad
 8001834:	080018c9 	.word	0x080018c9
 8001838:	080018e5 	.word	0x080018e5
		case 0:
			if (temp_time[temp] > 24) {
 800183c:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <checkTime+0x118>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <checkTime+0x11c>)
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	2b18      	cmp	r3, #24
 8001848:	d95a      	bls.n	8001900 <checkTime+0xf4>
				temp_time[temp] = 0;
 800184a:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <checkTime+0x118>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <checkTime+0x11c>)
 8001852:	2100      	movs	r1, #0
 8001854:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001856:	e053      	b.n	8001900 <checkTime+0xf4>
		case 1:
			if (temp_time[temp] > 59) {
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <checkTime+0x118>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <checkTime+0x11c>)
 8001860:	5c9b      	ldrb	r3, [r3, r2]
 8001862:	2b3b      	cmp	r3, #59	@ 0x3b
 8001864:	d94e      	bls.n	8001904 <checkTime+0xf8>
				temp_time[temp] = 0;
 8001866:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <checkTime+0x118>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <checkTime+0x11c>)
 800186e:	2100      	movs	r1, #0
 8001870:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001872:	e047      	b.n	8001904 <checkTime+0xf8>
		case 2:
			if (temp_time[temp] > 59) {
 8001874:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <checkTime+0x118>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <checkTime+0x11c>)
 800187c:	5c9b      	ldrb	r3, [r3, r2]
 800187e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001880:	d942      	bls.n	8001908 <checkTime+0xfc>
				temp_time[temp] = 0;
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <checkTime+0x118>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <checkTime+0x11c>)
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]
			}
			break;
 800188e:	e03b      	b.n	8001908 <checkTime+0xfc>
		case 3:
			if (temp_time[temp] > 8) {
 8001890:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <checkTime+0x118>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <checkTime+0x11c>)
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	2b08      	cmp	r3, #8
 800189c:	d936      	bls.n	800190c <checkTime+0x100>
				temp_time[temp] = 2;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <checkTime+0x118>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <checkTime+0x11c>)
 80018a6:	2102      	movs	r1, #2
 80018a8:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018aa:	e02f      	b.n	800190c <checkTime+0x100>
		case 4:
			if (temp_time[temp] > 31) {
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <checkTime+0x118>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001928 <checkTime+0x11c>)
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	2b1f      	cmp	r3, #31
 80018b8:	d92a      	bls.n	8001910 <checkTime+0x104>
				temp_time[temp] = 0;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <checkTime+0x118>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <checkTime+0x11c>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018c6:	e023      	b.n	8001910 <checkTime+0x104>
		case 5:
			if (temp_time[temp] > 12) {
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <checkTime+0x118>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <checkTime+0x11c>)
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d91e      	bls.n	8001914 <checkTime+0x108>
				temp_time[temp] = 0;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <checkTime+0x118>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <checkTime+0x11c>)
 80018de:	2100      	movs	r1, #0
 80018e0:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018e2:	e017      	b.n	8001914 <checkTime+0x108>
		case 6:
			if (temp_time[temp] > 99) {
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <checkTime+0x118>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <checkTime+0x11c>)
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	2b63      	cmp	r3, #99	@ 0x63
 80018f0:	d912      	bls.n	8001918 <checkTime+0x10c>
				temp_time[temp] = 0;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <checkTime+0x118>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <checkTime+0x11c>)
 80018fa:	2100      	movs	r1, #0
 80018fc:	5499      	strb	r1, [r3, r2]
			}
			break;
 80018fe:	e00b      	b.n	8001918 <checkTime+0x10c>
			break;
 8001900:	bf00      	nop
 8001902:	e00a      	b.n	800191a <checkTime+0x10e>
			break;
 8001904:	bf00      	nop
 8001906:	e008      	b.n	800191a <checkTime+0x10e>
			break;
 8001908:	bf00      	nop
 800190a:	e006      	b.n	800191a <checkTime+0x10e>
			break;
 800190c:	bf00      	nop
 800190e:	e004      	b.n	800191a <checkTime+0x10e>
			break;
 8001910:	bf00      	nop
 8001912:	e002      	b.n	800191a <checkTime+0x10e>
			break;
 8001914:	bf00      	nop
 8001916:	e000      	b.n	800191a <checkTime+0x10e>
			break;
 8001918:	bf00      	nop
	}
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	2000011a 	.word	0x2000011a
 8001928:	20000120 	.word	0x20000120

0800192c <checkTimer>:

void checkTimer() {
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	switch (temp_timer) {
 8001930:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <checkTimer+0x118>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b06      	cmp	r3, #6
 8001936:	f200 8080 	bhi.w	8001a3a <checkTimer+0x10e>
 800193a:	a201      	add	r2, pc, #4	@ (adr r2, 8001940 <checkTimer+0x14>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	0800195d 	.word	0x0800195d
 8001944:	08001979 	.word	0x08001979
 8001948:	08001995 	.word	0x08001995
 800194c:	080019b1 	.word	0x080019b1
 8001950:	080019cd 	.word	0x080019cd
 8001954:	080019e9 	.word	0x080019e9
 8001958:	08001a05 	.word	0x08001a05
		case 0:
			if (timer[temp_timer] > 24) {
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <checkTimer+0x118>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b39      	ldr	r3, [pc, #228]	@ (8001a48 <checkTimer+0x11c>)
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	2b18      	cmp	r3, #24
 8001968:	d95a      	bls.n	8001a20 <checkTimer+0xf4>
				timer[temp_timer] = 0;
 800196a:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <checkTimer+0x118>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <checkTimer+0x11c>)
 8001972:	2100      	movs	r1, #0
 8001974:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001976:	e053      	b.n	8001a20 <checkTimer+0xf4>
		case 1:
			if (timer[temp_timer] > 59) {
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <checkTimer+0x118>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <checkTimer+0x11c>)
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	2b3b      	cmp	r3, #59	@ 0x3b
 8001984:	d94e      	bls.n	8001a24 <checkTimer+0xf8>
				timer[temp_timer] = 0;
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <checkTimer+0x118>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <checkTimer+0x11c>)
 800198e:	2100      	movs	r1, #0
 8001990:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001992:	e047      	b.n	8001a24 <checkTimer+0xf8>
		case 2:
			if (timer[temp_timer] > 59) {
 8001994:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <checkTimer+0x118>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <checkTimer+0x11c>)
 800199c:	5c9b      	ldrb	r3, [r3, r2]
 800199e:	2b3b      	cmp	r3, #59	@ 0x3b
 80019a0:	d942      	bls.n	8001a28 <checkTimer+0xfc>
				timer[temp_timer] = 0;
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <checkTimer+0x118>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <checkTimer+0x11c>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019ae:	e03b      	b.n	8001a28 <checkTimer+0xfc>
		case 3:
			if (timer[temp_timer] > 8) {
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <checkTimer+0x118>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <checkTimer+0x11c>)
 80019b8:	5c9b      	ldrb	r3, [r3, r2]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d936      	bls.n	8001a2c <checkTimer+0x100>
				timer[temp_timer] = 2;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <checkTimer+0x118>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <checkTimer+0x11c>)
 80019c6:	2102      	movs	r1, #2
 80019c8:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019ca:	e02f      	b.n	8001a2c <checkTimer+0x100>
		case 4:
			if (timer[temp_timer] > 31) {
 80019cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <checkTimer+0x118>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <checkTimer+0x11c>)
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	2b1f      	cmp	r3, #31
 80019d8:	d92a      	bls.n	8001a30 <checkTimer+0x104>
				timer[temp_timer] = 0;
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <checkTimer+0x118>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <checkTimer+0x11c>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	5499      	strb	r1, [r3, r2]
			}
			break;
 80019e6:	e023      	b.n	8001a30 <checkTimer+0x104>
		case 5:
			if (timer[temp_timer] > 12) {
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <checkTimer+0x118>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <checkTimer+0x11c>)
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d91e      	bls.n	8001a34 <checkTimer+0x108>
				timer[temp_timer] = 0;
 80019f6:	4b13      	ldr	r3, [pc, #76]	@ (8001a44 <checkTimer+0x118>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <checkTimer+0x11c>)
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001a02:	e017      	b.n	8001a34 <checkTimer+0x108>
		case 6:
			if (timer[temp_timer] > 99) {
 8001a04:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <checkTimer+0x118>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <checkTimer+0x11c>)
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	2b63      	cmp	r3, #99	@ 0x63
 8001a10:	d912      	bls.n	8001a38 <checkTimer+0x10c>
				timer[temp_timer] = 0;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <checkTimer+0x118>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <checkTimer+0x11c>)
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	5499      	strb	r1, [r3, r2]
			}
			break;
 8001a1e:	e00b      	b.n	8001a38 <checkTimer+0x10c>
			break;
 8001a20:	bf00      	nop
 8001a22:	e00a      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a24:	bf00      	nop
 8001a26:	e008      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a28:	bf00      	nop
 8001a2a:	e006      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a2c:	bf00      	nop
 8001a2e:	e004      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a30:	bf00      	nop
 8001a32:	e002      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a34:	bf00      	nop
 8001a36:	e000      	b.n	8001a3a <checkTimer+0x10e>
			break;
 8001a38:	bf00      	nop
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	2000011b 	.word	0x2000011b
 8001a48:	20000128 	.word	0x20000128

08001a4c <displayTime>:

void displayTime(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, 50, returnMode(), WHITE, BLACK, 24, 0);
 8001a52:	f7ff feaf 	bl	80017b4 <returnMode>
 8001a56:	4602      	mov	r2, r0
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	2318      	movs	r3, #24
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a68:	2132      	movs	r1, #50	@ 0x32
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fd04 	bl	8001478 <lcd_StrCenter>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001a70:	4b35      	ldr	r3, [pc, #212]	@ (8001b48 <displayTime+0xfc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	2318      	movs	r3, #24
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2302      	movs	r3, #2
 8001a86:	2164      	movs	r1, #100	@ 0x64
 8001a88:	2046      	movs	r0, #70	@ 0x46
 8001a8a:	f7ff fa8f 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <displayTime+0x100>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	2318      	movs	r3, #24
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	2164      	movs	r1, #100	@ 0x64
 8001aa6:	206e      	movs	r0, #110	@ 0x6e
 8001aa8:	f7ff fa80 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001aac:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <displayTime+0x104>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	2164      	movs	r1, #100	@ 0x64
 8001ac4:	2096      	movs	r0, #150	@ 0x96
 8001ac6:	f7ff fa71 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001aca:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <displayTime+0x108>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2318      	movs	r3, #24
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	2182      	movs	r1, #130	@ 0x82
 8001ae2:	2014      	movs	r0, #20
 8001ae4:	f7ff fa62 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <displayTime+0x10c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2318      	movs	r3, #24
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2302      	movs	r3, #2
 8001afe:	2182      	movs	r1, #130	@ 0x82
 8001b00:	2046      	movs	r0, #70	@ 0x46
 8001b02:	f7ff fa53 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001b06:	4b15      	ldr	r3, [pc, #84]	@ (8001b5c <displayTime+0x110>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	2182      	movs	r1, #130	@ 0x82
 8001b1e:	206e      	movs	r0, #110	@ 0x6e
 8001b20:	f7ff fa44 	bl	8000fac <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <displayTime+0x114>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2318      	movs	r3, #24
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	2182      	movs	r1, #130	@ 0x82
 8001b3c:	2096      	movs	r0, #150	@ 0x96
 8001b3e:	f7ff fa35 	bl	8000fac <lcd_ShowIntNum>
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000005b 	.word	0x2000005b
 8001b4c:	2000005c 	.word	0x2000005c
 8001b50:	2000005d 	.word	0x2000005d
 8001b54:	2000005f 	.word	0x2000005f
 8001b58:	2000005e 	.word	0x2000005e
 8001b5c:	20000060 	.word	0x20000060
 8001b60:	20000061 	.word	0x20000061

08001b64 <modifyTime>:

void modifyTime() {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af04      	add	r7, sp, #16
	count_modify = (count_modify + 1) % 10;
 8001b6a:	4baf      	ldr	r3, [pc, #700]	@ (8001e28 <modifyTime+0x2c4>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	4bae      	ldr	r3, [pc, #696]	@ (8001e2c <modifyTime+0x2c8>)
 8001b72:	fb83 1302 	smull	r1, r3, r3, r2
 8001b76:	1099      	asrs	r1, r3, #2
 8001b78:	17d3      	asrs	r3, r2, #31
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	1ad1      	subs	r1, r2, r3
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	4ba7      	ldr	r3, [pc, #668]	@ (8001e28 <modifyTime+0x2c4>)
 8001b8a:	701a      	strb	r2, [r3, #0]
	if (count_modify > 5) {
 8001b8c:	4ba6      	ldr	r3, [pc, #664]	@ (8001e28 <modifyTime+0x2c4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d977      	bls.n	8001c84 <modifyTime+0x120>
		switch (temp){
 8001b94:	4ba6      	ldr	r3, [pc, #664]	@ (8001e30 <modifyTime+0x2cc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	f200 80eb 	bhi.w	8001d74 <modifyTime+0x210>
 8001b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba4 <modifyTime+0x40>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bc1 	.word	0x08001bc1
 8001ba8:	08001bdd 	.word	0x08001bdd
 8001bac:	08001bf9 	.word	0x08001bf9
 8001bb0:	08001c15 	.word	0x08001c15
 8001bb4:	08001c31 	.word	0x08001c31
 8001bb8:	08001c4d 	.word	0x08001c4d
 8001bbc:	08001c69 	.word	0x08001c69
			case 0:
				lcd_ShowIntNum(70, 100, "  ", 2, BLACK, BLACK, 24);
 8001bc0:	4b9c      	ldr	r3, [pc, #624]	@ (8001e34 <modifyTime+0x2d0>)
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2318      	movs	r3, #24
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	2164      	movs	r1, #100	@ 0x64
 8001bd4:	2046      	movs	r0, #70	@ 0x46
 8001bd6:	f7ff f9e9 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001bda:	e0cb      	b.n	8001d74 <modifyTime+0x210>
			case 1:
				lcd_ShowIntNum(110, 100, "  ", 2, BLACK, BLACK, 24);
 8001bdc:	4b95      	ldr	r3, [pc, #596]	@ (8001e34 <modifyTime+0x2d0>)
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2318      	movs	r3, #24
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2302      	movs	r3, #2
 8001bee:	2164      	movs	r1, #100	@ 0x64
 8001bf0:	206e      	movs	r0, #110	@ 0x6e
 8001bf2:	f7ff f9db 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001bf6:	e0bd      	b.n	8001d74 <modifyTime+0x210>
			case 2:
				lcd_ShowIntNum(150, 100, "  ", 2, BLACK, BLACK, 24);
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8001e34 <modifyTime+0x2d0>)
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2318      	movs	r3, #24
 8001bfe:	9302      	str	r3, [sp, #8]
 8001c00:	2300      	movs	r3, #0
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	2164      	movs	r1, #100	@ 0x64
 8001c0c:	2096      	movs	r0, #150	@ 0x96
 8001c0e:	f7ff f9cd 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001c12:	e0af      	b.n	8001d74 <modifyTime+0x210>
			case 3:
				lcd_ShowIntNum(20, 130, "  ", 2, BLACK, BLACK, 24);
 8001c14:	4b87      	ldr	r3, [pc, #540]	@ (8001e34 <modifyTime+0x2d0>)
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	2318      	movs	r3, #24
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	2182      	movs	r1, #130	@ 0x82
 8001c28:	2014      	movs	r0, #20
 8001c2a:	f7ff f9bf 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001c2e:	e0a1      	b.n	8001d74 <modifyTime+0x210>
			case 4:
				lcd_ShowIntNum(70, 130, "  ", 2, BLACK, BLACK, 24);
 8001c30:	4b80      	ldr	r3, [pc, #512]	@ (8001e34 <modifyTime+0x2d0>)
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2318      	movs	r3, #24
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2302      	movs	r3, #2
 8001c42:	2182      	movs	r1, #130	@ 0x82
 8001c44:	2046      	movs	r0, #70	@ 0x46
 8001c46:	f7ff f9b1 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001c4a:	e093      	b.n	8001d74 <modifyTime+0x210>
			case 5:
				lcd_ShowIntNum(110, 130, "  ", 2, BLACK, BLACK, 24);
 8001c4c:	4b79      	ldr	r3, [pc, #484]	@ (8001e34 <modifyTime+0x2d0>)
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2318      	movs	r3, #24
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2182      	movs	r1, #130	@ 0x82
 8001c60:	206e      	movs	r0, #110	@ 0x6e
 8001c62:	f7ff f9a3 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001c66:	e085      	b.n	8001d74 <modifyTime+0x210>
			case 6:
				lcd_ShowIntNum(150, 130, "  ", 2, BLACK, BLACK, 24);
 8001c68:	4b72      	ldr	r3, [pc, #456]	@ (8001e34 <modifyTime+0x2d0>)
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	2318      	movs	r3, #24
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	2182      	movs	r1, #130	@ 0x82
 8001c7c:	2096      	movs	r0, #150	@ 0x96
 8001c7e:	f7ff f995 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001c82:	e077      	b.n	8001d74 <modifyTime+0x210>
		}
	} else {
		lcd_StrCenter(0, 50, returnMode(), WHITE, BLACK, 24, 0);
 8001c84:	f7ff fd96 	bl	80017b4 <returnMode>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2318      	movs	r3, #24
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c9a:	2132      	movs	r1, #50	@ 0x32
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fbeb 	bl	8001478 <lcd_StrCenter>
		lcd_ShowIntNum(70, 100, temp_time[0], 2, GREEN, BLACK, 24);
 8001ca2:	4b65      	ldr	r3, [pc, #404]	@ (8001e38 <modifyTime+0x2d4>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2318      	movs	r3, #24
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	2164      	movs	r1, #100	@ 0x64
 8001cba:	2046      	movs	r0, #70	@ 0x46
 8001cbc:	f7ff f976 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, temp_time[1], 2, GREEN, BLACK, 24);
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <modifyTime+0x2d4>)
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	2164      	movs	r1, #100	@ 0x64
 8001cd8:	206e      	movs	r0, #110	@ 0x6e
 8001cda:	f7ff f967 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, temp_time[2], 2, GREEN, BLACK, 24);
 8001cde:	4b56      	ldr	r3, [pc, #344]	@ (8001e38 <modifyTime+0x2d4>)
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2318      	movs	r3, #24
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	2164      	movs	r1, #100	@ 0x64
 8001cf6:	2096      	movs	r0, #150	@ 0x96
 8001cf8:	f7ff f958 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, temp_time[3], 2, YELLOW, BLACK, 24);
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <modifyTime+0x2d4>)
 8001cfe:	78db      	ldrb	r3, [r3, #3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	2318      	movs	r3, #24
 8001d04:	9302      	str	r3, [sp, #8]
 8001d06:	2300      	movs	r3, #0
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2302      	movs	r3, #2
 8001d12:	2182      	movs	r1, #130	@ 0x82
 8001d14:	2014      	movs	r0, #20
 8001d16:	f7ff f949 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, temp_time[4], 2, YELLOW, BLACK, 24);
 8001d1a:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <modifyTime+0x2d4>)
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2318      	movs	r3, #24
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	2182      	movs	r1, #130	@ 0x82
 8001d32:	2046      	movs	r0, #70	@ 0x46
 8001d34:	f7ff f93a 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, temp_time[5], 2, YELLOW, BLACK, 24);
 8001d38:	4b3f      	ldr	r3, [pc, #252]	@ (8001e38 <modifyTime+0x2d4>)
 8001d3a:	795b      	ldrb	r3, [r3, #5]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2318      	movs	r3, #24
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	2182      	movs	r1, #130	@ 0x82
 8001d50:	206e      	movs	r0, #110	@ 0x6e
 8001d52:	f7ff f92b 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, temp_time[6], 2, YELLOW, BLACK, 24);
 8001d56:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <modifyTime+0x2d4>)
 8001d58:	799b      	ldrb	r3, [r3, #6]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2318      	movs	r3, #24
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	2182      	movs	r1, #130	@ 0x82
 8001d6e:	2096      	movs	r0, #150	@ 0x96
 8001d70:	f7ff f91c 	bl	8000fac <lcd_ShowIntNum>
	}

	if (button_count[3] == 1) {
 8001d74:	4b31      	ldr	r3, [pc, #196]	@ (8001e3c <modifyTime+0x2d8>)
 8001d76:	88db      	ldrh	r3, [r3, #6]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d109      	bne.n	8001d90 <modifyTime+0x22c>
		temp_time[temp]++;
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <modifyTime+0x2cc>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <modifyTime+0x2d4>)
 8001d82:	5cd2      	ldrb	r2, [r2, r3]
 8001d84:	3201      	adds	r2, #1
 8001d86:	b2d1      	uxtb	r1, r2
 8001d88:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <modifyTime+0x2d4>)
 8001d8a:	54d1      	strb	r1, [r2, r3]
		checkTime();
 8001d8c:	f7ff fd3e 	bl	800180c <checkTime>
	}

	if (button_count[3] > 40 && button_count[3] % 4 == 1) {
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <modifyTime+0x2d8>)
 8001d92:	88db      	ldrh	r3, [r3, #6]
 8001d94:	2b28      	cmp	r3, #40	@ 0x28
 8001d96:	d910      	bls.n	8001dba <modifyTime+0x256>
 8001d98:	4b28      	ldr	r3, [pc, #160]	@ (8001e3c <modifyTime+0x2d8>)
 8001d9a:	88db      	ldrh	r3, [r3, #6]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d109      	bne.n	8001dba <modifyTime+0x256>
		temp_time[temp]++;
 8001da6:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <modifyTime+0x2cc>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4a23      	ldr	r2, [pc, #140]	@ (8001e38 <modifyTime+0x2d4>)
 8001dac:	5cd2      	ldrb	r2, [r2, r3]
 8001dae:	3201      	adds	r2, #1
 8001db0:	b2d1      	uxtb	r1, r2
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <modifyTime+0x2d4>)
 8001db4:	54d1      	strb	r1, [r2, r3]
		checkTime();
 8001db6:	f7ff fd29 	bl	800180c <checkTime>
	}

	if (button_count[12] == 1) {
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <modifyTime+0x2d8>)
 8001dbc:	8b1b      	ldrh	r3, [r3, #24]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d173      	bne.n	8001eaa <modifyTime+0x346>
		switch (temp){
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <modifyTime+0x2cc>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d862      	bhi.n	8001e90 <modifyTime+0x32c>
 8001dca:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd0 <modifyTime+0x26c>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001ded 	.word	0x08001ded
 8001dd4:	08001e01 	.word	0x08001e01
 8001dd8:	08001e15 	.word	0x08001e15
 8001ddc:	08001e41 	.word	0x08001e41
 8001de0:	08001e55 	.word	0x08001e55
 8001de4:	08001e69 	.word	0x08001e69
 8001de8:	08001e7d 	.word	0x08001e7d
			case 0:
				ds3231_Write(ADDRESS_HOUR, temp_time[temp]);
 8001dec:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <modifyTime+0x2cc>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <modifyTime+0x2d4>)
 8001df4:	5c9b      	ldrb	r3, [r3, r2]
 8001df6:	4619      	mov	r1, r3
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7fe fc21 	bl	8000640 <ds3231_Write>
				break;
 8001dfe:	e047      	b.n	8001e90 <modifyTime+0x32c>
			case 1:
				ds3231_Write(ADDRESS_MIN, temp_time[temp]);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <modifyTime+0x2cc>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <modifyTime+0x2d4>)
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7fe fc17 	bl	8000640 <ds3231_Write>
				break;
 8001e12:	e03d      	b.n	8001e90 <modifyTime+0x32c>
			case 2:
				ds3231_Write(ADDRESS_SEC, temp_time[temp]);
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <modifyTime+0x2cc>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <modifyTime+0x2d4>)
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7fe fc0d 	bl	8000640 <ds3231_Write>
				break;
 8001e26:	e033      	b.n	8001e90 <modifyTime+0x32c>
 8001e28:	20000118 	.word	0x20000118
 8001e2c:	66666667 	.word	0x66666667
 8001e30:	2000011a 	.word	0x2000011a
 8001e34:	080063ac 	.word	0x080063ac
 8001e38:	20000120 	.word	0x20000120
 8001e3c:	20000030 	.word	0x20000030
			case 3:
				ds3231_Write(ADDRESS_DAY, temp_time[temp]);
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <modifyTime+0x34c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <modifyTime+0x350>)
 8001e48:	5c9b      	ldrb	r3, [r3, r2]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f7fe fbf7 	bl	8000640 <ds3231_Write>
				break;
 8001e52:	e01d      	b.n	8001e90 <modifyTime+0x32c>
			case 4:
				ds3231_Write(ADDRESS_DATE, temp_time[temp]);
 8001e54:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <modifyTime+0x34c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <modifyTime+0x350>)
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	2004      	movs	r0, #4
 8001e62:	f7fe fbed 	bl	8000640 <ds3231_Write>
				break;
 8001e66:	e013      	b.n	8001e90 <modifyTime+0x32c>
			case 5:
				ds3231_Write(ADDRESS_MONTH, temp_time[temp]);
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <modifyTime+0x34c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <modifyTime+0x350>)
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	4619      	mov	r1, r3
 8001e74:	2005      	movs	r0, #5
 8001e76:	f7fe fbe3 	bl	8000640 <ds3231_Write>
				break;
 8001e7a:	e009      	b.n	8001e90 <modifyTime+0x32c>
			case 6:
				ds3231_Write(ADDRESS_YEAR, temp_time[temp]);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <modifyTime+0x34c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <modifyTime+0x350>)
 8001e84:	5c9b      	ldrb	r3, [r3, r2]
 8001e86:	4619      	mov	r1, r3
 8001e88:	2006      	movs	r0, #6
 8001e8a:	f7fe fbd9 	bl	8000640 <ds3231_Write>
				break;
 8001e8e:	bf00      	nop
		}
		temp++;
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <modifyTime+0x34c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <modifyTime+0x34c>)
 8001e9a:	701a      	strb	r2, [r3, #0]
		if (temp > 6) {
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <modifyTime+0x34c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d902      	bls.n	8001eaa <modifyTime+0x346>
			temp = 0;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	@ (8001eb0 <modifyTime+0x34c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000011a 	.word	0x2000011a
 8001eb4:	20000120 	.word	0x20000120

08001eb8 <modifyTimer>:

void modifyTimer() {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af04      	add	r7, sp, #16
	count_timer = (count_timer + 1) % 10;
 8001ebe:	4bb1      	ldr	r3, [pc, #708]	@ (8002184 <modifyTimer+0x2cc>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4bb0      	ldr	r3, [pc, #704]	@ (8002188 <modifyTimer+0x2d0>)
 8001ec6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eca:	1099      	asrs	r1, r3, #2
 8001ecc:	17d3      	asrs	r3, r2, #31
 8001ece:	1ac9      	subs	r1, r1, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	1ad1      	subs	r1, r2, r3
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	4ba9      	ldr	r3, [pc, #676]	@ (8002184 <modifyTimer+0x2cc>)
 8001ede:	701a      	strb	r2, [r3, #0]
	if (count_timer > 5) {
 8001ee0:	4ba8      	ldr	r3, [pc, #672]	@ (8002184 <modifyTimer+0x2cc>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	d977      	bls.n	8001fd8 <modifyTimer+0x120>
		switch (temp_timer){
 8001ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800218c <modifyTimer+0x2d4>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	f200 80eb 	bhi.w	80020c8 <modifyTimer+0x210>
 8001ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef8 <modifyTimer+0x40>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f15 	.word	0x08001f15
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08001f4d 	.word	0x08001f4d
 8001f04:	08001f69 	.word	0x08001f69
 8001f08:	08001f85 	.word	0x08001f85
 8001f0c:	08001fa1 	.word	0x08001fa1
 8001f10:	08001fbd 	.word	0x08001fbd
			case 0:
				lcd_ShowIntNum(70, 100, "  ", 2, BLACK, BLACK, 24);
 8001f14:	4b9e      	ldr	r3, [pc, #632]	@ (8002190 <modifyTimer+0x2d8>)
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2318      	movs	r3, #24
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2302      	movs	r3, #2
 8001f26:	2164      	movs	r1, #100	@ 0x64
 8001f28:	2046      	movs	r0, #70	@ 0x46
 8001f2a:	f7ff f83f 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001f2e:	e0cb      	b.n	80020c8 <modifyTimer+0x210>
			case 1:
				lcd_ShowIntNum(110, 100, "  ", 2, BLACK, BLACK, 24);
 8001f30:	4b97      	ldr	r3, [pc, #604]	@ (8002190 <modifyTimer+0x2d8>)
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	2318      	movs	r3, #24
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2302      	movs	r3, #2
 8001f42:	2164      	movs	r1, #100	@ 0x64
 8001f44:	206e      	movs	r0, #110	@ 0x6e
 8001f46:	f7ff f831 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001f4a:	e0bd      	b.n	80020c8 <modifyTimer+0x210>
			case 2:
				lcd_ShowIntNum(150, 100, "  ", 2, BLACK, BLACK, 24);
 8001f4c:	4b90      	ldr	r3, [pc, #576]	@ (8002190 <modifyTimer+0x2d8>)
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2318      	movs	r3, #24
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2300      	movs	r3, #0
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	2164      	movs	r1, #100	@ 0x64
 8001f60:	2096      	movs	r0, #150	@ 0x96
 8001f62:	f7ff f823 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001f66:	e0af      	b.n	80020c8 <modifyTimer+0x210>
			case 3:
				lcd_ShowIntNum(20, 130, "  ", 2, BLACK, BLACK, 24);
 8001f68:	4b89      	ldr	r3, [pc, #548]	@ (8002190 <modifyTimer+0x2d8>)
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2318      	movs	r3, #24
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2300      	movs	r3, #0
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2302      	movs	r3, #2
 8001f7a:	2182      	movs	r1, #130	@ 0x82
 8001f7c:	2014      	movs	r0, #20
 8001f7e:	f7ff f815 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001f82:	e0a1      	b.n	80020c8 <modifyTimer+0x210>
			case 4:
				lcd_ShowIntNum(70, 130, "  ", 2, BLACK, BLACK, 24);
 8001f84:	4b82      	ldr	r3, [pc, #520]	@ (8002190 <modifyTimer+0x2d8>)
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2318      	movs	r3, #24
 8001f8a:	9302      	str	r3, [sp, #8]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2302      	movs	r3, #2
 8001f96:	2182      	movs	r1, #130	@ 0x82
 8001f98:	2046      	movs	r0, #70	@ 0x46
 8001f9a:	f7ff f807 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001f9e:	e093      	b.n	80020c8 <modifyTimer+0x210>
			case 5:
				lcd_ShowIntNum(110, 130, "  ", 2, BLACK, BLACK, 24);
 8001fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8002190 <modifyTimer+0x2d8>)
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2318      	movs	r3, #24
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	2182      	movs	r1, #130	@ 0x82
 8001fb4:	206e      	movs	r0, #110	@ 0x6e
 8001fb6:	f7fe fff9 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001fba:	e085      	b.n	80020c8 <modifyTimer+0x210>
			case 6:
				lcd_ShowIntNum(150, 130, "  ", 2, BLACK, BLACK, 24);
 8001fbc:	4b74      	ldr	r3, [pc, #464]	@ (8002190 <modifyTimer+0x2d8>)
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2318      	movs	r3, #24
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	2302      	movs	r3, #2
 8001fce:	2182      	movs	r1, #130	@ 0x82
 8001fd0:	2096      	movs	r0, #150	@ 0x96
 8001fd2:	f7fe ffeb 	bl	8000fac <lcd_ShowIntNum>
				break;
 8001fd6:	e077      	b.n	80020c8 <modifyTimer+0x210>
		}
	} else {
		lcd_StrCenter(0, 50, returnMode(), WHITE, BLACK, 24, 0);
 8001fd8:	f7ff fbec 	bl	80017b4 <returnMode>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2318      	movs	r3, #24
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fee:	2132      	movs	r1, #50	@ 0x32
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fa41 	bl	8001478 <lcd_StrCenter>
		lcd_ShowIntNum(70, 100, timer[0], 2, GREEN, BLACK, 24);
 8001ff6:	4b67      	ldr	r3, [pc, #412]	@ (8002194 <modifyTimer+0x2dc>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2318      	movs	r3, #24
 8001ffe:	9302      	str	r3, [sp, #8]
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2302      	movs	r3, #2
 800200c:	2164      	movs	r1, #100	@ 0x64
 800200e:	2046      	movs	r0, #70	@ 0x46
 8002010:	f7fe ffcc 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, timer[1], 2, GREEN, BLACK, 24);
 8002014:	4b5f      	ldr	r3, [pc, #380]	@ (8002194 <modifyTimer+0x2dc>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	461a      	mov	r2, r3
 800201a:	2318      	movs	r3, #24
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	2300      	movs	r3, #0
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	2164      	movs	r1, #100	@ 0x64
 800202c:	206e      	movs	r0, #110	@ 0x6e
 800202e:	f7fe ffbd 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, timer[2], 2, GREEN, BLACK, 24);
 8002032:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <modifyTimer+0x2dc>)
 8002034:	789b      	ldrb	r3, [r3, #2]
 8002036:	461a      	mov	r2, r3
 8002038:	2318      	movs	r3, #24
 800203a:	9302      	str	r3, [sp, #8]
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2302      	movs	r3, #2
 8002048:	2164      	movs	r1, #100	@ 0x64
 800204a:	2096      	movs	r0, #150	@ 0x96
 800204c:	f7fe ffae 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, timer[3], 2, YELLOW, BLACK, 24);
 8002050:	4b50      	ldr	r3, [pc, #320]	@ (8002194 <modifyTimer+0x2dc>)
 8002052:	78db      	ldrb	r3, [r3, #3]
 8002054:	461a      	mov	r2, r3
 8002056:	2318      	movs	r3, #24
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	2300      	movs	r3, #0
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2302      	movs	r3, #2
 8002066:	2182      	movs	r1, #130	@ 0x82
 8002068:	2014      	movs	r0, #20
 800206a:	f7fe ff9f 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, timer[4], 2, YELLOW, BLACK, 24);
 800206e:	4b49      	ldr	r3, [pc, #292]	@ (8002194 <modifyTimer+0x2dc>)
 8002070:	791b      	ldrb	r3, [r3, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	2318      	movs	r3, #24
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2302      	movs	r3, #2
 8002084:	2182      	movs	r1, #130	@ 0x82
 8002086:	2046      	movs	r0, #70	@ 0x46
 8002088:	f7fe ff90 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130,timer[5], 2, YELLOW, BLACK, 24);
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <modifyTimer+0x2dc>)
 800208e:	795b      	ldrb	r3, [r3, #5]
 8002090:	461a      	mov	r2, r3
 8002092:	2318      	movs	r3, #24
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	2300      	movs	r3, #0
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2302      	movs	r3, #2
 80020a2:	2182      	movs	r1, #130	@ 0x82
 80020a4:	206e      	movs	r0, #110	@ 0x6e
 80020a6:	f7fe ff81 	bl	8000fac <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, timer[6], 2, YELLOW, BLACK, 24);
 80020aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <modifyTimer+0x2dc>)
 80020ac:	799b      	ldrb	r3, [r3, #6]
 80020ae:	461a      	mov	r2, r3
 80020b0:	2318      	movs	r3, #24
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	2182      	movs	r1, #130	@ 0x82
 80020c2:	2096      	movs	r0, #150	@ 0x96
 80020c4:	f7fe ff72 	bl	8000fac <lcd_ShowIntNum>
	}

	if (button_count[3] == 1) {
 80020c8:	4b33      	ldr	r3, [pc, #204]	@ (8002198 <modifyTimer+0x2e0>)
 80020ca:	88db      	ldrh	r3, [r3, #6]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d109      	bne.n	80020e4 <modifyTimer+0x22c>
		timer[temp_timer]++;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <modifyTimer+0x2d4>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002194 <modifyTimer+0x2dc>)
 80020d6:	5cd2      	ldrb	r2, [r2, r3]
 80020d8:	3201      	adds	r2, #1
 80020da:	b2d1      	uxtb	r1, r2
 80020dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002194 <modifyTimer+0x2dc>)
 80020de:	54d1      	strb	r1, [r2, r3]
		checkTimer();
 80020e0:	f7ff fc24 	bl	800192c <checkTimer>
	}

	if (button_count[3] > 40 && button_count[3] % 4 == 1) {
 80020e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <modifyTimer+0x2e0>)
 80020e6:	88db      	ldrh	r3, [r3, #6]
 80020e8:	2b28      	cmp	r3, #40	@ 0x28
 80020ea:	d910      	bls.n	800210e <modifyTimer+0x256>
 80020ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <modifyTimer+0x2e0>)
 80020ee:	88db      	ldrh	r3, [r3, #6]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d109      	bne.n	800210e <modifyTimer+0x256>
		timer[temp_timer]++;
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <modifyTimer+0x2d4>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <modifyTimer+0x2dc>)
 8002100:	5cd2      	ldrb	r2, [r2, r3]
 8002102:	3201      	adds	r2, #1
 8002104:	b2d1      	uxtb	r1, r2
 8002106:	4a23      	ldr	r2, [pc, #140]	@ (8002194 <modifyTimer+0x2dc>)
 8002108:	54d1      	strb	r1, [r2, r3]
		checkTimer();
 800210a:	f7ff fc0f 	bl	800192c <checkTimer>
	}

	if (button_count[12] == 1) {
 800210e:	4b22      	ldr	r3, [pc, #136]	@ (8002198 <modifyTimer+0x2e0>)
 8002110:	8b1b      	ldrh	r3, [r3, #24]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d17d      	bne.n	8002212 <modifyTimer+0x35a>
		switch (temp_timer){
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <modifyTimer+0x2d4>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d86c      	bhi.n	80021f8 <modifyTimer+0x340>
 800211e:	a201      	add	r2, pc, #4	@ (adr r2, 8002124 <modifyTimer+0x26c>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002141 	.word	0x08002141
 8002128:	08002157 	.word	0x08002157
 800212c:	0800216d 	.word	0x0800216d
 8002130:	080021a1 	.word	0x080021a1
 8002134:	080021b7 	.word	0x080021b7
 8002138:	080021cd 	.word	0x080021cd
 800213c:	080021e3 	.word	0x080021e3
			case 0:
				timerPresent[temp_timer] = timer[temp_timer];
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <modifyTimer+0x2d4>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <modifyTimer+0x2d4>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <modifyTimer+0x2dc>)
 800214e:	5c59      	ldrb	r1, [r3, r1]
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <modifyTimer+0x2e4>)
 8002152:	5499      	strb	r1, [r3, r2]
				break;
 8002154:	e050      	b.n	80021f8 <modifyTimer+0x340>
			case 1:
				timerPresent[temp_timer] = timer[temp_timer];
 8002156:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <modifyTimer+0x2d4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <modifyTimer+0x2d4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <modifyTimer+0x2dc>)
 8002164:	5c59      	ldrb	r1, [r3, r1]
 8002166:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <modifyTimer+0x2e4>)
 8002168:	5499      	strb	r1, [r3, r2]
				break;
 800216a:	e045      	b.n	80021f8 <modifyTimer+0x340>
			case 2:
				timerPresent[temp_timer] = timer[temp_timer];
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <modifyTimer+0x2d4>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <modifyTimer+0x2d4>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <modifyTimer+0x2dc>)
 800217a:	5c59      	ldrb	r1, [r3, r1]
 800217c:	4b07      	ldr	r3, [pc, #28]	@ (800219c <modifyTimer+0x2e4>)
 800217e:	5499      	strb	r1, [r3, r2]
				break;
 8002180:	e03a      	b.n	80021f8 <modifyTimer+0x340>
 8002182:	bf00      	nop
 8002184:	20000119 	.word	0x20000119
 8002188:	66666667 	.word	0x66666667
 800218c:	2000011b 	.word	0x2000011b
 8002190:	080063ac 	.word	0x080063ac
 8002194:	20000128 	.word	0x20000128
 8002198:	20000030 	.word	0x20000030
 800219c:	20000130 	.word	0x20000130
			case 3:
				timerPresent[temp_timer] = timer[temp_timer];
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <modifyTimer+0x360>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <modifyTimer+0x360>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <modifyTimer+0x364>)
 80021ae:	5c59      	ldrb	r1, [r3, r1]
 80021b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002220 <modifyTimer+0x368>)
 80021b2:	5499      	strb	r1, [r3, r2]
				break;
 80021b4:	e020      	b.n	80021f8 <modifyTimer+0x340>
			case 4:
				timerPresent[temp_timer] = timer[temp_timer];
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <modifyTimer+0x360>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <modifyTimer+0x360>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <modifyTimer+0x364>)
 80021c4:	5c59      	ldrb	r1, [r3, r1]
 80021c6:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <modifyTimer+0x368>)
 80021c8:	5499      	strb	r1, [r3, r2]
				break;
 80021ca:	e015      	b.n	80021f8 <modifyTimer+0x340>
			case 5:
				timerPresent[temp_timer] = timer[temp_timer];
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <modifyTimer+0x360>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <modifyTimer+0x360>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <modifyTimer+0x364>)
 80021da:	5c59      	ldrb	r1, [r3, r1]
 80021dc:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <modifyTimer+0x368>)
 80021de:	5499      	strb	r1, [r3, r2]
				break;
 80021e0:	e00a      	b.n	80021f8 <modifyTimer+0x340>
			case 6:
				timerPresent[temp_timer] = timer[temp_timer];
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <modifyTimer+0x360>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <modifyTimer+0x360>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <modifyTimer+0x364>)
 80021f0:	5c59      	ldrb	r1, [r3, r1]
 80021f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <modifyTimer+0x368>)
 80021f4:	5499      	strb	r1, [r3, r2]
				break;
 80021f6:	bf00      	nop
		}
		temp_timer++;
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <modifyTimer+0x360>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <modifyTimer+0x360>)
 8002202:	701a      	strb	r2, [r3, #0]
		if (temp_timer> 6) {
 8002204:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <modifyTimer+0x360>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d902      	bls.n	8002212 <modifyTimer+0x35a>
			temp_timer = 0;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <modifyTimer+0x360>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000011b 	.word	0x2000011b
 800221c:	20000128 	.word	0x20000128
 8002220:	20000130 	.word	0x20000130

08002224 <fsm>:

void fsm() {
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af04      	add	r7, sp, #16
	switch (currentMode) {
 800222a:	4ba8      	ldr	r3, [pc, #672]	@ (80024cc <fsm+0x2a8>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b03      	cmp	r3, #3
 8002230:	f200 819a 	bhi.w	8002568 <fsm+0x344>
 8002234:	a201      	add	r2, pc, #4	@ (adr r2, 800223c <fsm+0x18>)
 8002236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223a:	bf00      	nop
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002255 	.word	0x08002255
 8002244:	08002321 	.word	0x08002321
 8002248:	08002413 	.word	0x08002413
		case modeInit:
			currentMode = modeNormal;
 800224c:	4b9f      	ldr	r3, [pc, #636]	@ (80024cc <fsm+0x2a8>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
			break;
 8002252:	e189      	b.n	8002568 <fsm+0x344>
		case modeNormal:
			temp = 0;
 8002254:	4b9e      	ldr	r3, [pc, #632]	@ (80024d0 <fsm+0x2ac>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
			temp_timer = 0;
 800225a:	4b9e      	ldr	r3, [pc, #632]	@ (80024d4 <fsm+0x2b0>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++) {
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e00c      	b.n	8002280 <fsm+0x5c>
				temp_time[i] = 0;
 8002266:	4a9c      	ldr	r2, [pc, #624]	@ (80024d8 <fsm+0x2b4>)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
				timer[i] = 0;
 8002270:	4a9a      	ldr	r2, [pc, #616]	@ (80024dc <fsm+0x2b8>)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 7; i++) {
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b06      	cmp	r3, #6
 8002284:	ddef      	ble.n	8002266 <fsm+0x42>
			}
			displayTime();
 8002286:	f7ff fbe1 	bl	8001a4c <displayTime>

			if (ds3231_hours == timerPresent[0] && ds3231_min == timerPresent[1]) {
 800228a:	4b95      	ldr	r3, [pc, #596]	@ (80024e0 <fsm+0x2bc>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b95      	ldr	r3, [pc, #596]	@ (80024e4 <fsm+0x2c0>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d11e      	bne.n	80022d4 <fsm+0xb0>
 8002296:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <fsm+0x2bc>)
 8002298:	785a      	ldrb	r2, [r3, #1]
 800229a:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <fsm+0x2c4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d118      	bne.n	80022d4 <fsm+0xb0>
				lcd_Fill(0, 200, 240, 300, RED);
 80022a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80022ac:	22f0      	movs	r2, #240	@ 0xf0
 80022ae:	21c8      	movs	r1, #200	@ 0xc8
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fd41 	bl	8000d38 <lcd_Fill>
				lcd_StrCenter(0, 240, "Wake up!", YELLOW, RED, 16, 0);
 80022b6:	2300      	movs	r3, #0
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2310      	movs	r3, #16
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022c8:	4a88      	ldr	r2, [pc, #544]	@ (80024ec <fsm+0x2c8>)
 80022ca:	21f0      	movs	r1, #240	@ 0xf0
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff f8d3 	bl	8001478 <lcd_StrCenter>
 80022d2:	e014      	b.n	80022fe <fsm+0xda>
			}
			else {
				lcd_Fill(0, 200, 240, 300, BLACK);
 80022d4:	2300      	movs	r3, #0
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80022dc:	22f0      	movs	r2, #240	@ 0xf0
 80022de:	21c8      	movs	r1, #200	@ 0xc8
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fd29 	bl	8000d38 <lcd_Fill>
				lcd_StrCenter(0, 240, "Wake up!", BLACK, BLACK, 16, 0);
 80022e6:	2300      	movs	r3, #0
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2310      	movs	r3, #16
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2300      	movs	r3, #0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <fsm+0x2c8>)
 80022f6:	21f0      	movs	r1, #240	@ 0xf0
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff f8bd 	bl	8001478 <lcd_StrCenter>
			}

			if (button_count[0] == 1) {
 80022fe:	4b7c      	ldr	r3, [pc, #496]	@ (80024f0 <fsm+0x2cc>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 812b 	bne.w	800255e <fsm+0x33a>
				lcd_Fill(0, 50, 240, 75, BLACK);
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	234b      	movs	r3, #75	@ 0x4b
 800230e:	22f0      	movs	r2, #240	@ 0xf0
 8002310:	2132      	movs	r1, #50	@ 0x32
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fd10 	bl	8000d38 <lcd_Fill>
				currentMode = modeModify;
 8002318:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <fsm+0x2a8>)
 800231a:	2202      	movs	r2, #2
 800231c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800231e:	e11e      	b.n	800255e <fsm+0x33a>
		case modeModify:
			for (int i = 0; i < 7; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	e059      	b.n	80023da <fsm+0x1b6>
				if (temp_time[i] == 0 && flag == 0) {
 8002326:	4a6c      	ldr	r2, [pc, #432]	@ (80024d8 <fsm+0x2b4>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d150      	bne.n	80023d4 <fsm+0x1b0>
 8002332:	4b70      	ldr	r3, [pc, #448]	@ (80024f4 <fsm+0x2d0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d14c      	bne.n	80023d4 <fsm+0x1b0>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d849      	bhi.n	80023d4 <fsm+0x1b0>
 8002340:	a201      	add	r2, pc, #4	@ (adr r2, 8002348 <fsm+0x124>)
 8002342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002346:	bf00      	nop
 8002348:	08002365 	.word	0x08002365
 800234c:	08002375 	.word	0x08002375
 8002350:	08002385 	.word	0x08002385
 8002354:	08002395 	.word	0x08002395
 8002358:	080023a5 	.word	0x080023a5
 800235c:	080023b5 	.word	0x080023b5
 8002360:	080023c5 	.word	0x080023c5
					switch (i) {
						case 0:
							temp_time[i] = ds3231_hours;
 8002364:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <fsm+0x2c0>)
 8002366:	7819      	ldrb	r1, [r3, #0]
 8002368:	4a5b      	ldr	r2, [pc, #364]	@ (80024d8 <fsm+0x2b4>)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	4413      	add	r3, r2
 800236e:	460a      	mov	r2, r1
 8002370:	701a      	strb	r2, [r3, #0]
							break;
 8002372:	e02f      	b.n	80023d4 <fsm+0x1b0>
						case 1:
							temp_time[i] = ds3231_min;
 8002374:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <fsm+0x2c4>)
 8002376:	7819      	ldrb	r1, [r3, #0]
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <fsm+0x2b4>)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
							break;
 8002382:	e027      	b.n	80023d4 <fsm+0x1b0>
						case 2:
							temp_time[i] = ds3231_sec;
 8002384:	4b5c      	ldr	r3, [pc, #368]	@ (80024f8 <fsm+0x2d4>)
 8002386:	7819      	ldrb	r1, [r3, #0]
 8002388:	4a53      	ldr	r2, [pc, #332]	@ (80024d8 <fsm+0x2b4>)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	460a      	mov	r2, r1
 8002390:	701a      	strb	r2, [r3, #0]
							break;
 8002392:	e01f      	b.n	80023d4 <fsm+0x1b0>
						case 3:
							temp_time[i] = ds3231_day;
 8002394:	4b59      	ldr	r3, [pc, #356]	@ (80024fc <fsm+0x2d8>)
 8002396:	7819      	ldrb	r1, [r3, #0]
 8002398:	4a4f      	ldr	r2, [pc, #316]	@ (80024d8 <fsm+0x2b4>)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4413      	add	r3, r2
 800239e:	460a      	mov	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
							break;
 80023a2:	e017      	b.n	80023d4 <fsm+0x1b0>
						case 4:
							temp_time[i] = ds3231_date;
 80023a4:	4b56      	ldr	r3, [pc, #344]	@ (8002500 <fsm+0x2dc>)
 80023a6:	7819      	ldrb	r1, [r3, #0]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	@ (80024d8 <fsm+0x2b4>)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	460a      	mov	r2, r1
 80023b0:	701a      	strb	r2, [r3, #0]
							break;
 80023b2:	e00f      	b.n	80023d4 <fsm+0x1b0>
						case 5:
							temp_time[i] = ds3231_month;
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <fsm+0x2e0>)
 80023b6:	7819      	ldrb	r1, [r3, #0]
 80023b8:	4a47      	ldr	r2, [pc, #284]	@ (80024d8 <fsm+0x2b4>)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	460a      	mov	r2, r1
 80023c0:	701a      	strb	r2, [r3, #0]
							break;
 80023c2:	e007      	b.n	80023d4 <fsm+0x1b0>
						case 6:
							temp_time[i] = ds3231_year;
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <fsm+0x2e4>)
 80023c6:	7819      	ldrb	r1, [r3, #0]
 80023c8:	4a43      	ldr	r2, [pc, #268]	@ (80024d8 <fsm+0x2b4>)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	460a      	mov	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
							break;
 80023d2:	bf00      	nop
			for (int i = 0; i < 7; i++) {
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	dda2      	ble.n	8002326 <fsm+0x102>
					}
				}
			}
			flag = 1;
 80023e0:	4b44      	ldr	r3, [pc, #272]	@ (80024f4 <fsm+0x2d0>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
			modifyTime();
 80023e6:	f7ff fbbd 	bl	8001b64 <modifyTime>
			if (button_count[0] == 1) {
 80023ea:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <fsm+0x2cc>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	f040 80b7 	bne.w	8002562 <fsm+0x33e>
				flag = 0;
 80023f4:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <fsm+0x2d0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
				lcd_Fill(0, 50, 240, 75, BLACK);
 80023fa:	2300      	movs	r3, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	234b      	movs	r3, #75	@ 0x4b
 8002400:	22f0      	movs	r2, #240	@ 0xf0
 8002402:	2132      	movs	r1, #50	@ 0x32
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fc97 	bl	8000d38 <lcd_Fill>
				currentMode = modeTimer;
 800240a:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <fsm+0x2a8>)
 800240c:	2203      	movs	r2, #3
 800240e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002410:	e0a7      	b.n	8002562 <fsm+0x33e>
		case modeTimer:
			for (int i = 0; i < 7; i++) {
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	e086      	b.n	8002526 <fsm+0x302>
				if (timer[i] == 0 && flag == 0) {
 8002418:	4a30      	ldr	r2, [pc, #192]	@ (80024dc <fsm+0x2b8>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d17d      	bne.n	8002520 <fsm+0x2fc>
 8002424:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <fsm+0x2d0>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d179      	bne.n	8002520 <fsm+0x2fc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d876      	bhi.n	8002520 <fsm+0x2fc>
 8002432:	a201      	add	r2, pc, #4	@ (adr r2, 8002438 <fsm+0x214>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	08002455 	.word	0x08002455
 800243c:	08002469 	.word	0x08002469
 8002440:	0800247d 	.word	0x0800247d
 8002444:	08002491 	.word	0x08002491
 8002448:	080024a5 	.word	0x080024a5
 800244c:	080024b9 	.word	0x080024b9
 8002450:	0800250d 	.word	0x0800250d
					switch (i) {
						case 0:
							timer[i] = timerPresent[i];
 8002454:	4a22      	ldr	r2, [pc, #136]	@ (80024e0 <fsm+0x2bc>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	7819      	ldrb	r1, [r3, #0]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <fsm+0x2b8>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	460a      	mov	r2, r1
 8002464:	701a      	strb	r2, [r3, #0]
							break;
 8002466:	e05b      	b.n	8002520 <fsm+0x2fc>
						case 1:
							timer[i] = timerPresent[i];
 8002468:	4a1d      	ldr	r2, [pc, #116]	@ (80024e0 <fsm+0x2bc>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	7819      	ldrb	r1, [r3, #0]
 8002470:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <fsm+0x2b8>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	460a      	mov	r2, r1
 8002478:	701a      	strb	r2, [r3, #0]
							break;
 800247a:	e051      	b.n	8002520 <fsm+0x2fc>
						case 2:
							timer[i] = timerPresent[i];
 800247c:	4a18      	ldr	r2, [pc, #96]	@ (80024e0 <fsm+0x2bc>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	7819      	ldrb	r1, [r3, #0]
 8002484:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <fsm+0x2b8>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	460a      	mov	r2, r1
 800248c:	701a      	strb	r2, [r3, #0]
							break;
 800248e:	e047      	b.n	8002520 <fsm+0x2fc>
						case 3:
							timer[i] = timerPresent[i];
 8002490:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <fsm+0x2bc>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	7819      	ldrb	r1, [r3, #0]
 8002498:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <fsm+0x2b8>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	460a      	mov	r2, r1
 80024a0:	701a      	strb	r2, [r3, #0]
							break;
 80024a2:	e03d      	b.n	8002520 <fsm+0x2fc>
						case 4:
							timer[i] = timerPresent[i];
 80024a4:	4a0e      	ldr	r2, [pc, #56]	@ (80024e0 <fsm+0x2bc>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	7819      	ldrb	r1, [r3, #0]
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <fsm+0x2b8>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	460a      	mov	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
							break;
 80024b6:	e033      	b.n	8002520 <fsm+0x2fc>
						case 5:
							timer[i] = timerPresent[i];
 80024b8:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <fsm+0x2bc>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	7819      	ldrb	r1, [r3, #0]
 80024c0:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <fsm+0x2b8>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
							break;
 80024ca:	e029      	b.n	8002520 <fsm+0x2fc>
 80024cc:	2000011d 	.word	0x2000011d
 80024d0:	2000011a 	.word	0x2000011a
 80024d4:	2000011b 	.word	0x2000011b
 80024d8:	20000120 	.word	0x20000120
 80024dc:	20000128 	.word	0x20000128
 80024e0:	20000130 	.word	0x20000130
 80024e4:	2000005b 	.word	0x2000005b
 80024e8:	2000005c 	.word	0x2000005c
 80024ec:	080063b0 	.word	0x080063b0
 80024f0:	20000030 	.word	0x20000030
 80024f4:	2000011c 	.word	0x2000011c
 80024f8:	2000005d 	.word	0x2000005d
 80024fc:	2000005f 	.word	0x2000005f
 8002500:	2000005e 	.word	0x2000005e
 8002504:	20000060 	.word	0x20000060
 8002508:	20000061 	.word	0x20000061
						case 6:
							timer[i] = timerPresent[i];
 800250c:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <fsm+0x34c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	7819      	ldrb	r1, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <fsm+0x350>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	460a      	mov	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
							break;
 800251e:	bf00      	nop
			for (int i = 0; i < 7; i++) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3301      	adds	r3, #1
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b06      	cmp	r3, #6
 800252a:	f77f af75 	ble.w	8002418 <fsm+0x1f4>
					}
				}
			}
			flag = 1;
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <fsm+0x354>)
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
			modifyTimer();
 8002534:	f7ff fcc0 	bl	8001eb8 <modifyTimer>
			if (button_count[0] == 1) {
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <fsm+0x358>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d112      	bne.n	8002566 <fsm+0x342>
				flag = 0;
 8002540:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <fsm+0x354>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
				lcd_Fill(0, 50, 240, 75, BLACK);
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	234b      	movs	r3, #75	@ 0x4b
 800254c:	22f0      	movs	r2, #240	@ 0xf0
 800254e:	2132      	movs	r1, #50	@ 0x32
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fbf1 	bl	8000d38 <lcd_Fill>
				currentMode = modeNormal;
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <fsm+0x35c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800255c:	e003      	b.n	8002566 <fsm+0x342>
			break;
 800255e:	bf00      	nop
 8002560:	e002      	b.n	8002568 <fsm+0x344>
			break;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <fsm+0x344>
			break;
 8002566:	bf00      	nop
	}
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000130 	.word	0x20000130
 8002574:	20000128 	.word	0x20000128
 8002578:	2000011c 	.word	0x2000011c
 800257c:	20000030 	.word	0x20000030
 8002580:	2000011d 	.word	0x2000011d

08002584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002588:	b672      	cpsid	i
}
 800258a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <Error_Handler+0x8>

08002590 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <timer_init+0x10>)
 8002596:	f003 f9b9 	bl	800590c <HAL_TIM_Base_Start_IT>
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000198 	.word	0x20000198

080025a4 <setTimer2>:

void setTimer2(uint16_t duration){
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80025ae:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <setTimer2+0x2c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80025b4:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <setTimer2+0x2c>)
 80025b6:	881a      	ldrh	r2, [r3, #0]
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <setTimer2+0x30>)
 80025ba:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <setTimer2+0x34>)
 80025be:	2200      	movs	r2, #0
 80025c0:	801a      	strh	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	2000013c 	.word	0x2000013c
 80025d4:	2000013a 	.word	0x2000013a
 80025d8:	20000138 	.word	0x20000138

080025dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ec:	d116      	bne.n	800261c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80025ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d010      	beq.n	8002618 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b09      	ldr	r3, [pc, #36]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002600:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002602:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800260a:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800260c:	2201      	movs	r2, #1
 800260e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002612:	881a      	ldrh	r2, [r3, #0]
 8002614:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002616:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002618:	f7fe ff6c 	bl	80014f4 <led7_Scan>
	}
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000013a 	.word	0x2000013a
 8002628:	20000138 	.word	0x20000138
 800262c:	2000013c 	.word	0x2000013c

08002630 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <MX_SPI1_Init+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <MX_SPI1_Init+0x64>)
 800263c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002640:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <MX_SPI1_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002654:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800265a:	4b0e      	ldr	r3, [pc, #56]	@ (8002694 <MX_SPI1_Init+0x64>)
 800265c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002660:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <MX_SPI1_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002670:	2200      	movs	r2, #0
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <MX_SPI1_Init+0x64>)
 800267c:	220a      	movs	r2, #10
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002680:	4804      	ldr	r0, [pc, #16]	@ (8002694 <MX_SPI1_Init+0x64>)
 8002682:	f002 fad5 	bl	8004c30 <HAL_SPI_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800268c:	f7ff ff7a 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000140 	.word	0x20000140
 8002698:	40013000 	.word	0x40013000

0800269c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	@ 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_SPI_MspInit+0x84>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d12b      	bne.n	8002716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a10      	ldr	r2, [pc, #64]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <HAL_SPI_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026f6:	2338      	movs	r3, #56	@ 0x38
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002706:	2305      	movs	r3, #5
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	@ (8002728 <HAL_SPI_MspInit+0x8c>)
 8002712:	f000 fb01 	bl	8002d18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002716:	bf00      	nop
 8002718:	3728      	adds	r7, #40	@ 0x28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40013000 	.word	0x40013000
 8002724:	40023800 	.word	0x40023800
 8002728:	40020400 	.word	0x40020400

0800272c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <HAL_MspInit+0x4c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	4a0f      	ldr	r2, [pc, #60]	@ (8002778 <HAL_MspInit+0x4c>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002740:	6453      	str	r3, [r2, #68]	@ 0x44
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_MspInit+0x4c>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <HAL_MspInit+0x4c>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_MspInit+0x4c>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <MemManage_Handler+0x4>

08002794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d2:	f000 f94b 	bl	8002a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM2_IRQHandler+0x10>)
 80027e2:	f003 f903 	bl	80059ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000198 	.word	0x20000198

080027f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002828:	463b      	mov	r3, r7
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002832:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <MX_TIM2_Init+0x94>)
 800283a:	f240 3247 	movw	r2, #839	@ 0x347
 800283e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002848:	2263      	movs	r2, #99	@ 0x63
 800284a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284c:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <MX_TIM2_Init+0x94>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002858:	4813      	ldr	r0, [pc, #76]	@ (80028a8 <MX_TIM2_Init+0x94>)
 800285a:	f003 f807 	bl	800586c <HAL_TIM_Base_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002864:	f7ff fe8e 	bl	8002584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800286e:	f107 0308 	add.w	r3, r7, #8
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002876:	f003 f9a9 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002880:	f7ff fe80 	bl	8002584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <MX_TIM2_Init+0x94>)
 8002892:	f003 fbd1 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800289c:	f7ff fe72 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000198 	.word	0x20000198

080028ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028bc:	d115      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <HAL_TIM_Base_MspInit+0x48>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	4a0b      	ldr	r2, [pc, #44]	@ (80028f4 <HAL_TIM_Base_MspInit+0x48>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_TIM_Base_MspInit+0x48>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	201c      	movs	r0, #28
 80028e0:	f000 f9e3 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028e4:	201c      	movs	r0, #28
 80028e6:	f000 f9fc 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800

080028f8 <BCD2DEC>:

#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4413      	add	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b2db      	uxtb	r3, r3
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <DEC2BCD+0x44>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	b258      	sxtb	r0, r3
 8002946:	79fa      	ldrb	r2, [r7, #7]
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <DEC2BCD+0x44>)
 800294a:	fba3 1302 	umull	r1, r3, r3, r2
 800294e:	08d9      	lsrs	r1, r3, #3
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	b25b      	sxtb	r3, r3
 800295e:	4303      	orrs	r3, r0
 8002960:	b25b      	sxtb	r3, r3
 8002962:	b2db      	uxtb	r3, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	cccccccd 	.word	0xcccccccd

08002974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002974:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002978:	480d      	ldr	r0, [pc, #52]	@ (80029b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800297a:	490e      	ldr	r1, [pc, #56]	@ (80029b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800297c:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002990:	4c0b      	ldr	r4, [pc, #44]	@ (80029c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800299e:	f7ff ff27 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029a2:	f003 fcb9 	bl	8006318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029a6:	f7fe fe31 	bl	800160c <main>
  bx  lr    
 80029aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80029b8:	08009364 	.word	0x08009364
  ldr r2, =_sbss
 80029bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80029c0:	200001e4 	.word	0x200001e4

080029c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c4:	e7fe      	b.n	80029c4 <ADC_IRQHandler>
	...

080029c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_Init+0x40>)
 80029d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <HAL_Init+0x40>)
 80029de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_Init+0x40>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 f94f 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029f6:	200f      	movs	r0, #15
 80029f8:	f000 f808 	bl	8002a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029fc:	f7ff fe96 	bl	800272c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023c00 	.word	0x40023c00

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_InitTick+0x54>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_InitTick+0x58>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f967 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00e      	b.n	8002a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b0f      	cmp	r3, #15
 8002a3e:	d80a      	bhi.n	8002a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a40:	2200      	movs	r2, #0
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f000 f92f 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <HAL_InitTick+0x5c>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000008 	.word	0x20000008
 8002a64:	20000010 	.word	0x20000010
 8002a68:	2000000c 	.word	0x2000000c

08002a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <HAL_IncTick+0x20>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	461a      	mov	r2, r3
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <HAL_IncTick+0x24>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000010 	.word	0x20000010
 8002a90:	200001e0 	.word	0x200001e0

08002a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return uwTick;
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_GetTick+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	200001e0 	.word	0x200001e0

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_Delay+0x44>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffde 	bl	8002a94 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000010 	.word	0x20000010

08002af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b04:	4b0c      	ldr	r3, [pc, #48]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b10:	4013      	ands	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b26:	4a04      	ldr	r2, [pc, #16]	@ (8002b38 <__NVIC_SetPriorityGrouping+0x44>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	60d3      	str	r3, [r2, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b40:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <__NVIC_GetPriorityGrouping+0x18>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0307 	and.w	r3, r3, #7
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	db0b      	blt.n	8002b82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4907      	ldr	r1, [pc, #28]	@ (8002b90 <__NVIC_EnableIRQ+0x38>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	2001      	movs	r0, #1
 8002b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db0a      	blt.n	8002bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	490c      	ldr	r1, [pc, #48]	@ (8002be0 <__NVIC_SetPriority+0x4c>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bbc:	e00a      	b.n	8002bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4908      	ldr	r1, [pc, #32]	@ (8002be4 <__NVIC_SetPriority+0x50>)
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	3b04      	subs	r3, #4
 8002bcc:	0112      	lsls	r2, r2, #4
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	761a      	strb	r2, [r3, #24]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000e100 	.word	0xe000e100
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b089      	sub	sp, #36	@ 0x24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f1c3 0307 	rsb	r3, r3, #7
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	bf28      	it	cs
 8002c06:	2304      	movcs	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2b06      	cmp	r3, #6
 8002c10:	d902      	bls.n	8002c18 <NVIC_EncodePriority+0x30>
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b03      	subs	r3, #3
 8002c16:	e000      	b.n	8002c1a <NVIC_EncodePriority+0x32>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3a:	43d9      	mvns	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	4313      	orrs	r3, r2
         );
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	@ 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff8e 	bl	8002b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff29 	bl	8002af4 <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff3e 	bl	8002b3c <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff8e 	bl	8002be8 <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5d 	bl	8002b94 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff31 	bl	8002b58 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	e16b      	b.n	800300c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	f040 815a 	bne.w	8003006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d005      	beq.n	8002d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d130      	bne.n	8002dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 0201 	and.w	r2, r3, #1
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d017      	beq.n	8002e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d123      	bne.n	8002e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	69b9      	ldr	r1, [r7, #24]
 8002e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b4 	beq.w	8003006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <HAL_GPIO_Init+0x30c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a5b      	ldr	r2, [pc, #364]	@ (8003028 <HAL_GPIO_Init+0x310>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a52      	ldr	r2, [pc, #328]	@ (800302c <HAL_GPIO_Init+0x314>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <HAL_GPIO_Init+0x226>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a51      	ldr	r2, [pc, #324]	@ (8003030 <HAL_GPIO_Init+0x318>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d025      	beq.n	8002f3a <HAL_GPIO_Init+0x222>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a50      	ldr	r2, [pc, #320]	@ (8003034 <HAL_GPIO_Init+0x31c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01f      	beq.n	8002f36 <HAL_GPIO_Init+0x21e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_GPIO_Init+0x320>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d019      	beq.n	8002f32 <HAL_GPIO_Init+0x21a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_GPIO_Init+0x324>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0x216>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4d      	ldr	r2, [pc, #308]	@ (8003040 <HAL_GPIO_Init+0x328>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00d      	beq.n	8002f2a <HAL_GPIO_Init+0x212>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4c      	ldr	r2, [pc, #304]	@ (8003044 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <HAL_GPIO_Init+0x20e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4b      	ldr	r2, [pc, #300]	@ (8003048 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d101      	bne.n	8002f22 <HAL_GPIO_Init+0x20a>
 8002f1e:	2307      	movs	r3, #7
 8002f20:	e00e      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f22:	2308      	movs	r3, #8
 8002f24:	e00c      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f26:	2306      	movs	r3, #6
 8002f28:	e00a      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f2a:	2305      	movs	r3, #5
 8002f2c:	e008      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f2e:	2304      	movs	r3, #4
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f32:	2303      	movs	r3, #3
 8002f34:	e004      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_GPIO_Init+0x228>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	f002 0203 	and.w	r2, r2, #3
 8002f46:	0092      	lsls	r2, r2, #2
 8002f48:	4093      	lsls	r3, r2
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f50:	4935      	ldr	r1, [pc, #212]	@ (8003028 <HAL_GPIO_Init+0x310>)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	3302      	adds	r3, #2
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f82:	4a32      	ldr	r2, [pc, #200]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f88:	4b30      	ldr	r3, [pc, #192]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fac:	4a27      	ldr	r2, [pc, #156]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_GPIO_Init+0x334>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003000:	4a12      	ldr	r2, [pc, #72]	@ (800304c <HAL_GPIO_Init+0x334>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3301      	adds	r3, #1
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b0f      	cmp	r3, #15
 8003010:	f67f ae90 	bls.w	8002d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3724      	adds	r7, #36	@ 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40013800 	.word	0x40013800
 800302c:	40020000 	.word	0x40020000
 8003030:	40020400 	.word	0x40020400
 8003034:	40020800 	.word	0x40020800
 8003038:	40020c00 	.word	0x40020c00
 800303c:	40021000 	.word	0x40021000
 8003040:	40021400 	.word	0x40021400
 8003044:	40021800 	.word	0x40021800
 8003048:	40021c00 	.word	0x40021c00
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e12b      	b.n	80032ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fd44 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	@ 0x24
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e8:	f001 fd8e 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 80030ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4a81      	ldr	r2, [pc, #516]	@ (80032f8 <HAL_I2C_Init+0x274>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d807      	bhi.n	8003108 <HAL_I2C_Init+0x84>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a80      	ldr	r2, [pc, #512]	@ (80032fc <HAL_I2C_Init+0x278>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e006      	b.n	8003116 <HAL_I2C_Init+0x92>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a7d      	ldr	r2, [pc, #500]	@ (8003300 <HAL_I2C_Init+0x27c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0e7      	b.n	80032ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a78      	ldr	r2, [pc, #480]	@ (8003304 <HAL_I2C_Init+0x280>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	0c9b      	lsrs	r3, r3, #18
 8003128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a6a      	ldr	r2, [pc, #424]	@ (80032f8 <HAL_I2C_Init+0x274>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <HAL_I2C_Init+0xd4>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	e009      	b.n	800316c <HAL_I2C_Init+0xe8>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a69      	ldr	r2, [pc, #420]	@ (8003308 <HAL_I2C_Init+0x284>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	3301      	adds	r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	430b      	orrs	r3, r1
 8003172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800317e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	495c      	ldr	r1, [pc, #368]	@ (80032f8 <HAL_I2C_Init+0x274>)
 8003188:	428b      	cmp	r3, r1
 800318a:	d819      	bhi.n	80031c0 <HAL_I2C_Init+0x13c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e59      	subs	r1, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fbb1 f3f3 	udiv	r3, r1, r3
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031a0:	400b      	ands	r3, r1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_I2C_Init+0x138>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e59      	subs	r1, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ba:	e051      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031bc:	2304      	movs	r3, #4
 80031be:	e04f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d111      	bne.n	80031ec <HAL_I2C_Init+0x168>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e012      	b.n	8003212 <HAL_I2C_Init+0x18e>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x196>
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_I2C_Init+0x1bc>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e58      	subs	r0, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	440b      	add	r3, r1
 8003230:	fbb0 f3f3 	udiv	r3, r0, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800323e:	e00f      	b.n	8003260 <HAL_I2C_Init+0x1dc>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	6809      	ldr	r1, [r1, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800328e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6911      	ldr	r1, [r2, #16]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	000186a0 	.word	0x000186a0
 80032fc:	001e847f 	.word	0x001e847f
 8003300:	003d08ff 	.word	0x003d08ff
 8003304:	431bde83 	.word	0x431bde83
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	817b      	strh	r3, [r7, #10]
 800331e:	460b      	mov	r3, r1
 8003320:	813b      	strh	r3, [r7, #8]
 8003322:	4613      	mov	r3, r2
 8003324:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003326:	f7ff fbb5 	bl	8002a94 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 80d9 	bne.w	80034ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2319      	movs	r3, #25
 8003340:	2201      	movs	r2, #1
 8003342:	496d      	ldr	r1, [pc, #436]	@ (80034f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fdb9 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	e0cc      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Mem_Write+0x56>
 800335e:	2302      	movs	r3, #2
 8003360:	e0c5      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d007      	beq.n	8003388 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	@ 0x21
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2240      	movs	r2, #64	@ 0x40
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a4d      	ldr	r2, [pc, #308]	@ (80034fc <HAL_I2C_Mem_Write+0x1f0>)
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	8979      	ldrh	r1, [r7, #10]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4603      	mov	r3, r0
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fbf0 	bl	8003bc0 <I2C_RequestMemoryWrite>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d052      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e081      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fe7e 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_I2C_Mem_Write+0x180>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1aa      	bne.n	80033ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fe71 	bl	8004180 <I2C_WaitOnBTFFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d107      	bne.n	80034bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e016      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800351a:	f7ff fabb 	bl	8002a94 <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 8214 	bne.w	8003956 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2319      	movs	r3, #25
 8003534:	2201      	movs	r2, #1
 8003536:	497b      	ldr	r1, [pc, #492]	@ (8003724 <HAL_I2C_Mem_Read+0x224>)
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fcbf 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	e207      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Mem_Read+0x56>
 8003552:	2302      	movs	r3, #2
 8003554:	e200      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d007      	beq.n	800357c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2222      	movs	r2, #34	@ 0x22
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2240      	movs	r2, #64	@ 0x40
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003728 <HAL_I2C_Mem_Read+0x228>)
 80035bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035be:	88f8      	ldrh	r0, [r7, #6]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	8979      	ldrh	r1, [r7, #10]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4603      	mov	r3, r0
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fb8c 	bl	8003cec <I2C_RequestMemoryRead>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1bc      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d113      	bne.n	800360e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e190      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	d11b      	bne.n	800364e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	61fb      	str	r3, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e170      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003652:	2b02      	cmp	r3, #2
 8003654:	d11b      	bne.n	800368e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	e150      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036a4:	e144      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	f200 80f1 	bhi.w	8003892 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d123      	bne.n	8003700 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fda7 	bl	8004210 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e145      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036fe:	e117      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b02      	cmp	r3, #2
 8003706:	d14e      	bne.n	80037a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370e:	2200      	movs	r2, #0
 8003710:	4906      	ldr	r1, [pc, #24]	@ (800372c <HAL_I2C_Mem_Read+0x22c>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fbd2 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e11a      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
 8003722:	bf00      	nop
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000
 800372c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e0c4      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	2200      	movs	r2, #0
 80037ae:	496c      	ldr	r1, [pc, #432]	@ (8003960 <HAL_I2C_Mem_Read+0x460>)
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fb83 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cb      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	2200      	movs	r2, #0
 800380a:	4955      	ldr	r1, [pc, #340]	@ (8003960 <HAL_I2C_Mem_Read+0x460>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb55 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e09d      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003890:	e04e      	b.n	8003930 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fcba 	bl	8004210 <I2C_WaitOnRXNEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e058      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d124      	bne.n	8003930 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f aeb6 	bne.w	80036a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3728      	adds	r7, #40	@ 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	00010004 	.word	0x00010004

08003964 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	460b      	mov	r3, r1
 8003972:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff f88e 	bl	8002a94 <HAL_GetTick>
 8003978:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b20      	cmp	r3, #32
 8003988:	f040 8111 	bne.w	8003bae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2319      	movs	r3, #25
 8003992:	2201      	movs	r2, #1
 8003994:	4988      	ldr	r1, [pc, #544]	@ (8003bb8 <HAL_I2C_IsDeviceReady+0x254>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fa90 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
 80039a4:	e104      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_I2C_IsDeviceReady+0x50>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e0fd      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d007      	beq.n	80039da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2224      	movs	r2, #36	@ 0x24
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a70      	ldr	r2, [pc, #448]	@ (8003bbc <HAL_I2C_IsDeviceReady+0x258>)
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa4e 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00d      	beq.n	8003a42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a34:	d103      	bne.n	8003a3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0b6      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a52:	f7ff f81f 	bl	8002a94 <HAL_GetTick>
 8003a56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a86:	e025      	b.n	8003ad4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a88:	f7ff f804 	bl	8002a94 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <HAL_I2C_IsDeviceReady+0x13a>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	22a0      	movs	r2, #160	@ 0xa0
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ade:	d005      	beq.n	8003aec <HAL_I2C_IsDeviceReady+0x188>
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d102      	bne.n	8003aec <HAL_I2C_IsDeviceReady+0x188>
 8003ae6:	7dbb      	ldrb	r3, [r7, #22]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0cd      	beq.n	8003a88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d129      	bne.n	8003b56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2319      	movs	r3, #25
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4921      	ldr	r1, [pc, #132]	@ (8003bb8 <HAL_I2C_IsDeviceReady+0x254>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f9c2 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e036      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e02c      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2319      	movs	r3, #25
 8003b76:	2201      	movs	r2, #1
 8003b78:	490f      	ldr	r1, [pc, #60]	@ (8003bb8 <HAL_I2C_IsDeviceReady+0x254>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f99e 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e012      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	f4ff af32 	bcc.w	80039fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
  }
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3720      	adds	r7, #32
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	00100002 	.word	0x00100002
 8003bbc:	ffff0000 	.word	0xffff0000

08003bc0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	817b      	strh	r3, [r7, #10]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	813b      	strh	r3, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f960 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c10:	d103      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e05f      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	492d      	ldr	r1, [pc, #180]	@ (8003ce8 <I2C_RequestMemoryWrite+0x128>)
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f9bb 	bl	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04c      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 fa46 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d107      	bne.n	8003c82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e02b      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8c:	893b      	ldrh	r3, [r7, #8]
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]
 8003c96:	e021      	b.n	8003cdc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	6a39      	ldr	r1, [r7, #32]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa20 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d107      	bne.n	8003cce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e005      	b.n	8003cde <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd2:	893b      	ldrh	r3, [r7, #8]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	00010002 	.word	0x00010002

08003cec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	817b      	strh	r3, [r7, #10]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	813b      	strh	r3, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8c2 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d4c:	d103      	bne.n	8003d56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0aa      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d5a:	897b      	ldrh	r3, [r7, #10]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	4952      	ldr	r1, [pc, #328]	@ (8003eb8 <I2C_RequestMemoryRead+0x1cc>)
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f91d 	bl	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e097      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f9a8 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e076      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	611a      	str	r2, [r3, #16]
 8003dd2:	e021      	b.n	8003e18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dd4:	893b      	ldrh	r3, [r7, #8]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f982 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d107      	bne.n	8003e0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e050      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0e:	893b      	ldrh	r3, [r7, #8]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1a:	6a39      	ldr	r1, [r7, #32]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f967 	bl	80040f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d107      	bne.n	8003e40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e035      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f82b 	bl	8003ebc <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7a:	d103      	bne.n	8003e84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e013      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e88:	897b      	ldrh	r3, [r7, #10]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	4906      	ldr	r1, [pc, #24]	@ (8003eb8 <I2C_RequestMemoryRead+0x1cc>)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f886 	bl	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	00010002 	.word	0x00010002

08003ebc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ecc:	e048      	b.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d044      	beq.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fddd 	bl	8002a94 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d139      	bne.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	0c1b      	lsrs	r3, r3, #16
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10d      	bne.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	e00c      	b.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	43da      	mvns	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d116      	bne.n	8003f60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e023      	b.n	8003fa8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	0c1b      	lsrs	r3, r3, #16
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10d      	bne.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	43da      	mvns	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	e00c      	b.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d093      	beq.n	8003ece <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fbe:	e071      	b.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fce:	d123      	bne.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f043 0204 	orr.w	r2, r3, #4
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e067      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d041      	beq.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7fe fd38 	bl	8002a94 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d136      	bne.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10c      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e00b      	b.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e021      	b.n	80040e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10c      	bne.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	43da      	mvns	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e00b      	b.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bf14      	ite	ne
 80040da:	2301      	movne	r3, #1
 80040dc:	2300      	moveq	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f af6d 	bne.w	8003fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040fc:	e034      	b.n	8004168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f8e3 	bl	80042ca <I2C_IsAcknowledgeFailed>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e034      	b.n	8004178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d028      	beq.n	8004168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe fcbd 	bl	8002a94 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11d      	bne.n	8004168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d016      	beq.n	8004168 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b80      	cmp	r3, #128	@ 0x80
 8004174:	d1c3      	bne.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800418c:	e034      	b.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f89b 	bl	80042ca <I2C_IsAcknowledgeFailed>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e034      	b.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d028      	beq.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fe fc75 	bl	8002a94 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11d      	bne.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d016      	beq.n	80041f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d1c3      	bne.n	800418e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800421c:	e049      	b.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b10      	cmp	r3, #16
 800422a:	d119      	bne.n	8004260 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e030      	b.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004260:	f7fe fc18 	bl	8002a94 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11d      	bne.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004280:	2b40      	cmp	r3, #64	@ 0x40
 8004282:	d016      	beq.n	80042b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e007      	b.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042bc:	2b40      	cmp	r3, #64	@ 0x40
 80042be:	d1ae      	bne.n	800421e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e0:	d11b      	bne.n	800431a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f043 0204 	orr.w	r2, r3, #4
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e267      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d075      	beq.n	8004432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00c      	beq.n	800436c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b85      	ldr	r3, [pc, #532]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b82      	ldr	r3, [pc, #520]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b7e      	ldr	r3, [pc, #504]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05b      	beq.n	8004430 <HAL_RCC_OscConfig+0x108>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d157      	bne.n	8004430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e242      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x74>
 800438e:	4b76      	ldr	r3, [pc, #472]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a75      	ldr	r2, [pc, #468]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x98>
 80043a6:	4b70      	ldr	r3, [pc, #448]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xb0>
 80043c0:	4b69      	ldr	r3, [pc, #420]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a68      	ldr	r2, [pc, #416]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b66      	ldr	r3, [pc, #408]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a65      	ldr	r2, [pc, #404]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fb58 	bl	8002a94 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fe fb54 	bl	8002a94 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	@ 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e207      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xc0>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fe fb44 	bl	8002a94 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fe fb40 	bl	8002a94 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	@ 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1f3      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b51      	ldr	r3, [pc, #324]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0xe8>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443e:	4b4a      	ldr	r3, [pc, #296]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444a:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b44      	ldr	r3, [pc, #272]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c7      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b3b      	ldr	r3, [pc, #236]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4937      	ldr	r1, [pc, #220]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	e03a      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004498:	4b34      	ldr	r3, [pc, #208]	@ (800456c <HAL_RCC_OscConfig+0x244>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe faf9 	bl	8002a94 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fe faf5 	bl	8002a94 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1a8      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b28      	ldr	r3, [pc, #160]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4925      	ldr	r1, [pc, #148]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	e015      	b.n	8004506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b24      	ldr	r3, [pc, #144]	@ (800456c <HAL_RCC_OscConfig+0x244>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe fad8 	bl	8002a94 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fe fad4 	bl	8002a94 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e187      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d036      	beq.n	8004580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d016      	beq.n	8004548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451a:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <HAL_RCC_OscConfig+0x248>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fe fab8 	bl	8002a94 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004528:	f7fe fab4 	bl	8002a94 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e167      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_OscConfig+0x240>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x200>
 8004546:	e01b      	b.n	8004580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <HAL_RCC_OscConfig+0x248>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fe faa1 	bl	8002a94 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	e00e      	b.n	8004574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004556:	f7fe fa9d 	bl	8002a94 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d907      	bls.n	8004574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e150      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004568:	40023800 	.word	0x40023800
 800456c:	42470000 	.word	0x42470000
 8004570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b88      	ldr	r3, [pc, #544]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ea      	bne.n	8004556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8097 	beq.w	80046bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b81      	ldr	r3, [pc, #516]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b77      	ldr	r3, [pc, #476]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b74      	ldr	r3, [pc, #464]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a73      	ldr	r2, [pc, #460]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fe fa5d 	bl	8002a94 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fe fa59 	bl	8002a94 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e10c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b6a      	ldr	r3, [pc, #424]	@ (800479c <HAL_RCC_OscConfig+0x474>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x2ea>
 8004604:	4b64      	ldr	r3, [pc, #400]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004608:	4a63      	ldr	r2, [pc, #396]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004610:	e01c      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b05      	cmp	r3, #5
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x30c>
 800461a:	4b5f      	ldr	r3, [pc, #380]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461e:	4a5e      	ldr	r2, [pc, #376]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	6713      	str	r3, [r2, #112]	@ 0x70
 8004626:	4b5c      	ldr	r3, [pc, #368]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	4a5b      	ldr	r2, [pc, #364]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	@ 0x70
 8004632:	e00b      	b.n	800464c <HAL_RCC_OscConfig+0x324>
 8004634:	4b58      	ldr	r3, [pc, #352]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	4a57      	ldr	r2, [pc, #348]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004640:	4b55      	ldr	r3, [pc, #340]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a54      	ldr	r2, [pc, #336]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fe fa1e 	bl	8002a94 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fe fa1a 	bl	8002a94 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0cb      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b49      	ldr	r3, [pc, #292]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCC_OscConfig+0x334>
 800467e:	e014      	b.n	80046aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fe fa08 	bl	8002a94 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004686:	e00a      	b.n	800469e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004688:	f7fe fa04 	bl	8002a94 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e0b5      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	4b3e      	ldr	r3, [pc, #248]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1ee      	bne.n	8004688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b0:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	4a38      	ldr	r2, [pc, #224]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 80a1 	beq.w	8004808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c6:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d05c      	beq.n	800478c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d141      	bne.n	800475e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046da:	4b31      	ldr	r3, [pc, #196]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe f9d8 	bl	8002a94 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fe f9d4 	bl	8002a94 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e087      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	4b27      	ldr	r3, [pc, #156]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	3b01      	subs	r3, #1
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	491b      	ldr	r1, [pc, #108]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004730:	4b1b      	ldr	r3, [pc, #108]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fe f9ad 	bl	8002a94 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fe f9a9 	bl	8002a94 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e05c      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004750:	4b11      	ldr	r3, [pc, #68]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x416>
 800475c:	e054      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <HAL_RCC_OscConfig+0x478>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fe f996 	bl	8002a94 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe f992 	bl	8002a94 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e045      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCC_OscConfig+0x470>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x444>
 800478a:	e03d      	b.n	8004808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e038      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004814 <HAL_RCC_OscConfig+0x4ec>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d028      	beq.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d121      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d11a      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d4:	4013      	ands	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	3b01      	subs	r3, #1
 80047ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d107      	bne.n	8004804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0cc      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800482c:	4b68      	ldr	r3, [pc, #416]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d90c      	bls.n	8004854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483a:	4b65      	ldr	r3, [pc, #404]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b63      	ldr	r3, [pc, #396]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0b8      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800486c:	4b59      	ldr	r3, [pc, #356]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a58      	ldr	r2, [pc, #352]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004884:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a52      	ldr	r2, [pc, #328]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800488e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b50      	ldr	r3, [pc, #320]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494d      	ldr	r1, [pc, #308]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d044      	beq.n	8004938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d119      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e6:	4b3b      	ldr	r3, [pc, #236]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e067      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b37      	ldr	r3, [pc, #220]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4934      	ldr	r1, [pc, #208]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004908:	f7fe f8c4 	bl	8002a94 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fe f8c0 	bl	8002a94 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e04f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b2b      	ldr	r3, [pc, #172]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004938:	4b25      	ldr	r3, [pc, #148]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d20c      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004946:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e032      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4916      	ldr	r1, [pc, #88]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498a:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	490e      	ldr	r1, [pc, #56]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800499e:	f000 f821 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a2:	4602      	mov	r2, r0
 80049a4:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	490a      	ldr	r1, [pc, #40]	@ (80049d8 <HAL_RCC_ClockConfig+0x1c0>)
 80049b0:	5ccb      	ldrb	r3, [r1, r3]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	4a09      	ldr	r2, [pc, #36]	@ (80049dc <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049ba:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe f824 	bl	8002a0c <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40023c00 	.word	0x40023c00
 80049d4:	40023800 	.word	0x40023800
 80049d8:	0800933c 	.word	0x0800933c
 80049dc:	20000008 	.word	0x20000008
 80049e0:	2000000c 	.word	0x2000000c

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b094      	sub	sp, #80	@ 0x50
 80049ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80049f0:	2300      	movs	r3, #0
 80049f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f4:	2300      	movs	r3, #0
 80049f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049fc:	4b79      	ldr	r3, [pc, #484]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d00d      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x40>
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	f200 80e1 	bhi.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x34>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a16:	e0db      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b73      	ldr	r3, [pc, #460]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a1c:	e0db      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1e:	4b73      	ldr	r3, [pc, #460]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x208>)
 8004a20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a22:	e0d8      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a24:	4b6f      	ldr	r3, [pc, #444]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d063      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	2200      	movs	r2, #0
 8004a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a4e:	2300      	movs	r3, #0
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a56:	4622      	mov	r2, r4
 8004a58:	462b      	mov	r3, r5
 8004a5a:	f04f 0000 	mov.w	r0, #0
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	0159      	lsls	r1, r3, #5
 8004a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a68:	0150      	lsls	r0, r2, #5
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4621      	mov	r1, r4
 8004a70:	1a51      	subs	r1, r2, r1
 8004a72:	6139      	str	r1, [r7, #16]
 8004a74:	4629      	mov	r1, r5
 8004a76:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a88:	4659      	mov	r1, fp
 8004a8a:	018b      	lsls	r3, r1, #6
 8004a8c:	4651      	mov	r1, sl
 8004a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a92:	4651      	mov	r1, sl
 8004a94:	018a      	lsls	r2, r1, #6
 8004a96:	4651      	mov	r1, sl
 8004a98:	ebb2 0801 	subs.w	r8, r2, r1
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab6:	4690      	mov	r8, r2
 8004ab8:	4699      	mov	r9, r3
 8004aba:	4623      	mov	r3, r4
 8004abc:	eb18 0303 	adds.w	r3, r8, r3
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	eb49 0303 	adc.w	r3, r9, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	024b      	lsls	r3, r1, #9
 8004ada:	4621      	mov	r1, r4
 8004adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	024a      	lsls	r2, r1, #9
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aea:	2200      	movs	r2, #0
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af4:	f7fb fb70 	bl	80001d8 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4613      	mov	r3, r2
 8004afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b00:	e058      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b02:	4b38      	ldr	r3, [pc, #224]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	2300      	movs	r3, #0
 8004b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	f04f 0000 	mov.w	r0, #0
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	0159      	lsls	r1, r3, #5
 8004b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b2e:	0150      	lsls	r0, r2, #5
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4641      	mov	r1, r8
 8004b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b54:	ebb2 040a 	subs.w	r4, r2, sl
 8004b58:	eb63 050b 	sbc.w	r5, r3, fp
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00eb      	lsls	r3, r5, #3
 8004b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	464b      	mov	r3, r9
 8004b78:	eb45 0303 	adc.w	r3, r5, r3
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	028b      	lsls	r3, r1, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b94:	4621      	mov	r1, r4
 8004b96:	028a      	lsls	r2, r1, #10
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	61fa      	str	r2, [r7, #28]
 8004ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba8:	f7fb fb16 	bl	80001d8 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3750      	adds	r7, #80	@ 0x50
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000008 	.word	0x20000008

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800934c 	.word	0x0800934c

08004c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07b      	b.n	8004d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d108      	bne.n	8004c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fd0a 	bl	800269c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	ea42 0103 	orr.w	r1, r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0104 	and.w	r1, r3, #4
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	f003 0210 	and.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b088      	sub	sp, #32
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_SPI_Transmit+0x22>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e12d      	b.n	8004fc0 <HAL_SPI_Transmit+0x27e>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d6c:	f7fd fe92 	bl	8002a94 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
 8004d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d86:	e116      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_SPI_Transmit+0x52>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d98:	e10d      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de0:	d10f      	bne.n	8004e02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b40      	cmp	r3, #64	@ 0x40
 8004e0e:	d007      	beq.n	8004e20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e28:	d14f      	bne.n	8004eca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Transmit+0xf6>
 8004e32:	8afb      	ldrh	r3, [r7, #22]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d142      	bne.n	8004ebe <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	881a      	ldrh	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	1c9a      	adds	r2, r3, #2
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e5c:	e02f      	b.n	8004ebe <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d112      	bne.n	8004e92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e90:	e015      	b.n	8004ebe <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e92:	f7fd fdff 	bl	8002a94 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d803      	bhi.n	8004eaa <HAL_SPI_Transmit+0x168>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Transmit+0x16e>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ebc:	e07b      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ca      	bne.n	8004e5e <HAL_SPI_Transmit+0x11c>
 8004ec8:	e050      	b.n	8004f6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_SPI_Transmit+0x196>
 8004ed2:	8afb      	ldrh	r3, [r7, #22]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d144      	bne.n	8004f62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	7812      	ldrb	r2, [r2, #0]
 8004ee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004efe:	e030      	b.n	8004f62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d113      	bne.n	8004f36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	7812      	ldrb	r2, [r2, #0]
 8004f1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f34:	e015      	b.n	8004f62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f36:	f7fd fdad 	bl	8002a94 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d803      	bhi.n	8004f4e <HAL_SPI_Transmit+0x20c>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d102      	bne.n	8004f54 <HAL_SPI_Transmit+0x212>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f60:	e029      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1c9      	bne.n	8004f00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	6839      	ldr	r1, [r7, #0]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fbdf 	bl	8005734 <SPI_EndRxTxTransaction>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e003      	b.n	8004fb6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fec:	e0fb      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff6:	d112      	bne.n	800501e <HAL_SPI_Receive+0x56>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10e      	bne.n	800501e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2204      	movs	r2, #4
 8005004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f8ef 	bl	80051f8 <HAL_SPI_TransmitReceive>
 800501a:	4603      	mov	r3, r0
 800501c:	e0e8      	b.n	80051f0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_SPI_Receive+0x64>
 8005028:	2302      	movs	r3, #2
 800502a:	e0e1      	b.n	80051f0 <HAL_SPI_Receive+0x228>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005034:	f7fd fd2e 	bl	8002a94 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_SPI_Receive+0x7e>
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800504a:	e0cc      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d10f      	bne.n	80050b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b40      	cmp	r3, #64	@ 0x40
 80050c0:	d007      	beq.n	80050d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d16a      	bne.n	80051b0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050da:	e032      	b.n	8005142 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d115      	bne.n	8005116 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f103 020c 	add.w	r2, r3, #12
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005114:	e015      	b.n	8005142 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005116:	f7fd fcbd 	bl	8002a94 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d803      	bhi.n	800512e <HAL_SPI_Receive+0x166>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d102      	bne.n	8005134 <HAL_SPI_Receive+0x16c>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005140:	e051      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1c7      	bne.n	80050dc <HAL_SPI_Receive+0x114>
 800514c:	e035      	b.n	80051ba <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d113      	bne.n	8005184 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	b292      	uxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005182:	e015      	b.n	80051b0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fd fc86 	bl	8002a94 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Receive+0x1d4>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Receive+0x1da>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80051ae:	e01a      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1c9      	bne.n	800514e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa52 	bl	8005668 <SPI_EndRxTransaction>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	75fb      	strb	r3, [r7, #23]
 80051dc:	e003      	b.n	80051e6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	@ 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005206:	2301      	movs	r3, #1
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <HAL_SPI_TransmitReceive+0x26>
 800521a:	2302      	movs	r3, #2
 800521c:	e198      	b.n	8005550 <HAL_SPI_TransmitReceive+0x358>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005226:	f7fd fc35 	bl	8002a94 <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800523c:	887b      	ldrh	r3, [r7, #2]
 800523e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005244:	2b01      	cmp	r3, #1
 8005246:	d00f      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x70>
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524e:	d107      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_SPI_TransmitReceive+0x68>
 8005258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800525c:	2b04      	cmp	r3, #4
 800525e:	d003      	beq.n	8005268 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005260:	2302      	movs	r3, #2
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005266:	e16d      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_SPI_TransmitReceive+0x82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_TransmitReceive+0x82>
 8005274:	887b      	ldrh	r3, [r7, #2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d103      	bne.n	8005282 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005280:	e160      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b04      	cmp	r3, #4
 800528c:	d003      	beq.n	8005296 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2205      	movs	r2, #5
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	887a      	ldrh	r2, [r7, #2]
 80052b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f2:	d17c      	bne.n	80053ee <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x10a>
 80052fc:	8b7b      	ldrh	r3, [r7, #26]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d16a      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005326:	e057      	b.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d11b      	bne.n	800536e <HAL_SPI_TransmitReceive+0x176>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_SPI_TransmitReceive+0x176>
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d113      	bne.n	800536e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d119      	bne.n	80053b0 <HAL_SPI_TransmitReceive+0x1b8>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d014      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005390:	b292      	uxth	r2, r2
 8005392:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053ac:	2301      	movs	r3, #1
 80053ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053b0:	f7fd fb70 	bl	8002a94 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053bc:	429a      	cmp	r2, r3
 80053be:	d80b      	bhi.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c6:	d007      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80053d6:	e0b5      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1a2      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x130>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19d      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x130>
 80053ec:	e080      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_TransmitReceive+0x204>
 80053f6:	8b7b      	ldrh	r3, [r7, #26]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d16f      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005422:	e05b      	b.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d11c      	bne.n	800546c <HAL_SPI_TransmitReceive+0x274>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d017      	beq.n	800546c <HAL_SPI_TransmitReceive+0x274>
 800543c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d114      	bne.n	800546c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d119      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x2b6>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d014      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054aa:	2301      	movs	r3, #1
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054ae:	f7fd faf1 	bl	8002a94 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_TransmitReceive+0x2ce>
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_TransmitReceive+0x2d4>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80054da:	e033      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d19e      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x22c>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d199      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f91d 	bl	8005734 <SPI_EndRxTxTransaction>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d006      	beq.n	800550e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800550c:	e01a      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e003      	b.n	8005544 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800554c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005550:	4618      	mov	r0, r3
 8005552:	3730      	adds	r7, #48	@ 0x30
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005568:	f7fd fa94 	bl	8002a94 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	4413      	add	r3, r2
 8005576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005578:	f7fd fa8c 	bl	8002a94 <HAL_GetTick>
 800557c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800557e:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	015b      	lsls	r3, r3, #5
 8005584:	0d1b      	lsrs	r3, r3, #20
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800558e:	e054      	b.n	800563a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d050      	beq.n	800563a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005598:	f7fd fa7c 	bl	8002a94 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d902      	bls.n	80055ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d13d      	bne.n	800562a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055c6:	d111      	bne.n	80055ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055d0:	d004      	beq.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055da:	d107      	bne.n	80055ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f4:	d10f      	bne.n	8005616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e017      	b.n	800565a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3b01      	subs	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	429a      	cmp	r2, r3
 8005656:	d19b      	bne.n	8005590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3720      	adds	r7, #32
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000008 	.word	0x20000008

08005668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800567c:	d111      	bne.n	80056a2 <SPI_EndRxTransaction+0x3a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005686:	d004      	beq.n	8005692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005690:	d107      	bne.n	80056a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056aa:	d12a      	bne.n	8005702 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b4:	d012      	beq.n	80056dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	2180      	movs	r1, #128	@ 0x80
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f7ff ff49 	bl	8005558 <SPI_WaitFlagStateUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02d      	beq.n	8005728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e026      	b.n	800572a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2101      	movs	r1, #1
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff ff36 	bl	8005558 <SPI_WaitFlagStateUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01a      	beq.n	8005728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e013      	b.n	800572a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	2101      	movs	r1, #1
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff ff23 	bl	8005558 <SPI_WaitFlagStateUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571c:	f043 0220 	orr.w	r2, r3, #32
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e000      	b.n	800572a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2201      	movs	r2, #1
 8005748:	2102      	movs	r1, #2
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f7ff ff04 	bl	8005558 <SPI_WaitFlagStateUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e032      	b.n	80057cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005766:	4b1b      	ldr	r3, [pc, #108]	@ (80057d4 <SPI_EndRxTxTransaction+0xa0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1b      	ldr	r2, [pc, #108]	@ (80057d8 <SPI_EndRxTxTransaction+0xa4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	0d5b      	lsrs	r3, r3, #21
 8005772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005784:	d112      	bne.n	80057ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2200      	movs	r2, #0
 800578e:	2180      	movs	r1, #128	@ 0x80
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fee1 	bl	8005558 <SPI_WaitFlagStateUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d016      	beq.n	80057ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	f043 0220 	orr.w	r2, r3, #32
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e00f      	b.n	80057cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b80      	cmp	r3, #128	@ 0x80
 80057c4:	d0f2      	beq.n	80057ac <SPI_EndRxTxTransaction+0x78>
 80057c6:	e000      	b.n	80057ca <SPI_EndRxTxTransaction+0x96>
        break;
 80057c8:	bf00      	nop
  }

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	20000008 	.word	0x20000008
 80057d8:	165e9f81 	.word	0x165e9f81

080057dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e038      	b.n	8005864 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7fb f866 	bl	80008d8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3308      	adds	r3, #8
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fc9e 	bl	8006158 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	461a      	mov	r2, r3
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	f000 fd00 	bl	800622c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6858      	ldr	r0, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	f000 fd2d 	bl	8006298 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	6892      	ldr	r2, [r2, #8]
 8005846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	f041 0101 	orr.w	r1, r1, #1
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e041      	b.n	8005902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fd f80a 	bl	80028ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 fa7e 	bl	8005dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b01      	cmp	r3, #1
 800591e:	d001      	beq.n	8005924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e04e      	b.n	80059c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a23      	ldr	r2, [pc, #140]	@ (80059d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594e:	d01d      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1f      	ldr	r2, [pc, #124]	@ (80059d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1e      	ldr	r2, [pc, #120]	@ (80059d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1c      	ldr	r2, [pc, #112]	@ (80059dc <HAL_TIM_Base_Start_IT+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1b      	ldr	r2, [pc, #108]	@ (80059e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d111      	bne.n	80059b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b06      	cmp	r3, #6
 800599c:	d010      	beq.n	80059c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	e007      	b.n	80059c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01b      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f999 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f98b 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f99c 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d020      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0204 	mvn.w	r2, #4
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f973 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f965 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f976 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d020      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0208 	mvn.w	r2, #8
 8005ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2204      	movs	r2, #4
 8005abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f94d 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005ad4:	e005      	b.n	8005ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f93f 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f950 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0210 	mvn.w	r2, #16
 8005b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2208      	movs	r2, #8
 8005b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f927 	bl	8005d6e <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f919 	bl	8005d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f92a 	bl	8005d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0201 	mvn.w	r2, #1
 8005b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc fd42 	bl	80025dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fae4 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f8fb 	bl	8005d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0220 	mvn.w	r2, #32
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fab6 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0b4      	b.n	8005d52 <HAL_TIM_ConfigClockSource+0x186>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c20:	d03e      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c26:	f200 8087 	bhi.w	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c2e:	f000 8086 	beq.w	8005d3e <HAL_TIM_ConfigClockSource+0x172>
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c36:	d87f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b70      	cmp	r3, #112	@ 0x70
 8005c3a:	d01a      	beq.n	8005c72 <HAL_TIM_ConfigClockSource+0xa6>
 8005c3c:	2b70      	cmp	r3, #112	@ 0x70
 8005c3e:	d87b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b60      	cmp	r3, #96	@ 0x60
 8005c42:	d050      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c44:	2b60      	cmp	r3, #96	@ 0x60
 8005c46:	d877      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b50      	cmp	r3, #80	@ 0x50
 8005c4a:	d03c      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c4c:	2b50      	cmp	r3, #80	@ 0x50
 8005c4e:	d873      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b40      	cmp	r3, #64	@ 0x40
 8005c52:	d058      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x13a>
 8005c54:	2b40      	cmp	r3, #64	@ 0x40
 8005c56:	d86f      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b30      	cmp	r3, #48	@ 0x30
 8005c5a:	d064      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c5c:	2b30      	cmp	r3, #48	@ 0x30
 8005c5e:	d86b      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d060      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d867      	bhi.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d05c      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d05a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x15a>
 8005c70:	e062      	b.n	8005d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	f000 f9b9 	bl	8005ff8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	609a      	str	r2, [r3, #8]
      break;
 8005c9e:	e04f      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	f000 f9a2 	bl	8005ff8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cc2:	609a      	str	r2, [r3, #8]
      break;
 8005cc4:	e03c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f000 f916 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2150      	movs	r1, #80	@ 0x50
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f96f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005ce4:	e02c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 f935 	bl	8005f62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2160      	movs	r1, #96	@ 0x60
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f95f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e01c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 f8f6 	bl	8005f04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2140      	movs	r1, #64	@ 0x40
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f94f 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e00c      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 f946 	bl	8005fc2 <TIM_ITRx_SetConfig>
      break;
 8005d36:	e003      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e000      	b.n	8005d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a46      	ldr	r2, [pc, #280]	@ (8005ed8 <TIM_Base_SetConfig+0x12c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dca:	d00f      	beq.n	8005dec <TIM_Base_SetConfig+0x40>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a43      	ldr	r2, [pc, #268]	@ (8005edc <TIM_Base_SetConfig+0x130>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00b      	beq.n	8005dec <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a42      	ldr	r2, [pc, #264]	@ (8005ee0 <TIM_Base_SetConfig+0x134>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a41      	ldr	r2, [pc, #260]	@ (8005ee4 <TIM_Base_SetConfig+0x138>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a40      	ldr	r2, [pc, #256]	@ (8005ee8 <TIM_Base_SetConfig+0x13c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d108      	bne.n	8005dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <TIM_Base_SetConfig+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d02b      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d027      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a32      	ldr	r2, [pc, #200]	@ (8005edc <TIM_Base_SetConfig+0x130>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d023      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a31      	ldr	r2, [pc, #196]	@ (8005ee0 <TIM_Base_SetConfig+0x134>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01f      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a30      	ldr	r2, [pc, #192]	@ (8005ee4 <TIM_Base_SetConfig+0x138>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01b      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee8 <TIM_Base_SetConfig+0x13c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d017      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	@ (8005eec <TIM_Base_SetConfig+0x140>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef0 <TIM_Base_SetConfig+0x144>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef4 <TIM_Base_SetConfig+0x148>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef8 <TIM_Base_SetConfig+0x14c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	@ (8005efc <TIM_Base_SetConfig+0x150>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a29      	ldr	r2, [pc, #164]	@ (8005f00 <TIM_Base_SetConfig+0x154>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a10      	ldr	r2, [pc, #64]	@ (8005ed8 <TIM_Base_SetConfig+0x12c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_Base_SetConfig+0xf8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <TIM_Base_SetConfig+0x13c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d103      	bne.n	8005eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d105      	bne.n	8005eca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	611a      	str	r2, [r3, #16]
  }
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	40001800 	.word	0x40001800
 8005efc:	40001c00 	.word	0x40001c00
 8005f00:	40002000 	.word	0x40002000

08005f04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f023 0201 	bic.w	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 030a 	bic.w	r3, r3, #10
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b087      	sub	sp, #28
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f023 0210 	bic.w	r2, r3, #16
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	031b      	lsls	r3, r3, #12
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f043 0307 	orr.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	021a      	lsls	r2, r3, #8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	431a      	orrs	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	609a      	str	r2, [r3, #8]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e05a      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609c:	d01d      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a15      	ldr	r2, [pc, #84]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	f023 0101 	bic.w	r1, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b08      	cmp	r3, #8
 8006180:	d102      	bne.n	8006188 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006182:	2340      	movs	r3, #64	@ 0x40
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	e001      	b.n	800618c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006198:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800619e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80061a4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80061aa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80061b0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80061b6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80061bc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80061c2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80061c8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80061e6:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <FSMC_NORSRAM_Init+0xd0>)
 80061e8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061f0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80061f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	43db      	mvns	r3, r3
 8006208:	ea02 0103 	and.w	r1, r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4319      	orrs	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	0008fb7f 	.word	0x0008fb7f

0800622c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	431a      	orrs	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	431a      	orrs	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	041b      	lsls	r3, r3, #16
 8006260:	431a      	orrs	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	3b01      	subs	r3, #1
 8006268:	051b      	lsls	r3, r3, #20
 800626a:	431a      	orrs	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	3b02      	subs	r3, #2
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	431a      	orrs	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	4313      	orrs	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	3201      	adds	r2, #1
 8006280:	4319      	orrs	r1, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ac:	d11d      	bne.n	80062ea <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062b6:	4b13      	ldr	r3, [pc, #76]	@ (8006304 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	6852      	ldr	r2, [r2, #4]
 80062c2:	0112      	lsls	r2, r2, #4
 80062c4:	4311      	orrs	r1, r2
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6892      	ldr	r2, [r2, #8]
 80062ca:	0212      	lsls	r2, r2, #8
 80062cc:	4311      	orrs	r1, r2
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	6992      	ldr	r2, [r2, #24]
 80062d2:	4311      	orrs	r1, r2
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	68d2      	ldr	r2, [r2, #12]
 80062d8:	0412      	lsls	r2, r2, #16
 80062da:	430a      	orrs	r2, r1
 80062dc:	ea43 0102 	orr.w	r1, r3, r2
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80062e8:	e005      	b.n	80062f6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80062f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	cff00000 	.word	0xcff00000

08006308 <memset>:
 8006308:	4402      	add	r2, r0
 800630a:	4603      	mov	r3, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	d100      	bne.n	8006312 <memset+0xa>
 8006310:	4770      	bx	lr
 8006312:	f803 1b01 	strb.w	r1, [r3], #1
 8006316:	e7f9      	b.n	800630c <memset+0x4>

08006318 <__libc_init_array>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	4d0d      	ldr	r5, [pc, #52]	@ (8006350 <__libc_init_array+0x38>)
 800631c:	4c0d      	ldr	r4, [pc, #52]	@ (8006354 <__libc_init_array+0x3c>)
 800631e:	1b64      	subs	r4, r4, r5
 8006320:	10a4      	asrs	r4, r4, #2
 8006322:	2600      	movs	r6, #0
 8006324:	42a6      	cmp	r6, r4
 8006326:	d109      	bne.n	800633c <__libc_init_array+0x24>
 8006328:	4d0b      	ldr	r5, [pc, #44]	@ (8006358 <__libc_init_array+0x40>)
 800632a:	4c0c      	ldr	r4, [pc, #48]	@ (800635c <__libc_init_array+0x44>)
 800632c:	f000 f818 	bl	8006360 <_init>
 8006330:	1b64      	subs	r4, r4, r5
 8006332:	10a4      	asrs	r4, r4, #2
 8006334:	2600      	movs	r6, #0
 8006336:	42a6      	cmp	r6, r4
 8006338:	d105      	bne.n	8006346 <__libc_init_array+0x2e>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006340:	4798      	blx	r3
 8006342:	3601      	adds	r6, #1
 8006344:	e7ee      	b.n	8006324 <__libc_init_array+0xc>
 8006346:	f855 3b04 	ldr.w	r3, [r5], #4
 800634a:	4798      	blx	r3
 800634c:	3601      	adds	r6, #1
 800634e:	e7f2      	b.n	8006336 <__libc_init_array+0x1e>
 8006350:	0800935c 	.word	0x0800935c
 8006354:	0800935c 	.word	0x0800935c
 8006358:	0800935c 	.word	0x0800935c
 800635c:	08009360 	.word	0x08009360

08006360 <_init>:
 8006360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006362:	bf00      	nop
 8006364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006366:	bc08      	pop	{r3}
 8006368:	469e      	mov	lr, r3
 800636a:	4770      	bx	lr

0800636c <_fini>:
 800636c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636e:	bf00      	nop
 8006370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006372:	bc08      	pop	{r3}
 8006374:	469e      	mov	lr, r3
 8006376:	4770      	bx	lr
