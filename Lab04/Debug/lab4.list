
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af80  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c8  0800b108  0800b108  0000c108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2d0  0800e2d0  0001002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2d0  0800e2d0  0000f2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2d8  0800e2d8  0001002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2d8  0800e2d8  0000f2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e2dc  0800e2dc  0000f2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800e2e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001002c  2**0
                  CONTENTS
 10 .bss          000002cc  2000002c  2000002c  0001002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  0001002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018621  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e73  00000000  00000000  0002867d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0002c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f3  00000000  00000000  0002dc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002467e  00000000  00000000  0002edfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e185  00000000  00000000  00053479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46b6  00000000  00000000  000715fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145cb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000642c  00000000  00000000  00145cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0014c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b0f0 	.word	0x0800b0f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	0800b0f0 	.word	0x0800b0f0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <initButton>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void initButton() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <initButton+0x14>)
 8000e9e:	f004 ff77 	bl	8005d90 <HAL_GPIO_WritePin>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <buttonScan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void buttonScan() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	482f      	ldr	r0, [pc, #188]	@ (8000f74 <buttonScan+0xc8>)
 8000eb8:	f004 ff6a 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	482c      	ldr	r0, [pc, #176]	@ (8000f74 <buttonScan+0xc8>)
 8000ec2:	f004 ff65 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	2202      	movs	r2, #2
 8000eca:	492b      	ldr	r1, [pc, #172]	@ (8000f78 <buttonScan+0xcc>)
 8000ecc:	482b      	ldr	r0, [pc, #172]	@ (8000f7c <buttonScan+0xd0>)
 8000ece:	f006 ff49 	bl	8007d64 <HAL_SPI_Receive>

	int button_index = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eda:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	e03f      	b.n	8000f62 <buttonScan+0xb6>
		if (i >= 0 && i <= 3) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db06      	blt.n	8000ef6 <buttonScan+0x4a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	dc03      	bgt.n	8000ef6 <buttonScan+0x4a>
			button_index = i + 4;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e018      	b.n	8000f28 <buttonScan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dd07      	ble.n	8000f0c <buttonScan+0x60>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dc04      	bgt.n	8000f0c <buttonScan+0x60>
			button_index = 7 - i;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f1c3 0307 	rsb	r3, r3, #7
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e00d      	b.n	8000f28 <buttonScan+0x7c>
		} else if (i >= 8 && i <= 11) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dd06      	ble.n	8000f20 <buttonScan+0x74>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0b      	cmp	r3, #11
 8000f16:	dc03      	bgt.n	8000f20 <buttonScan+0x74>
			button_index = i + 4;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e003      	b.n	8000f28 <buttonScan+0x7c>
		} else {
			button_index = 23 - i;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f1c3 0317 	rsb	r3, r3, #23
 8000f26:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <buttonScan+0xcc>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	897b      	ldrh	r3, [r7, #10]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <buttonScan+0x96>
			button_count[button_index] = 0;
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <buttonScan+0xd4>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f40:	e009      	b.n	8000f56 <buttonScan+0xaa>
		else
			button_count[button_index]++;
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <buttonScan+0xd4>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <buttonScan+0xd4>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000f56:	897b      	ldrh	r3, [r7, #10]
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	ddbc      	ble.n	8000ee2 <buttonScan+0x36>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	20000068 	.word	0x20000068
 8000f7c:	200001c4 	.word	0x200001c4
 8000f80:	20000048 	.word	0x20000048

08000f84 <RBufferIsFull>:
{
	return (pRBuffer->head_index == pRBuffer->tail_index);
}

bool RBufferIsFull(Ring_Buffer *pRBuffer)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return ((pRBuffer->head_index + 1) % BUFFER_SIZE == pRBuffer->tail_index);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <RBufferIsFull+0x44>)
 8000f98:	fb83 1302 	smull	r1, r3, r3, r2
 8000f9c:	1159      	asrs	r1, r3, #5
 8000f9e:	17d3      	asrs	r3, r2, #31
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	2164      	movs	r1, #100	@ 0x64
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	f892 2065 	ldrb.w	r2, [r2, #101]	@ 0x65
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	51eb851f 	.word	0x51eb851f

08000fcc <RBufferInsert>:
 * @param *pRBuffer pointer to Ring_Buffer wants to write
 * @param data 1 byte data wants to write into ring buffer
 * @retval return true if data is writen successfully
 */
bool RBufferInsert(Ring_Buffer *pRBuffer, uint8_t data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	if(RBufferIsFull(pRBuffer))
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffd3 	bl	8000f84 <RBufferIsFull>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <RBufferInsert+0x1c>
	{
		// ring buffer is full
		return false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e01b      	b.n	8001020 <RBufferInsert+0x54>
	}
	pRBuffer->buffer[pRBuffer->head_index] = data;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	545a      	strb	r2, [r3, r1]
	pRBuffer->head_index = (pRBuffer->head_index + 1) % BUFFER_SIZE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3301      	adds	r3, #1
 8001002:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <RBufferInsert+0x5c>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1151      	asrs	r1, r2, #5
 800100a:	17da      	asrs	r2, r3, #31
 800100c:	1a8a      	subs	r2, r1, r2
 800100e:	2164      	movs	r1, #100	@ 0x64
 8001010:	fb01 f202 	mul.w	r2, r1, r2
 8001014:	1a9a      	subs	r2, r3, r2
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	return true;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	51eb851f 	.word	0x51eb851f

0800102c <initds3231>:

/**
 * @brief	init ds3231 real time clock micro controler
 */
void initds3231()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	while (HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK)
 8001030:	bf00      	nop
 8001032:	2332      	movs	r3, #50	@ 0x32
 8001034:	2203      	movs	r2, #3
 8001036:	21d0      	movs	r1, #208	@ 0xd0
 8001038:	4808      	ldr	r0, [pc, #32]	@ (800105c <initds3231+0x30>)
 800103a:	f005 fb4d 	bl	80066d8 <HAL_I2C_IsDeviceReady>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1f6      	bne.n	8001032 <initds3231+0x6>
		;
	ds3231EnableA1(DS3231_DISABLED);
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f995 	bl	8001374 <ds3231EnableA1>
	ds3231EnableA2(DS3231_DISABLED);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f9c6 	bl	80013dc <ds3231EnableA2>
	ds3231ClearFlagA1();
 8001050:	f000 f9f8 	bl	8001444 <ds3231ClearFlagA1>
	ds3231ClearFlagA2();
 8001054:	f000 fa1c 	bl	8001490 <ds3231ClearFlagA2>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200000d4 	.word	0x200000d4

08001060 <ds3231Write>:
 * @brief	write data into specific address on ds3231 micro controller
 * @param	address Register address to write.
 * @param 	value DECIMAL Value to set, 1BYTE (0 to 255).
 */
void ds3231Write(uint8_t address, uint8_t value)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fa68 	bl	8005548 <DEC2BCD>
 8001078:	4603      	mov	r3, r0
 800107a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	b29a      	uxth	r2, r3
 8001080:	230a      	movs	r3, #10
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 030f 	add.w	r3, r7, #15
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	21d0      	movs	r1, #208	@ 0xd0
 8001092:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <ds3231Write+0x40>)
 8001094:	f004 fff4 	bl	8006080 <HAL_I2C_Mem_Write>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200000d4 	.word	0x200000d4

080010a4 <ds3231ReadTime>:

/**
 * @brief	read 7 (BYTE) register (from reg 0x00 to reg 0x06) from ds3231 and store into array ds3231_buffer[]
 */
void ds3231ReadTime()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 80010aa:	230a      	movs	r3, #10
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2307      	movs	r3, #7
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <ds3231ReadTime+0xd4>)
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2200      	movs	r2, #0
 80010ba:	21d0      	movs	r1, #208	@ 0xd0
 80010bc:	482f      	ldr	r0, [pc, #188]	@ (800117c <ds3231ReadTime+0xd8>)
 80010be:	f005 f8d9 	bl	8006274 <HAL_I2C_Mem_Read>

	current_time.second = BCD2DEC(ds3231_buffer[0]);
 80010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <ds3231ReadTime+0xd4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fa24 	bl	8005514 <BCD2DEC>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <ds3231ReadTime+0xdc>)
 80010d2:	701a      	strb	r2, [r3, #0]
	current_time.minute = BCD2DEC(ds3231_buffer[1]);
 80010d4:	4b28      	ldr	r3, [pc, #160]	@ (8001178 <ds3231ReadTime+0xd4>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 fa1b 	bl	8005514 <BCD2DEC>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <ds3231ReadTime+0xdc>)
 80010e4:	705a      	strb	r2, [r3, #1]
	current_time.hour = BCD2DEC(ds3231_buffer[2] & 0x3f);
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <ds3231ReadTime+0xd4>)
 80010e8:	789b      	ldrb	r3, [r3, #2]
 80010ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 fa0f 	bl	8005514 <BCD2DEC>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <ds3231ReadTime+0xdc>)
 80010fc:	709a      	strb	r2, [r3, #2]
	current_time.day = BCD2DEC(ds3231_buffer[3]);
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <ds3231ReadTime+0xd4>)
 8001100:	78db      	ldrb	r3, [r3, #3]
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fa06 	bl	8005514 <BCD2DEC>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <ds3231ReadTime+0xdc>)
 800110e:	70da      	strb	r2, [r3, #3]
	current_time.date = BCD2DEC(ds3231_buffer[4]);
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <ds3231ReadTime+0xd4>)
 8001112:	791b      	ldrb	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f004 f9fd 	bl	8005514 <BCD2DEC>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <ds3231ReadTime+0xdc>)
 8001120:	711a      	strb	r2, [r3, #4]
	current_time.month = BCD2DEC(ds3231_buffer[5] & 0x1f);
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <ds3231ReadTime+0xd4>)
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f9f1 	bl	8005514 <BCD2DEC>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <ds3231ReadTime+0xdc>)
 8001138:	715a      	strb	r2, [r3, #5]
	current_time.year = (BCD2DEC(ds3231_buffer[6]) + 2000) + (((ds3231_buffer[5] & 0x80) >> 7) * 100);
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <ds3231ReadTime+0xd4>)
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f004 f9e8 	bl	8005514 <BCD2DEC>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <ds3231ReadTime+0xd4>)
 800114a:	795b      	ldrb	r3, [r3, #5]
 800114c:	09db      	lsrs	r3, r3, #7
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	0089      	lsls	r1, r1, #2
 8001154:	440b      	add	r3, r1
 8001156:	4619      	mov	r1, r3
 8001158:	0088      	lsls	r0, r1, #2
 800115a:	4619      	mov	r1, r3
 800115c:	4603      	mov	r3, r0
 800115e:	440b      	add	r3, r1
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	b29b      	uxth	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <ds3231ReadTime+0xdc>)
 8001170:	80da      	strh	r2, [r3, #6]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000078 	.word	0x20000078
 800117c:	200000d4 	.word	0x200000d4
 8001180:	2000006c 	.word	0x2000006c

08001184 <ds3231SetSec>:
 * @brief	set time functions
 * @param	valid time (DECIMAL) depends on function
 */

void ds3231SetSec(uint8_t second)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_SEC, second);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4619      	mov	r1, r3
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff ff64 	bl	8001060 <ds3231Write>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <ds3231SetMin>:
void ds3231SetMin(uint8_t minute)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_MIN, minute);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4619      	mov	r1, r3
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff ff56 	bl	8001060 <ds3231Write>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <ds3231SetHour>:
void ds3231SetHour(uint8_t hour)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t hour_reg = DEC2BCD(hour) & 0x3f; // remove 2 MSB bit avoid write into bit 12/24 mode
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f004 f9bd 	bl	8005548 <DEC2BCD>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_HOUR, I2C_MEMADD_SIZE_8BIT, &hour_reg, 1, 10);
 80011d8:	230a      	movs	r3, #10
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2301      	movs	r3, #1
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	f107 030f 	add.w	r3, r7, #15
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2301      	movs	r3, #1
 80011e8:	2202      	movs	r2, #2
 80011ea:	21d0      	movs	r1, #208	@ 0xd0
 80011ec:	4803      	ldr	r0, [pc, #12]	@ (80011fc <ds3231SetHour+0x40>)
 80011ee:	f004 ff47 	bl	8006080 <HAL_I2C_Mem_Write>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000d4 	.word	0x200000d4

08001200 <ds3231SetDay>:
void ds3231SetDay(uint8_t day)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DAY, day);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4619      	mov	r1, r3
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff ff26 	bl	8001060 <ds3231Write>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <ds3231SetDate>:
void ds3231SetDate(uint8_t date)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DATE, date);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4619      	mov	r1, r3
 800122a:	2004      	movs	r0, #4
 800122c:	f7ff ff18 	bl	8001060 <ds3231Write>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <ds3231SetMonth>:
void ds3231SetMonth(uint8_t month)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af04      	add	r7, sp, #16
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
	uint8_t century;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &century, 1, 10);
 8001242:	230a      	movs	r3, #10
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030f 	add.w	r3, r7, #15
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	2205      	movs	r2, #5
 8001254:	21d0      	movs	r1, #208	@ 0xd0
 8001256:	4814      	ldr	r0, [pc, #80]	@ (80012a8 <ds3231SetMonth+0x70>)
 8001258:	f005 f80c 	bl	8006274 <HAL_I2C_Mem_Read>
	century &= 0x80;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001262:	b2db      	uxtb	r3, r3
 8001264:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg = (DEC2BCD(month) & 0x1f) | century; /* not interfere with century bit */
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f004 f96d 	bl	8005548 <DEC2BCD>
 800126e:	4603      	mov	r3, r0
 8001270:	b25b      	sxtb	r3, r3
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	b25a      	sxtb	r2, r3
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b25b      	sxtb	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 8001284:	230a      	movs	r3, #10
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2301      	movs	r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 030e 	add.w	r3, r7, #14
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	2205      	movs	r2, #5
 8001296:	21d0      	movs	r1, #208	@ 0xd0
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <ds3231SetMonth+0x70>)
 800129a:	f004 fef1 	bl	8006080 <HAL_I2C_Mem_Write>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000d4 	.word	0x200000d4

080012ac <ds3231SetYear>:
void ds3231SetYear(uint16_t year)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af04      	add	r7, sp, #16
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	uint8_t year_reg = DEC2BCD(year % 100);
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001368 <ds3231SetYear+0xbc>)
 80012ba:	fba2 1203 	umull	r1, r2, r2, r3
 80012be:	0952      	lsrs	r2, r2, #5
 80012c0:	2164      	movs	r1, #100	@ 0x64
 80012c2:	fb01 f202 	mul.w	r2, r1, r2
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 f93b 	bl	8005548 <DEC2BCD>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73bb      	strb	r3, [r7, #14]
	uint8_t century = (year / 100) % 20;
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	4a23      	ldr	r2, [pc, #140]	@ (8001368 <ds3231SetYear+0xbc>)
 80012da:	fba2 2303 	umull	r2, r3, r2, r3
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <ds3231SetYear+0xc0>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	0919      	lsrs	r1, r3, #4
 80012ea:	460b      	mov	r3, r1
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 80012f8:	230a      	movs	r3, #10
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030d 	add.w	r3, r7, #13
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2205      	movs	r2, #5
 800130a:	21d0      	movs	r1, #208	@ 0xd0
 800130c:	4818      	ldr	r0, [pc, #96]	@ (8001370 <ds3231SetYear+0xc4>)
 800130e:	f004 ffb1 	bl	8006274 <HAL_I2C_Mem_Read>
	month_reg = ((month_reg & 0x1f) | (century << 7));
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	b25a      	sxtb	r2, r3
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	01db      	lsls	r3, r3, #7
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b25b      	sxtb	r3, r3
 8001326:	b2db      	uxtb	r3, r3
 8001328:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 800132a:	230a      	movs	r3, #10
 800132c:	9302      	str	r3, [sp, #8]
 800132e:	2301      	movs	r3, #1
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	f107 030d 	add.w	r3, r7, #13
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	2205      	movs	r2, #5
 800133c:	21d0      	movs	r1, #208	@ 0xd0
 800133e:	480c      	ldr	r0, [pc, #48]	@ (8001370 <ds3231SetYear+0xc4>)
 8001340:	f004 fe9e 	bl	8006080 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_YEAR, I2C_MEMADD_SIZE_8BIT, &year_reg, 1, 10);
 8001344:	230a      	movs	r3, #10
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f107 030e 	add.w	r3, r7, #14
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2206      	movs	r2, #6
 8001356:	21d0      	movs	r1, #208	@ 0xd0
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <ds3231SetYear+0xc4>)
 800135a:	f004 fe91 	bl	8006080 <HAL_I2C_Mem_Write>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	51eb851f 	.word	0x51eb851f
 800136c:	cccccccd 	.word	0xcccccccd
 8001370:	200000d4 	.word	0x200000d4

08001374 <ds3231EnableA1>:
/**
 * @brief Enables alarm 1 or 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void ds3231EnableA1(DS3231_State enable)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af04      	add	r7, sp, #16
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 800137e:	230a      	movs	r3, #10
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2301      	movs	r3, #1
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 030f 	add.w	r3, r7, #15
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	220e      	movs	r2, #14
 8001390:	21d0      	movs	r1, #208	@ 0xd0
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <ds3231EnableA1+0x64>)
 8001394:	f004 ff6e 	bl	8006274 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	f023 0301 	bic.w	r3, r3, #1
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 80013b4:	230a      	movs	r3, #10
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2301      	movs	r3, #1
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 030f 	add.w	r3, r7, #15
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	220e      	movs	r2, #14
 80013c6:	21d0      	movs	r1, #208	@ 0xd0
 80013c8:	4803      	ldr	r0, [pc, #12]	@ (80013d8 <ds3231EnableA1+0x64>)
 80013ca:	f004 fe59 	bl	8006080 <HAL_I2C_Mem_Write>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000d4 	.word	0x200000d4

080013dc <ds3231EnableA2>:
void ds3231EnableA2(DS3231_State enable)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af04      	add	r7, sp, #16
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 80013e6:	230a      	movs	r3, #10
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	f107 030f 	add.w	r3, r7, #15
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	220e      	movs	r2, #14
 80013f8:	21d0      	movs	r1, #208	@ 0xd0
 80013fa:	4811      	ldr	r0, [pc, #68]	@ (8001440 <ds3231EnableA2+0x64>)
 80013fc:	f004 ff3a 	bl	8006274 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	f023 0302 	bic.w	r3, r3, #2
 8001408:	b25a      	sxtb	r2, r3
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	b25b      	sxtb	r3, r3
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 800141e:	230a      	movs	r3, #10
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2301      	movs	r3, #1
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	f107 030f 	add.w	r3, r7, #15
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	220e      	movs	r2, #14
 8001430:	21d0      	movs	r1, #208	@ 0xd0
 8001432:	4803      	ldr	r0, [pc, #12]	@ (8001440 <ds3231EnableA2+0x64>)
 8001434:	f004 fe24 	bl	8006080 <HAL_I2C_Mem_Write>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200000d4 	.word	0x200000d4

08001444 <ds3231ClearFlagA1>:

/*
 * @brief
 */
void ds3231ClearFlagA1()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 800144a:	230a      	movs	r3, #10
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	220f      	movs	r2, #15
 800145a:	21d0      	movs	r1, #208	@ 0xd0
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <ds3231ClearFlagA1+0x48>)
 800145e:	f004 ff09 	bl	8006274 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfe;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 800146c:	230a      	movs	r3, #10
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	1dfb      	adds	r3, r7, #7
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	220f      	movs	r2, #15
 800147c:	21d0      	movs	r1, #208	@ 0xd0
 800147e:	4803      	ldr	r0, [pc, #12]	@ (800148c <ds3231ClearFlagA1+0x48>)
 8001480:	f004 fdfe 	bl	8006080 <HAL_I2C_Mem_Write>
	return;
 8001484:	bf00      	nop
}
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000d4 	.word	0x200000d4

08001490 <ds3231ClearFlagA2>:
void ds3231ClearFlagA2()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 8001496:	230a      	movs	r3, #10
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2301      	movs	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	220f      	movs	r2, #15
 80014a6:	21d0      	movs	r1, #208	@ 0xd0
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <ds3231ClearFlagA2+0x48>)
 80014aa:	f004 fee3 	bl	8006274 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfd;
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f023 0302 	bic.w	r3, r3, #2
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80014b8:	230a      	movs	r3, #10
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2301      	movs	r3, #1
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2301      	movs	r3, #1
 80014c6:	220f      	movs	r2, #15
 80014c8:	21d0      	movs	r1, #208	@ 0xd0
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <ds3231ClearFlagA2+0x48>)
 80014cc:	f004 fdd8 	bl	8006080 <HAL_I2C_Mem_Write>
	return;
 80014d0:	bf00      	nop
}
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200000d4 	.word	0x200000d4

080014dc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	@ 0x38
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800150a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800150e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001512:	4a2e      	ldr	r2, [pc, #184]	@ (80015cc <MX_FSMC_Init+0xf0>)
 8001514:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001516:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001522:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800152a:	2210      	movs	r2, #16
 800152c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800152e:	4b26      	ldr	r3, [pc, #152]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800153a:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001548:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800154c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800154e:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001556:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800155a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800155c:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800155e:	2200      	movs	r2, #0
 8001560:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001562:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_FSMC_Init+0xec>)
 8001564:	2200      	movs	r2, #0
 8001566:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <MX_FSMC_Init+0xec>)
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800156e:	230f      	movs	r3, #15
 8001570:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001572:	230f      	movs	r3, #15
 8001574:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001576:	233c      	movs	r3, #60	@ 0x3c
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800157e:	2310      	movs	r3, #16
 8001580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001582:	2311      	movs	r3, #17
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800158a:	2308      	movs	r3, #8
 800158c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800158e:	230f      	movs	r3, #15
 8001590:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001592:	2309      	movs	r3, #9
 8001594:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800159a:	2310      	movs	r3, #16
 800159c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800159e:	2311      	movs	r3, #17
 80015a0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015a6:	463a      	mov	r2, r7
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	@ (80015c8 <MX_FSMC_Init+0xec>)
 80015b0:	f006 ffe2 	bl	8008578 <HAL_SRAM_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80015ba:	f003 fc57 	bl	8004e6c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	@ 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000080 	.word	0x20000080
 80015cc:	a0000104 	.word	0xa0000104

080015d0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <HAL_FSMC_MspInit+0x88>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d131      	bne.n	8001650 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_FSMC_MspInit+0x88>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_FSMC_MspInit+0x8c>)
 80015f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fa:	4a18      	ldr	r2, [pc, #96]	@ (800165c <HAL_FSMC_MspInit+0x8c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6393      	str	r3, [r2, #56]	@ 0x38
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_FSMC_MspInit+0x8c>)
 8001604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800160e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001612:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001620:	230c      	movs	r3, #12
 8001622:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	4619      	mov	r1, r3
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <HAL_FSMC_MspInit+0x90>)
 800162a:	f004 fa15 	bl	8005a58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800162e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8001632:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001640:	230c      	movs	r3, #12
 8001642:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4806      	ldr	r0, [pc, #24]	@ (8001664 <HAL_FSMC_MspInit+0x94>)
 800164a:	f004 fa05 	bl	8005a58 <HAL_GPIO_Init>
 800164e:	e000      	b.n	8001652 <HAL_FSMC_MspInit+0x82>
    return;
 8001650:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000d0 	.word	0x200000d0
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000
 8001664:	40020c00 	.word	0x40020c00

08001668 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001670:	f7ff ffae 	bl	80015d0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	@ 0x30
 8001680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a6e      	ldr	r2, [pc, #440]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	4a67      	ldr	r2, [pc, #412]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	4b61      	ldr	r3, [pc, #388]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	4a60      	ldr	r2, [pc, #384]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016da:	4b5e      	ldr	r3, [pc, #376]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	613b      	str	r3, [r7, #16]
 80016e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a59      	ldr	r2, [pc, #356]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b57      	ldr	r3, [pc, #348]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a52      	ldr	r2, [pc, #328]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a4b      	ldr	r2, [pc, #300]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b45      	ldr	r3, [pc, #276]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a44      	ldr	r2, [pc, #272]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b42      	ldr	r3, [pc, #264]	@ (8001854 <MX_GPIO_Init+0x1d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2170      	movs	r1, #112	@ 0x70
 800175a:	483f      	ldr	r0, [pc, #252]	@ (8001858 <MX_GPIO_Init+0x1dc>)
 800175c:	f004 fb18 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001766:	483d      	ldr	r0, [pc, #244]	@ (800185c <MX_GPIO_Init+0x1e0>)
 8001768:	f004 fb12 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	@ 0x40
 8001770:	483b      	ldr	r0, [pc, #236]	@ (8001860 <MX_GPIO_Init+0x1e4>)
 8001772:	f004 fb0d 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800177c:	4839      	ldr	r0, [pc, #228]	@ (8001864 <MX_GPIO_Init+0x1e8>)
 800177e:	f004 fb07 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2108      	movs	r1, #8
 8001786:	4838      	ldr	r0, [pc, #224]	@ (8001868 <MX_GPIO_Init+0x1ec>)
 8001788:	f004 fb02 	bl	8005d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin;
 800178c:	2370      	movs	r3, #112	@ 0x70
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	482d      	ldr	r0, [pc, #180]	@ (8001858 <MX_GPIO_Init+0x1dc>)
 80017a4:	f004 f958 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80017a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	4619      	mov	r1, r3
 80017c0:	4826      	ldr	r0, [pc, #152]	@ (800185c <MX_GPIO_Init+0x1e0>)
 80017c2:	f004 f949 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80017c6:	23c0      	movs	r3, #192	@ 0xc0
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4822      	ldr	r0, [pc, #136]	@ (8001864 <MX_GPIO_Init+0x1e8>)
 80017da:	f004 f93d 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80017de:	2330      	movs	r3, #48	@ 0x30
 80017e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	481a      	ldr	r0, [pc, #104]	@ (800185c <MX_GPIO_Init+0x1e0>)
 80017f2:	f004 f931 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80017f6:	2340      	movs	r3, #64	@ 0x40
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4814      	ldr	r0, [pc, #80]	@ (8001860 <MX_GPIO_Init+0x1e4>)
 800180e:	f004 f923 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001812:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	480e      	ldr	r0, [pc, #56]	@ (8001864 <MX_GPIO_Init+0x1e8>)
 800182c:	f004 f914 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001830:	2308      	movs	r3, #8
 8001832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4619      	mov	r1, r3
 8001846:	4808      	ldr	r0, [pc, #32]	@ (8001868 <MX_GPIO_Init+0x1ec>)
 8001848:	f004 f906 	bl	8005a58 <HAL_GPIO_Init>

}
 800184c:	bf00      	nop
 800184e:	3730      	adds	r7, #48	@ 0x30
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40021000 	.word	0x40021000
 800185c:	40020800 	.word	0x40020800
 8001860:	40021800 	.word	0x40021800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020c00 	.word	0x40020c00

0800186c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_I2C1_Init+0x50>)
 8001872:	4a13      	ldr	r2, [pc, #76]	@ (80018c0 <MX_I2C1_Init+0x54>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001876:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_I2C1_Init+0x50>)
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <MX_I2C1_Init+0x58>)
 800187a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <MX_I2C1_Init+0x50>)
 800188a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <MX_I2C1_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_I2C1_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	@ (80018bc <MX_I2C1_Init+0x50>)
 80018aa:	f004 faa5 	bl	8005df8 <HAL_I2C_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b4:	f003 fada 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200000d4 	.word	0x200000d4
 80018c0:	40005400 	.word	0x40005400
 80018c4:	000186a0 	.word	0x000186a0

080018c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	@ (800194c <HAL_I2C_MspInit+0x84>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d12b      	bne.n	8001942 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190a:	2312      	movs	r3, #18
 800190c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001916:	2304      	movs	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <HAL_I2C_MspInit+0x8c>)
 8001922:	f004 f899 	bl	8005a58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 8001930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_I2C_MspInit+0x88>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	@ 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40005400 	.word	0x40005400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020400 	.word	0x40020400

08001958 <LCD_WR_REG>:
static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8001962:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <LCD_WR_REG+0x1c>)
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	8013      	strh	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	600ffffe 	.word	0x600ffffe

08001978 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <LCD_WR_DATA+0x1c>)
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	8053      	strh	r3, [r2, #2]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	600ffffe 	.word	0x600ffffe

08001998 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <LCD_RD_DATA+0x20>)
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	b29b      	uxth	r3, r3
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	600ffffe 	.word	0x600ffffe

080019bc <lcdSetAddress>:


void lcdSetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4604      	mov	r4, r0
 80019c4:	4608      	mov	r0, r1
 80019c6:	4611      	mov	r1, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	80fb      	strh	r3, [r7, #6]
 80019ce:	4603      	mov	r3, r0
 80019d0:	80bb      	strh	r3, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]
 80019d6:	4613      	mov	r3, r2
 80019d8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80019da:	202a      	movs	r0, #42	@ 0x2a
 80019dc:	f7ff ffbc 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ffc6 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ffc0 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffba 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffb4 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001a10:	202b      	movs	r0, #43	@ 0x2b
 8001a12:	f7ff ffa1 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffab 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ffa5 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001a2e:	883b      	ldrh	r3, [r7, #0]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff9f 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001a3a:	883b      	ldrh	r3, [r7, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff99 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8001a46:	202c      	movs	r0, #44	@ 0x2c
 8001a48:	f7ff ff86 	bl	8001958 <LCD_WR_REG>
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}

08001a54 <lcdClear>:
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcdClear(uint16_t color)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcdSetAddress(0, 0, lcddev.width - 1, lcddev.height - 1);
 8001a5e:	4b15      	ldr	r3, [pc, #84]	@ (8001ab4 <lcdClear+0x60>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <lcdClear+0x60>)
 8001a68:	885b      	ldrh	r3, [r3, #2]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ffa3 	bl	80019bc <lcdSetAddress>
	for (i = 0; i < lcddev.width; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	81fb      	strh	r3, [r7, #14]
 8001a7a:	e011      	b.n	8001aa0 <lcdClear+0x4c>
	{
		for (j = 0; j < lcddev.height; j++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	81bb      	strh	r3, [r7, #12]
 8001a80:	e006      	b.n	8001a90 <lcdClear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff77 	bl	8001978 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++)
 8001a8a:	89bb      	ldrh	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	81bb      	strh	r3, [r7, #12]
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <lcdClear+0x60>)
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	89ba      	ldrh	r2, [r7, #12]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3f3      	bcc.n	8001a82 <lcdClear+0x2e>
	for (i = 0; i < lcddev.width; i++)
 8001a9a:	89fb      	ldrh	r3, [r7, #14]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	81fb      	strh	r3, [r7, #14]
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <lcdClear+0x60>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	89fa      	ldrh	r2, [r7, #14]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d3e8      	bcc.n	8001a7c <lcdClear+0x28>
		}
	}
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000128 	.word	0x20000128

08001ab8 <lcdDrawPoint>:
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	80bb      	strh	r3, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	807b      	strh	r3, [r7, #2]
	lcdSetAddress(x, y, x, y);
 8001aca:	88bb      	ldrh	r3, [r7, #4]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	88b9      	ldrh	r1, [r7, #4]
 8001ad0:	88f8      	ldrh	r0, [r7, #6]
 8001ad2:	f7ff ff73 	bl	80019bc <lcdSetAddress>
	LCD_WR_DATA(color);
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff4d 	bl	8001978 <LCD_WR_DATA>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <lcdDrawLine>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b08d      	sub	sp, #52	@ 0x34
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4604      	mov	r4, r0
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	80fb      	strh	r3, [r7, #6]
 8001af8:	4603      	mov	r3, r0
 8001afa:	80bb      	strh	r3, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b08:	2300      	movs	r3, #0
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	dd02      	ble.n	8001b30 <lcdDrawLine+0x4a>
		incx = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e00b      	b.n	8001b48 <lcdDrawLine+0x62>
	else if (delta_x == 0)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <lcdDrawLine+0x56>
		incx = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e005      	b.n	8001b48 <lcdDrawLine+0x62>
	else
	{
		incx = -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	425b      	negs	r3, r3
 8001b46:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	dd02      	ble.n	8001b54 <lcdDrawLine+0x6e>
		incy = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	e00b      	b.n	8001b6c <lcdDrawLine+0x86>
	else if (delta_y == 0)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <lcdDrawLine+0x7a>
		incy = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e005      	b.n	8001b6c <lcdDrawLine+0x86>
	else
	{
		incy = -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	425b      	negs	r3, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8001b6c:	6a3a      	ldr	r2, [r7, #32]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dd02      	ble.n	8001b7a <lcdDrawLine+0x94>
		distance = delta_x;
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e001      	b.n	8001b7e <lcdDrawLine+0x98>
	else
		distance = delta_y;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001b82:	e02b      	b.n	8001bdc <lcdDrawLine+0xf6>
	{
		lcdDrawPoint(uRow, uCol, color);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff91 	bl	8001ab8 <lcdDrawPoint>
		xerr += delta_x;
 8001b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance)
 8001ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dd07      	ble.n	8001bbe <lcdDrawLine+0xd8>
		{
			xerr -= distance;
 8001bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dd07      	ble.n	8001bd6 <lcdDrawLine+0xf0>
		{
			yerr -= distance;
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++)
 8001bd6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001bd8:	3301      	adds	r3, #1
 8001bda:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001bdc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dacf      	bge.n	8001b84 <lcdDrawLine+0x9e>
		}
	}
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3734      	adds	r7, #52	@ 0x34
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd90      	pop	{r4, r7, pc}
	...

08001bf0 <lcdShowChar>:
 * @param sizey height (16, 24, 32) of the character in pixels (sizex is typically half the height)
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	80fb      	strh	r3, [r7, #6]
 8001c02:	4603      	mov	r3, r0
 8001c04:	80bb      	strh	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001c16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	fb12 f303 	smulbb	r3, r2, r3
 8001c46:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	3b20      	subs	r3, #32
 8001c4c:	70fb      	strb	r3, [r7, #3]
	lcdSetAddress(x, y, x + sizex - 1, y + sizey - 1);
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4413      	add	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29c      	uxth	r4, r3
 8001c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	88bb      	ldrh	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	88b9      	ldrh	r1, [r7, #4]
 8001c6e:	88f8      	ldrh	r0, [r7, #6]
 8001c70:	4622      	mov	r2, r4
 8001c72:	f7ff fea3 	bl	80019bc <lcdSetAddress>
	for (i = 0; i < TypefaceNum; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	827b      	strh	r3, [r7, #18]
 8001c7a:	e07a      	b.n	8001d72 <lcdShowChar+0x182>
	{
		if (sizey == 12)
 8001c7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d028      	beq.n	8001cd6 <lcdShowChar+0xe6>
			;
		else if (sizey == 16)
 8001c84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d108      	bne.n	8001c9e <lcdShowChar+0xae>
			temp = ascii_1608[character][i];
 8001c8c:	78fa      	ldrb	r2, [r7, #3]
 8001c8e:	8a7b      	ldrh	r3, [r7, #18]
 8001c90:	493c      	ldr	r1, [pc, #240]	@ (8001d84 <lcdShowChar+0x194>)
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	440a      	add	r2, r1
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	75fb      	strb	r3, [r7, #23]
 8001c9c:	e01b      	b.n	8001cd6 <lcdShowChar+0xe6>
		else if (sizey == 24)
 8001c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ca2:	2b18      	cmp	r3, #24
 8001ca4:	d10b      	bne.n	8001cbe <lcdShowChar+0xce>
			temp = ascii_2412[character][i];
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	8a79      	ldrh	r1, [r7, #18]
 8001caa:	4837      	ldr	r0, [pc, #220]	@ (8001d88 <lcdShowChar+0x198>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4403      	add	r3, r0
 8001cb6:	440b      	add	r3, r1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	e00b      	b.n	8001cd6 <lcdShowChar+0xe6>
		else if (sizey == 32)
 8001cbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d15a      	bne.n	8001d7c <lcdShowChar+0x18c>
			temp = ascii_3216[character][i];
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	4930      	ldr	r1, [pc, #192]	@ (8001d8c <lcdShowChar+0x19c>)
 8001ccc:	0192      	lsls	r2, r2, #6
 8001cce:	440a      	add	r2, r1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75bb      	strb	r3, [r7, #22]
 8001cda:	e044      	b.n	8001d66 <lcdShowChar+0x176>
		{
			if (!mode) {
 8001cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d120      	bne.n	8001d26 <lcdShowChar+0x136>
				if (temp & (0x01 << t))
 8001ce4:	7dfa      	ldrb	r2, [r7, #23]
 8001ce6:	7dbb      	ldrb	r3, [r7, #22]
 8001ce8:	fa42 f303 	asr.w	r3, r2, r3
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <lcdShowChar+0x10e>
					LCD_WR_DATA(fc);
 8001cf4:	883b      	ldrh	r3, [r7, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fe3e 	bl	8001978 <LCD_WR_DATA>
 8001cfc:	e003      	b.n	8001d06 <lcdShowChar+0x116>
				else
					LCD_WR_DATA(bc);
 8001cfe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fe39 	bl	8001978 <LCD_WR_DATA>
				m++;
 8001d06:	7d7b      	ldrb	r3, [r7, #21]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0)
 8001d0c:	7d7b      	ldrb	r3, [r7, #21]
 8001d0e:	7bfa      	ldrb	r2, [r7, #15]
 8001d10:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d14:	fb01 f202 	mul.w	r2, r1, r2
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11f      	bne.n	8001d60 <lcdShowChar+0x170>
				{
					m = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	757b      	strb	r3, [r7, #21]
					break;
 8001d24:	e022      	b.n	8001d6c <lcdShowChar+0x17c>
				}
			}
			else
			{
				if (temp & (0x01 << t))
 8001d26:	7dfa      	ldrb	r2, [r7, #23]
 8001d28:	7dbb      	ldrb	r3, [r7, #22]
 8001d2a:	fa42 f303 	asr.w	r3, r2, r3
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <lcdShowChar+0x152>
					lcdDrawPoint(x, y, fc);
 8001d36:	883a      	ldrh	r2, [r7, #0]
 8001d38:	88b9      	ldrh	r1, [r7, #4]
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff febb 	bl	8001ab8 <lcdDrawPoint>
				x++;
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	3301      	adds	r3, #1
 8001d46:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex)
 8001d48:	88fa      	ldrh	r2, [r7, #6]
 8001d4a:	8a3b      	ldrh	r3, [r7, #16]
 8001d4c:	1ad2      	subs	r2, r2, r3
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d105      	bne.n	8001d60 <lcdShowChar+0x170>
				{
					x = x0;
 8001d54:	8a3b      	ldrh	r3, [r7, #16]
 8001d56:	80fb      	strh	r3, [r7, #6]
					y++;
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	80bb      	strh	r3, [r7, #4]
					break;
 8001d5e:	e005      	b.n	8001d6c <lcdShowChar+0x17c>
		for (t = 0; t < 8; t++)
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	3301      	adds	r3, #1
 8001d64:	75bb      	strb	r3, [r7, #22]
 8001d66:	7dbb      	ldrb	r3, [r7, #22]
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d9b7      	bls.n	8001cdc <lcdShowChar+0xec>
	for (i = 0; i < TypefaceNum; i++)
 8001d6c:	8a7b      	ldrh	r3, [r7, #18]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	827b      	strh	r3, [r7, #18]
 8001d72:	8a7a      	ldrh	r2, [r7, #18]
 8001d74:	89bb      	ldrh	r3, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d380      	bcc.n	8001c7c <lcdShowChar+0x8c>
 8001d7a:	e000      	b.n	8001d7e <lcdShowChar+0x18e>
			return;
 8001d7c:	bf00      	nop
				}
			}
		}
	}
}
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	0800b160 	.word	0x0800b160
 8001d88:	0800b750 	.word	0x0800b750
 8001d8c:	0800c920 	.word	0x0800c920

08001d90 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001da4:	e004      	b.n	8001db0 <mypow+0x20>
		result *= m;
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	1e5a      	subs	r2, r3, #1
 8001db4:	71ba      	strb	r2, [r7, #6]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f5      	bne.n	8001da6 <mypow+0x16>
	return result;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <lcdShowIntNumCenter>:
		lcdShowChar(x + t * sizex, y, temp + 48, fc, bc, sizey, mode);
	}
}
void lcdShowIntNumCenter(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b08b      	sub	sp, #44	@ 0x2c
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	707b      	strb	r3, [r7, #1]
    uint8_t t, temp;
    uint8_t enshow = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75bb      	strb	r3, [r7, #22]
    uint8_t sizex = sizey / 2;
 8001dea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	757b      	strb	r3, [r7, #21]
    uint16_t total_width = len * sizex;
 8001df2:	787b      	ldrb	r3, [r7, #1]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	7d7b      	ldrb	r3, [r7, #21]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	fb12 f303 	smulbb	r3, r2, r3
 8001dfe:	827b      	strh	r3, [r7, #18]
    uint16_t start_x = x - (total_width / 2);
 8001e00:	8a7b      	ldrh	r3, [r7, #18]
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	823b      	strh	r3, [r7, #16]
    uint16_t start_y = y - (sizey / 2);
 8001e0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	81fb      	strh	r3, [r7, #14]

    for (t = 0; t < len; t++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
 8001e20:	e05b      	b.n	8001eda <lcdShowIntNumCenter+0x112>
    {
        temp = (num / mypow(10, len - t - 1)) % 10;
 8001e22:	887c      	ldrh	r4, [r7, #2]
 8001e24:	787a      	ldrb	r2, [r7, #1]
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4619      	mov	r1, r3
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff ffac 	bl	8001d90 <mypow>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	fbb4 f1f3 	udiv	r1, r4, r3
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <lcdShowIntNumCenter+0x124>)
 8001e40:	fba3 2301 	umull	r2, r3, r3, r1
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	1aca      	subs	r2, r1, r3
 8001e50:	4613      	mov	r3, r2
 8001e52:	737b      	strb	r3, [r7, #13]
        if (enshow == 0 && t < (len - 1))
 8001e54:	7dbb      	ldrb	r3, [r7, #22]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d122      	bne.n	8001ea0 <lcdShowIntNumCenter+0xd8>
 8001e5a:	7dfa      	ldrb	r2, [r7, #23]
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	429a      	cmp	r2, r3
 8001e62:	da1d      	bge.n	8001ea0 <lcdShowIntNumCenter+0xd8>
        {
            if (temp == 0)
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <lcdShowIntNumCenter+0xd4>
            {
                lcdShowChar(start_x + t * sizex, start_y, '0', fc, bc, sizey, mode); // Display '0' instead of blank space
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	7d7b      	ldrb	r3, [r7, #21]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	fb12 f303 	smulbb	r3, r2, r3
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	8a3b      	ldrh	r3, [r7, #16]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b298      	uxth	r0, r3
 8001e7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e80:	89f9      	ldrh	r1, [r7, #14]
 8001e82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	2230      	movs	r2, #48	@ 0x30
 8001e96:	f7ff feab 	bl	8001bf0 <lcdShowChar>
                continue;
 8001e9a:	e01b      	b.n	8001ed4 <lcdShowIntNumCenter+0x10c>
            }
            else
                enshow = 1;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	75bb      	strb	r3, [r7, #22]
        }
        lcdShowChar(start_x + t * sizex, start_y, temp + 48, fc, bc, sizey, mode);
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	7d7b      	ldrb	r3, [r7, #21]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	fb12 f303 	smulbb	r3, r2, r3
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	8a3b      	ldrh	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b298      	uxth	r0, r3
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	3330      	adds	r3, #48	@ 0x30
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001ebc:	89f9      	ldrh	r1, [r7, #14]
 8001ebe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4623      	mov	r3, r4
 8001ed0:	f7ff fe8e 	bl	8001bf0 <lcdShowChar>
    for (t = 0; t < len; t++)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	75fb      	strb	r3, [r7, #23]
 8001eda:	7dfa      	ldrb	r2, [r7, #23]
 8001edc:	787b      	ldrb	r3, [r7, #1]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d39f      	bcc.n	8001e22 <lcdShowIntNumCenter+0x5a>
    }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	cccccccd 	.word	0xcccccccd

08001ef0 <lcdSetDirection>:
		}
	}
}

void lcdSetDirection(uint8_t dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <lcdSetDirection+0x2a>
	{
		lcddev.width = 320;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <lcdSetDirection+0x44>)
 8001f0c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f10:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <lcdSetDirection+0x44>)
 8001f14:	22f0      	movs	r2, #240	@ 0xf0
 8001f16:	805a      	strh	r2, [r3, #2]
	else
	{
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001f18:	e006      	b.n	8001f28 <lcdSetDirection+0x38>
		lcddev.width = 240;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <lcdSetDirection+0x44>)
 8001f1c:	22f0      	movs	r2, #240	@ 0xf0
 8001f1e:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <lcdSetDirection+0x44>)
 8001f22:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f26:	805a      	strh	r2, [r3, #2]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	20000128 	.word	0x20000128

08001f38 <initLCD>:

void initLCD(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f42:	48aa      	ldr	r0, [pc, #680]	@ (80021ec <initLCD+0x2b4>)
 8001f44:	f003 ff24 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f4c:	f003 fbbc 	bl	80056c8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f56:	48a5      	ldr	r0, [pc, #660]	@ (80021ec <initLCD+0x2b4>)
 8001f58:	f003 ff1a 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001f5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f60:	f003 fbb2 	bl	80056c8 <HAL_Delay>
	lcdSetDirection(DFT_SCAN_DIR);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff ffc3 	bl	8001ef0 <lcdSetDirection>
	LCD_WR_REG(0XD3);
 8001f6a:	20d3      	movs	r0, #211	@ 0xd3
 8001f6c:	f7ff fcf4 	bl	8001958 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001f70:	f7ff fd12 	bl	8001998 <LCD_RD_DATA>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b9d      	ldr	r3, [pc, #628]	@ (80021f0 <initLCD+0x2b8>)
 8001f7a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f7c:	f7ff fd0c 	bl	8001998 <LCD_RD_DATA>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b9a      	ldr	r3, [pc, #616]	@ (80021f0 <initLCD+0x2b8>)
 8001f86:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001f88:	f7ff fd06 	bl	8001998 <LCD_RD_DATA>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b97      	ldr	r3, [pc, #604]	@ (80021f0 <initLCD+0x2b8>)
 8001f92:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001f94:	4b96      	ldr	r3, [pc, #600]	@ (80021f0 <initLCD+0x2b8>)
 8001f96:	889b      	ldrh	r3, [r3, #4]
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b94      	ldr	r3, [pc, #592]	@ (80021f0 <initLCD+0x2b8>)
 8001f9e:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001fa0:	f7ff fcfa 	bl	8001998 <LCD_RD_DATA>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b91      	ldr	r3, [pc, #580]	@ (80021f0 <initLCD+0x2b8>)
 8001faa:	889b      	ldrh	r3, [r3, #4]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80021f0 <initLCD+0x2b8>)
 8001fb2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001fb4:	20cf      	movs	r0, #207	@ 0xcf
 8001fb6:	f7ff fccf 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fcdc 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001fc0:	20c1      	movs	r0, #193	@ 0xc1
 8001fc2:	f7ff fcd9 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001fc6:	2030      	movs	r0, #48	@ 0x30
 8001fc8:	f7ff fcd6 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001fcc:	20ed      	movs	r0, #237	@ 0xed
 8001fce:	f7ff fcc3 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001fd2:	2064      	movs	r0, #100	@ 0x64
 8001fd4:	f7ff fcd0 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f7ff fccd 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001fde:	2012      	movs	r0, #18
 8001fe0:	f7ff fcca 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001fe4:	2081      	movs	r0, #129	@ 0x81
 8001fe6:	f7ff fcc7 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001fea:	20e8      	movs	r0, #232	@ 0xe8
 8001fec:	f7ff fcb4 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001ff0:	2085      	movs	r0, #133	@ 0x85
 8001ff2:	f7ff fcc1 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ff6:	2010      	movs	r0, #16
 8001ff8:	f7ff fcbe 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001ffc:	207a      	movs	r0, #122	@ 0x7a
 8001ffe:	f7ff fcbb 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002002:	20cb      	movs	r0, #203	@ 0xcb
 8002004:	f7ff fca8 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002008:	2039      	movs	r0, #57	@ 0x39
 800200a:	f7ff fcb5 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800200e:	202c      	movs	r0, #44	@ 0x2c
 8002010:	f7ff fcb2 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fcaf 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800201a:	2034      	movs	r0, #52	@ 0x34
 800201c:	f7ff fcac 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002020:	2002      	movs	r0, #2
 8002022:	f7ff fca9 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002026:	20f7      	movs	r0, #247	@ 0xf7
 8002028:	f7ff fc96 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800202c:	2020      	movs	r0, #32
 800202e:	f7ff fca3 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002032:	20ea      	movs	r0, #234	@ 0xea
 8002034:	f7ff fc90 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002038:	2000      	movs	r0, #0
 800203a:	f7ff fc9d 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f7ff fc9a 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002044:	20c0      	movs	r0, #192	@ 0xc0
 8002046:	f7ff fc87 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800204a:	201b      	movs	r0, #27
 800204c:	f7ff fc94 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002050:	20c1      	movs	r0, #193	@ 0xc1
 8002052:	f7ff fc81 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fc8e 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800205c:	20c5      	movs	r0, #197	@ 0xc5
 800205e:	f7ff fc7b 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002062:	2030      	movs	r0, #48	@ 0x30
 8002064:	f7ff fc88 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002068:	2030      	movs	r0, #48	@ 0x30
 800206a:	f7ff fc85 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800206e:	20c7      	movs	r0, #199	@ 0xc7
 8002070:	f7ff fc72 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002074:	20b7      	movs	r0, #183	@ 0xb7
 8002076:	f7ff fc7f 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800207a:	2036      	movs	r0, #54	@ 0x36
 800207c:	f7ff fc6c 	bl	8001958 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8002080:	2008      	movs	r0, #8
 8002082:	f7ff fc79 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002086:	203a      	movs	r0, #58	@ 0x3a
 8002088:	f7ff fc66 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 800208c:	2055      	movs	r0, #85	@ 0x55
 800208e:	f7ff fc73 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002092:	20b1      	movs	r0, #177	@ 0xb1
 8002094:	f7ff fc60 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff fc6d 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800209e:	201a      	movs	r0, #26
 80020a0:	f7ff fc6a 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80020a4:	20b6      	movs	r0, #182	@ 0xb6
 80020a6:	f7ff fc57 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80020aa:	200a      	movs	r0, #10
 80020ac:	f7ff fc64 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80020b0:	20a2      	movs	r0, #162	@ 0xa2
 80020b2:	f7ff fc61 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80020b6:	20f2      	movs	r0, #242	@ 0xf2
 80020b8:	f7ff fc4e 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fc5b 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80020c2:	2026      	movs	r0, #38	@ 0x26
 80020c4:	f7ff fc48 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f7ff fc55 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80020ce:	20e0      	movs	r0, #224	@ 0xe0
 80020d0:	f7ff fc42 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80020d4:	200f      	movs	r0, #15
 80020d6:	f7ff fc4f 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80020da:	202a      	movs	r0, #42	@ 0x2a
 80020dc:	f7ff fc4c 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80020e0:	2028      	movs	r0, #40	@ 0x28
 80020e2:	f7ff fc49 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020e6:	2008      	movs	r0, #8
 80020e8:	f7ff fc46 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80020ec:	200e      	movs	r0, #14
 80020ee:	f7ff fc43 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80020f2:	2008      	movs	r0, #8
 80020f4:	f7ff fc40 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80020f8:	2054      	movs	r0, #84	@ 0x54
 80020fa:	f7ff fc3d 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80020fe:	20a9      	movs	r0, #169	@ 0xa9
 8002100:	f7ff fc3a 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002104:	2043      	movs	r0, #67	@ 0x43
 8002106:	f7ff fc37 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800210a:	200a      	movs	r0, #10
 800210c:	f7ff fc34 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002110:	200f      	movs	r0, #15
 8002112:	f7ff fc31 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fc2e 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff fc2b 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fc28 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff fc25 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800212e:	20e1      	movs	r0, #225	@ 0xe1
 8002130:	f7ff fc12 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f7ff fc1f 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800213a:	2015      	movs	r0, #21
 800213c:	f7ff fc1c 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002140:	2017      	movs	r0, #23
 8002142:	f7ff fc19 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002146:	2007      	movs	r0, #7
 8002148:	f7ff fc16 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800214c:	2011      	movs	r0, #17
 800214e:	f7ff fc13 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002152:	2006      	movs	r0, #6
 8002154:	f7ff fc10 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002158:	202b      	movs	r0, #43	@ 0x2b
 800215a:	f7ff fc0d 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800215e:	2056      	movs	r0, #86	@ 0x56
 8002160:	f7ff fc0a 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002164:	203c      	movs	r0, #60	@ 0x3c
 8002166:	f7ff fc07 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800216a:	2005      	movs	r0, #5
 800216c:	f7ff fc04 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002170:	2010      	movs	r0, #16
 8002172:	f7ff fc01 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002176:	200f      	movs	r0, #15
 8002178:	f7ff fbfe 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800217c:	203f      	movs	r0, #63	@ 0x3f
 800217e:	f7ff fbfb 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002182:	203f      	movs	r0, #63	@ 0x3f
 8002184:	f7ff fbf8 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002188:	200f      	movs	r0, #15
 800218a:	f7ff fbf5 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800218e:	202b      	movs	r0, #43	@ 0x2b
 8002190:	f7ff fbe2 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fbef 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fbec 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7ff fbe9 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80021a6:	203f      	movs	r0, #63	@ 0x3f
 80021a8:	f7ff fbe6 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80021ac:	202a      	movs	r0, #42	@ 0x2a
 80021ae:	f7ff fbd3 	bl	8001958 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7ff fbe0 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7ff fbdd 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fbda 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80021c4:	20ef      	movs	r0, #239	@ 0xef
 80021c6:	f7ff fbd7 	bl	8001978 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 80021ca:	2011      	movs	r0, #17
 80021cc:	f7ff fbc4 	bl	8001958 <LCD_WR_REG>
	HAL_Delay(120);
 80021d0:	2078      	movs	r0, #120	@ 0x78
 80021d2:	f003 fa79 	bl	80056c8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 80021d6:	2029      	movs	r0, #41	@ 0x29
 80021d8:	f7ff fbbe 	bl	8001958 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021e2:	4804      	ldr	r0, [pc, #16]	@ (80021f4 <initLCD+0x2bc>)
 80021e4:	f003 fdd4 	bl	8005d90 <HAL_GPIO_WritePin>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40020800 	.word	0x40020800
 80021f0:	20000128 	.word	0x20000128
 80021f4:	40020000 	.word	0x40020000

080021f8 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
	lcdDrawPoint(xc + x, yc + y, c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4413      	add	r3, r2
 8002210:	b298      	uxth	r0, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	b29a      	uxth	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b29b      	uxth	r3, r3
 800221e:	8b3a      	ldrh	r2, [r7, #24]
 8002220:	4619      	mov	r1, r3
 8002222:	f7ff fc49 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc + y, c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	b29b      	uxth	r3, r3
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	b298      	uxth	r0, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	b29a      	uxth	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4413      	add	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	8b3a      	ldrh	r2, [r7, #24]
 8002240:	4619      	mov	r1, r3
 8002242:	f7ff fc39 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc + x, yc - y, c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	b29b      	uxth	r3, r3
 800224e:	4413      	add	r3, r2
 8002250:	b298      	uxth	r0, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	b29a      	uxth	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	8b3a      	ldrh	r2, [r7, #24]
 8002260:	4619      	mov	r1, r3
 8002262:	f7ff fc29 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc - y, c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	b29a      	uxth	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	b29b      	uxth	r3, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b298      	uxth	r0, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	b29a      	uxth	r2, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	b29b      	uxth	r3, r3
 800227e:	8b3a      	ldrh	r2, [r7, #24]
 8002280:	4619      	mov	r1, r3
 8002282:	f7ff fc19 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc + x, c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	b29a      	uxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4413      	add	r3, r2
 8002290:	b298      	uxth	r0, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4413      	add	r3, r2
 800229c:	b29b      	uxth	r3, r3
 800229e:	8b3a      	ldrh	r2, [r7, #24]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f7ff fc09 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc + x, c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	b298      	uxth	r0, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8b3a      	ldrh	r2, [r7, #24]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f7ff fbf9 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc - x, c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	b298      	uxth	r0, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	b29b      	uxth	r3, r3
 80022de:	8b3a      	ldrh	r2, [r7, #24]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7ff fbe9 	bl	8001ab8 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc - x, c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b298      	uxth	r0, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	8b3a      	ldrh	r2, [r7, #24]
 8002300:	4619      	mov	r1, r3
 8002302:	f7ff fbd9 	bl	8001ab8 <lcdDrawPoint>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <lcdDrawCircle>:
 * @param c Color to be used for drawing the circle.
 * @param r radius of the circle
 * @param Boolean indicating whether to fill the circle (non-zero value) or just draw the outline (zero value).
 */
void lcdDrawCircle(int xc, int yc, uint16_t c, int r, int fill)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b08a      	sub	sp, #40	@ 0x28
 8002312:	af02      	add	r7, sp, #8
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	f1c3 0303 	rsb	r3, r3, #3
 800232e:	613b      	str	r3, [r7, #16]

	if (fill) {
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d04f      	beq.n	80023d6 <lcdDrawCircle+0xc8>
		while (x <= y)
 8002336:	e029      	b.n	800238c <lcdDrawCircle+0x7e>
		{
			for (yi = x; yi <= y; yi++)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <lcdDrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff ff55 	bl	80021f8 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	429a      	cmp	r2, r3
 800235a:	ddf0      	ble.n	800233e <lcdDrawCircle+0x30>

			if (d < 0)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da06      	bge.n	8002370 <lcdDrawCircle+0x62>
			{
				d = d + 4 * x + 6;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	3306      	adds	r3, #6
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e00a      	b.n	8002386 <lcdDrawCircle+0x78>
			}
			else
			{
				d = d + 4 * (x - y) + 10;
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	009a      	lsls	r2, r3, #2
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	330a      	adds	r3, #10
 800237e:	613b      	str	r3, [r7, #16]
				y--;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	3b01      	subs	r3, #1
 8002384:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	429a      	cmp	r2, r3
 8002392:	ddd1      	ble.n	8002338 <lcdDrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002394:	e023      	b.n	80023de <lcdDrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	68b9      	ldr	r1, [r7, #8]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff ff29 	bl	80021f8 <_draw_circle_8>
			if (d < 0)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da06      	bge.n	80023ba <lcdDrawCircle+0xac>
				d = d + 4 * x + 6;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	3306      	adds	r3, #6
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e00a      	b.n	80023d0 <lcdDrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	330a      	adds	r3, #10
 80023c8:	613b      	str	r3, [r7, #16]
				y--;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
			x++;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	429a      	cmp	r2, r3
 80023dc:	dddb      	ble.n	8002396 <lcdDrawCircle+0x88>
}
 80023de:	bf00      	nop
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <lcdShowString>:
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b08b      	sub	sp, #44	@ 0x2c
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4603      	mov	r3, r0
 80023f4:	81fb      	strh	r3, [r7, #14]
 80023f6:	460b      	mov	r3, r1
 80023f8:	81bb      	strh	r3, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0; // used to handle characters that are more than one byte long (e.g., Chinese characters)
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
	while (*str != 0)
 8002406:	e048      	b.n	800249a <lcdShowString+0xb2>
	{
		if (!bHz)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d145      	bne.n	800249a <lcdShowString+0xb2>
		{
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 800240e:	89fa      	ldrh	r2, [r7, #14]
 8002410:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <lcdShowString+0xc4>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	429a      	cmp	r2, r3
 8002422:	dc3f      	bgt.n	80024a4 <lcdShowString+0xbc>
 8002424:	89ba      	ldrh	r2, [r7, #12]
 8002426:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <lcdShowString+0xc4>)
 8002428:	885b      	ldrh	r3, [r3, #2]
 800242a:	4619      	mov	r1, r3
 800242c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002430:	1acb      	subs	r3, r1, r3
 8002432:	429a      	cmp	r2, r3
 8002434:	dc36      	bgt.n	80024a4 <lcdShowString+0xbc>
				return;
			if (*str > 0x80)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b80      	cmp	r3, #128	@ 0x80
 800243c:	d902      	bls.n	8002444 <lcdShowString+0x5c>
				bHz = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
 8002442:	e02a      	b.n	800249a <lcdShowString+0xb2>
			else
			{
				if (*str == 0x0D)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b0d      	cmp	r3, #13
 800244a:	d10b      	bne.n	8002464 <lcdShowString+0x7c>
				{
					y += sizey;
 800244c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002450:	b29a      	uxth	r2, r3
 8002452:	89bb      	ldrh	r3, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8002458:	8abb      	ldrh	r3, [r7, #20]
 800245a:	81fb      	strh	r3, [r7, #14]
					str++;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3301      	adds	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	e017      	b.n	8002494 <lcdShowString+0xac>
				}
				else
				{
					lcdShowChar(x, y, *str, fc, bc, sizey, mode);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	88fc      	ldrh	r4, [r7, #6]
 800246a:	89b9      	ldrh	r1, [r7, #12]
 800246c:	89f8      	ldrh	r0, [r7, #14]
 800246e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002472:	9302      	str	r3, [sp, #8]
 8002474:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4623      	mov	r3, r4
 8002480:	f7ff fbb6 	bl	8001bf0 <lcdShowChar>
					x += sizey / 2;
 8002484:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002488:	085b      	lsrs	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	4413      	add	r3, r2
 8002492:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
	while (*str != 0)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1b2      	bne.n	8002408 <lcdShowString+0x20>
 80024a2:	e000      	b.n	80024a6 <lcdShowString+0xbe>
				return;
 80024a4:	bf00      	nop
			}
		}
	}
}
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}
 80024ac:	20000128 	.word	0x20000128

080024b0 <lcdShowStringCenter>:
 * @param bc Background color behind the text.
 * @param sizey Height of the characters (can be 16, 24, 32).
 * @param mode Determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background).
 */
void lcdShowStringCenter(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	@ 0x30
 80024b4:	af04      	add	r7, sp, #16
 80024b6:	60ba      	str	r2, [r7, #8]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	81fb      	strh	r3, [r7, #14]
 80024be:	460b      	mov	r3, r1
 80024c0:	81bb      	strh	r3, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
    uint8_t sizex = sizey / 2;
 80024c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    uint16_t str_len = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	83fb      	strh	r3, [r7, #30]
    char *ptr = str;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	61bb      	str	r3, [r7, #24]

    // Calculate the length of the string
    while (*ptr != '\0')
 80024d6:	e010      	b.n	80024fa <lcdShowStringCenter+0x4a>
    {
        if (*ptr > 0x80)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b80      	cmp	r3, #128	@ 0x80
 80024de:	d906      	bls.n	80024ee <lcdShowStringCenter+0x3e>
        {
            // If the character is a multibyte character (e.g., Chinese character)
            str_len += 2;
 80024e0:	8bfb      	ldrh	r3, [r7, #30]
 80024e2:	3302      	adds	r3, #2
 80024e4:	83fb      	strh	r3, [r7, #30]
            ptr++;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e002      	b.n	80024f4 <lcdShowStringCenter+0x44>
        }
        else
        {
            str_len++;
 80024ee:	8bfb      	ldrh	r3, [r7, #30]
 80024f0:	3301      	adds	r3, #1
 80024f2:	83fb      	strh	r3, [r7, #30]
        }
        ptr++;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	3301      	adds	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
    while (*ptr != '\0')
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ea      	bne.n	80024d8 <lcdShowStringCenter+0x28>
    }

    uint16_t total_width = str_len * sizex;
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	b29b      	uxth	r3, r3
 8002506:	8bfa      	ldrh	r2, [r7, #30]
 8002508:	fb12 f303 	smulbb	r3, r2, r3
 800250c:	82bb      	strh	r3, [r7, #20]
    uint16_t start_x = x - (total_width / 2);
 800250e:	8abb      	ldrh	r3, [r7, #20]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	b29b      	uxth	r3, r3
 8002514:	89fa      	ldrh	r2, [r7, #14]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	827b      	strh	r3, [r7, #18]
    uint16_t start_y = y - (sizey / 2);
 800251a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	89bb      	ldrh	r3, [r7, #12]
 8002526:	1a9b      	subs	r3, r3, r2
 8002528:	823b      	strh	r3, [r7, #16]

    lcdShowString(start_x, start_y, str, fc, bc, sizey, mode);
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	8a39      	ldrh	r1, [r7, #16]
 800252e:	8a78      	ldrh	r0, [r7, #18]
 8002530:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f7ff ff50 	bl	80023e8 <lcdShowString>
}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <initLed7Seg>:
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void initLed7Seg()
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002554:	2201      	movs	r2, #1
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <initLed7Seg+0x14>)
 800255a:	f003 fc19 	bl	8005d90 <HAL_GPIO_WritePin>
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021800 	.word	0x40021800

08002568 <led7SegDisplay>:
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led7SegDisplay()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800256c:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <led7SegDisplay+0x104>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b3d      	ldr	r3, [pc, #244]	@ (800266c <led7SegDisplay+0x104>)
 8002576:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8002578:	4b3d      	ldr	r3, [pc, #244]	@ (8002670 <led7SegDisplay+0x108>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <led7SegDisplay+0x10c>)
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b21a      	sxth	r2, r3
 8002586:	4b39      	ldr	r3, [pc, #228]	@ (800266c <led7SegDisplay+0x104>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b21b      	sxth	r3, r3
 800258c:	4313      	orrs	r3, r2
 800258e:	b21b      	sxth	r3, r3
 8002590:	b29a      	uxth	r2, r3
 8002592:	4b36      	ldr	r3, [pc, #216]	@ (800266c <led7SegDisplay+0x104>)
 8002594:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <led7SegDisplay+0x108>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d846      	bhi.n	800262c <led7SegDisplay+0xc4>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <led7SegDisplay+0x3c>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025d3 	.word	0x080025d3
 80025ac:	080025f1 	.word	0x080025f1
 80025b0:	0800260f 	.word	0x0800260f
	case 0:
		spi_buffer |= 0x00b0;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <led7SegDisplay+0x104>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <led7SegDisplay+0x104>)
 80025c0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <led7SegDisplay+0x104>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <led7SegDisplay+0x104>)
 80025ce:	801a      	strh	r2, [r3, #0]
		break;
 80025d0:	e02d      	b.n	800262e <led7SegDisplay+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <led7SegDisplay+0x104>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b23      	ldr	r3, [pc, #140]	@ (800266c <led7SegDisplay+0x104>)
 80025de:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80025e0:	4b22      	ldr	r3, [pc, #136]	@ (800266c <led7SegDisplay+0x104>)
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f023 0320 	bic.w	r3, r3, #32
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <led7SegDisplay+0x104>)
 80025ec:	801a      	strh	r2, [r3, #0]
		break;
 80025ee:	e01e      	b.n	800262e <led7SegDisplay+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <led7SegDisplay+0x104>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <led7SegDisplay+0x104>)
 80025fc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <led7SegDisplay+0x104>)
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	f023 0310 	bic.w	r3, r3, #16
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b18      	ldr	r3, [pc, #96]	@ (800266c <led7SegDisplay+0x104>)
 800260a:	801a      	strh	r2, [r3, #0]
		break;
 800260c:	e00f      	b.n	800262e <led7SegDisplay+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800260e:	4b17      	ldr	r3, [pc, #92]	@ (800266c <led7SegDisplay+0x104>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <led7SegDisplay+0x104>)
 800261a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <led7SegDisplay+0x104>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <led7SegDisplay+0x104>)
 8002628:	801a      	strh	r2, [r3, #0]
		break;
 800262a:	e000      	b.n	800262e <led7SegDisplay+0xc6>
	default:
		break;
 800262c:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <led7SegDisplay+0x108>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	3301      	adds	r3, #1
 8002634:	425a      	negs	r2, r3
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	bf58      	it	pl
 8002640:	4253      	negpl	r3, r2
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b0a      	ldr	r3, [pc, #40]	@ (8002670 <led7SegDisplay+0x108>)
 8002646:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	@ 0x40
 800264c:	480a      	ldr	r0, [pc, #40]	@ (8002678 <led7SegDisplay+0x110>)
 800264e:	f003 fb9f 	bl	8005d90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8002652:	2301      	movs	r3, #1
 8002654:	2202      	movs	r2, #2
 8002656:	4905      	ldr	r1, [pc, #20]	@ (800266c <led7SegDisplay+0x104>)
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <led7SegDisplay+0x114>)
 800265a:	f005 fa40 	bl	8007ade <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800265e:	2201      	movs	r2, #1
 8002660:	2140      	movs	r1, #64	@ 0x40
 8002662:	4805      	ldr	r0, [pc, #20]	@ (8002678 <led7SegDisplay+0x110>)
 8002664:	f003 fb94 	bl	8005d90 <HAL_GPIO_WritePin>
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000001a 	.word	0x2000001a
 8002670:	2000012e 	.word	0x2000012e
 8002674:	2000000c 	.word	0x2000000c
 8002678:	40021800 	.word	0x40021800
 800267c:	200001c4 	.word	0x200001c4

08002680 <led7SegSetDigit>:
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led7SegSetDigit(uint8_t num, uint8_t position, uint8_t show_dot)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	71fb      	strb	r3, [r7, #7]
 800268a:	460b      	mov	r3, r1
 800268c:	71bb      	strb	r3, [r7, #6]
 800268e:	4613      	mov	r3, r2
 8002690:	717b      	strb	r3, [r7, #5]
	if (num <= 9)
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b09      	cmp	r3, #9
 8002696:	d808      	bhi.n	80026aa <led7SegSetDigit+0x2a>
	{
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <led7SegSetDigit+0x38>)
 800269c:	5cd1      	ldrb	r1, [r2, r3]
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	797a      	ldrb	r2, [r7, #5]
 80026a2:	1a8a      	subs	r2, r1, r2
 80026a4:	b2d1      	uxtb	r1, r2
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <led7SegSetDigit+0x3c>)
 80026a8:	54d1      	strb	r1, [r2, r3]
	}
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000010 	.word	0x20000010
 80026bc:	2000000c 	.word	0x2000000c

080026c0 <led7SegSetColon>:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led7SegSetColon(uint8_t status)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <led7SegSetColon+0x20>
		spi_buffer &= ~(1 << 3);
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <led7SegSetColon+0x3c>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f023 0308 	bic.w	r3, r3, #8
 80026d8:	b29a      	uxth	r2, r3
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <led7SegSetColon+0x3c>)
 80026dc:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 80026de:	e006      	b.n	80026ee <led7SegSetColon+0x2e>
		spi_buffer |= (1 << 3);
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <led7SegSetColon+0x3c>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f043 0308 	orr.w	r3, r3, #8
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <led7SegSetColon+0x3c>)
 80026ec:	801a      	strh	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2000001a 	.word	0x2000001a

08002700 <led7SegTurnOff>:

/**
 *
 */
void led7SegTurnOff(uint8_t position)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	led_7seg[position] = 0xff;
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <led7SegTurnOff+0x20>)
 800270e:	21ff      	movs	r1, #255	@ 0xff
 8002710:	54d1      	strb	r1, [r2, r3]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000000c 	.word	0x2000000c

08002724 <led7SegDebugTurnOn>:
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led7SegDebugTurnOn(uint8_t index)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8)
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b05      	cmp	r3, #5
 8002732:	d910      	bls.n	8002756 <led7SegDebugTurnOn+0x32>
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d80d      	bhi.n	8002756 <led7SegDebugTurnOn+0x32>
	{
		spi_buffer |= 1 << (index - 6);
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	3b06      	subs	r3, #6
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <led7SegDebugTurnOn+0x40>)
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b21b      	sxth	r3, r3
 800274c:	4313      	orrs	r3, r2
 800274e:	b21b      	sxth	r3, r3
 8002750:	b29a      	uxth	r2, r3
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <led7SegDebugTurnOn+0x40>)
 8002754:	801a      	strh	r2, [r3, #0]
	}
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	2000001a 	.word	0x2000001a

08002768 <led7SegDebugTurnOff>:
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led7SegDebugTurnOff(uint8_t index)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d912      	bls.n	800279e <led7SegDebugTurnOff+0x36>
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b08      	cmp	r3, #8
 800277c:	d80f      	bhi.n	800279e <led7SegDebugTurnOff+0x36>
	{
		spi_buffer &= ~(1 << (index - 6));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	3b06      	subs	r3, #6
 8002782:	2201      	movs	r2, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	b21b      	sxth	r3, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <led7SegDebugTurnOff+0x44>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b21b      	sxth	r3, r3
 8002794:	4013      	ands	r3, r2
 8002796:	b21b      	sxth	r3, r3
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <led7SegDebugTurnOff+0x44>)
 800279c:	801a      	strh	r2, [r3, #0]
	}
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000001a 	.word	0x2000001a

080027b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027b6:	f002 ff15 	bl	80055e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ba:	f001 f9cb 	bl	8003b54 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027be:	f7fe ff5d 	bl	800167c <MX_GPIO_Init>
  MX_TIM2_Init();
 80027c2:	f002 fd4f 	bl	8005264 <MX_TIM2_Init>
  MX_TIM4_Init();
 80027c6:	f002 fd99 	bl	80052fc <MX_TIM4_Init>
  MX_SPI1_Init();
 80027ca:	f002 fc45 	bl	8005058 <MX_SPI1_Init>
  MX_FSMC_Init();
 80027ce:	f7fe fe85 	bl	80014dc <MX_FSMC_Init>
  MX_I2C1_Init();
 80027d2:	f7ff f84b 	bl	800186c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80027d6:	f002 fe23 	bl	8005420 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initSystem();
 80027da:	f001 fa2f 	bl	8003c3c <initSystem>

  sTimer4Set(1000, 50); // interrupt every 50ms
 80027de:	2132      	movs	r1, #50	@ 0x32
 80027e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027e4:	f002 fba2 	bl	8004f2c <sTimer4Set>
  sTimer2Set(0, 500); // interrupt every 500ms
 80027e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80027ec:	2000      	movs	r0, #0
 80027ee:	f002 fb7f 	bl	8004ef0 <sTimer2Set>

  int clock_radius = 100;
 80027f2:	2364      	movs	r3, #100	@ 0x64
 80027f4:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(sTimer4GetFlag())
 80027f6:	f002 fbd3 	bl	8004fa0 <sTimer4GetFlag>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <main+0x58>
	  {
		  buttonScan();
 8002800:	f7fe fb54 	bl	8000eac <buttonScan>
		  led7SegDisplay();
 8002804:	f7ff feb0 	bl	8002568 <led7SegDisplay>
	  }

	  switch (current_mode)
 8002808:	4baf      	ldr	r3, [pc, #700]	@ (8002ac8 <main+0x318>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b07      	cmp	r3, #7
 800280e:	f201 8178 	bhi.w	8003b02 <main+0x1352>
 8002812:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <main+0x68>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002839 	.word	0x08002839
 800281c:	08002867 	.word	0x08002867
 8002820:	08003b03 	.word	0x08003b03
 8002824:	08002a29 	.word	0x08002a29
 8002828:	08003b0d 	.word	0x08003b0d
 800282c:	08003b0d 	.word	0x08003b0d
 8002830:	08003b0d 	.word	0x08003b0d
 8002834:	08003b0d 	.word	0x08003b0d
	  {
	  case Mode_init:
	  {
		  led7SegSetColon(1);
 8002838:	2001      	movs	r0, #1
 800283a:	f7ff ff41 	bl	80026c0 <led7SegSetColon>
		  setTime(&set_time.second, &set_time.minute, &set_time.hour, &set_time.day, &set_time.date, &set_time.month, &set_time.year);
 800283e:	4ba3      	ldr	r3, [pc, #652]	@ (8002acc <main+0x31c>)
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	4ba3      	ldr	r3, [pc, #652]	@ (8002ad0 <main+0x320>)
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	4ba3      	ldr	r3, [pc, #652]	@ (8002ad4 <main+0x324>)
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4ba3      	ldr	r3, [pc, #652]	@ (8002ad8 <main+0x328>)
 800284c:	4aa3      	ldr	r2, [pc, #652]	@ (8002adc <main+0x32c>)
 800284e:	49a4      	ldr	r1, [pc, #656]	@ (8002ae0 <main+0x330>)
 8002850:	48a4      	ldr	r0, [pc, #656]	@ (8002ae4 <main+0x334>)
 8002852:	f001 fa03 	bl	8003c5c <setTime>

		  current_time.alarm_on = false;
 8002856:	4ba4      	ldr	r3, [pc, #656]	@ (8002ae8 <main+0x338>)
 8002858:	2200      	movs	r2, #0
 800285a:	721a      	strb	r2, [r3, #8]

		  current_mode = Mode_config_time;
 800285c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ac8 <main+0x318>)
 800285e:	2203      	movs	r2, #3
 8002860:	701a      	strb	r2, [r3, #0]

		  break;
 8002862:	f001 b95a 	b.w	8003b1a <main+0x136a>
	  }
	  case Mode_word_clock:
	  {
		  if(previous_mode != current_mode)
 8002866:	4ba1      	ldr	r3, [pc, #644]	@ (8002aec <main+0x33c>)
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	4b97      	ldr	r3, [pc, #604]	@ (8002ac8 <main+0x318>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d05f      	beq.n	8002932 <main+0x182>
		  {
			  lcdClear(WHITE);
 8002872:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002876:	f7ff f8ed 	bl	8001a54 <lcdClear>
			  clock_radius = 100;
 800287a:	2364      	movs	r3, #100	@ 0x64
 800287c:	607b      	str	r3, [r7, #4]
			  displayClock(LCD_WIDTH / 2, 110, clock_radius);
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	216e      	movs	r1, #110	@ 0x6e
 8002882:	2078      	movs	r0, #120	@ 0x78
 8002884:	f001 fa18 	bl	8003cb8 <displayClock>

			  (void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &current_time.second, BLUE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1a3 021e 	sub.w	r2, r3, #30
 800288e:	231f      	movs	r3, #31
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4b95      	ldr	r3, [pc, #596]	@ (8002ae8 <main+0x338>)
 8002894:	216e      	movs	r1, #110	@ 0x6e
 8002896:	2078      	movs	r0, #120	@ 0x78
 8002898:	f001 fac6 	bl	8003e28 <displaySecClockwise>
			  (void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &current_time.second, &current_time.minute, BLACK);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	4b92      	ldr	r3, [pc, #584]	@ (8002af0 <main+0x340>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	4b8f      	ldr	r3, [pc, #572]	@ (8002ae8 <main+0x338>)
 80028ac:	216e      	movs	r1, #110	@ 0x6e
 80028ae:	2078      	movs	r0, #120	@ 0x78
 80028b0:	f001 fbb6 	bl	8004020 <displayMinClockwise>
			  (void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &current_time.minute, &current_time.hour, RED);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80028ba:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <main+0x344>)
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4b8a      	ldr	r3, [pc, #552]	@ (8002af0 <main+0x340>)
 80028c6:	216e      	movs	r1, #110	@ 0x6e
 80028c8:	2078      	movs	r0, #120	@ 0x78
 80028ca:	f001 fcc5 	bl	8004258 <displayHourClockwise>

			  displayTime(LCD_WIDTH / 2, 240, &current_time.second, &current_time.minute, &current_time.hour, 32, BLACK, BLACK, BLACK);
 80028ce:	2300      	movs	r3, #0
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9303      	str	r3, [sp, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9302      	str	r3, [sp, #8]
 80028da:	2320      	movs	r3, #32
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	4b85      	ldr	r3, [pc, #532]	@ (8002af4 <main+0x344>)
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	4b83      	ldr	r3, [pc, #524]	@ (8002af0 <main+0x340>)
 80028e4:	4a80      	ldr	r2, [pc, #512]	@ (8002ae8 <main+0x338>)
 80028e6:	21f0      	movs	r1, #240	@ 0xf0
 80028e8:	2078      	movs	r0, #120	@ 0x78
 80028ea:	f001 fdd9 	bl	80044a0 <displayTime>
			  displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date, &current_time.month, &current_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 80028ee:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80028f2:	9304      	str	r3, [sp, #16]
 80028f4:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80028f8:	9303      	str	r3, [sp, #12]
 80028fa:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	2318      	movs	r3, #24
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	4b7c      	ldr	r3, [pc, #496]	@ (8002af8 <main+0x348>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4b7c      	ldr	r3, [pc, #496]	@ (8002afc <main+0x34c>)
 800290a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b00 <main+0x350>)
 800290c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002910:	2078      	movs	r0, #120	@ 0x78
 8002912:	f001 fe43 	bl	800459c <displayDate>
			  displayDay(20, 320 - 10 - 24, &current_time.day, 24, RED);
 8002916:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2318      	movs	r3, #24
 800291e:	4a79      	ldr	r2, [pc, #484]	@ (8002b04 <main+0x354>)
 8002920:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002924:	2014      	movs	r0, #20
 8002926:	f001 fedd 	bl	80046e4 <displayDay>

			  previous_mode = current_mode;
 800292a:	4b67      	ldr	r3, [pc, #412]	@ (8002ac8 <main+0x318>)
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <main+0x33c>)
 8002930:	701a      	strb	r2, [r3, #0]
		  }

		  if(sTimer2GetFlag())
 8002932:	f002 fb19 	bl	8004f68 <sTimer2GetFlag>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d065      	beq.n	8002a08 <main+0x258>
		  {
			  debugSystem();
 800293c:	f001 f974 	bl	8003c28 <debugSystem>

			  ds3231ReadTime();
 8002940:	f7fe fbb0 	bl	80010a4 <ds3231ReadTime>

			  (void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &current_time.second, BLUE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1a3 021e 	sub.w	r2, r3, #30
 800294a:	231f      	movs	r3, #31
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4b66      	ldr	r3, [pc, #408]	@ (8002ae8 <main+0x338>)
 8002950:	216e      	movs	r1, #110	@ 0x6e
 8002952:	2078      	movs	r0, #120	@ 0x78
 8002954:	f001 fa68 	bl	8003e28 <displaySecClockwise>
			  (void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &current_time.second, &current_time.minute, BLACK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	4b63      	ldr	r3, [pc, #396]	@ (8002af0 <main+0x340>)
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4b60      	ldr	r3, [pc, #384]	@ (8002ae8 <main+0x338>)
 8002968:	216e      	movs	r1, #110	@ 0x6e
 800296a:	2078      	movs	r0, #120	@ 0x78
 800296c:	f001 fb58 	bl	8004020 <displayMinClockwise>
			  (void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &current_time.minute, &current_time.hour, RED);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002976:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <main+0x344>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <main+0x340>)
 8002982:	216e      	movs	r1, #110	@ 0x6e
 8002984:	2078      	movs	r0, #120	@ 0x78
 8002986:	f001 fc67 	bl	8004258 <displayHourClockwise>

			  displayTime(LCD_WIDTH / 2, 240, &current_time.second, &current_time.minute, &current_time.hour, 32, BLACK, BLACK, BLACK);
 800298a:	2300      	movs	r3, #0
 800298c:	9304      	str	r3, [sp, #16]
 800298e:	2300      	movs	r3, #0
 8002990:	9303      	str	r3, [sp, #12]
 8002992:	2300      	movs	r3, #0
 8002994:	9302      	str	r3, [sp, #8]
 8002996:	2320      	movs	r3, #32
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	4b56      	ldr	r3, [pc, #344]	@ (8002af4 <main+0x344>)
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4b54      	ldr	r3, [pc, #336]	@ (8002af0 <main+0x340>)
 80029a0:	4a51      	ldr	r2, [pc, #324]	@ (8002ae8 <main+0x338>)
 80029a2:	21f0      	movs	r1, #240	@ 0xf0
 80029a4:	2078      	movs	r0, #120	@ 0x78
 80029a6:	f001 fd7b 	bl	80044a0 <displayTime>
			  if(current_time.second == 0 && current_time.minute == 0 && current_time.hour == 0)
 80029aa:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <main+0x338>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d125      	bne.n	80029fe <main+0x24e>
 80029b2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae8 <main+0x338>)
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <main+0x24e>
 80029ba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae8 <main+0x338>)
 80029bc:	789b      	ldrb	r3, [r3, #2]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d11d      	bne.n	80029fe <main+0x24e>
			  {
				  displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date, &current_time.month, &current_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 80029c2:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80029c6:	9304      	str	r3, [sp, #16]
 80029c8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2318      	movs	r3, #24
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	4b47      	ldr	r3, [pc, #284]	@ (8002af8 <main+0x348>)
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <main+0x34c>)
 80029de:	4a48      	ldr	r2, [pc, #288]	@ (8002b00 <main+0x350>)
 80029e0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80029e4:	2078      	movs	r0, #120	@ 0x78
 80029e6:	f001 fdd9 	bl	800459c <displayDate>
				  displayDay(20, 320 - 34, &current_time.day, 24, RED);
 80029ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2318      	movs	r3, #24
 80029f2:	4a44      	ldr	r2, [pc, #272]	@ (8002b04 <main+0x354>)
 80029f4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80029f8:	2014      	movs	r0, #20
 80029fa:	f001 fe73 	bl	80046e4 <displayDay>
			  }

			  displayTimeLed7Seg(&current_time.second, &current_time.minute, &current_time.hour);
 80029fe:	4a3d      	ldr	r2, [pc, #244]	@ (8002af4 <main+0x344>)
 8002a00:	493b      	ldr	r1, [pc, #236]	@ (8002af0 <main+0x340>)
 8002a02:	4839      	ldr	r0, [pc, #228]	@ (8002ae8 <main+0x338>)
 8002a04:	f001 ff16 	bl	8004834 <displayTimeLed7Seg>
		  }

		  if(button_count[12] == 1)
 8002a08:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <main+0x358>)
 8002a0a:	8b1b      	ldrh	r3, [r3, #24]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f041 8080 	bne.w	8003b12 <main+0x1362>
		  {
			  current_mode = Mode_config_time;
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <main+0x318>)
 8002a14:	2203      	movs	r2, #3
 8002a16:	701a      	strb	r2, [r3, #0]
			  button_count[12] += 1;
 8002a18:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <main+0x358>)
 8002a1a:	8b1b      	ldrh	r3, [r3, #24]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <main+0x358>)
 8002a22:	831a      	strh	r2, [r3, #24]
		  }

		  break;
 8002a24:	f001 b875 	b.w	8003b12 <main+0x1362>
	  }
	  case Mode_config_time:
	  {
		  if(previous_mode != current_mode)
 8002a28:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <main+0x33c>)
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <main+0x318>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d032      	beq.n	8002a9a <main+0x2ea>
		  {
			  ds3231ReadTime();
 8002a34:	f7fe fb36 	bl	80010a4 <ds3231ReadTime>
			  set_time.second = current_time.second;
 8002a38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae8 <main+0x338>)
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <main+0x334>)
 8002a3e:	701a      	strb	r2, [r3, #0]
			  set_time.minute = current_time.minute;
 8002a40:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <main+0x338>)
 8002a42:	785a      	ldrb	r2, [r3, #1]
 8002a44:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <main+0x334>)
 8002a46:	705a      	strb	r2, [r3, #1]
			  set_time.hour = current_time.hour;
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <main+0x338>)
 8002a4a:	789a      	ldrb	r2, [r3, #2]
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <main+0x334>)
 8002a4e:	709a      	strb	r2, [r3, #2]
			  set_time.day = current_time.day;
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <main+0x338>)
 8002a52:	78da      	ldrb	r2, [r3, #3]
 8002a54:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <main+0x334>)
 8002a56:	70da      	strb	r2, [r3, #3]
			  set_time.date = current_time.date;
 8002a58:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <main+0x338>)
 8002a5a:	791a      	ldrb	r2, [r3, #4]
 8002a5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <main+0x334>)
 8002a5e:	711a      	strb	r2, [r3, #4]
			  set_time.month = current_time.month;
 8002a60:	4b21      	ldr	r3, [pc, #132]	@ (8002ae8 <main+0x338>)
 8002a62:	795a      	ldrb	r2, [r3, #5]
 8002a64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae4 <main+0x334>)
 8002a66:	715a      	strb	r2, [r3, #5]
			  set_time.year = current_time.year;
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <main+0x338>)
 8002a6a:	88da      	ldrh	r2, [r3, #6]
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <main+0x334>)
 8002a6e:	80da      	strh	r2, [r3, #6]

			  lcdClear(WHITE);
 8002a70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a74:	f7fe ffee 	bl	8001a54 <lcdClear>
			  clock_radius = 100;
 8002a78:	2364      	movs	r3, #100	@ 0x64
 8002a7a:	607b      	str	r3, [r7, #4]
			  displayClock(LCD_WIDTH / 2, 110, clock_radius);
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	216e      	movs	r1, #110	@ 0x6e
 8002a80:	2078      	movs	r0, #120	@ 0x78
 8002a82:	f001 f919 	bl	8003cb8 <displayClock>

			  current_mode_config = Mode_config_second;
 8002a86:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <main+0x35c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
			  previous_mode_config = Mode_config_minute;
 8002a8c:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <main+0x360>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]

			  previous_mode = current_mode;
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <main+0x318>)
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <main+0x33c>)
 8002a98:	701a      	strb	r2, [r3, #0]
		  }

		  switch (current_mode_config)
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <main+0x35c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	f201 8007 	bhi.w	8003ab2 <main+0x1302>
 8002aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <main+0x2fc>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002b15 	.word	0x08002b15
 8002ab0:	08002db9 	.word	0x08002db9
 8002ab4:	08003089 	.word	0x08003089
 8002ab8:	08003359 	.word	0x08003359
 8002abc:	080034ff 	.word	0x080034ff
 8002ac0:	080036ff 	.word	0x080036ff
 8002ac4:	080038fd 	.word	0x080038fd
 8002ac8:	20000130 	.word	0x20000130
 8002acc:	20000006 	.word	0x20000006
 8002ad0:	20000005 	.word	0x20000005
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	20000003 	.word	0x20000003
 8002adc:	20000002 	.word	0x20000002
 8002ae0:	20000001 	.word	0x20000001
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	2000006c 	.word	0x2000006c
 8002aec:	20000131 	.word	0x20000131
 8002af0:	2000006d 	.word	0x2000006d
 8002af4:	2000006e 	.word	0x2000006e
 8002af8:	20000072 	.word	0x20000072
 8002afc:	20000071 	.word	0x20000071
 8002b00:	20000070 	.word	0x20000070
 8002b04:	2000006f 	.word	0x2000006f
 8002b08:	20000048 	.word	0x20000048
 8002b0c:	20000132 	.word	0x20000132
 8002b10:	2000001c 	.word	0x2000001c
		  {
			case Mode_config_second:
			{
				if(previous_mode_config != current_mode_config)
 8002b14:	4b9b      	ldr	r3, [pc, #620]	@ (8002d84 <main+0x5d4>)
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	4b9b      	ldr	r3, [pc, #620]	@ (8002d88 <main+0x5d8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d05a      	beq.n	8002bd6 <main+0x426>
				{
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002b26:	2300      	movs	r3, #0
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	4b98      	ldr	r3, [pc, #608]	@ (8002d8c <main+0x5dc>)
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b98      	ldr	r3, [pc, #608]	@ (8002d90 <main+0x5e0>)
 8002b30:	216e      	movs	r1, #110	@ 0x6e
 8002b32:	2078      	movs	r0, #120	@ 0x78
 8002b34:	f001 fa74 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002b3e:	231f      	movs	r3, #31
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	4b94      	ldr	r3, [pc, #592]	@ (8002d94 <main+0x5e4>)
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	4b91      	ldr	r3, [pc, #580]	@ (8002d8c <main+0x5dc>)
 8002b48:	216e      	movs	r1, #110	@ 0x6e
 8002b4a:	2078      	movs	r0, #120	@ 0x78
 8002b4c:	f001 fb84 	bl	8004258 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1a3 021e 	sub.w	r2, r3, #30
 8002b56:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d90 <main+0x5e0>)
 8002b5e:	216e      	movs	r1, #110	@ 0x6e
 8002b60:	2078      	movs	r0, #120	@ 0x78
 8002b62:	f001 f961 	bl	8003e28 <displaySecClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002b66:	2300      	movs	r3, #0
 8002b68:	9304      	str	r3, [sp, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9303      	str	r3, [sp, #12]
 8002b6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002b72:	9302      	str	r3, [sp, #8]
 8002b74:	2320      	movs	r3, #32
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	4b86      	ldr	r3, [pc, #536]	@ (8002d94 <main+0x5e4>)
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	4b83      	ldr	r3, [pc, #524]	@ (8002d8c <main+0x5dc>)
 8002b7e:	4a84      	ldr	r2, [pc, #528]	@ (8002d90 <main+0x5e0>)
 8002b80:	21f0      	movs	r1, #240	@ 0xf0
 8002b82:	2078      	movs	r0, #120	@ 0x78
 8002b84:	f001 fc8c 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002b88:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002b8c:	9304      	str	r3, [sp, #16]
 8002b8e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002b92:	9303      	str	r3, [sp, #12]
 8002b94:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002b98:	9302      	str	r3, [sp, #8]
 8002b9a:	2318      	movs	r3, #24
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d98 <main+0x5e8>)
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8002d9c <main+0x5ec>)
 8002ba4:	4a7e      	ldr	r2, [pc, #504]	@ (8002da0 <main+0x5f0>)
 8002ba6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002baa:	2078      	movs	r0, #120	@ 0x78
 8002bac:	f001 fcf6 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002bb0:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2318      	movs	r3, #24
 8002bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8002da4 <main+0x5f4>)
 8002bba:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002bbe:	2014      	movs	r0, #20
 8002bc0:	f001 fd90 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002bc4:	4a73      	ldr	r2, [pc, #460]	@ (8002d94 <main+0x5e4>)
 8002bc6:	4971      	ldr	r1, [pc, #452]	@ (8002d8c <main+0x5dc>)
 8002bc8:	4871      	ldr	r0, [pc, #452]	@ (8002d90 <main+0x5e0>)
 8002bca:	f001 fe33 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8002bce:	4b6e      	ldr	r3, [pc, #440]	@ (8002d88 <main+0x5d8>)
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d84 <main+0x5d4>)
 8002bd4:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 8002bd6:	f002 f9c7 	bl	8004f68 <sTimer2GetFlag>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01f      	beq.n	8002c20 <main+0x470>
				{
					static int counter = 0;
					counter += 1;
 8002be0:	4b71      	ldr	r3, [pc, #452]	@ (8002da8 <main+0x5f8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a70      	ldr	r2, [pc, #448]	@ (8002da8 <main+0x5f8>)
 8002be8:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 8002bea:	4b6f      	ldr	r3, [pc, #444]	@ (8002da8 <main+0x5f8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <main+0x45a>
					{
						led7SegDebugTurnOff(6);
 8002bf6:	2006      	movs	r0, #6
 8002bf8:	f7ff fdb6 	bl	8002768 <led7SegDebugTurnOff>
						led7SegDebugTurnOff(7);
 8002bfc:	2007      	movs	r0, #7
 8002bfe:	f7ff fdb3 	bl	8002768 <led7SegDebugTurnOff>
						led7SegDebugTurnOff(8);
 8002c02:	2008      	movs	r0, #8
 8002c04:	f7ff fdb0 	bl	8002768 <led7SegDebugTurnOff>
 8002c08:	e00a      	b.n	8002c20 <main+0x470>
					}
					else if(counter % 2 == 0)
 8002c0a:	4b67      	ldr	r3, [pc, #412]	@ (8002da8 <main+0x5f8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <main+0x470>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002c16:	4a5f      	ldr	r2, [pc, #380]	@ (8002d94 <main+0x5e4>)
 8002c18:	495c      	ldr	r1, [pc, #368]	@ (8002d8c <main+0x5dc>)
 8002c1a:	485d      	ldr	r0, [pc, #372]	@ (8002d90 <main+0x5e0>)
 8002c1c:	f001 fe0a 	bl	8004834 <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8002c20:	4b62      	ldr	r3, [pc, #392]	@ (8002dac <main+0x5fc>)
 8002c22:	8ada      	ldrh	r2, [r3, #22]
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <main+0x600>)
 8002c26:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2a:	0919      	lsrs	r1, r3, #4
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a5b      	subs	r3, r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d10a      	bne.n	8002c52 <main+0x4a2>
				{
					current_mode_config = Mode_config_minute;
 8002c3c:	4b52      	ldr	r3, [pc, #328]	@ (8002d88 <main+0x5d8>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002c42:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <main+0x5fc>)
 8002c44:	8adb      	ldrh	r3, [r3, #22]
 8002c46:	3301      	adds	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <main+0x5fc>)
 8002c4c:	82da      	strh	r2, [r3, #22]
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);

					button_count[7] += 1;
				}

				break;
 8002c4e:	f000 bf23 	b.w	8003a98 <main+0x12e8>
				else if(button_count[3] % 20 == 1)
 8002c52:	4b56      	ldr	r3, [pc, #344]	@ (8002dac <main+0x5fc>)
 8002c54:	88da      	ldrh	r2, [r3, #6]
 8002c56:	4b57      	ldr	r3, [pc, #348]	@ (8002db4 <main+0x604>)
 8002c58:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5c:	0919      	lsrs	r1, r3, #4
 8002c5e:	460b      	mov	r3, r1
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d13d      	bne.n	8002cea <main+0x53a>
					increaseSec();
 8002c6e:	f001 fe61 	bl	8004934 <increaseSec>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	4b43      	ldr	r3, [pc, #268]	@ (8002d8c <main+0x5dc>)
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4b43      	ldr	r3, [pc, #268]	@ (8002d90 <main+0x5e0>)
 8002c82:	216e      	movs	r1, #110	@ 0x6e
 8002c84:	2078      	movs	r0, #120	@ 0x78
 8002c86:	f001 f9cb 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002c90:	231f      	movs	r3, #31
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <main+0x5e4>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4b3c      	ldr	r3, [pc, #240]	@ (8002d8c <main+0x5dc>)
 8002c9a:	216e      	movs	r1, #110	@ 0x6e
 8002c9c:	2078      	movs	r0, #120	@ 0x78
 8002c9e:	f001 fadb 	bl	8004258 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1a3 021e 	sub.w	r2, r3, #30
 8002ca8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4b38      	ldr	r3, [pc, #224]	@ (8002d90 <main+0x5e0>)
 8002cb0:	216e      	movs	r1, #110	@ 0x6e
 8002cb2:	2078      	movs	r0, #120	@ 0x78
 8002cb4:	f001 f8b8 	bl	8003e28 <displaySecClockwise>
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9304      	str	r3, [sp, #16]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9303      	str	r3, [sp, #12]
 8002cc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <main+0x5e4>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <main+0x5dc>)
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <main+0x5e0>)
 8002cd2:	21f0      	movs	r1, #240	@ 0xf0
 8002cd4:	2078      	movs	r0, #120	@ 0x78
 8002cd6:	f001 fbe3 	bl	80044a0 <displayTime>
					button_count[3] += 1;
 8002cda:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <main+0x5fc>)
 8002cdc:	88db      	ldrh	r3, [r3, #6]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <main+0x5fc>)
 8002ce4:	80da      	strh	r2, [r3, #6]
				break;
 8002ce6:	f000 bed7 	b.w	8003a98 <main+0x12e8>
				else if(button_count[7] % 20 == 1)
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <main+0x5fc>)
 8002cec:	89da      	ldrh	r2, [r3, #14]
 8002cee:	4b31      	ldr	r3, [pc, #196]	@ (8002db4 <main+0x604>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	0919      	lsrs	r1, r3, #4
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 86c8 	bne.w	8003a98 <main+0x12e8>
					decreaseSec();
 8002d08:	f001 fe48 	bl	800499c <decreaseSec>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <main+0x5dc>)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <main+0x5e0>)
 8002d1c:	216e      	movs	r1, #110	@ 0x6e
 8002d1e:	2078      	movs	r0, #120	@ 0x78
 8002d20:	f001 f97e 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002d2a:	231f      	movs	r3, #31
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <main+0x5e4>)
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	4b16      	ldr	r3, [pc, #88]	@ (8002d8c <main+0x5dc>)
 8002d34:	216e      	movs	r1, #110	@ 0x6e
 8002d36:	2078      	movs	r0, #120	@ 0x78
 8002d38:	f001 fa8e 	bl	8004258 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1a3 021e 	sub.w	r2, r3, #30
 8002d42:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <main+0x5e0>)
 8002d4a:	216e      	movs	r1, #110	@ 0x6e
 8002d4c:	2078      	movs	r0, #120	@ 0x78
 8002d4e:	f001 f86b 	bl	8003e28 <displaySecClockwise>
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002d52:	2300      	movs	r3, #0
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9303      	str	r3, [sp, #12]
 8002d5a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2320      	movs	r3, #32
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <main+0x5e4>)
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <main+0x5dc>)
 8002d6a:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <main+0x5e0>)
 8002d6c:	21f0      	movs	r1, #240	@ 0xf0
 8002d6e:	2078      	movs	r0, #120	@ 0x78
 8002d70:	f001 fb96 	bl	80044a0 <displayTime>
					button_count[7] += 1;
 8002d74:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <main+0x5fc>)
 8002d76:	89db      	ldrh	r3, [r3, #14]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <main+0x5fc>)
 8002d7e:	81da      	strh	r2, [r3, #14]
				break;
 8002d80:	f000 be8a 	b.w	8003a98 <main+0x12e8>
 8002d84:	2000001c 	.word	0x2000001c
 8002d88:	20000132 	.word	0x20000132
 8002d8c:	20000001 	.word	0x20000001
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000002 	.word	0x20000002
 8002d98:	20000006 	.word	0x20000006
 8002d9c:	20000005 	.word	0x20000005
 8002da0:	20000004 	.word	0x20000004
 8002da4:	20000003 	.word	0x20000003
 8002da8:	20000134 	.word	0x20000134
 8002dac:	20000048 	.word	0x20000048
 8002db0:	88888889 	.word	0x88888889
 8002db4:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_minute:
			{
				if(previous_mode_config != current_mode_config)
 8002db8:	4ba6      	ldr	r3, [pc, #664]	@ (8003054 <main+0x8a4>)
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8003058 <main+0x8a8>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d05a      	beq.n	8002e7a <main+0x6ca>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1a3 021e 	sub.w	r2, r3, #30
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	4ba3      	ldr	r3, [pc, #652]	@ (800305c <main+0x8ac>)
 8002dd0:	216e      	movs	r1, #110	@ 0x6e
 8002dd2:	2078      	movs	r0, #120	@ 0x78
 8002dd4:	f001 f828 	bl	8003e28 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002dde:	231f      	movs	r3, #31
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	4b9f      	ldr	r3, [pc, #636]	@ (8003060 <main+0x8b0>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4b9f      	ldr	r3, [pc, #636]	@ (8003064 <main+0x8b4>)
 8002de8:	216e      	movs	r1, #110	@ 0x6e
 8002dea:	2078      	movs	r0, #120	@ 0x78
 8002dec:	f001 fa34 	bl	8004258 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002df6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	4b99      	ldr	r3, [pc, #612]	@ (8003064 <main+0x8b4>)
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	4b96      	ldr	r3, [pc, #600]	@ (800305c <main+0x8ac>)
 8002e02:	216e      	movs	r1, #110	@ 0x6e
 8002e04:	2078      	movs	r0, #120	@ 0x78
 8002e06:	f001 f90b 	bl	8004020 <displayMinClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9304      	str	r3, [sp, #16]
 8002e0e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002e12:	9303      	str	r3, [sp, #12]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	2320      	movs	r3, #32
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	4b90      	ldr	r3, [pc, #576]	@ (8003060 <main+0x8b0>)
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4b90      	ldr	r3, [pc, #576]	@ (8003064 <main+0x8b4>)
 8002e22:	4a8e      	ldr	r2, [pc, #568]	@ (800305c <main+0x8ac>)
 8002e24:	21f0      	movs	r1, #240	@ 0xf0
 8002e26:	2078      	movs	r0, #120	@ 0x78
 8002e28:	f001 fb3a 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002e2c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e30:	9304      	str	r3, [sp, #16]
 8002e32:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2318      	movs	r3, #24
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <main+0x8b8>)
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4b89      	ldr	r3, [pc, #548]	@ (800306c <main+0x8bc>)
 8002e48:	4a89      	ldr	r2, [pc, #548]	@ (8003070 <main+0x8c0>)
 8002e4a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002e4e:	2078      	movs	r0, #120	@ 0x78
 8002e50:	f001 fba4 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002e54:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2318      	movs	r3, #24
 8002e5c:	4a85      	ldr	r2, [pc, #532]	@ (8003074 <main+0x8c4>)
 8002e5e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002e62:	2014      	movs	r0, #20
 8002e64:	f001 fc3e 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002e68:	4a7d      	ldr	r2, [pc, #500]	@ (8003060 <main+0x8b0>)
 8002e6a:	497e      	ldr	r1, [pc, #504]	@ (8003064 <main+0x8b4>)
 8002e6c:	487b      	ldr	r0, [pc, #492]	@ (800305c <main+0x8ac>)
 8002e6e:	f001 fce1 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8002e72:	4b79      	ldr	r3, [pc, #484]	@ (8003058 <main+0x8a8>)
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	4b77      	ldr	r3, [pc, #476]	@ (8003054 <main+0x8a4>)
 8002e78:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 8002e7a:	f002 f875 	bl	8004f68 <sTimer2GetFlag>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01c      	beq.n	8002ebe <main+0x70e>
				{
					static int counter = 0;
					counter += 1;
 8002e84:	4b7c      	ldr	r3, [pc, #496]	@ (8003078 <main+0x8c8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003078 <main+0x8c8>)
 8002e8c:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003078 <main+0x8c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <main+0x6f8>
					{
						led7SegTurnOff(2);
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7ff fc30 	bl	8002700 <led7SegTurnOff>
						led7SegTurnOff(3);
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f7ff fc2d 	bl	8002700 <led7SegTurnOff>
 8002ea6:	e00a      	b.n	8002ebe <main+0x70e>
					}
					else if(counter % 2 == 0)
 8002ea8:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <main+0x8c8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <main+0x70e>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003060 <main+0x8b0>)
 8002eb6:	496b      	ldr	r1, [pc, #428]	@ (8003064 <main+0x8b4>)
 8002eb8:	4868      	ldr	r0, [pc, #416]	@ (800305c <main+0x8ac>)
 8002eba:	f001 fcbb 	bl	8004834 <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <main+0x8cc>)
 8002ec0:	8ada      	ldrh	r2, [r3, #22]
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <main+0x8d0>)
 8002ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec8:	0919      	lsrs	r1, r3, #4
 8002eca:	460b      	mov	r3, r1
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a5b      	subs	r3, r3, r1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10a      	bne.n	8002ef0 <main+0x740>
				{
					current_mode_config = Mode_config_hour;
 8002eda:	4b5f      	ldr	r3, [pc, #380]	@ (8003058 <main+0x8a8>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002ee0:	4b66      	ldr	r3, [pc, #408]	@ (800307c <main+0x8cc>)
 8002ee2:	8adb      	ldrh	r3, [r3, #22]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	4b64      	ldr	r3, [pc, #400]	@ (800307c <main+0x8cc>)
 8002eea:	82da      	strh	r2, [r3, #22]
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);

					button_count[7] += 1;
				}

				break;
 8002eec:	f000 bdd6 	b.w	8003a9c <main+0x12ec>
				else if(button_count[15] % 30 == 1)
 8002ef0:	4b62      	ldr	r3, [pc, #392]	@ (800307c <main+0x8cc>)
 8002ef2:	8bda      	ldrh	r2, [r3, #30]
 8002ef4:	4b62      	ldr	r3, [pc, #392]	@ (8003080 <main+0x8d0>)
 8002ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8002efa:	0919      	lsrs	r1, r3, #4
 8002efc:	460b      	mov	r3, r1
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a5b      	subs	r3, r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10a      	bne.n	8002f22 <main+0x772>
					current_mode_config = Mode_config_second;
 8002f0c:	4b52      	ldr	r3, [pc, #328]	@ (8003058 <main+0x8a8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8002f12:	4b5a      	ldr	r3, [pc, #360]	@ (800307c <main+0x8cc>)
 8002f14:	8bdb      	ldrh	r3, [r3, #30]
 8002f16:	3301      	adds	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	4b58      	ldr	r3, [pc, #352]	@ (800307c <main+0x8cc>)
 8002f1c:	83da      	strh	r2, [r3, #30]
				break;
 8002f1e:	f000 bdbd 	b.w	8003a9c <main+0x12ec>
				else if(button_count[3] % 20 == 1)
 8002f22:	4b56      	ldr	r3, [pc, #344]	@ (800307c <main+0x8cc>)
 8002f24:	88da      	ldrh	r2, [r3, #6]
 8002f26:	4b57      	ldr	r3, [pc, #348]	@ (8003084 <main+0x8d4>)
 8002f28:	fba3 1302 	umull	r1, r3, r3, r2
 8002f2c:	0919      	lsrs	r1, r3, #4
 8002f2e:	460b      	mov	r3, r1
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d13d      	bne.n	8002fba <main+0x80a>
					increaseMin();
 8002f3e:	f001 fd61 	bl	8004a04 <increaseMin>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1a3 021e 	sub.w	r2, r3, #30
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	4b43      	ldr	r3, [pc, #268]	@ (800305c <main+0x8ac>)
 8002f4e:	216e      	movs	r1, #110	@ 0x6e
 8002f50:	2078      	movs	r0, #120	@ 0x78
 8002f52:	f000 ff69 	bl	8003e28 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002f5c:	231f      	movs	r3, #31
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	4b3f      	ldr	r3, [pc, #252]	@ (8003060 <main+0x8b0>)
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4b3f      	ldr	r3, [pc, #252]	@ (8003064 <main+0x8b4>)
 8002f66:	216e      	movs	r1, #110	@ 0x6e
 8002f68:	2078      	movs	r0, #120	@ 0x78
 8002f6a:	f001 f975 	bl	8004258 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002f74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f78:	9301      	str	r3, [sp, #4]
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <main+0x8b4>)
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	4b37      	ldr	r3, [pc, #220]	@ (800305c <main+0x8ac>)
 8002f80:	216e      	movs	r1, #110	@ 0x6e
 8002f82:	2078      	movs	r0, #120	@ 0x78
 8002f84:	f001 f84c 	bl	8004020 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9304      	str	r3, [sp, #16]
 8002f8c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f90:	9303      	str	r3, [sp, #12]
 8002f92:	2300      	movs	r3, #0
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2320      	movs	r3, #32
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <main+0x8b0>)
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <main+0x8b4>)
 8002fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800305c <main+0x8ac>)
 8002fa2:	21f0      	movs	r1, #240	@ 0xf0
 8002fa4:	2078      	movs	r0, #120	@ 0x78
 8002fa6:	f001 fa7b 	bl	80044a0 <displayTime>
					button_count[3] += 1;
 8002faa:	4b34      	ldr	r3, [pc, #208]	@ (800307c <main+0x8cc>)
 8002fac:	88db      	ldrh	r3, [r3, #6]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	4b32      	ldr	r3, [pc, #200]	@ (800307c <main+0x8cc>)
 8002fb4:	80da      	strh	r2, [r3, #6]
				break;
 8002fb6:	f000 bd71 	b.w	8003a9c <main+0x12ec>
				else if(button_count[7] % 20 == 1)
 8002fba:	4b30      	ldr	r3, [pc, #192]	@ (800307c <main+0x8cc>)
 8002fbc:	89da      	ldrh	r2, [r3, #14]
 8002fbe:	4b31      	ldr	r3, [pc, #196]	@ (8003084 <main+0x8d4>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	0919      	lsrs	r1, r3, #4
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 8562 	bne.w	8003a9c <main+0x12ec>
					decreaseMin();
 8002fd8:	f001 fd3a 	bl	8004a50 <decreaseMin>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f1a3 021e 	sub.w	r2, r3, #30
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800305c <main+0x8ac>)
 8002fe8:	216e      	movs	r1, #110	@ 0x6e
 8002fea:	2078      	movs	r0, #120	@ 0x78
 8002fec:	f000 ff1c 	bl	8003e28 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002ff6:	231f      	movs	r3, #31
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <main+0x8b0>)
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <main+0x8b4>)
 8003000:	216e      	movs	r1, #110	@ 0x6e
 8003002:	2078      	movs	r0, #120	@ 0x78
 8003004:	f001 f928 	bl	8004258 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800300e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <main+0x8b4>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <main+0x8ac>)
 800301a:	216e      	movs	r1, #110	@ 0x6e
 800301c:	2078      	movs	r0, #120	@ 0x78
 800301e:	f000 ffff 	bl	8004020 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8003022:	2300      	movs	r3, #0
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	2300      	movs	r3, #0
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	2320      	movs	r3, #32
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <main+0x8b0>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4b0a      	ldr	r3, [pc, #40]	@ (8003064 <main+0x8b4>)
 800303a:	4a08      	ldr	r2, [pc, #32]	@ (800305c <main+0x8ac>)
 800303c:	21f0      	movs	r1, #240	@ 0xf0
 800303e:	2078      	movs	r0, #120	@ 0x78
 8003040:	f001 fa2e 	bl	80044a0 <displayTime>
					button_count[7] += 1;
 8003044:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <main+0x8cc>)
 8003046:	89db      	ldrh	r3, [r3, #14]
 8003048:	3301      	adds	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <main+0x8cc>)
 800304e:	81da      	strh	r2, [r3, #14]
				break;
 8003050:	f000 bd24 	b.w	8003a9c <main+0x12ec>
 8003054:	2000001c 	.word	0x2000001c
 8003058:	20000132 	.word	0x20000132
 800305c:	20000000 	.word	0x20000000
 8003060:	20000002 	.word	0x20000002
 8003064:	20000001 	.word	0x20000001
 8003068:	20000006 	.word	0x20000006
 800306c:	20000005 	.word	0x20000005
 8003070:	20000004 	.word	0x20000004
 8003074:	20000003 	.word	0x20000003
 8003078:	20000138 	.word	0x20000138
 800307c:	20000048 	.word	0x20000048
 8003080:	88888889 	.word	0x88888889
 8003084:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_hour:
			{
				if(previous_mode_config != current_mode_config)
 8003088:	4ba6      	ldr	r3, [pc, #664]	@ (8003324 <main+0xb74>)
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	4ba6      	ldr	r3, [pc, #664]	@ (8003328 <main+0xb78>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d05a      	beq.n	800314a <main+0x99a>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1a3 021e 	sub.w	r2, r3, #30
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	4ba3      	ldr	r3, [pc, #652]	@ (800332c <main+0xb7c>)
 80030a0:	216e      	movs	r1, #110	@ 0x6e
 80030a2:	2078      	movs	r0, #120	@ 0x78
 80030a4:	f000 fec0 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80030ae:	231f      	movs	r3, #31
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003330 <main+0xb80>)
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4b9d      	ldr	r3, [pc, #628]	@ (800332c <main+0xb7c>)
 80030b8:	216e      	movs	r1, #110	@ 0x6e
 80030ba:	2078      	movs	r0, #120	@ 0x78
 80030bc:	f000 ffb0 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80030c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	4b99      	ldr	r3, [pc, #612]	@ (8003334 <main+0xb84>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4b97      	ldr	r3, [pc, #604]	@ (8003330 <main+0xb80>)
 80030d2:	216e      	movs	r1, #110	@ 0x6e
 80030d4:	2078      	movs	r0, #120	@ 0x78
 80030d6:	f001 f8bf 	bl	8004258 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 80030da:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	2300      	movs	r3, #0
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	2320      	movs	r3, #32
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	4b91      	ldr	r3, [pc, #580]	@ (8003334 <main+0xb84>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003330 <main+0xb80>)
 80030f2:	4a8e      	ldr	r2, [pc, #568]	@ (800332c <main+0xb7c>)
 80030f4:	21f0      	movs	r1, #240	@ 0xf0
 80030f6:	2078      	movs	r0, #120	@ 0x78
 80030f8:	f001 f9d2 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 80030fc:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800310c:	9302      	str	r3, [sp, #8]
 800310e:	2318      	movs	r3, #24
 8003110:	9301      	str	r3, [sp, #4]
 8003112:	4b89      	ldr	r3, [pc, #548]	@ (8003338 <main+0xb88>)
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4b89      	ldr	r3, [pc, #548]	@ (800333c <main+0xb8c>)
 8003118:	4a89      	ldr	r2, [pc, #548]	@ (8003340 <main+0xb90>)
 800311a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800311e:	2078      	movs	r0, #120	@ 0x78
 8003120:	f001 fa3c 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003124:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2318      	movs	r3, #24
 800312c:	4a85      	ldr	r2, [pc, #532]	@ (8003344 <main+0xb94>)
 800312e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003132:	2014      	movs	r0, #20
 8003134:	f001 fad6 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8003138:	4a7e      	ldr	r2, [pc, #504]	@ (8003334 <main+0xb84>)
 800313a:	497d      	ldr	r1, [pc, #500]	@ (8003330 <main+0xb80>)
 800313c:	487b      	ldr	r0, [pc, #492]	@ (800332c <main+0xb7c>)
 800313e:	f001 fb79 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8003142:	4b79      	ldr	r3, [pc, #484]	@ (8003328 <main+0xb78>)
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	4b77      	ldr	r3, [pc, #476]	@ (8003324 <main+0xb74>)
 8003148:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 800314a:	f001 ff0d 	bl	8004f68 <sTimer2GetFlag>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <main+0x9de>
				{
					static int counter = 0;
					counter += 1;
 8003154:	4b7c      	ldr	r3, [pc, #496]	@ (8003348 <main+0xb98>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a7b      	ldr	r2, [pc, #492]	@ (8003348 <main+0xb98>)
 800315c:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 800315e:	4b7a      	ldr	r3, [pc, #488]	@ (8003348 <main+0xb98>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <main+0x9c8>
					{
						led7SegTurnOff(0);
 800316a:	2000      	movs	r0, #0
 800316c:	f7ff fac8 	bl	8002700 <led7SegTurnOff>
						led7SegTurnOff(1);
 8003170:	2001      	movs	r0, #1
 8003172:	f7ff fac5 	bl	8002700 <led7SegTurnOff>
 8003176:	e00a      	b.n	800318e <main+0x9de>
					}
					else if(counter % 2 == 0)
 8003178:	4b73      	ldr	r3, [pc, #460]	@ (8003348 <main+0xb98>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d104      	bne.n	800318e <main+0x9de>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8003184:	4a6b      	ldr	r2, [pc, #428]	@ (8003334 <main+0xb84>)
 8003186:	496a      	ldr	r1, [pc, #424]	@ (8003330 <main+0xb80>)
 8003188:	4868      	ldr	r0, [pc, #416]	@ (800332c <main+0xb7c>)
 800318a:	f001 fb53 	bl	8004834 <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 800318e:	4b6f      	ldr	r3, [pc, #444]	@ (800334c <main+0xb9c>)
 8003190:	8ada      	ldrh	r2, [r3, #22]
 8003192:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <main+0xba0>)
 8003194:	fba3 1302 	umull	r1, r3, r3, r2
 8003198:	0919      	lsrs	r1, r3, #4
 800319a:	460b      	mov	r3, r1
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a5b      	subs	r3, r3, r1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10a      	bne.n	80031c0 <main+0xa10>
				{
					current_mode_config = Mode_config_day;
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <main+0xb78>)
 80031ac:	2203      	movs	r2, #3
 80031ae:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 80031b0:	4b66      	ldr	r3, [pc, #408]	@ (800334c <main+0xb9c>)
 80031b2:	8adb      	ldrh	r3, [r3, #22]
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b64      	ldr	r3, [pc, #400]	@ (800334c <main+0xb9c>)
 80031ba:	82da      	strh	r2, [r3, #22]
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);

					button_count[7] += 1;
				}

				break;
 80031bc:	f000 bc70 	b.w	8003aa0 <main+0x12f0>
				else if(button_count[15] % 30 == 1)
 80031c0:	4b62      	ldr	r3, [pc, #392]	@ (800334c <main+0xb9c>)
 80031c2:	8bda      	ldrh	r2, [r3, #30]
 80031c4:	4b62      	ldr	r3, [pc, #392]	@ (8003350 <main+0xba0>)
 80031c6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ca:	0919      	lsrs	r1, r3, #4
 80031cc:	460b      	mov	r3, r1
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a5b      	subs	r3, r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10a      	bne.n	80031f2 <main+0xa42>
					current_mode_config = Mode_config_minute;
 80031dc:	4b52      	ldr	r3, [pc, #328]	@ (8003328 <main+0xb78>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 80031e2:	4b5a      	ldr	r3, [pc, #360]	@ (800334c <main+0xb9c>)
 80031e4:	8bdb      	ldrh	r3, [r3, #30]
 80031e6:	3301      	adds	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b58      	ldr	r3, [pc, #352]	@ (800334c <main+0xb9c>)
 80031ec:	83da      	strh	r2, [r3, #30]
				break;
 80031ee:	f000 bc57 	b.w	8003aa0 <main+0x12f0>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 80031f2:	4b56      	ldr	r3, [pc, #344]	@ (800334c <main+0xb9c>)
 80031f4:	88da      	ldrh	r2, [r3, #6]
 80031f6:	4b57      	ldr	r3, [pc, #348]	@ (8003354 <main+0xba4>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	0919      	lsrs	r1, r3, #4
 80031fe:	460b      	mov	r3, r1
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d13d      	bne.n	800328a <main+0xada>
					increaseHour();
 800320e:	f001 fc45 	bl	8004a9c <increaseHour>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1a3 021e 	sub.w	r2, r3, #30
 8003218:	2300      	movs	r3, #0
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b43      	ldr	r3, [pc, #268]	@ (800332c <main+0xb7c>)
 800321e:	216e      	movs	r1, #110	@ 0x6e
 8003220:	2078      	movs	r0, #120	@ 0x78
 8003222:	f000 fe01 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800322c:	231f      	movs	r3, #31
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	4b3f      	ldr	r3, [pc, #252]	@ (8003330 <main+0xb80>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4b3d      	ldr	r3, [pc, #244]	@ (800332c <main+0xb7c>)
 8003236:	216e      	movs	r1, #110	@ 0x6e
 8003238:	2078      	movs	r0, #120	@ 0x78
 800323a:	f000 fef1 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003244:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	4b3a      	ldr	r3, [pc, #232]	@ (8003334 <main+0xb84>)
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <main+0xb80>)
 8003250:	216e      	movs	r1, #110	@ 0x6e
 8003252:	2078      	movs	r0, #120	@ 0x78
 8003254:	f001 f800 	bl	8004258 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 8003258:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	2300      	movs	r3, #0
 8003260:	9303      	str	r3, [sp, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	9302      	str	r3, [sp, #8]
 8003266:	2320      	movs	r3, #32
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	4b32      	ldr	r3, [pc, #200]	@ (8003334 <main+0xb84>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <main+0xb80>)
 8003270:	4a2e      	ldr	r2, [pc, #184]	@ (800332c <main+0xb7c>)
 8003272:	21f0      	movs	r1, #240	@ 0xf0
 8003274:	2078      	movs	r0, #120	@ 0x78
 8003276:	f001 f913 	bl	80044a0 <displayTime>
					button_count[3] += 1;
 800327a:	4b34      	ldr	r3, [pc, #208]	@ (800334c <main+0xb9c>)
 800327c:	88db      	ldrh	r3, [r3, #6]
 800327e:	3301      	adds	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	4b32      	ldr	r3, [pc, #200]	@ (800334c <main+0xb9c>)
 8003284:	80da      	strh	r2, [r3, #6]
				break;
 8003286:	f000 bc0b 	b.w	8003aa0 <main+0x12f0>
				else if(button_count[7] % 20 == 1)
 800328a:	4b30      	ldr	r3, [pc, #192]	@ (800334c <main+0xb9c>)
 800328c:	89da      	ldrh	r2, [r3, #14]
 800328e:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <main+0xba4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	0919      	lsrs	r1, r3, #4
 8003296:	460b      	mov	r3, r1
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	f040 83fc 	bne.w	8003aa0 <main+0x12f0>
					decreaseHour();
 80032a8:	f001 fc10 	bl	8004acc <decreaseHour>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1a3 021e 	sub.w	r2, r3, #30
 80032b2:	2300      	movs	r3, #0
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4b1d      	ldr	r3, [pc, #116]	@ (800332c <main+0xb7c>)
 80032b8:	216e      	movs	r1, #110	@ 0x6e
 80032ba:	2078      	movs	r0, #120	@ 0x78
 80032bc:	f000 fdb4 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80032c6:	231f      	movs	r3, #31
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <main+0xb80>)
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4b17      	ldr	r3, [pc, #92]	@ (800332c <main+0xb7c>)
 80032d0:	216e      	movs	r1, #110	@ 0x6e
 80032d2:	2078      	movs	r0, #120	@ 0x78
 80032d4:	f000 fea4 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80032de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <main+0xb84>)
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <main+0xb80>)
 80032ea:	216e      	movs	r1, #110	@ 0x6e
 80032ec:	2078      	movs	r0, #120	@ 0x78
 80032ee:	f000 ffb3 	bl	8004258 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 80032f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032f6:	9304      	str	r3, [sp, #16]
 80032f8:	2300      	movs	r3, #0
 80032fa:	9303      	str	r3, [sp, #12]
 80032fc:	2300      	movs	r3, #0
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	2320      	movs	r3, #32
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <main+0xb84>)
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <main+0xb80>)
 800330a:	4a08      	ldr	r2, [pc, #32]	@ (800332c <main+0xb7c>)
 800330c:	21f0      	movs	r1, #240	@ 0xf0
 800330e:	2078      	movs	r0, #120	@ 0x78
 8003310:	f001 f8c6 	bl	80044a0 <displayTime>
					button_count[7] += 1;
 8003314:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <main+0xb9c>)
 8003316:	89db      	ldrh	r3, [r3, #14]
 8003318:	3301      	adds	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <main+0xb9c>)
 800331e:	81da      	strh	r2, [r3, #14]
				break;
 8003320:	e3be      	b.n	8003aa0 <main+0x12f0>
 8003322:	bf00      	nop
 8003324:	2000001c 	.word	0x2000001c
 8003328:	20000132 	.word	0x20000132
 800332c:	20000000 	.word	0x20000000
 8003330:	20000001 	.word	0x20000001
 8003334:	20000002 	.word	0x20000002
 8003338:	20000006 	.word	0x20000006
 800333c:	20000005 	.word	0x20000005
 8003340:	20000004 	.word	0x20000004
 8003344:	20000003 	.word	0x20000003
 8003348:	2000013c 	.word	0x2000013c
 800334c:	20000048 	.word	0x20000048
 8003350:	88888889 	.word	0x88888889
 8003354:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_day:
			{
				if(previous_mode_config != current_mode_config)
 8003358:	4ba5      	ldr	r3, [pc, #660]	@ (80035f0 <main+0xe40>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	4ba5      	ldr	r3, [pc, #660]	@ (80035f4 <main+0xe44>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d059      	beq.n	8003418 <main+0xc68>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f1a3 021e 	sub.w	r2, r3, #30
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4ba2      	ldr	r3, [pc, #648]	@ (80035f8 <main+0xe48>)
 8003370:	216e      	movs	r1, #110	@ 0x6e
 8003372:	2078      	movs	r0, #120	@ 0x78
 8003374:	f000 fd58 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800337e:	231f      	movs	r3, #31
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	4b9e      	ldr	r3, [pc, #632]	@ (80035fc <main+0xe4c>)
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4b9c      	ldr	r3, [pc, #624]	@ (80035f8 <main+0xe48>)
 8003388:	216e      	movs	r1, #110	@ 0x6e
 800338a:	2078      	movs	r0, #120	@ 0x78
 800338c:	f000 fe48 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003396:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	4b98      	ldr	r3, [pc, #608]	@ (8003600 <main+0xe50>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4b96      	ldr	r3, [pc, #600]	@ (80035fc <main+0xe4c>)
 80033a2:	216e      	movs	r1, #110	@ 0x6e
 80033a4:	2078      	movs	r0, #120	@ 0x78
 80033a6:	f000 ff57 	bl	8004258 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 80033aa:	2300      	movs	r3, #0
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	2300      	movs	r3, #0
 80033b0:	9303      	str	r3, [sp, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	9302      	str	r3, [sp, #8]
 80033b6:	2320      	movs	r3, #32
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	4b91      	ldr	r3, [pc, #580]	@ (8003600 <main+0xe50>)
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4b8f      	ldr	r3, [pc, #572]	@ (80035fc <main+0xe4c>)
 80033c0:	4a8d      	ldr	r2, [pc, #564]	@ (80035f8 <main+0xe48>)
 80033c2:	21f0      	movs	r1, #240	@ 0xf0
 80033c4:	2078      	movs	r0, #120	@ 0x78
 80033c6:	f001 f86b 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 80033ca:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80033ce:	9304      	str	r3, [sp, #16]
 80033d0:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80033d4:	9303      	str	r3, [sp, #12]
 80033d6:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80033da:	9302      	str	r3, [sp, #8]
 80033dc:	2318      	movs	r3, #24
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	4b88      	ldr	r3, [pc, #544]	@ (8003604 <main+0xe54>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4b88      	ldr	r3, [pc, #544]	@ (8003608 <main+0xe58>)
 80033e6:	4a89      	ldr	r2, [pc, #548]	@ (800360c <main+0xe5c>)
 80033e8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80033ec:	2078      	movs	r0, #120	@ 0x78
 80033ee:	f001 f8d5 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 80033f2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2318      	movs	r3, #24
 80033fa:	4a85      	ldr	r2, [pc, #532]	@ (8003610 <main+0xe60>)
 80033fc:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003400:	2014      	movs	r0, #20
 8003402:	f001 f96f 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8003406:	4a7e      	ldr	r2, [pc, #504]	@ (8003600 <main+0xe50>)
 8003408:	497c      	ldr	r1, [pc, #496]	@ (80035fc <main+0xe4c>)
 800340a:	487b      	ldr	r0, [pc, #492]	@ (80035f8 <main+0xe48>)
 800340c:	f001 fa12 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8003410:	4b78      	ldr	r3, [pc, #480]	@ (80035f4 <main+0xe44>)
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <main+0xe40>)
 8003416:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8003418:	4b7e      	ldr	r3, [pc, #504]	@ (8003614 <main+0xe64>)
 800341a:	8ada      	ldrh	r2, [r3, #22]
 800341c:	4b7e      	ldr	r3, [pc, #504]	@ (8003618 <main+0xe68>)
 800341e:	fba3 1302 	umull	r1, r3, r3, r2
 8003422:	0919      	lsrs	r1, r3, #4
 8003424:	460b      	mov	r3, r1
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a5b      	subs	r3, r3, r1
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d109      	bne.n	8003448 <main+0xc98>
				{
					current_mode_config = Mode_config_date;
 8003434:	4b6f      	ldr	r3, [pc, #444]	@ (80035f4 <main+0xe44>)
 8003436:	2204      	movs	r2, #4
 8003438:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 800343a:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <main+0xe64>)
 800343c:	8adb      	ldrh	r3, [r3, #22]
 800343e:	3301      	adds	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b74      	ldr	r3, [pc, #464]	@ (8003614 <main+0xe64>)
 8003444:	82da      	strh	r2, [r3, #22]

					button_count[7] += 1;
				}


				break;
 8003446:	e32d      	b.n	8003aa4 <main+0x12f4>
				else if(button_count[15] % 30 == 1)
 8003448:	4b72      	ldr	r3, [pc, #456]	@ (8003614 <main+0xe64>)
 800344a:	8bda      	ldrh	r2, [r3, #30]
 800344c:	4b72      	ldr	r3, [pc, #456]	@ (8003618 <main+0xe68>)
 800344e:	fba3 1302 	umull	r1, r3, r3, r2
 8003452:	0919      	lsrs	r1, r3, #4
 8003454:	460b      	mov	r3, r1
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a5b      	subs	r3, r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d109      	bne.n	8003478 <main+0xcc8>
					current_mode_config = Mode_config_hour;
 8003464:	4b63      	ldr	r3, [pc, #396]	@ (80035f4 <main+0xe44>)
 8003466:	2202      	movs	r2, #2
 8003468:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <main+0xe64>)
 800346c:	8bdb      	ldrh	r3, [r3, #30]
 800346e:	3301      	adds	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b68      	ldr	r3, [pc, #416]	@ (8003614 <main+0xe64>)
 8003474:	83da      	strh	r2, [r3, #30]
				break;
 8003476:	e315      	b.n	8003aa4 <main+0x12f4>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <main+0xe64>)
 800347a:	88da      	ldrh	r2, [r3, #6]
 800347c:	4b67      	ldr	r3, [pc, #412]	@ (800361c <main+0xe6c>)
 800347e:	fba3 1302 	umull	r1, r3, r3, r2
 8003482:	0919      	lsrs	r1, r3, #4
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d112      	bne.n	80034ba <main+0xd0a>
					increaseDay();
 8003494:	f001 fb32 	bl	8004afc <increaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 8003498:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	2318      	movs	r3, #24
 80034a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <main+0xe60>)
 80034a2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80034a6:	2014      	movs	r0, #20
 80034a8:	f001 f91c 	bl	80046e4 <displayDay>
					button_count[3] += 1;
 80034ac:	4b59      	ldr	r3, [pc, #356]	@ (8003614 <main+0xe64>)
 80034ae:	88db      	ldrh	r3, [r3, #6]
 80034b0:	3301      	adds	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	4b57      	ldr	r3, [pc, #348]	@ (8003614 <main+0xe64>)
 80034b6:	80da      	strh	r2, [r3, #6]
				break;
 80034b8:	e2f4      	b.n	8003aa4 <main+0x12f4>
				else if(button_count[7] % 20 == 1)
 80034ba:	4b56      	ldr	r3, [pc, #344]	@ (8003614 <main+0xe64>)
 80034bc:	89da      	ldrh	r2, [r3, #14]
 80034be:	4b57      	ldr	r3, [pc, #348]	@ (800361c <main+0xe6c>)
 80034c0:	fba3 1302 	umull	r1, r3, r3, r2
 80034c4:	0919      	lsrs	r1, r3, #4
 80034c6:	460b      	mov	r3, r1
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	f040 82e6 	bne.w	8003aa4 <main+0x12f4>
					decreaseDay();
 80034d8:	f001 fb28 	bl	8004b2c <decreaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 80034dc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2318      	movs	r3, #24
 80034e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003610 <main+0xe60>)
 80034e6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80034ea:	2014      	movs	r0, #20
 80034ec:	f001 f8fa 	bl	80046e4 <displayDay>
					button_count[7] += 1;
 80034f0:	4b48      	ldr	r3, [pc, #288]	@ (8003614 <main+0xe64>)
 80034f2:	89db      	ldrh	r3, [r3, #14]
 80034f4:	3301      	adds	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <main+0xe64>)
 80034fa:	81da      	strh	r2, [r3, #14]
				break;
 80034fc:	e2d2      	b.n	8003aa4 <main+0x12f4>
			}
			case Mode_config_date:
			{
				if(previous_mode_config != current_mode_config)
 80034fe:	4b3c      	ldr	r3, [pc, #240]	@ (80035f0 <main+0xe40>)
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	4b3c      	ldr	r3, [pc, #240]	@ (80035f4 <main+0xe44>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d059      	beq.n	80035be <main+0xe0e>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1a3 021e 	sub.w	r2, r3, #30
 8003510:	2300      	movs	r3, #0
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	4b38      	ldr	r3, [pc, #224]	@ (80035f8 <main+0xe48>)
 8003516:	216e      	movs	r1, #110	@ 0x6e
 8003518:	2078      	movs	r0, #120	@ 0x78
 800351a:	f000 fc85 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003524:	231f      	movs	r3, #31
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	4b34      	ldr	r3, [pc, #208]	@ (80035fc <main+0xe4c>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4b32      	ldr	r3, [pc, #200]	@ (80035f8 <main+0xe48>)
 800352e:	216e      	movs	r1, #110	@ 0x6e
 8003530:	2078      	movs	r0, #120	@ 0x78
 8003532:	f000 fd75 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800353c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	4b2f      	ldr	r3, [pc, #188]	@ (8003600 <main+0xe50>)
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	4b2d      	ldr	r3, [pc, #180]	@ (80035fc <main+0xe4c>)
 8003548:	216e      	movs	r1, #110	@ 0x6e
 800354a:	2078      	movs	r0, #120	@ 0x78
 800354c:	f000 fe84 	bl	8004258 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 8003550:	2300      	movs	r3, #0
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	2300      	movs	r3, #0
 8003556:	9303      	str	r3, [sp, #12]
 8003558:	2300      	movs	r3, #0
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2320      	movs	r3, #32
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	4b27      	ldr	r3, [pc, #156]	@ (8003600 <main+0xe50>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <main+0xe4c>)
 8003566:	4a24      	ldr	r2, [pc, #144]	@ (80035f8 <main+0xe48>)
 8003568:	21f0      	movs	r1, #240	@ 0xf0
 800356a:	2078      	movs	r0, #120	@ 0x78
 800356c:	f000 ff98 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 8003570:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800357a:	9303      	str	r3, [sp, #12]
 800357c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	2318      	movs	r3, #24
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <main+0xe54>)
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4b1f      	ldr	r3, [pc, #124]	@ (8003608 <main+0xe58>)
 800358c:	4a1f      	ldr	r2, [pc, #124]	@ (800360c <main+0xe5c>)
 800358e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003592:	2078      	movs	r0, #120	@ 0x78
 8003594:	f001 f802 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003598:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	2318      	movs	r3, #24
 80035a0:	4a1b      	ldr	r2, [pc, #108]	@ (8003610 <main+0xe60>)
 80035a2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80035a6:	2014      	movs	r0, #20
 80035a8:	f001 f89c 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <main+0xe50>)
 80035ae:	4913      	ldr	r1, [pc, #76]	@ (80035fc <main+0xe4c>)
 80035b0:	4811      	ldr	r0, [pc, #68]	@ (80035f8 <main+0xe48>)
 80035b2:	f001 f93f 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 80035b6:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <main+0xe44>)
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <main+0xe40>)
 80035bc:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <main+0xe64>)
 80035c0:	8ada      	ldrh	r2, [r3, #22]
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <main+0xe68>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	0919      	lsrs	r1, r3, #4
 80035ca:	460b      	mov	r3, r1
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a5b      	subs	r3, r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d122      	bne.n	8003620 <main+0xe70>
				{
					current_mode_config = Mode_config_month;
 80035da:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <main+0xe44>)
 80035dc:	2205      	movs	r2, #5
 80035de:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <main+0xe64>)
 80035e2:	8adb      	ldrh	r3, [r3, #22]
 80035e4:	3301      	adds	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <main+0xe64>)
 80035ea:	82da      	strh	r2, [r3, #22]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);

					button_count[7] += 1;
				}

				break;
 80035ec:	e25c      	b.n	8003aa8 <main+0x12f8>
 80035ee:	bf00      	nop
 80035f0:	2000001c 	.word	0x2000001c
 80035f4:	20000132 	.word	0x20000132
 80035f8:	20000000 	.word	0x20000000
 80035fc:	20000001 	.word	0x20000001
 8003600:	20000002 	.word	0x20000002
 8003604:	20000006 	.word	0x20000006
 8003608:	20000005 	.word	0x20000005
 800360c:	20000004 	.word	0x20000004
 8003610:	20000003 	.word	0x20000003
 8003614:	20000048 	.word	0x20000048
 8003618:	88888889 	.word	0x88888889
 800361c:	cccccccd 	.word	0xcccccccd
				else if(button_count[15] % 30 == 1)
 8003620:	4baa      	ldr	r3, [pc, #680]	@ (80038cc <main+0x111c>)
 8003622:	8bda      	ldrh	r2, [r3, #30]
 8003624:	4baa      	ldr	r3, [pc, #680]	@ (80038d0 <main+0x1120>)
 8003626:	fba3 1302 	umull	r1, r3, r3, r2
 800362a:	0919      	lsrs	r1, r3, #4
 800362c:	460b      	mov	r3, r1
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a5b      	subs	r3, r3, r1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d109      	bne.n	8003650 <main+0xea0>
					current_mode_config = Mode_config_day;
 800363c:	4ba5      	ldr	r3, [pc, #660]	@ (80038d4 <main+0x1124>)
 800363e:	2203      	movs	r2, #3
 8003640:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003642:	4ba2      	ldr	r3, [pc, #648]	@ (80038cc <main+0x111c>)
 8003644:	8bdb      	ldrh	r3, [r3, #30]
 8003646:	3301      	adds	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	4ba0      	ldr	r3, [pc, #640]	@ (80038cc <main+0x111c>)
 800364c:	83da      	strh	r2, [r3, #30]
				break;
 800364e:	e22b      	b.n	8003aa8 <main+0x12f8>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 8003650:	4b9e      	ldr	r3, [pc, #632]	@ (80038cc <main+0x111c>)
 8003652:	88da      	ldrh	r2, [r3, #6]
 8003654:	4ba0      	ldr	r3, [pc, #640]	@ (80038d8 <main+0x1128>)
 8003656:	fba3 1302 	umull	r1, r3, r3, r2
 800365a:	0919      	lsrs	r1, r3, #4
 800365c:	460b      	mov	r3, r1
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d11c      	bne.n	80036a6 <main+0xef6>
					increaseDate();
 800366c:	f001 fa76 	bl	8004b5c <increaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 8003670:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003674:	9304      	str	r3, [sp, #16]
 8003676:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800367a:	9303      	str	r3, [sp, #12]
 800367c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003680:	9302      	str	r3, [sp, #8]
 8003682:	2318      	movs	r3, #24
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	4b95      	ldr	r3, [pc, #596]	@ (80038dc <main+0x112c>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4b95      	ldr	r3, [pc, #596]	@ (80038e0 <main+0x1130>)
 800368c:	4a95      	ldr	r2, [pc, #596]	@ (80038e4 <main+0x1134>)
 800368e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003692:	2078      	movs	r0, #120	@ 0x78
 8003694:	f000 ff82 	bl	800459c <displayDate>
					button_count[3] += 1;
 8003698:	4b8c      	ldr	r3, [pc, #560]	@ (80038cc <main+0x111c>)
 800369a:	88db      	ldrh	r3, [r3, #6]
 800369c:	3301      	adds	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b8a      	ldr	r3, [pc, #552]	@ (80038cc <main+0x111c>)
 80036a2:	80da      	strh	r2, [r3, #6]
				break;
 80036a4:	e200      	b.n	8003aa8 <main+0x12f8>
				else if(button_count[7] % 20 == 1)
 80036a6:	4b89      	ldr	r3, [pc, #548]	@ (80038cc <main+0x111c>)
 80036a8:	89da      	ldrh	r2, [r3, #14]
 80036aa:	4b8b      	ldr	r3, [pc, #556]	@ (80038d8 <main+0x1128>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	0919      	lsrs	r1, r3, #4
 80036b2:	460b      	mov	r3, r1
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f040 81f2 	bne.w	8003aa8 <main+0x12f8>
					decreaseDate();
 80036c4:	f001 fa82 	bl	8004bcc <decreaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 80036c8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80036cc:	9304      	str	r3, [sp, #16]
 80036ce:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80036d2:	9303      	str	r3, [sp, #12]
 80036d4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80036d8:	9302      	str	r3, [sp, #8]
 80036da:	2318      	movs	r3, #24
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	4b7f      	ldr	r3, [pc, #508]	@ (80038dc <main+0x112c>)
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <main+0x1130>)
 80036e4:	4a7f      	ldr	r2, [pc, #508]	@ (80038e4 <main+0x1134>)
 80036e6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80036ea:	2078      	movs	r0, #120	@ 0x78
 80036ec:	f000 ff56 	bl	800459c <displayDate>
					button_count[7] += 1;
 80036f0:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <main+0x111c>)
 80036f2:	89db      	ldrh	r3, [r3, #14]
 80036f4:	3301      	adds	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	4b74      	ldr	r3, [pc, #464]	@ (80038cc <main+0x111c>)
 80036fa:	81da      	strh	r2, [r3, #14]
				break;
 80036fc:	e1d4      	b.n	8003aa8 <main+0x12f8>
			}
			case Mode_config_month:
			{
				if(previous_mode_config != current_mode_config)
 80036fe:	4b7a      	ldr	r3, [pc, #488]	@ (80038e8 <main+0x1138>)
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	4b74      	ldr	r3, [pc, #464]	@ (80038d4 <main+0x1124>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d059      	beq.n	80037be <main+0x100e>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1a3 021e 	sub.w	r2, r3, #30
 8003710:	2300      	movs	r3, #0
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4b75      	ldr	r3, [pc, #468]	@ (80038ec <main+0x113c>)
 8003716:	216e      	movs	r1, #110	@ 0x6e
 8003718:	2078      	movs	r0, #120	@ 0x78
 800371a:	f000 fb85 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003724:	231f      	movs	r3, #31
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	4b71      	ldr	r3, [pc, #452]	@ (80038f0 <main+0x1140>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4b6f      	ldr	r3, [pc, #444]	@ (80038ec <main+0x113c>)
 800372e:	216e      	movs	r1, #110	@ 0x6e
 8003730:	2078      	movs	r0, #120	@ 0x78
 8003732:	f000 fc75 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800373c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	4b6c      	ldr	r3, [pc, #432]	@ (80038f4 <main+0x1144>)
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <main+0x1140>)
 8003748:	216e      	movs	r1, #110	@ 0x6e
 800374a:	2078      	movs	r0, #120	@ 0x78
 800374c:	f000 fd84 	bl	8004258 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 8003750:	2300      	movs	r3, #0
 8003752:	9304      	str	r3, [sp, #16]
 8003754:	2300      	movs	r3, #0
 8003756:	9303      	str	r3, [sp, #12]
 8003758:	2300      	movs	r3, #0
 800375a:	9302      	str	r3, [sp, #8]
 800375c:	2320      	movs	r3, #32
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	4b64      	ldr	r3, [pc, #400]	@ (80038f4 <main+0x1144>)
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4b62      	ldr	r3, [pc, #392]	@ (80038f0 <main+0x1140>)
 8003766:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <main+0x113c>)
 8003768:	21f0      	movs	r1, #240	@ 0xf0
 800376a:	2078      	movs	r0, #120	@ 0x78
 800376c:	f000 fe98 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 8003770:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003774:	9304      	str	r3, [sp, #16]
 8003776:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	2318      	movs	r3, #24
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	4b55      	ldr	r3, [pc, #340]	@ (80038dc <main+0x112c>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4b55      	ldr	r3, [pc, #340]	@ (80038e0 <main+0x1130>)
 800378c:	4a55      	ldr	r2, [pc, #340]	@ (80038e4 <main+0x1134>)
 800378e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003792:	2078      	movs	r0, #120	@ 0x78
 8003794:	f000 ff02 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003798:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2318      	movs	r3, #24
 80037a0:	4a55      	ldr	r2, [pc, #340]	@ (80038f8 <main+0x1148>)
 80037a2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80037a6:	2014      	movs	r0, #20
 80037a8:	f000 ff9c 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 80037ac:	4a51      	ldr	r2, [pc, #324]	@ (80038f4 <main+0x1144>)
 80037ae:	4950      	ldr	r1, [pc, #320]	@ (80038f0 <main+0x1140>)
 80037b0:	484e      	ldr	r0, [pc, #312]	@ (80038ec <main+0x113c>)
 80037b2:	f001 f83f 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 80037b6:	4b47      	ldr	r3, [pc, #284]	@ (80038d4 <main+0x1124>)
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	4b4b      	ldr	r3, [pc, #300]	@ (80038e8 <main+0x1138>)
 80037bc:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 80037be:	4b43      	ldr	r3, [pc, #268]	@ (80038cc <main+0x111c>)
 80037c0:	8ada      	ldrh	r2, [r3, #22]
 80037c2:	4b43      	ldr	r3, [pc, #268]	@ (80038d0 <main+0x1120>)
 80037c4:	fba3 1302 	umull	r1, r3, r3, r2
 80037c8:	0919      	lsrs	r1, r3, #4
 80037ca:	460b      	mov	r3, r1
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a5b      	subs	r3, r3, r1
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d109      	bne.n	80037ee <main+0x103e>
				{
					current_mode_config = Mode_config_year;
 80037da:	4b3e      	ldr	r3, [pc, #248]	@ (80038d4 <main+0x1124>)
 80037dc:	2206      	movs	r2, #6
 80037de:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 80037e0:	4b3a      	ldr	r3, [pc, #232]	@ (80038cc <main+0x111c>)
 80037e2:	8adb      	ldrh	r3, [r3, #22]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <main+0x111c>)
 80037ea:	82da      	strh	r2, [r3, #22]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);

					button_count[7] += 1;
				}

				break;
 80037ec:	e15e      	b.n	8003aac <main+0x12fc>
				else if(button_count[15] % 30 == 1)
 80037ee:	4b37      	ldr	r3, [pc, #220]	@ (80038cc <main+0x111c>)
 80037f0:	8bda      	ldrh	r2, [r3, #30]
 80037f2:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <main+0x1120>)
 80037f4:	fba3 1302 	umull	r1, r3, r3, r2
 80037f8:	0919      	lsrs	r1, r3, #4
 80037fa:	460b      	mov	r3, r1
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a5b      	subs	r3, r3, r1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d109      	bne.n	800381e <main+0x106e>
					current_mode_config = Mode_config_date;
 800380a:	4b32      	ldr	r3, [pc, #200]	@ (80038d4 <main+0x1124>)
 800380c:	2204      	movs	r2, #4
 800380e:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <main+0x111c>)
 8003812:	8bdb      	ldrh	r3, [r3, #30]
 8003814:	3301      	adds	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b2c      	ldr	r3, [pc, #176]	@ (80038cc <main+0x111c>)
 800381a:	83da      	strh	r2, [r3, #30]
				break;
 800381c:	e146      	b.n	8003aac <main+0x12fc>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <main+0x111c>)
 8003820:	88da      	ldrh	r2, [r3, #6]
 8003822:	4b2d      	ldr	r3, [pc, #180]	@ (80038d8 <main+0x1128>)
 8003824:	fba3 1302 	umull	r1, r3, r3, r2
 8003828:	0919      	lsrs	r1, r3, #4
 800382a:	460b      	mov	r3, r1
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	d11c      	bne.n	8003874 <main+0x10c4>
					increaseMonth();
 800383a:	f001 f9f9 	bl	8004c30 <increaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 800383e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003842:	9304      	str	r3, [sp, #16]
 8003844:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003848:	9303      	str	r3, [sp, #12]
 800384a:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800384e:	9302      	str	r3, [sp, #8]
 8003850:	2318      	movs	r3, #24
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	4b21      	ldr	r3, [pc, #132]	@ (80038dc <main+0x112c>)
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <main+0x1130>)
 800385a:	4a22      	ldr	r2, [pc, #136]	@ (80038e4 <main+0x1134>)
 800385c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003860:	2078      	movs	r0, #120	@ 0x78
 8003862:	f000 fe9b 	bl	800459c <displayDate>
					button_count[3] += 1;
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <main+0x111c>)
 8003868:	88db      	ldrh	r3, [r3, #6]
 800386a:	3301      	adds	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <main+0x111c>)
 8003870:	80da      	strh	r2, [r3, #6]
				break;
 8003872:	e11b      	b.n	8003aac <main+0x12fc>
				else if(button_count[7] % 20 == 1)
 8003874:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <main+0x111c>)
 8003876:	89da      	ldrh	r2, [r3, #14]
 8003878:	4b17      	ldr	r3, [pc, #92]	@ (80038d8 <main+0x1128>)
 800387a:	fba3 1302 	umull	r1, r3, r3, r2
 800387e:	0919      	lsrs	r1, r3, #4
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	f040 810d 	bne.w	8003aac <main+0x12fc>
					decreaseMonth();
 8003892:	f001 fa03 	bl	8004c9c <decreaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 8003896:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	2318      	movs	r3, #24
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <main+0x112c>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <main+0x1130>)
 80038b2:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <main+0x1134>)
 80038b4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80038b8:	2078      	movs	r0, #120	@ 0x78
 80038ba:	f000 fe6f 	bl	800459c <displayDate>
					button_count[7] += 1;
 80038be:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <main+0x111c>)
 80038c0:	89db      	ldrh	r3, [r3, #14]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	4b01      	ldr	r3, [pc, #4]	@ (80038cc <main+0x111c>)
 80038c8:	81da      	strh	r2, [r3, #14]
				break;
 80038ca:	e0ef      	b.n	8003aac <main+0x12fc>
 80038cc:	20000048 	.word	0x20000048
 80038d0:	88888889 	.word	0x88888889
 80038d4:	20000132 	.word	0x20000132
 80038d8:	cccccccd 	.word	0xcccccccd
 80038dc:	20000006 	.word	0x20000006
 80038e0:	20000005 	.word	0x20000005
 80038e4:	20000004 	.word	0x20000004
 80038e8:	2000001c 	.word	0x2000001c
 80038ec:	20000000 	.word	0x20000000
 80038f0:	20000001 	.word	0x20000001
 80038f4:	20000002 	.word	0x20000002
 80038f8:	20000003 	.word	0x20000003
			}
			case Mode_config_year:
			{
				if(previous_mode_config != current_mode_config)
 80038fc:	4b88      	ldr	r3, [pc, #544]	@ (8003b20 <main+0x1370>)
 80038fe:	781a      	ldrb	r2, [r3, #0]
 8003900:	4b88      	ldr	r3, [pc, #544]	@ (8003b24 <main+0x1374>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d059      	beq.n	80039bc <main+0x120c>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1a3 021e 	sub.w	r2, r3, #30
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4b85      	ldr	r3, [pc, #532]	@ (8003b28 <main+0x1378>)
 8003914:	216e      	movs	r1, #110	@ 0x6e
 8003916:	2078      	movs	r0, #120	@ 0x78
 8003918:	f000 fa86 	bl	8003e28 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003922:	231f      	movs	r3, #31
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	4b81      	ldr	r3, [pc, #516]	@ (8003b2c <main+0x137c>)
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b28 <main+0x1378>)
 800392c:	216e      	movs	r1, #110	@ 0x6e
 800392e:	2078      	movs	r0, #120	@ 0x78
 8003930:	f000 fb76 	bl	8004020 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800393a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	4b7b      	ldr	r3, [pc, #492]	@ (8003b30 <main+0x1380>)
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4b79      	ldr	r3, [pc, #484]	@ (8003b2c <main+0x137c>)
 8003946:	216e      	movs	r1, #110	@ 0x6e
 8003948:	2078      	movs	r0, #120	@ 0x78
 800394a:	f000 fc85 	bl	8004258 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 800394e:	2300      	movs	r3, #0
 8003950:	9304      	str	r3, [sp, #16]
 8003952:	2300      	movs	r3, #0
 8003954:	9303      	str	r3, [sp, #12]
 8003956:	2300      	movs	r3, #0
 8003958:	9302      	str	r3, [sp, #8]
 800395a:	2320      	movs	r3, #32
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	4b74      	ldr	r3, [pc, #464]	@ (8003b30 <main+0x1380>)
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4b72      	ldr	r3, [pc, #456]	@ (8003b2c <main+0x137c>)
 8003964:	4a70      	ldr	r2, [pc, #448]	@ (8003b28 <main+0x1378>)
 8003966:	21f0      	movs	r1, #240	@ 0xf0
 8003968:	2078      	movs	r0, #120	@ 0x78
 800396a:	f000 fd99 	bl	80044a0 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 800396e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003972:	9304      	str	r3, [sp, #16]
 8003974:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003978:	9303      	str	r3, [sp, #12]
 800397a:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800397e:	9302      	str	r3, [sp, #8]
 8003980:	2318      	movs	r3, #24
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	4b6b      	ldr	r3, [pc, #428]	@ (8003b34 <main+0x1384>)
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	4b6b      	ldr	r3, [pc, #428]	@ (8003b38 <main+0x1388>)
 800398a:	4a6c      	ldr	r2, [pc, #432]	@ (8003b3c <main+0x138c>)
 800398c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003990:	2078      	movs	r0, #120	@ 0x78
 8003992:	f000 fe03 	bl	800459c <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003996:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2318      	movs	r3, #24
 800399e:	4a68      	ldr	r2, [pc, #416]	@ (8003b40 <main+0x1390>)
 80039a0:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80039a4:	2014      	movs	r0, #20
 80039a6:	f000 fe9d 	bl	80046e4 <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 80039aa:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <main+0x1380>)
 80039ac:	495f      	ldr	r1, [pc, #380]	@ (8003b2c <main+0x137c>)
 80039ae:	485e      	ldr	r0, [pc, #376]	@ (8003b28 <main+0x1378>)
 80039b0:	f000 ff40 	bl	8004834 <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 80039b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b24 <main+0x1374>)
 80039b6:	781a      	ldrb	r2, [r3, #0]
 80039b8:	4b59      	ldr	r3, [pc, #356]	@ (8003b20 <main+0x1370>)
 80039ba:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[15] % 30 == 1)
 80039bc:	4b61      	ldr	r3, [pc, #388]	@ (8003b44 <main+0x1394>)
 80039be:	8bda      	ldrh	r2, [r3, #30]
 80039c0:	4b61      	ldr	r3, [pc, #388]	@ (8003b48 <main+0x1398>)
 80039c2:	fba3 1302 	umull	r1, r3, r3, r2
 80039c6:	0919      	lsrs	r1, r3, #4
 80039c8:	460b      	mov	r3, r1
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a5b      	subs	r3, r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d109      	bne.n	80039ec <main+0x123c>
				{
					current_mode_config = Mode_config_month;
 80039d8:	4b52      	ldr	r3, [pc, #328]	@ (8003b24 <main+0x1374>)
 80039da:	2205      	movs	r2, #5
 80039dc:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 80039de:	4b59      	ldr	r3, [pc, #356]	@ (8003b44 <main+0x1394>)
 80039e0:	8bdb      	ldrh	r3, [r3, #30]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b57      	ldr	r3, [pc, #348]	@ (8003b44 <main+0x1394>)
 80039e8:	83da      	strh	r2, [r3, #30]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);

					button_count[7] += 1;
				}

				break;
 80039ea:	e061      	b.n	8003ab0 <main+0x1300>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 80039ec:	4b55      	ldr	r3, [pc, #340]	@ (8003b44 <main+0x1394>)
 80039ee:	88da      	ldrh	r2, [r3, #6]
 80039f0:	4b56      	ldr	r3, [pc, #344]	@ (8003b4c <main+0x139c>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	0919      	lsrs	r1, r3, #4
 80039f8:	460b      	mov	r3, r1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d11c      	bne.n	8003a42 <main+0x1292>
					increaseYear();
 8003a08:	f001 f97e 	bl	8004d08 <increaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 8003a0c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003a10:	9304      	str	r3, [sp, #16]
 8003a12:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003a16:	9303      	str	r3, [sp, #12]
 8003a18:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	2318      	movs	r3, #24
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	4b44      	ldr	r3, [pc, #272]	@ (8003b34 <main+0x1384>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	4b44      	ldr	r3, [pc, #272]	@ (8003b38 <main+0x1388>)
 8003a28:	4a44      	ldr	r2, [pc, #272]	@ (8003b3c <main+0x138c>)
 8003a2a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003a2e:	2078      	movs	r0, #120	@ 0x78
 8003a30:	f000 fdb4 	bl	800459c <displayDate>
					button_count[3] += 1;
 8003a34:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <main+0x1394>)
 8003a36:	88db      	ldrh	r3, [r3, #6]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	4b41      	ldr	r3, [pc, #260]	@ (8003b44 <main+0x1394>)
 8003a3e:	80da      	strh	r2, [r3, #6]
				break;
 8003a40:	e036      	b.n	8003ab0 <main+0x1300>
				else if(button_count[7] % 20 == 1)
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <main+0x1394>)
 8003a44:	89da      	ldrh	r2, [r3, #14]
 8003a46:	4b41      	ldr	r3, [pc, #260]	@ (8003b4c <main+0x139c>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	0919      	lsrs	r1, r3, #4
 8003a4e:	460b      	mov	r3, r1
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d128      	bne.n	8003ab0 <main+0x1300>
					decreaseYear();
 8003a5e:	f001 f97b 	bl	8004d58 <decreaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 8003a62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	2318      	movs	r3, #24
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <main+0x1384>)
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b38 <main+0x1388>)
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b3c <main+0x138c>)
 8003a80:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003a84:	2078      	movs	r0, #120	@ 0x78
 8003a86:	f000 fd89 	bl	800459c <displayDate>
					button_count[7] += 1;
 8003a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b44 <main+0x1394>)
 8003a8c:	89db      	ldrh	r3, [r3, #14]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	4b2c      	ldr	r3, [pc, #176]	@ (8003b44 <main+0x1394>)
 8003a94:	81da      	strh	r2, [r3, #14]
				break;
 8003a96:	e00b      	b.n	8003ab0 <main+0x1300>
				break;
 8003a98:	bf00      	nop
 8003a9a:	e00a      	b.n	8003ab2 <main+0x1302>
				break;
 8003a9c:	bf00      	nop
 8003a9e:	e008      	b.n	8003ab2 <main+0x1302>
				break;
 8003aa0:	bf00      	nop
 8003aa2:	e006      	b.n	8003ab2 <main+0x1302>
				break;
 8003aa4:	bf00      	nop
 8003aa6:	e004      	b.n	8003ab2 <main+0x1302>
				break;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <main+0x1302>
				break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <main+0x1302>
				break;
 8003ab0:	bf00      	nop
			}
		}

		if(button_count[12] == 1)
 8003ab2:	4b24      	ldr	r3, [pc, #144]	@ (8003b44 <main+0x1394>)
 8003ab4:	8b1b      	ldrh	r3, [r3, #24]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d115      	bne.n	8003ae6 <main+0x1336>
		{
		  setTime(&set_time.second, &set_time.minute, &set_time.hour, &set_time.day, &set_time.date, &set_time.month, &set_time.year);
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <main+0x1384>)
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <main+0x1388>)
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <main+0x138c>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b40 <main+0x1390>)
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <main+0x1380>)
 8003aca:	4918      	ldr	r1, [pc, #96]	@ (8003b2c <main+0x137c>)
 8003acc:	4816      	ldr	r0, [pc, #88]	@ (8003b28 <main+0x1378>)
 8003ace:	f000 f8c5 	bl	8003c5c <setTime>
		  current_mode = Mode_word_clock;
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b50 <main+0x13a0>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
		  button_count[12] += 1;
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <main+0x1394>)
 8003ada:	8b1b      	ldrh	r3, [r3, #24]
 8003adc:	3301      	adds	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	4b18      	ldr	r3, [pc, #96]	@ (8003b44 <main+0x1394>)
 8003ae2:	831a      	strh	r2, [r3, #24]
		{
		  current_mode = Mode_word_clock;
		  button_count[14] += 1;
		}

		break;
 8003ae4:	e018      	b.n	8003b18 <main+0x1368>
		else if(button_count[14] == 1)
 8003ae6:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <main+0x1394>)
 8003ae8:	8b9b      	ldrh	r3, [r3, #28]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d114      	bne.n	8003b18 <main+0x1368>
		  current_mode = Mode_word_clock;
 8003aee:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <main+0x13a0>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	701a      	strb	r2, [r3, #0]
		  button_count[14] += 1;
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <main+0x1394>)
 8003af6:	8b9b      	ldrh	r3, [r3, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <main+0x1394>)
 8003afe:	839a      	strh	r2, [r3, #28]
		break;
 8003b00:	e00a      	b.n	8003b18 <main+0x1368>
	  {
		  break;
	  }
	  default:
	  {
		  current_mode = Mode_init;
 8003b02:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <main+0x13a0>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	f7fe be75 	b.w	80027f6 <main+0x46>
		  break;
 8003b0c:	bf00      	nop
 8003b0e:	f7fe be72 	b.w	80027f6 <main+0x46>
		  break;
 8003b12:	bf00      	nop
 8003b14:	f7fe be6f 	b.w	80027f6 <main+0x46>
		break;
 8003b18:	bf00      	nop
	  if(sTimer4GetFlag())
 8003b1a:	f7fe be6c 	b.w	80027f6 <main+0x46>
 8003b1e:	bf00      	nop
 8003b20:	2000001c 	.word	0x2000001c
 8003b24:	20000132 	.word	0x20000132
 8003b28:	20000000 	.word	0x20000000
 8003b2c:	20000001 	.word	0x20000001
 8003b30:	20000002 	.word	0x20000002
 8003b34:	20000006 	.word	0x20000006
 8003b38:	20000005 	.word	0x20000005
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	20000003 	.word	0x20000003
 8003b44:	20000048 	.word	0x20000048
 8003b48:	88888889 	.word	0x88888889
 8003b4c:	cccccccd 	.word	0xcccccccd
 8003b50:	20000130 	.word	0x20000130

08003b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b094      	sub	sp, #80	@ 0x50
 8003b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	2230      	movs	r2, #48	@ 0x30
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 fa12 	bl	8009f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <SystemClock_Config+0xcc>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b94:	2300      	movs	r3, #0
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	4b22      	ldr	r3, [pc, #136]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a21      	ldr	r2, [pc, #132]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <SystemClock_Config+0xd0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bb8:	2310      	movs	r3, #16
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003bc8:	23a8      	movs	r3, #168	@ 0xa8
 8003bca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bd4:	f107 0320 	add.w	r3, r7, #32
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 fa5f 	bl	800709c <HAL_RCC_OscConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003be4:	f001 f942 	bl	8004e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be8:	230f      	movs	r3, #15
 8003bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bf4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003bfa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003bfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	2105      	movs	r1, #5
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 fcc0 	bl	800758c <HAL_RCC_ClockConfig>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003c12:	f001 f92b 	bl	8004e6c <Error_Handler>
  }
}
 8003c16:	bf00      	nop
 8003c18:	3750      	adds	r7, #80	@ 0x50
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000

08003c28 <debugSystem>:

/* USER CODE BEGIN 4 */
void debugSystem()
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE, LED_DEBUG_Pin);
 8003c2c:	2110      	movs	r1, #16
 8003c2e:	4802      	ldr	r0, [pc, #8]	@ (8003c38 <debugSystem+0x10>)
 8003c30:	f002 f8c7 	bl	8005dc2 <HAL_GPIO_TogglePin>
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <initSystem>:
void initSystem()
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	initTimer2();
 8003c40:	f001 f942 	bl	8004ec8 <initTimer2>
	initTimer4();
 8003c44:	f001 f94a 	bl	8004edc <initTimer4>
	initLCD();
 8003c48:	f7fe f976 	bl	8001f38 <initLCD>
	initLed7Seg();
 8003c4c:	f7fe fc80 	bl	8002550 <initLed7Seg>
	initds3231();
 8003c50:	f7fd f9ec 	bl	800102c <initds3231>
	initButton();
 8003c54:	f7fd f91e 	bl	8000e94 <initButton>
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <setTime>:
void setTime(uint8_t *second, uint8_t *minute, uint8_t *hour, uint8_t *day, uint8_t *date, uint8_t *month, uint16_t *year)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
	ds3231SetSec(*second);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd fa88 	bl	8001184 <ds3231SetSec>
	ds3231SetMin(*minute);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd fa91 	bl	80011a0 <ds3231SetMin>
	ds3231SetHour(*hour);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fa9a 	bl	80011bc <ds3231SetHour>
	ds3231SetDay(*day);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd fab7 	bl	8001200 <ds3231SetDay>
	ds3231SetDate(*date);
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fac0 	bl	800121c <ds3231SetDate>
	ds3231SetMonth(*month);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd fac9 	bl	8001238 <ds3231SetMonth>
	ds3231SetYear(*year);
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd fafe 	bl	80012ac <ds3231SetYear>
}
 8003cb0:	bf00      	nop
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <displayClock>:

void displayClock(int x_coor, int y_coor, int radius)
{
 8003cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cbc:	b08e      	sub	sp, #56	@ 0x38
 8003cbe:	af04      	add	r7, sp, #16
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
    const uint8_t char_size = 24;
 8003cc6:	2318      	movs	r3, #24
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    lcdDrawCircle(x_coor, y_coor, DARKBLUE, radius + 2, 1);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3302      	adds	r3, #2
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	9200      	str	r2, [sp, #0]
 8003cd4:	f240 12cf 	movw	r2, #463	@ 0x1cf
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7fe fb17 	bl	800230e <lcdDrawCircle>
	lcdDrawCircle(x_coor, y_coor, WHITE, radius, 1);
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f7fe fb0e 	bl	800230e <lcdDrawCircle>

    for (int i = 0; i < 12; i++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf6:	e086      	b.n	8003e06 <displayClock+0x14e>
    {
        float angle = (i * 30) * (PI / 180); // Convert angle to radians
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fbb2 	bl	800046c <__aeabi_i2d>
 8003d08:	a345      	add	r3, pc, #276	@ (adr r3, 8003e20 <displayClock+0x168>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fc17 	bl	8000540 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc fef3 	bl	8000b04 <__aeabi_d2f>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	61fb      	str	r3, [r7, #28]
        int x = x_coor + (radius - 15) * sin(angle);
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f7fc fba2 	bl	800046c <__aeabi_i2d>
 8003d28:	4680      	mov	r8, r0
 8003d2a:	4689      	mov	r9, r1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b0f      	subs	r3, #15
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fb9b 	bl	800046c <__aeabi_i2d>
 8003d36:	4682      	mov	sl, r0
 8003d38:	468b      	mov	fp, r1
 8003d3a:	69f8      	ldr	r0, [r7, #28]
 8003d3c:	f7fc fba8 	bl	8000490 <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	ec43 2b10 	vmov	d0, r2, r3
 8003d48:	f006 f9a2 	bl	800a090 <sin>
 8003d4c:	ec53 2b10 	vmov	r2, r3, d0
 8003d50:	4650      	mov	r0, sl
 8003d52:	4659      	mov	r1, fp
 8003d54:	f7fc fbf4 	bl	8000540 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4649      	mov	r1, r9
 8003d60:	f7fc fa38 	bl	80001d4 <__adddf3>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc fe82 	bl	8000a74 <__aeabi_d2iz>
 8003d70:	4603      	mov	r3, r0
 8003d72:	61bb      	str	r3, [r7, #24]
        int y = y_coor + (radius - 15) * -cos(angle);
 8003d74:	68b8      	ldr	r0, [r7, #8]
 8003d76:	f7fc fb79 	bl	800046c <__aeabi_i2d>
 8003d7a:	4680      	mov	r8, r0
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3b0f      	subs	r3, #15
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fb72 	bl	800046c <__aeabi_i2d>
 8003d88:	4682      	mov	sl, r0
 8003d8a:	468b      	mov	fp, r1
 8003d8c:	69f8      	ldr	r0, [r7, #28]
 8003d8e:	f7fc fb7f 	bl	8000490 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	ec43 2b10 	vmov	d0, r2, r3
 8003d9a:	f006 f925 	bl	8009fe8 <cos>
 8003d9e:	ec53 2b10 	vmov	r2, r3, d0
 8003da2:	4614      	mov	r4, r2
 8003da4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003da8:	4622      	mov	r2, r4
 8003daa:	462b      	mov	r3, r5
 8003dac:	4650      	mov	r0, sl
 8003dae:	4659      	mov	r1, fp
 8003db0:	f7fc fbc6 	bl	8000540 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4640      	mov	r0, r8
 8003dba:	4649      	mov	r1, r9
 8003dbc:	f7fc fa0a 	bl	80001d4 <__adddf3>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f7fc fe54 	bl	8000a74 <__aeabi_d2iz>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	617b      	str	r3, [r7, #20]

        lcdShowIntNumCenter(x, y, ((i == 0) ? 12 : i), 2, BLACK, WHITE, char_size, 1);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	b298      	uxth	r0, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <displayClock+0x12c>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	e000      	b.n	8003de6 <displayClock+0x12e>
 8003de4:	220c      	movs	r2, #12
 8003de6:	2301      	movs	r3, #1
 8003de8:	9303      	str	r3, [sp, #12]
 8003dea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dee:	9302      	str	r3, [sp, #8]
 8003df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f7fd ffe4 	bl	8001dc8 <lcdShowIntNumCenter>
    for (int i = 0; i < 12; i++)
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	3301      	adds	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	2b0b      	cmp	r3, #11
 8003e0a:	f77f af75 	ble.w	8003cf8 <displayClock+0x40>
    }
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3728      	adds	r7, #40	@ 0x28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1a:	bf00      	nop
 8003e1c:	f3af 8000 	nop.w
 8003e20:	a2529d39 	.word	0xa2529d39
 8003e24:	3f91df46 	.word	0x3f91df46

08003e28 <displaySecClockwise>:
 * @param *second, *minute a pointer to variable store time value
 * @param color color of clockwise
 * @return float angle of clockwise
 */
float displaySecClockwise(int x_coor, int y_coor, int length, const uint8_t *second, uint16_t color)
{
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	b08b      	sub	sp, #44	@ 0x2c
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	6178      	str	r0, [r7, #20]
 8003e32:	6139      	str	r1, [r7, #16]
 8003e34:	60fa      	str	r2, [r7, #12]
 8003e36:	60bb      	str	r3, [r7, #8]
	static float angle_sec;
	int x, y;

    x = x_coor + (length) * sin(angle_sec);
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7fc fb17 	bl	800046c <__aeabi_i2d>
 8003e3e:	4682      	mov	sl, r0
 8003e40:	468b      	mov	fp, r1
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7fc fb12 	bl	800046c <__aeabi_i2d>
 8003e48:	e9c7 0100 	strd	r0, r1, [r7]
 8003e4c:	4b72      	ldr	r3, [pc, #456]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc fb1d 	bl	8000490 <__aeabi_f2d>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	ec43 2b10 	vmov	d0, r2, r3
 8003e5e:	f006 f917 	bl	800a090 <sin>
 8003e62:	ec53 2b10 	vmov	r2, r3, d0
 8003e66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e6a:	f7fc fb69 	bl	8000540 <__aeabi_dmul>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4650      	mov	r0, sl
 8003e74:	4659      	mov	r1, fp
 8003e76:	f7fc f9ad 	bl	80001d4 <__adddf3>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	f7fc fdf7 	bl	8000a74 <__aeabi_d2iz>
 8003e86:	4603      	mov	r3, r0
 8003e88:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_sec);
 8003e8a:	6938      	ldr	r0, [r7, #16]
 8003e8c:	f7fc faee 	bl	800046c <__aeabi_i2d>
 8003e90:	4682      	mov	sl, r0
 8003e92:	468b      	mov	fp, r1
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7fc fae9 	bl	800046c <__aeabi_i2d>
 8003e9a:	e9c7 0100 	strd	r0, r1, [r7]
 8003e9e:	4b5e      	ldr	r3, [pc, #376]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc faf4 	bl	8000490 <__aeabi_f2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	ec43 2b10 	vmov	d0, r2, r3
 8003eb0:	f006 f89a 	bl	8009fe8 <cos>
 8003eb4:	ec53 2b10 	vmov	r2, r3, d0
 8003eb8:	4690      	mov	r8, r2
 8003eba:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec6:	f7fc fb3b 	bl	8000540 <__aeabi_dmul>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4650      	mov	r0, sl
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	f7fc f97f 	bl	80001d4 <__adddf3>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fc fdc9 	bl	8000a74 <__aeabi_d2iz>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	b298      	uxth	r0, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	b299      	uxth	r1, r3
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003efa:	9600      	str	r6, [sp, #0]
 8003efc:	f7fd fdf3 	bl	8001ae6 <lcdDrawLine>

    angle_sec = (*second * 6) * (PI / 180);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc faac 	bl	800046c <__aeabi_i2d>
 8003f14:	a33e      	add	r3, pc, #248	@ (adr r3, 8004010 <displaySecClockwise+0x1e8>)
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f7fc fb11 	bl	8000540 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7fc fded 	bl	8000b04 <__aeabi_d2f>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003f2e:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_sec);
 8003f30:	6978      	ldr	r0, [r7, #20]
 8003f32:	f7fc fa9b 	bl	800046c <__aeabi_i2d>
 8003f36:	4680      	mov	r8, r0
 8003f38:	4689      	mov	r9, r1
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7fc fa96 	bl	800046c <__aeabi_i2d>
 8003f40:	4682      	mov	sl, r0
 8003f42:	468b      	mov	fp, r1
 8003f44:	4b34      	ldr	r3, [pc, #208]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc faa1 	bl	8000490 <__aeabi_f2d>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	ec43 2b10 	vmov	d0, r2, r3
 8003f56:	f006 f89b 	bl	800a090 <sin>
 8003f5a:	ec53 2b10 	vmov	r2, r3, d0
 8003f5e:	4650      	mov	r0, sl
 8003f60:	4659      	mov	r1, fp
 8003f62:	f7fc faed 	bl	8000540 <__aeabi_dmul>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	f7fc f931 	bl	80001d4 <__adddf3>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fd7b 	bl	8000a74 <__aeabi_d2iz>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_sec);
 8003f82:	6938      	ldr	r0, [r7, #16]
 8003f84:	f7fc fa72 	bl	800046c <__aeabi_i2d>
 8003f88:	4680      	mov	r8, r0
 8003f8a:	4689      	mov	r9, r1
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7fc fa6d 	bl	800046c <__aeabi_i2d>
 8003f92:	4682      	mov	sl, r0
 8003f94:	468b      	mov	fp, r1
 8003f96:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fa78 	bl	8000490 <__aeabi_f2d>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	ec43 2b10 	vmov	d0, r2, r3
 8003fa8:	f006 f81e 	bl	8009fe8 <cos>
 8003fac:	ec53 2b10 	vmov	r2, r3, d0
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	4650      	mov	r0, sl
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	f7fc fabf 	bl	8000540 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	4649      	mov	r1, r9
 8003fca:	f7fc f903 	bl	80001d4 <__adddf3>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fc fd4d 	bl	8000a74 <__aeabi_d2iz>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	b298      	uxth	r0, r3
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	b299      	uxth	r1, r3
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	b29c      	uxth	r4, r3
 8003fee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	f7fd fd76 	bl	8001ae6 <lcdDrawLine>

	return angle_sec;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <displaySecClockwise+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	ee07 3a90 	vmov	s15, r3
}
 8004002:	eeb0 0a67 	vmov.f32	s0, s15
 8004006:	3724      	adds	r7, #36	@ 0x24
 8004008:	46bd      	mov	sp, r7
 800400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400e:	bf00      	nop
 8004010:	a2529d39 	.word	0xa2529d39
 8004014:	3f91df46 	.word	0x3f91df46
 8004018:	20000140 	.word	0x20000140
 800401c:	00000000 	.word	0x00000000

08004020 <displayMinClockwise>:
float displayMinClockwise(int x_coor, int y_coor, int length, const uint8_t *second, const uint8_t *minute, uint16_t color)
{
 8004020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004024:	b08b      	sub	sp, #44	@ 0x2c
 8004026:	af02      	add	r7, sp, #8
 8004028:	6178      	str	r0, [r7, #20]
 800402a:	6139      	str	r1, [r7, #16]
 800402c:	60fa      	str	r2, [r7, #12]
 800402e:	60bb      	str	r3, [r7, #8]
	static float angle_min;
	int x, y;

	x = x_coor + (length) * sin(angle_min);
 8004030:	6978      	ldr	r0, [r7, #20]
 8004032:	f7fc fa1b 	bl	800046c <__aeabi_i2d>
 8004036:	4682      	mov	sl, r0
 8004038:	468b      	mov	fp, r1
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7fc fa16 	bl	800046c <__aeabi_i2d>
 8004040:	e9c7 0100 	strd	r0, r1, [r7]
 8004044:	4b80      	ldr	r3, [pc, #512]	@ (8004248 <displayMinClockwise+0x228>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa21 	bl	8000490 <__aeabi_f2d>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	ec43 2b10 	vmov	d0, r2, r3
 8004056:	f006 f81b 	bl	800a090 <sin>
 800405a:	ec53 2b10 	vmov	r2, r3, d0
 800405e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004062:	f7fc fa6d 	bl	8000540 <__aeabi_dmul>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4650      	mov	r0, sl
 800406c:	4659      	mov	r1, fp
 800406e:	f7fc f8b1 	bl	80001d4 <__adddf3>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f7fc fcfb 	bl	8000a74 <__aeabi_d2iz>
 800407e:	4603      	mov	r3, r0
 8004080:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_min);
 8004082:	6938      	ldr	r0, [r7, #16]
 8004084:	f7fc f9f2 	bl	800046c <__aeabi_i2d>
 8004088:	4682      	mov	sl, r0
 800408a:	468b      	mov	fp, r1
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7fc f9ed 	bl	800046c <__aeabi_i2d>
 8004092:	e9c7 0100 	strd	r0, r1, [r7]
 8004096:	4b6c      	ldr	r3, [pc, #432]	@ (8004248 <displayMinClockwise+0x228>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9f8 	bl	8000490 <__aeabi_f2d>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	ec43 2b10 	vmov	d0, r2, r3
 80040a8:	f005 ff9e 	bl	8009fe8 <cos>
 80040ac:	ec53 2b10 	vmov	r2, r3, d0
 80040b0:	4690      	mov	r8, r2
 80040b2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80040b6:	4642      	mov	r2, r8
 80040b8:	464b      	mov	r3, r9
 80040ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040be:	f7fc fa3f 	bl	8000540 <__aeabi_dmul>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4650      	mov	r0, sl
 80040c8:	4659      	mov	r1, fp
 80040ca:	f7fc f883 	bl	80001d4 <__adddf3>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	f7fc fccd 	bl	8000a74 <__aeabi_d2iz>
 80040da:	4603      	mov	r3, r0
 80040dc:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	b298      	uxth	r0, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	b299      	uxth	r1, r3
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 80040f2:	9600      	str	r6, [sp, #0]
 80040f4:	f7fd fcf7 	bl	8001ae6 <lcdDrawLine>

    angle_min = ((*minute + *second / 60.0) * 6) * (PI / 180);
 80040f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc f9b5 	bl	800046c <__aeabi_i2d>
 8004102:	4680      	mov	r8, r0
 8004104:	4689      	mov	r9, r1
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc f9ae 	bl	800046c <__aeabi_i2d>
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b4d      	ldr	r3, [pc, #308]	@ (800424c <displayMinClockwise+0x22c>)
 8004116:	f7fc fb3d 	bl	8000794 <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4640      	mov	r0, r8
 8004120:	4649      	mov	r1, r9
 8004122:	f7fc f857 	bl	80001d4 <__adddf3>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	4b47      	ldr	r3, [pc, #284]	@ (8004250 <displayMinClockwise+0x230>)
 8004134:	f7fc fa04 	bl	8000540 <__aeabi_dmul>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	a33f      	add	r3, pc, #252	@ (adr r3, 8004240 <displayMinClockwise+0x220>)
 8004142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004146:	f7fc f9fb 	bl	8000540 <__aeabi_dmul>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	f7fc fcd7 	bl	8000b04 <__aeabi_d2f>
 8004156:	4603      	mov	r3, r0
 8004158:	4a3b      	ldr	r2, [pc, #236]	@ (8004248 <displayMinClockwise+0x228>)
 800415a:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_min);
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f7fc f985 	bl	800046c <__aeabi_i2d>
 8004162:	4680      	mov	r8, r0
 8004164:	4689      	mov	r9, r1
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7fc f980 	bl	800046c <__aeabi_i2d>
 800416c:	4682      	mov	sl, r0
 800416e:	468b      	mov	fp, r1
 8004170:	4b35      	ldr	r3, [pc, #212]	@ (8004248 <displayMinClockwise+0x228>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc f98b 	bl	8000490 <__aeabi_f2d>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	ec43 2b10 	vmov	d0, r2, r3
 8004182:	f005 ff85 	bl	800a090 <sin>
 8004186:	ec53 2b10 	vmov	r2, r3, d0
 800418a:	4650      	mov	r0, sl
 800418c:	4659      	mov	r1, fp
 800418e:	f7fc f9d7 	bl	8000540 <__aeabi_dmul>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f7fc f81b 	bl	80001d4 <__adddf3>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	f7fc fc65 	bl	8000a74 <__aeabi_d2iz>
 80041aa:	4603      	mov	r3, r0
 80041ac:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_min);
 80041ae:	6938      	ldr	r0, [r7, #16]
 80041b0:	f7fc f95c 	bl	800046c <__aeabi_i2d>
 80041b4:	4680      	mov	r8, r0
 80041b6:	4689      	mov	r9, r1
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7fc f957 	bl	800046c <__aeabi_i2d>
 80041be:	4682      	mov	sl, r0
 80041c0:	468b      	mov	fp, r1
 80041c2:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <displayMinClockwise+0x228>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc f962 	bl	8000490 <__aeabi_f2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	ec43 2b10 	vmov	d0, r2, r3
 80041d4:	f005 ff08 	bl	8009fe8 <cos>
 80041d8:	ec53 2b10 	vmov	r2, r3, d0
 80041dc:	4614      	mov	r4, r2
 80041de:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	4650      	mov	r0, sl
 80041e8:	4659      	mov	r1, fp
 80041ea:	f7fc f9a9 	bl	8000540 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4640      	mov	r0, r8
 80041f4:	4649      	mov	r1, r9
 80041f6:	f7fb ffed 	bl	80001d4 <__adddf3>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	f7fc fc37 	bl	8000a74 <__aeabi_d2iz>
 8004206:	4603      	mov	r3, r0
 8004208:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	b298      	uxth	r0, r3
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	b299      	uxth	r1, r3
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	b29a      	uxth	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	b29c      	uxth	r4, r3
 800421a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4623      	mov	r3, r4
 8004222:	f7fd fc60 	bl	8001ae6 <lcdDrawLine>

    return angle_min;
 8004226:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <displayMinClockwise+0x228>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	ee07 3a90 	vmov	s15, r3
}
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	3724      	adds	r7, #36	@ 0x24
 8004234:	46bd      	mov	sp, r7
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	a2529d39 	.word	0xa2529d39
 8004244:	3f91df46 	.word	0x3f91df46
 8004248:	20000144 	.word	0x20000144
 800424c:	404e0000 	.word	0x404e0000
 8004250:	40180000 	.word	0x40180000
 8004254:	00000000 	.word	0x00000000

08004258 <displayHourClockwise>:
float displayHourClockwise(int x_coor, int y_coor, int length, const uint8_t *minute, const uint8_t *hour, uint16_t color)
{
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425c:	b08b      	sub	sp, #44	@ 0x2c
 800425e:	af02      	add	r7, sp, #8
 8004260:	6178      	str	r0, [r7, #20]
 8004262:	6139      	str	r1, [r7, #16]
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	60bb      	str	r3, [r7, #8]
	static float angle_hour;
	int x, y;

	x = x_coor + (length) * sin(angle_hour);
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f7fc f8ff 	bl	800046c <__aeabi_i2d>
 800426e:	4682      	mov	sl, r0
 8004270:	468b      	mov	fp, r1
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7fc f8fa 	bl	800046c <__aeabi_i2d>
 8004278:	e9c7 0100 	strd	r0, r1, [r7]
 800427c:	4b84      	ldr	r3, [pc, #528]	@ (8004490 <displayHourClockwise+0x238>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc f905 	bl	8000490 <__aeabi_f2d>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	ec43 2b10 	vmov	d0, r2, r3
 800428e:	f005 feff 	bl	800a090 <sin>
 8004292:	ec53 2b10 	vmov	r2, r3, d0
 8004296:	e9d7 0100 	ldrd	r0, r1, [r7]
 800429a:	f7fc f951 	bl	8000540 <__aeabi_dmul>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4650      	mov	r0, sl
 80042a4:	4659      	mov	r1, fp
 80042a6:	f7fb ff95 	bl	80001d4 <__adddf3>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fc fbdf 	bl	8000a74 <__aeabi_d2iz>
 80042b6:	4603      	mov	r3, r0
 80042b8:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_hour);
 80042ba:	6938      	ldr	r0, [r7, #16]
 80042bc:	f7fc f8d6 	bl	800046c <__aeabi_i2d>
 80042c0:	4682      	mov	sl, r0
 80042c2:	468b      	mov	fp, r1
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7fc f8d1 	bl	800046c <__aeabi_i2d>
 80042ca:	e9c7 0100 	strd	r0, r1, [r7]
 80042ce:	4b70      	ldr	r3, [pc, #448]	@ (8004490 <displayHourClockwise+0x238>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc f8dc 	bl	8000490 <__aeabi_f2d>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	ec43 2b10 	vmov	d0, r2, r3
 80042e0:	f005 fe82 	bl	8009fe8 <cos>
 80042e4:	ec53 2b10 	vmov	r2, r3, d0
 80042e8:	4690      	mov	r8, r2
 80042ea:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80042ee:	4642      	mov	r2, r8
 80042f0:	464b      	mov	r3, r9
 80042f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042f6:	f7fc f923 	bl	8000540 <__aeabi_dmul>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4650      	mov	r0, sl
 8004300:	4659      	mov	r1, fp
 8004302:	f7fb ff67 	bl	80001d4 <__adddf3>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	f7fc fbb1 	bl	8000a74 <__aeabi_d2iz>
 8004312:	4603      	mov	r3, r0
 8004314:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	b298      	uxth	r0, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	b299      	uxth	r1, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	b29a      	uxth	r2, r3
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800432a:	9600      	str	r6, [sp, #0]
 800432c:	f7fd fbdb 	bl	8001ae6 <lcdDrawLine>

    angle_hour = ((*hour % 12 + *minute / 60.0) * 30) * (PI / 180); // 360 degrees / 12 hours = 30 degrees per hour
 8004330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	4b57      	ldr	r3, [pc, #348]	@ (8004494 <displayHourClockwise+0x23c>)
 8004336:	fba3 1302 	umull	r1, r3, r3, r2
 800433a:	08d9      	lsrs	r1, r3, #3
 800433c:	460b      	mov	r3, r1
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	440b      	add	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f88f 	bl	800046c <__aeabi_i2d>
 800434e:	4680      	mov	r8, r0
 8004350:	4689      	mov	r9, r1
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc f888 	bl	800046c <__aeabi_i2d>
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	4b4d      	ldr	r3, [pc, #308]	@ (8004498 <displayHourClockwise+0x240>)
 8004362:	f7fc fa17 	bl	8000794 <__aeabi_ddiv>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4640      	mov	r0, r8
 800436c:	4649      	mov	r1, r9
 800436e:	f7fb ff31 	bl	80001d4 <__adddf3>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	4b47      	ldr	r3, [pc, #284]	@ (800449c <displayHourClockwise+0x244>)
 8004380:	f7fc f8de 	bl	8000540 <__aeabi_dmul>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004488 <displayHourClockwise+0x230>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fc f8d5 	bl	8000540 <__aeabi_dmul>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4610      	mov	r0, r2
 800439c:	4619      	mov	r1, r3
 800439e:	f7fc fbb1 	bl	8000b04 <__aeabi_d2f>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a3a      	ldr	r2, [pc, #232]	@ (8004490 <displayHourClockwise+0x238>)
 80043a6:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_hour);
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f7fc f85f 	bl	800046c <__aeabi_i2d>
 80043ae:	4680      	mov	r8, r0
 80043b0:	4689      	mov	r9, r1
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7fc f85a 	bl	800046c <__aeabi_i2d>
 80043b8:	4682      	mov	sl, r0
 80043ba:	468b      	mov	fp, r1
 80043bc:	4b34      	ldr	r3, [pc, #208]	@ (8004490 <displayHourClockwise+0x238>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc f865 	bl	8000490 <__aeabi_f2d>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	ec43 2b10 	vmov	d0, r2, r3
 80043ce:	f005 fe5f 	bl	800a090 <sin>
 80043d2:	ec53 2b10 	vmov	r2, r3, d0
 80043d6:	4650      	mov	r0, sl
 80043d8:	4659      	mov	r1, fp
 80043da:	f7fc f8b1 	bl	8000540 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4640      	mov	r0, r8
 80043e4:	4649      	mov	r1, r9
 80043e6:	f7fb fef5 	bl	80001d4 <__adddf3>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	f7fc fb3f 	bl	8000a74 <__aeabi_d2iz>
 80043f6:	4603      	mov	r3, r0
 80043f8:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_hour);
 80043fa:	6938      	ldr	r0, [r7, #16]
 80043fc:	f7fc f836 	bl	800046c <__aeabi_i2d>
 8004400:	4680      	mov	r8, r0
 8004402:	4689      	mov	r9, r1
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7fc f831 	bl	800046c <__aeabi_i2d>
 800440a:	4682      	mov	sl, r0
 800440c:	468b      	mov	fp, r1
 800440e:	4b20      	ldr	r3, [pc, #128]	@ (8004490 <displayHourClockwise+0x238>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f83c 	bl	8000490 <__aeabi_f2d>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	ec43 2b10 	vmov	d0, r2, r3
 8004420:	f005 fde2 	bl	8009fe8 <cos>
 8004424:	ec53 2b10 	vmov	r2, r3, d0
 8004428:	4614      	mov	r4, r2
 800442a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	4650      	mov	r0, sl
 8004434:	4659      	mov	r1, fp
 8004436:	f7fc f883 	bl	8000540 <__aeabi_dmul>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4640      	mov	r0, r8
 8004440:	4649      	mov	r1, r9
 8004442:	f7fb fec7 	bl	80001d4 <__adddf3>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f7fc fb11 	bl	8000a74 <__aeabi_d2iz>
 8004452:	4603      	mov	r3, r0
 8004454:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	b298      	uxth	r0, r3
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	b299      	uxth	r1, r3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	b29a      	uxth	r2, r3
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	b29c      	uxth	r4, r3
 8004466:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4623      	mov	r3, r4
 800446e:	f7fd fb3a 	bl	8001ae6 <lcdDrawLine>

    return angle_hour;
 8004472:	4b07      	ldr	r3, [pc, #28]	@ (8004490 <displayHourClockwise+0x238>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	ee07 3a90 	vmov	s15, r3
}
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	3724      	adds	r7, #36	@ 0x24
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	bf00      	nop
 8004488:	a2529d39 	.word	0xa2529d39
 800448c:	3f91df46 	.word	0x3f91df46
 8004490:	20000148 	.word	0x20000148
 8004494:	aaaaaaab 	.word	0xaaaaaaab
 8004498:	404e0000 	.word	0x404e0000
 800449c:	403e0000 	.word	0x403e0000

080044a0 <displayTime>:

void displayTime(int x_coor, int y_coor, const uint8_t *second, const uint8_t *minute, const uint8_t *hour,
		uint8_t char_size, uint16_t color_sec, uint16_t color_min, uint16_t color_hour)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *hour, 2, color_hour, WHITE, char_size, 0);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	7f3b      	ldrb	r3, [r7, #28]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	b298      	uxth	r0, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	b299      	uxth	r1, r3
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	2300      	movs	r3, #0
 80044ca:	9303      	str	r3, [sp, #12]
 80044cc:	7f3b      	ldrb	r3, [r7, #28]
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2302      	movs	r3, #2
 80044dc:	f7fd fc74 	bl	8001dc8 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor, y_coor, *minute, 2, color_min, WHITE, char_size, 0);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	b298      	uxth	r0, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	b299      	uxth	r1, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	2300      	movs	r3, #0
 80044f0:	9303      	str	r3, [sp, #12]
 80044f2:	7f3b      	ldrb	r3, [r7, #28]
 80044f4:	9302      	str	r3, [sp, #8]
 80044f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2302      	movs	r3, #2
 8004502:	f7fd fc61 	bl	8001dc8 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor + char_size * 2 , y_coor, *second, 2, color_sec, WHITE, char_size, 0);
 8004506:	7f3b      	ldrb	r3, [r7, #28]
 8004508:	b29b      	uxth	r3, r3
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	b29b      	uxth	r3, r3
 8004512:	4413      	add	r3, r2
 8004514:	b298      	uxth	r0, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	b299      	uxth	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	2300      	movs	r3, #0
 8004522:	9303      	str	r3, [sp, #12]
 8004524:	7f3b      	ldrb	r3, [r7, #28]
 8004526:	9302      	str	r3, [sp, #8]
 8004528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	8c3b      	ldrh	r3, [r7, #32]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2302      	movs	r3, #2
 8004534:	f7fd fc48 	bl	8001dc8 <lcdShowIntNumCenter>

	lcdShowStringCenter(x_coor + char_size, y_coor, ":", BLACK, WHITE, char_size, 1);
 8004538:	7f3b      	ldrb	r3, [r7, #28]
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b29b      	uxth	r3, r3
 8004540:	4413      	add	r3, r2
 8004542:	b298      	uxth	r0, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	b299      	uxth	r1, r3
 8004548:	2301      	movs	r3, #1
 800454a:	9302      	str	r3, [sp, #8]
 800454c:	7f3b      	ldrb	r3, [r7, #28]
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	2300      	movs	r3, #0
 8004558:	4a0f      	ldr	r2, [pc, #60]	@ (8004598 <displayTime+0xf8>)
 800455a:	f7fd ffa9 	bl	80024b0 <lcdShowStringCenter>
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, ":", BLACK, WHITE, char_size, 1);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	b29a      	uxth	r2, r3
 8004562:	7f3b      	ldrb	r3, [r7, #28]
 8004564:	b29b      	uxth	r3, r3
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	b29a      	uxth	r2, r3
 800456e:	7f3b      	ldrb	r3, [r7, #28]
 8004570:	b29b      	uxth	r3, r3
 8004572:	4413      	add	r3, r2
 8004574:	b298      	uxth	r0, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	b299      	uxth	r1, r3
 800457a:	2301      	movs	r3, #1
 800457c:	9302      	str	r3, [sp, #8]
 800457e:	7f3b      	ldrb	r3, [r7, #28]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2300      	movs	r3, #0
 800458a:	4a03      	ldr	r2, [pc, #12]	@ (8004598 <displayTime+0xf8>)
 800458c:	f7fd ff90 	bl	80024b0 <lcdShowStringCenter>
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	0800b108 	.word	0x0800b108

0800459c <displayDate>:

void displayDate(int x_coor, int y_coor, const uint8_t *date, const uint8_t *month, const uint16_t *year,
		uint8_t char_size, uint16_t color_date, uint16_t color_month, uint16_t color_year)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af04      	add	r7, sp, #16
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *date, 2, color_date, WHITE, char_size, 0);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	b298      	uxth	r0, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	b299      	uxth	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	9303      	str	r3, [sp, #12]
 80045ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045ce:	9302      	str	r3, [sp, #8]
 80045d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045d4:	9301      	str	r3, [sp, #4]
 80045d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80045d8:	9300      	str	r3, [sp, #0]
 80045da:	2302      	movs	r3, #2
 80045dc:	f7fd fbf4 	bl	8001dc8 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor, y_coor, *month, 2, color_month, WHITE, char_size, 0);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	b298      	uxth	r0, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	b299      	uxth	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	9303      	str	r3, [sp, #12]
 80045f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2302      	movs	r3, #2
 8004604:	f7fd fbe0 	bl	8001dc8 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor + char_size * 2 + char_size / 2.0, y_coor, *year, 4, color_year, WHITE, char_size, 0);
 8004608:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800460c:	005a      	lsls	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	4618      	mov	r0, r3
 8004614:	f7fb ff2a 	bl	800046c <__aeabi_i2d>
 8004618:	4604      	mov	r4, r0
 800461a:	460d      	mov	r5, r1
 800461c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb ff23 	bl	800046c <__aeabi_i2d>
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800462e:	f7fc f8b1 	bl	8000794 <__aeabi_ddiv>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fb fdcb 	bl	80001d4 <__adddf3>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	f7fc fa3d 	bl	8000ac4 <__aeabi_d2uiz>
 800464a:	4603      	mov	r3, r0
 800464c:	b298      	uxth	r0, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	b299      	uxth	r1, r3
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	881a      	ldrh	r2, [r3, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	9303      	str	r3, [sp, #12]
 800465a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2304      	movs	r3, #4
 800466c:	f7fd fbac 	bl	8001dc8 <lcdShowIntNumCenter>

	lcdShowStringCenter(x_coor + char_size, y_coor, "/", color_month, WHITE, char_size, 1);
 8004670:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4413      	add	r3, r2
 800467c:	b298      	uxth	r0, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	b299      	uxth	r1, r3
 8004682:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004684:	2301      	movs	r3, #1
 8004686:	9302      	str	r3, [sp, #8]
 8004688:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	4a12      	ldr	r2, [pc, #72]	@ (80046e0 <displayDate+0x144>)
 8004698:	f7fd ff0a 	bl	80024b0 <lcdShowStringCenter>
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, "/", color_month, WHITE, char_size, 1);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	b29a      	uxth	r2, r3
 80046a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	b298      	uxth	r0, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b299      	uxth	r1, r3
 80046bc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80046be:	2301      	movs	r3, #1
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	4a03      	ldr	r2, [pc, #12]	@ (80046e0 <displayDate+0x144>)
 80046d2:	f7fd feed 	bl	80024b0 <lcdShowStringCenter>
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bdb0      	pop	{r4, r5, r7, pc}
 80046de:	bf00      	nop
 80046e0:	0800b10c 	.word	0x0800b10c

080046e4 <displayDay>:
{
	lcdShowFloatNum(x_coor, y_coor, temperature, 4, color_temp, WHITE, char_size, 0);
	return;
}
void displayDay(int x_coor, int y_coor, const uint8_t *day, uint8_t char_size, uint16_t color_day)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af04      	add	r7, sp, #16
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	70fb      	strb	r3, [r7, #3]
	switch (*day)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	f200 8089 	bhi.w	8004810 <displayDay+0x12c>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <displayDay+0x20>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004721 	.word	0x08004721
 8004708:	08004743 	.word	0x08004743
 800470c:	08004765 	.word	0x08004765
 8004710:	08004787 	.word	0x08004787
 8004714:	080047a9 	.word	0x080047a9
 8004718:	080047cb 	.word	0x080047cb
 800471c:	080047ed 	.word	0x080047ed
	{
		case 1:
		{
			lcdShowString(x_coor, y_coor, "Sunday   ", color_day, WHITE, char_size, 0);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	b298      	uxth	r0, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	b299      	uxth	r1, r3
 8004728:	8b3a      	ldrh	r2, [r7, #24]
 800472a:	2300      	movs	r3, #0
 800472c:	9302      	str	r3, [sp, #8]
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	4a37      	ldr	r2, [pc, #220]	@ (8004818 <displayDay+0x134>)
 800473c:	f7fd fe54 	bl	80023e8 <lcdShowString>
			break;
 8004740:	e065      	b.n	800480e <displayDay+0x12a>
		}
		case 2:
		{
			lcdShowString(x_coor, y_coor, "Monday   ", color_day, WHITE, char_size, 0);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b298      	uxth	r0, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	b299      	uxth	r1, r3
 800474a:	8b3a      	ldrh	r2, [r7, #24]
 800474c:	2300      	movs	r3, #0
 800474e:	9302      	str	r3, [sp, #8]
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	4613      	mov	r3, r2
 800475c:	4a2f      	ldr	r2, [pc, #188]	@ (800481c <displayDay+0x138>)
 800475e:	f7fd fe43 	bl	80023e8 <lcdShowString>
			break;
 8004762:	e054      	b.n	800480e <displayDay+0x12a>
		}
		case 3:
		{
			lcdShowString(x_coor, y_coor, "Tuesday  ", color_day, WHITE, char_size, 0);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	b298      	uxth	r0, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	b299      	uxth	r1, r3
 800476c:	8b3a      	ldrh	r2, [r7, #24]
 800476e:	2300      	movs	r3, #0
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	4a28      	ldr	r2, [pc, #160]	@ (8004820 <displayDay+0x13c>)
 8004780:	f7fd fe32 	bl	80023e8 <lcdShowString>
			break;
 8004784:	e043      	b.n	800480e <displayDay+0x12a>
		}
		case 4:
		{
			lcdShowString(x_coor, y_coor, "Wednesday", color_day, WHITE, char_size, 0);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	b298      	uxth	r0, r3
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	b299      	uxth	r1, r3
 800478e:	8b3a      	ldrh	r2, [r7, #24]
 8004790:	2300      	movs	r3, #0
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <displayDay+0x140>)
 80047a2:	f7fd fe21 	bl	80023e8 <lcdShowString>
			break;
 80047a6:	e032      	b.n	800480e <displayDay+0x12a>
		}
		case 5:
		{
			lcdShowString(x_coor, y_coor, "Thursday ", color_day, WHITE, char_size, 0);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	b298      	uxth	r0, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	b299      	uxth	r1, r3
 80047b0:	8b3a      	ldrh	r2, [r7, #24]
 80047b2:	2300      	movs	r3, #0
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <displayDay+0x144>)
 80047c4:	f7fd fe10 	bl	80023e8 <lcdShowString>
			break;
 80047c8:	e021      	b.n	800480e <displayDay+0x12a>
		}
		case 6:
		{
			lcdShowString(x_coor, y_coor, "Friday", color_day, WHITE, char_size, 0);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	b298      	uxth	r0, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	b299      	uxth	r1, r3
 80047d2:	8b3a      	ldrh	r2, [r7, #24]
 80047d4:	2300      	movs	r3, #0
 80047d6:	9302      	str	r3, [sp, #8]
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	9301      	str	r3, [sp, #4]
 80047dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	4a11      	ldr	r2, [pc, #68]	@ (800482c <displayDay+0x148>)
 80047e6:	f7fd fdff 	bl	80023e8 <lcdShowString>
			break;
 80047ea:	e010      	b.n	800480e <displayDay+0x12a>
		}
		case 7:
		{
			lcdShowString(x_coor, y_coor, "Saturday", color_day, WHITE, char_size, 0);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	b298      	uxth	r0, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	b299      	uxth	r1, r3
 80047f4:	8b3a      	ldrh	r2, [r7, #24]
 80047f6:	2300      	movs	r3, #0
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	4a0a      	ldr	r2, [pc, #40]	@ (8004830 <displayDay+0x14c>)
 8004808:	f7fd fdee 	bl	80023e8 <lcdShowString>
			break;
 800480c:	bf00      	nop
		}
	}
	return;
 800480e:	bf00      	nop
 8004810:	bf00      	nop
}
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	0800b110 	.word	0x0800b110
 800481c:	0800b11c 	.word	0x0800b11c
 8004820:	0800b128 	.word	0x0800b128
 8004824:	0800b134 	.word	0x0800b134
 8004828:	0800b140 	.word	0x0800b140
 800482c:	0800b14c 	.word	0x0800b14c
 8004830:	0800b154 	.word	0x0800b154

08004834 <displayTimeLed7Seg>:

void displayTimeLed7Seg(const uint8_t *second, const uint8_t *minute, const uint8_t *hour)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	if(((*second / 10) >> 0) & 0x01)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4a3a      	ldr	r2, [pc, #232]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	08db      	lsrs	r3, r3, #3
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <displayTimeLed7Seg+0x2a>
	{
		led7SegDebugTurnOn(6);
 8004856:	2006      	movs	r0, #6
 8004858:	f7fd ff64 	bl	8002724 <led7SegDebugTurnOn>
 800485c:	e002      	b.n	8004864 <displayTimeLed7Seg+0x30>
	}
	else
	{
		led7SegDebugTurnOff(6);
 800485e:	2006      	movs	r0, #6
 8004860:	f7fd ff82 	bl	8002768 <led7SegDebugTurnOff>
	}
	if(((*second / 10) >> 1) & 0x01)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4a31      	ldr	r2, [pc, #196]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <displayTimeLed7Seg+0x52>
	{
		led7SegDebugTurnOn(7);
 800487e:	2007      	movs	r0, #7
 8004880:	f7fd ff50 	bl	8002724 <led7SegDebugTurnOn>
 8004884:	e002      	b.n	800488c <displayTimeLed7Seg+0x58>
	}
	else
	{
		led7SegDebugTurnOff(7);
 8004886:	2007      	movs	r0, #7
 8004888:	f7fd ff6e 	bl	8002768 <led7SegDebugTurnOff>
	}
	if(((*second / 10) >> 2) & 0x01)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4a27      	ldr	r2, [pc, #156]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	089b      	lsrs	r3, r3, #2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <displayTimeLed7Seg+0x7a>
	{
		led7SegDebugTurnOn(8);
 80048a6:	2008      	movs	r0, #8
 80048a8:	f7fd ff3c 	bl	8002724 <led7SegDebugTurnOn>
 80048ac:	e002      	b.n	80048b4 <displayTimeLed7Seg+0x80>
	}
	else
	{
		led7SegDebugTurnOff(8);
 80048ae:	2008      	movs	r0, #8
 80048b0:	f7fd ff5a 	bl	8002768 <led7SegDebugTurnOff>
	}

	led7SegSetDigit(*hour / 10, 0, 0);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	08db      	lsrs	r3, r3, #3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fd feda 	bl	8002680 <led7SegSetDigit>
	led7SegSetDigit(*hour % 10, 1, 0);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	08d9      	lsrs	r1, r3, #3
 80048d8:	460b      	mov	r3, r1
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2200      	movs	r2, #0
 80048e6:	2101      	movs	r1, #1
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fd fec9 	bl	8002680 <led7SegSetDigit>

	led7SegSetDigit(*minute / 10, 2, 0);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	08db      	lsrs	r3, r3, #3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2200      	movs	r2, #0
 80048fe:	2102      	movs	r1, #2
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd febd 	bl	8002680 <led7SegSetDigit>
	led7SegSetDigit(*minute % 10, 3, 0);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <displayTimeLed7Seg+0xfc>)
 800490c:	fba3 1302 	umull	r1, r3, r3, r2
 8004910:	08d9      	lsrs	r1, r3, #3
 8004912:	460b      	mov	r3, r1
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2200      	movs	r2, #0
 8004920:	2103      	movs	r1, #3
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd feac 	bl	8002680 <led7SegSetDigit>

	return;
 8004928:	bf00      	nop
}
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	cccccccd 	.word	0xcccccccd

08004934 <increaseSec>:

void increaseSec()
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
    if (set_time.second < 59)
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <increaseSec+0x64>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b3a      	cmp	r3, #58	@ 0x3a
 800493e:	d806      	bhi.n	800494e <increaseSec+0x1a>
    {
        set_time.second += 1;
 8004940:	4b15      	ldr	r3, [pc, #84]	@ (8004998 <increaseSec+0x64>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	b2da      	uxtb	r2, r3
 8004948:	4b13      	ldr	r3, [pc, #76]	@ (8004998 <increaseSec+0x64>)
 800494a:	701a      	strb	r2, [r3, #0]
            {
                set_time.hour = 0;
            }
        }
    }
}
 800494c:	e01e      	b.n	800498c <increaseSec+0x58>
        set_time.second = 0;
 800494e:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <increaseSec+0x64>)
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
        if (set_time.minute < 59)
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <increaseSec+0x64>)
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b3a      	cmp	r3, #58	@ 0x3a
 800495a:	d806      	bhi.n	800496a <increaseSec+0x36>
            set_time.minute += 1;
 800495c:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <increaseSec+0x64>)
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	3301      	adds	r3, #1
 8004962:	b2da      	uxtb	r2, r3
 8004964:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <increaseSec+0x64>)
 8004966:	705a      	strb	r2, [r3, #1]
}
 8004968:	e010      	b.n	800498c <increaseSec+0x58>
            set_time.minute = 0;
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <increaseSec+0x64>)
 800496c:	2200      	movs	r2, #0
 800496e:	705a      	strb	r2, [r3, #1]
            if (set_time.hour < 23)
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <increaseSec+0x64>)
 8004972:	789b      	ldrb	r3, [r3, #2]
 8004974:	2b16      	cmp	r3, #22
 8004976:	d806      	bhi.n	8004986 <increaseSec+0x52>
                set_time.hour += 1;
 8004978:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <increaseSec+0x64>)
 800497a:	789b      	ldrb	r3, [r3, #2]
 800497c:	3301      	adds	r3, #1
 800497e:	b2da      	uxtb	r2, r3
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <increaseSec+0x64>)
 8004982:	709a      	strb	r2, [r3, #2]
}
 8004984:	e002      	b.n	800498c <increaseSec+0x58>
                set_time.hour = 0;
 8004986:	4b04      	ldr	r3, [pc, #16]	@ (8004998 <increaseSec+0x64>)
 8004988:	2200      	movs	r2, #0
 800498a:	709a      	strb	r2, [r3, #2]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <decreaseSec>:
void decreaseSec()
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
    if (set_time.second > 0)
 80049a0:	4b17      	ldr	r3, [pc, #92]	@ (8004a00 <decreaseSec+0x64>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <decreaseSec+0x1a>
    {
        set_time.second -= 1;
 80049a8:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <decreaseSec+0x64>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	4b13      	ldr	r3, [pc, #76]	@ (8004a00 <decreaseSec+0x64>)
 80049b2:	701a      	strb	r2, [r3, #0]
            {
                set_time.hour = 23;
            }
        }
    }
}
 80049b4:	e01e      	b.n	80049f4 <decreaseSec+0x58>
        set_time.second = 59;
 80049b6:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <decreaseSec+0x64>)
 80049b8:	223b      	movs	r2, #59	@ 0x3b
 80049ba:	701a      	strb	r2, [r3, #0]
        if (set_time.minute > 0)
 80049bc:	4b10      	ldr	r3, [pc, #64]	@ (8004a00 <decreaseSec+0x64>)
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <decreaseSec+0x36>
            set_time.minute -= 1;
 80049c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004a00 <decreaseSec+0x64>)
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <decreaseSec+0x64>)
 80049ce:	705a      	strb	r2, [r3, #1]
}
 80049d0:	e010      	b.n	80049f4 <decreaseSec+0x58>
            set_time.minute = 59;
 80049d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <decreaseSec+0x64>)
 80049d4:	223b      	movs	r2, #59	@ 0x3b
 80049d6:	705a      	strb	r2, [r3, #1]
            if (set_time.hour > 0)
 80049d8:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <decreaseSec+0x64>)
 80049da:	789b      	ldrb	r3, [r3, #2]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <decreaseSec+0x52>
                set_time.hour -= 1;
 80049e0:	4b07      	ldr	r3, [pc, #28]	@ (8004a00 <decreaseSec+0x64>)
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <decreaseSec+0x64>)
 80049ea:	709a      	strb	r2, [r3, #2]
}
 80049ec:	e002      	b.n	80049f4 <decreaseSec+0x58>
                set_time.hour = 23;
 80049ee:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <decreaseSec+0x64>)
 80049f0:	2217      	movs	r2, #23
 80049f2:	709a      	strb	r2, [r3, #2]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000000 	.word	0x20000000

08004a04 <increaseMin>:
void increaseMin()
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
    if (set_time.minute < 59)
 8004a08:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <increaseMin+0x48>)
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b3a      	cmp	r3, #58	@ 0x3a
 8004a0e:	d806      	bhi.n	8004a1e <increaseMin+0x1a>
    {
        set_time.minute += 1;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <increaseMin+0x48>)
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	3301      	adds	r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <increaseMin+0x48>)
 8004a1a:	705a      	strb	r2, [r3, #1]
        else
        {
            set_time.hour = 0;
        }
    }
}
 8004a1c:	e010      	b.n	8004a40 <increaseMin+0x3c>
        set_time.minute = 0;
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <increaseMin+0x48>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	705a      	strb	r2, [r3, #1]
        if (set_time.hour < 23)
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <increaseMin+0x48>)
 8004a26:	789b      	ldrb	r3, [r3, #2]
 8004a28:	2b16      	cmp	r3, #22
 8004a2a:	d806      	bhi.n	8004a3a <increaseMin+0x36>
            set_time.hour += 1;
 8004a2c:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <increaseMin+0x48>)
 8004a2e:	789b      	ldrb	r3, [r3, #2]
 8004a30:	3301      	adds	r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <increaseMin+0x48>)
 8004a36:	709a      	strb	r2, [r3, #2]
}
 8004a38:	e002      	b.n	8004a40 <increaseMin+0x3c>
            set_time.hour = 0;
 8004a3a:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <increaseMin+0x48>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	709a      	strb	r2, [r3, #2]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000000 	.word	0x20000000

08004a50 <decreaseMin>:

void decreaseMin()
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
    if (set_time.minute > 0)
 8004a54:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <decreaseMin+0x48>)
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <decreaseMin+0x1a>
    {
        set_time.minute -= 1;
 8004a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a98 <decreaseMin+0x48>)
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <decreaseMin+0x48>)
 8004a66:	705a      	strb	r2, [r3, #1]
        else
        {
            set_time.hour = 23;
        }
    }
}
 8004a68:	e010      	b.n	8004a8c <decreaseMin+0x3c>
        set_time.minute = 59;
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <decreaseMin+0x48>)
 8004a6c:	223b      	movs	r2, #59	@ 0x3b
 8004a6e:	705a      	strb	r2, [r3, #1]
        if (set_time.hour > 0)
 8004a70:	4b09      	ldr	r3, [pc, #36]	@ (8004a98 <decreaseMin+0x48>)
 8004a72:	789b      	ldrb	r3, [r3, #2]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d006      	beq.n	8004a86 <decreaseMin+0x36>
            set_time.hour -= 1;
 8004a78:	4b07      	ldr	r3, [pc, #28]	@ (8004a98 <decreaseMin+0x48>)
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <decreaseMin+0x48>)
 8004a82:	709a      	strb	r2, [r3, #2]
}
 8004a84:	e002      	b.n	8004a8c <decreaseMin+0x3c>
            set_time.hour = 23;
 8004a86:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <decreaseMin+0x48>)
 8004a88:	2217      	movs	r2, #23
 8004a8a:	709a      	strb	r2, [r3, #2]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000000 	.word	0x20000000

08004a9c <increaseHour>:

void increaseHour()
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
    if (set_time.hour < 23)
 8004aa0:	4b09      	ldr	r3, [pc, #36]	@ (8004ac8 <increaseHour+0x2c>)
 8004aa2:	789b      	ldrb	r3, [r3, #2]
 8004aa4:	2b16      	cmp	r3, #22
 8004aa6:	d806      	bhi.n	8004ab6 <increaseHour+0x1a>
    {
        set_time.hour += 1;
 8004aa8:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <increaseHour+0x2c>)
 8004aaa:	789b      	ldrb	r3, [r3, #2]
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <increaseHour+0x2c>)
 8004ab2:	709a      	strb	r2, [r3, #2]
    }
    else
    {
        set_time.hour = 0;
    }
}
 8004ab4:	e002      	b.n	8004abc <increaseHour+0x20>
        set_time.hour = 0;
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <increaseHour+0x2c>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	709a      	strb	r2, [r3, #2]
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000

08004acc <decreaseHour>:

void decreaseHour()
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
    if (set_time.hour > 0)
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <decreaseHour+0x2c>)
 8004ad2:	789b      	ldrb	r3, [r3, #2]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <decreaseHour+0x1a>
    {
        set_time.hour -= 1;
 8004ad8:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <decreaseHour+0x2c>)
 8004ada:	789b      	ldrb	r3, [r3, #2]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <decreaseHour+0x2c>)
 8004ae2:	709a      	strb	r2, [r3, #2]
    }
    else
    {
        set_time.hour = 23;
    }
}
 8004ae4:	e002      	b.n	8004aec <decreaseHour+0x20>
        set_time.hour = 23;
 8004ae6:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <decreaseHour+0x2c>)
 8004ae8:	2217      	movs	r2, #23
 8004aea:	709a      	strb	r2, [r3, #2]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <increaseDay>:

void increaseDay()
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
    if (set_time.day < 7)
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <increaseDay+0x2c>)
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b06      	cmp	r3, #6
 8004b06:	d806      	bhi.n	8004b16 <increaseDay+0x1a>
    {
        set_time.day += 1;
 8004b08:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <increaseDay+0x2c>)
 8004b0a:	78db      	ldrb	r3, [r3, #3]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <increaseDay+0x2c>)
 8004b12:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        set_time.day = 1;
    }
}
 8004b14:	e002      	b.n	8004b1c <increaseDay+0x20>
        set_time.day = 1;
 8004b16:	4b04      	ldr	r3, [pc, #16]	@ (8004b28 <increaseDay+0x2c>)
 8004b18:	2201      	movs	r2, #1
 8004b1a:	70da      	strb	r2, [r3, #3]
}
 8004b1c:	bf00      	nop
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000000 	.word	0x20000000

08004b2c <decreaseDay>:

void decreaseDay()
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
    if (set_time.day > 1)
 8004b30:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <decreaseDay+0x2c>)
 8004b32:	78db      	ldrb	r3, [r3, #3]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d906      	bls.n	8004b46 <decreaseDay+0x1a>
    {
        set_time.day -= 1;
 8004b38:	4b07      	ldr	r3, [pc, #28]	@ (8004b58 <decreaseDay+0x2c>)
 8004b3a:	78db      	ldrb	r3, [r3, #3]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <decreaseDay+0x2c>)
 8004b42:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        set_time.day = 7;
    }
}
 8004b44:	e002      	b.n	8004b4c <decreaseDay+0x20>
        set_time.day = 7;
 8004b46:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <decreaseDay+0x2c>)
 8004b48:	2207      	movs	r2, #7
 8004b4a:	70da      	strb	r2, [r3, #3]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000

08004b5c <increaseDate>:
void increaseDate()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
    int daysInMonth = getDaysInMonth(set_time.month, set_time.year);
 8004b62:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <increaseDate+0x6c>)
 8004b64:	795b      	ldrb	r3, [r3, #5]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b17      	ldr	r3, [pc, #92]	@ (8004bc8 <increaseDate+0x6c>)
 8004b6a:	88db      	ldrh	r3, [r3, #6]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	f000 f91e 	bl	8004db0 <getDaysInMonth>
 8004b74:	6078      	str	r0, [r7, #4]
    if (set_time.date < daysInMonth)
 8004b76:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <increaseDate+0x6c>)
 8004b78:	791b      	ldrb	r3, [r3, #4]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	dd06      	ble.n	8004b90 <increaseDate+0x34>
    {
        set_time.date += 1;
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <increaseDate+0x6c>)
 8004b84:	791b      	ldrb	r3, [r3, #4]
 8004b86:	3301      	adds	r3, #1
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <increaseDate+0x6c>)
 8004b8c:	711a      	strb	r2, [r3, #4]
        {
            set_time.month = 1;
            set_time.year += 1;
        }
    }
}
 8004b8e:	e016      	b.n	8004bbe <increaseDate+0x62>
        set_time.date = 1;
 8004b90:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <increaseDate+0x6c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	711a      	strb	r2, [r3, #4]
        if (set_time.month < 12)
 8004b96:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <increaseDate+0x6c>)
 8004b98:	795b      	ldrb	r3, [r3, #5]
 8004b9a:	2b0b      	cmp	r3, #11
 8004b9c:	d806      	bhi.n	8004bac <increaseDate+0x50>
            set_time.month += 1;
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <increaseDate+0x6c>)
 8004ba0:	795b      	ldrb	r3, [r3, #5]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <increaseDate+0x6c>)
 8004ba8:	715a      	strb	r2, [r3, #5]
}
 8004baa:	e008      	b.n	8004bbe <increaseDate+0x62>
            set_time.month = 1;
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <increaseDate+0x6c>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	715a      	strb	r2, [r3, #5]
            set_time.year += 1;
 8004bb2:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <increaseDate+0x6c>)
 8004bb4:	88db      	ldrh	r3, [r3, #6]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	4b03      	ldr	r3, [pc, #12]	@ (8004bc8 <increaseDate+0x6c>)
 8004bbc:	80da      	strh	r2, [r3, #6]
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000000 	.word	0x20000000

08004bcc <decreaseDate>:

void decreaseDate()
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
    if (set_time.date > 1)
 8004bd0:	4b16      	ldr	r3, [pc, #88]	@ (8004c2c <decreaseDate+0x60>)
 8004bd2:	791b      	ldrb	r3, [r3, #4]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d906      	bls.n	8004be6 <decreaseDate+0x1a>
    {
        set_time.date -= 1;
 8004bd8:	4b14      	ldr	r3, [pc, #80]	@ (8004c2c <decreaseDate+0x60>)
 8004bda:	791b      	ldrb	r3, [r3, #4]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b12      	ldr	r3, [pc, #72]	@ (8004c2c <decreaseDate+0x60>)
 8004be2:	711a      	strb	r2, [r3, #4]
            set_time.month = 12;
            set_time.year -= 1;
        }
        set_time.date = getDaysInMonth(set_time.month, set_time.year);
    }
}
 8004be4:	e020      	b.n	8004c28 <decreaseDate+0x5c>
        if (set_time.month > 1)
 8004be6:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <decreaseDate+0x60>)
 8004be8:	795b      	ldrb	r3, [r3, #5]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d906      	bls.n	8004bfc <decreaseDate+0x30>
            set_time.month -= 1;
 8004bee:	4b0f      	ldr	r3, [pc, #60]	@ (8004c2c <decreaseDate+0x60>)
 8004bf0:	795b      	ldrb	r3, [r3, #5]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <decreaseDate+0x60>)
 8004bf8:	715a      	strb	r2, [r3, #5]
 8004bfa:	e008      	b.n	8004c0e <decreaseDate+0x42>
            set_time.month = 12;
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <decreaseDate+0x60>)
 8004bfe:	220c      	movs	r2, #12
 8004c00:	715a      	strb	r2, [r3, #5]
            set_time.year -= 1;
 8004c02:	4b0a      	ldr	r3, [pc, #40]	@ (8004c2c <decreaseDate+0x60>)
 8004c04:	88db      	ldrh	r3, [r3, #6]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <decreaseDate+0x60>)
 8004c0c:	80da      	strh	r2, [r3, #6]
        set_time.date = getDaysInMonth(set_time.month, set_time.year);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <decreaseDate+0x60>)
 8004c10:	795b      	ldrb	r3, [r3, #5]
 8004c12:	461a      	mov	r2, r3
 8004c14:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <decreaseDate+0x60>)
 8004c16:	88db      	ldrh	r3, [r3, #6]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 f8c8 	bl	8004db0 <getDaysInMonth>
 8004c20:	4603      	mov	r3, r0
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	4b01      	ldr	r3, [pc, #4]	@ (8004c2c <decreaseDate+0x60>)
 8004c26:	711a      	strb	r2, [r3, #4]
}
 8004c28:	bf00      	nop
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000000 	.word	0x20000000

08004c30 <increaseMonth>:

void increaseMonth()
{
 8004c30:	b598      	push	{r3, r4, r7, lr}
 8004c32:	af00      	add	r7, sp, #0
    if (set_time.month < 12)
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <increaseMonth+0x68>)
 8004c36:	795b      	ldrb	r3, [r3, #5]
 8004c38:	2b0b      	cmp	r3, #11
 8004c3a:	d806      	bhi.n	8004c4a <increaseMonth+0x1a>
    {
        set_time.month += 1;
 8004c3c:	4b16      	ldr	r3, [pc, #88]	@ (8004c98 <increaseMonth+0x68>)
 8004c3e:	795b      	ldrb	r3, [r3, #5]
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	4b14      	ldr	r3, [pc, #80]	@ (8004c98 <increaseMonth+0x68>)
 8004c46:	715a      	strb	r2, [r3, #5]
 8004c48:	e008      	b.n	8004c5c <increaseMonth+0x2c>
    }
    else
    {
        set_time.month = 1;
 8004c4a:	4b13      	ldr	r3, [pc, #76]	@ (8004c98 <increaseMonth+0x68>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	715a      	strb	r2, [r3, #5]
        set_time.year += 1;
 8004c50:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <increaseMonth+0x68>)
 8004c52:	88db      	ldrh	r3, [r3, #6]
 8004c54:	3301      	adds	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <increaseMonth+0x68>)
 8004c5a:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c98 <increaseMonth+0x68>)
 8004c5e:	78dc      	ldrb	r4, [r3, #3]
 8004c60:	4b0d      	ldr	r3, [pc, #52]	@ (8004c98 <increaseMonth+0x68>)
 8004c62:	795b      	ldrb	r3, [r3, #5]
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <increaseMonth+0x68>)
 8004c68:	88db      	ldrh	r3, [r3, #6]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f000 f89f 	bl	8004db0 <getDaysInMonth>
 8004c72:	4603      	mov	r3, r0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d90c      	bls.n	8004c94 <increaseMonth+0x64>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <increaseMonth+0x68>)
 8004c7c:	795b      	ldrb	r3, [r3, #5]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <increaseMonth+0x68>)
 8004c82:	88db      	ldrh	r3, [r3, #6]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 f892 	bl	8004db0 <getDaysInMonth>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	4b01      	ldr	r3, [pc, #4]	@ (8004c98 <increaseMonth+0x68>)
 8004c92:	70da      	strb	r2, [r3, #3]
	}
}
 8004c94:	bf00      	nop
 8004c96:	bd98      	pop	{r3, r4, r7, pc}
 8004c98:	20000000 	.word	0x20000000

08004c9c <decreaseMonth>:

void decreaseMonth()
{
 8004c9c:	b598      	push	{r3, r4, r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
    if (set_time.month > 1)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <decreaseMonth+0x68>)
 8004ca2:	795b      	ldrb	r3, [r3, #5]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d906      	bls.n	8004cb6 <decreaseMonth+0x1a>
    {
        set_time.month -= 1;
 8004ca8:	4b16      	ldr	r3, [pc, #88]	@ (8004d04 <decreaseMonth+0x68>)
 8004caa:	795b      	ldrb	r3, [r3, #5]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <decreaseMonth+0x68>)
 8004cb2:	715a      	strb	r2, [r3, #5]
 8004cb4:	e008      	b.n	8004cc8 <decreaseMonth+0x2c>
    }
    else
    {
        set_time.month = 12;
 8004cb6:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <decreaseMonth+0x68>)
 8004cb8:	220c      	movs	r2, #12
 8004cba:	715a      	strb	r2, [r3, #5]
        set_time.year -= 1;
 8004cbc:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <decreaseMonth+0x68>)
 8004cbe:	88db      	ldrh	r3, [r3, #6]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <decreaseMonth+0x68>)
 8004cc6:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <decreaseMonth+0x68>)
 8004cca:	78dc      	ldrb	r4, [r3, #3]
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <decreaseMonth+0x68>)
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <decreaseMonth+0x68>)
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 f869 	bl	8004db0 <getDaysInMonth>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d90c      	bls.n	8004d00 <decreaseMonth+0x64>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <decreaseMonth+0x68>)
 8004ce8:	795b      	ldrb	r3, [r3, #5]
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <decreaseMonth+0x68>)
 8004cee:	88db      	ldrh	r3, [r3, #6]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 f85c 	bl	8004db0 <getDaysInMonth>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	4b01      	ldr	r3, [pc, #4]	@ (8004d04 <decreaseMonth+0x68>)
 8004cfe:	70da      	strb	r2, [r3, #3]
	}
}
 8004d00:	bf00      	nop
 8004d02:	bd98      	pop	{r3, r4, r7, pc}
 8004d04:	20000000 	.word	0x20000000

08004d08 <increaseYear>:

void increaseYear()
{
 8004d08:	b598      	push	{r3, r4, r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
    set_time.year += 1;
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <increaseYear+0x4c>)
 8004d0e:	88db      	ldrh	r3, [r3, #6]
 8004d10:	3301      	adds	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <increaseYear+0x4c>)
 8004d16:	80da      	strh	r2, [r3, #6]

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004d18:	4b0e      	ldr	r3, [pc, #56]	@ (8004d54 <increaseYear+0x4c>)
 8004d1a:	78dc      	ldrb	r4, [r3, #3]
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d54 <increaseYear+0x4c>)
 8004d1e:	795b      	ldrb	r3, [r3, #5]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <increaseYear+0x4c>)
 8004d24:	88db      	ldrh	r3, [r3, #6]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 f841 	bl	8004db0 <getDaysInMonth>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	429c      	cmp	r4, r3
 8004d34:	d90c      	bls.n	8004d50 <increaseYear+0x48>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004d36:	4b07      	ldr	r3, [pc, #28]	@ (8004d54 <increaseYear+0x4c>)
 8004d38:	795b      	ldrb	r3, [r3, #5]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <increaseYear+0x4c>)
 8004d3e:	88db      	ldrh	r3, [r3, #6]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f000 f834 	bl	8004db0 <getDaysInMonth>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	4b01      	ldr	r3, [pc, #4]	@ (8004d54 <increaseYear+0x4c>)
 8004d4e:	70da      	strb	r2, [r3, #3]
	}
}
 8004d50:	bf00      	nop
 8004d52:	bd98      	pop	{r3, r4, r7, pc}
 8004d54:	20000000 	.word	0x20000000

08004d58 <decreaseYear>:

void decreaseYear()
{
 8004d58:	b598      	push	{r3, r4, r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    if (set_time.year > 0) // Assuming year 0 is a valid boundary
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <decreaseYear+0x54>)
 8004d5e:	88db      	ldrh	r3, [r3, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <decreaseYear+0x18>
    {
        set_time.year -= 1;
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <decreaseYear+0x54>)
 8004d66:	88db      	ldrh	r3, [r3, #6]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dac <decreaseYear+0x54>)
 8004d6e:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004d70:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <decreaseYear+0x54>)
 8004d72:	78dc      	ldrb	r4, [r3, #3]
 8004d74:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <decreaseYear+0x54>)
 8004d76:	795b      	ldrb	r3, [r3, #5]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <decreaseYear+0x54>)
 8004d7c:	88db      	ldrh	r3, [r3, #6]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 f815 	bl	8004db0 <getDaysInMonth>
 8004d86:	4603      	mov	r3, r0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d90c      	bls.n	8004da8 <decreaseYear+0x50>
    {
        set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <decreaseYear+0x54>)
 8004d90:	795b      	ldrb	r3, [r3, #5]
 8004d92:	461a      	mov	r2, r3
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <decreaseYear+0x54>)
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 f808 	bl	8004db0 <getDaysInMonth>
 8004da0:	4603      	mov	r3, r0
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	4b01      	ldr	r3, [pc, #4]	@ (8004dac <decreaseYear+0x54>)
 8004da6:	70da      	strb	r2, [r3, #3]
    }
}
 8004da8:	bf00      	nop
 8004daa:	bd98      	pop	{r3, r4, r7, pc}
 8004dac:	20000000 	.word	0x20000000

08004db0 <getDaysInMonth>:

// Helper function to get the number of days in a month
int getDaysInMonth(int month, int year)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
    switch (month)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	bf8c      	ite	hi
 8004dc0:	2201      	movhi	r2, #1
 8004dc2:	2200      	movls	r2, #0
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	d147      	bne.n	8004e5a <getDaysInMonth+0xaa>
 8004dca:	2201      	movs	r2, #1
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2201      	movne	r2, #1
 8004ddc:	2200      	moveq	r2, #0
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	2a00      	cmp	r2, #0
 8004de2:	d112      	bne.n	8004e0a <getDaysInMonth+0x5a>
 8004de4:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2201      	movne	r2, #1
 8004dee:	2200      	moveq	r2, #0
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	2a00      	cmp	r2, #0
 8004df4:	d10b      	bne.n	8004e0e <getDaysInMonth+0x5e>
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf14      	ite	ne
 8004dfe:	2301      	movne	r3, #1
 8004e00:	2300      	moveq	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <getDaysInMonth+0x62>
 8004e08:	e027      	b.n	8004e5a <getDaysInMonth+0xaa>
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
        {
            return 31;
 8004e0a:	231f      	movs	r3, #31
 8004e0c:	e026      	b.n	8004e5c <getDaysInMonth+0xac>
        }
        case 4: case 6: case 9: case 11:
        {
            return 30;
 8004e0e:	231e      	movs	r3, #30
 8004e10:	e024      	b.n	8004e5c <getDaysInMonth+0xac>
        }
        case 2:
        {
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10c      	bne.n	8004e36 <getDaysInMonth+0x86>
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <getDaysInMonth+0xb8>)
 8004e20:	fb83 1302 	smull	r1, r3, r3, r2
 8004e24:	1159      	asrs	r1, r3, #5
 8004e26:	17d3      	asrs	r3, r2, #31
 8004e28:	1acb      	subs	r3, r1, r3
 8004e2a:	2164      	movs	r1, #100	@ 0x64
 8004e2c:	fb01 f303 	mul.w	r3, r1, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <getDaysInMonth+0xa2>
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <getDaysInMonth+0xb8>)
 8004e3a:	fb83 1302 	smull	r1, r3, r3, r2
 8004e3e:	11d9      	asrs	r1, r3, #7
 8004e40:	17d3      	asrs	r3, r2, #31
 8004e42:	1acb      	subs	r3, r1, r3
 8004e44:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004e48:	fb01 f303 	mul.w	r3, r1, r3
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <getDaysInMonth+0xa6>
                return 29; // Leap year
 8004e52:	231d      	movs	r3, #29
 8004e54:	e002      	b.n	8004e5c <getDaysInMonth+0xac>
            else
                return 28;
 8004e56:	231c      	movs	r3, #28
 8004e58:	e000      	b.n	8004e5c <getDaysInMonth+0xac>
        }
        default:
            return 30; // Default case, should not happen
 8004e5a:	231e      	movs	r3, #30
    }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	51eb851f 	.word	0x51eb851f

08004e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e70:	b672      	cpsid	i
}
 8004e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <Error_Handler+0x8>

08004e78 <HAL_UART_RxCpltCallback>:
 * @brief This function is evoked automatically when the UART peripheral received data send through uart and echo its back
 *
 * @param huart The UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb4 <HAL_UART_RxCpltCallback+0x3c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d110      	bne.n	8004eac <HAL_UART_RxCpltCallback+0x34>
	{
		// rs232 isr
		if(RBufferInsert(&rs232_rbuffer, receive_buffer1))
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x40>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	480a      	ldr	r0, [pc, #40]	@ (8004ebc <HAL_UART_RxCpltCallback+0x44>)
 8004e92:	f7fc f89b 	bl	8000fcc <RBufferInsert>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_RxCpltCallback+0x2a>
		{
			rs232_flag = true;
 8004e9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <HAL_UART_RxCpltCallback+0x48>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
		}

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <HAL_UART_RxCpltCallback+0x40>)
 8004ea6:	4807      	ldr	r0, [pc, #28]	@ (8004ec4 <HAL_UART_RxCpltCallback+0x4c>)
 8004ea8:	f004 f874 	bl	8008f94 <HAL_UART_Receive_IT>
	}
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	2000014c 	.word	0x2000014c
 8004ebc:	20000150 	.word	0x20000150
 8004ec0:	200001b6 	.word	0x200001b6
 8004ec4:	200002ac 	.word	0x200002ac

08004ec8 <initTimer2>:

/**
 * @brief	init timer function
 */
void initTimer2()
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004ecc:	4802      	ldr	r0, [pc, #8]	@ (8004ed8 <initTimer2+0x10>)
 8004ece:	f003 fbeb 	bl	80086a8 <HAL_TIM_Base_Start_IT>
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2000021c 	.word	0x2000021c

08004edc <initTimer4>:

void initTimer4()
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8004ee0:	4802      	ldr	r0, [pc, #8]	@ (8004eec <initTimer4+0x10>)
 8004ee2:	f003 fbe1 	bl	80086a8 <HAL_TIM_Base_Start_IT>
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000264 	.word	0x20000264

08004ef0 <sTimer2Set>:
 * @brief	set timer duration(ms)
 * @param	delay(ms)
 * @param	period(ms)
 */
void sTimer2Set(uint16_t delay, uint16_t period)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460a      	mov	r2, r1
 8004efa:	80fb      	strh	r3, [r7, #6]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80bb      	strh	r3, [r7, #4]
	timer_2_mul = period / TIMER_2_CYCLES;
 8004f00:	4a07      	ldr	r2, [pc, #28]	@ (8004f20 <sTimer2Set+0x30>)
 8004f02:	88bb      	ldrh	r3, [r7, #4]
 8004f04:	8013      	strh	r3, [r2, #0]
	timer_2_counter = delay / TIMER_2_CYCLES;
 8004f06:	4a07      	ldr	r2, [pc, #28]	@ (8004f24 <sTimer2Set+0x34>)
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	8013      	strh	r3, [r2, #0]
	timer_2_flag = 0;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <sTimer2Set+0x38>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	200001ba 	.word	0x200001ba
 8004f24:	200001b8 	.word	0x200001b8
 8004f28:	200001b7 	.word	0x200001b7

08004f2c <sTimer4Set>:

void sTimer4Set(uint16_t delay, uint16_t period)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	460a      	mov	r2, r1
 8004f36:	80fb      	strh	r3, [r7, #6]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80bb      	strh	r3, [r7, #4]
	timer_4_mul = period / TIMER_4_CYCLES;
 8004f3c:	4a07      	ldr	r2, [pc, #28]	@ (8004f5c <sTimer4Set+0x30>)
 8004f3e:	88bb      	ldrh	r3, [r7, #4]
 8004f40:	8013      	strh	r3, [r2, #0]
	timer_4_counter = delay / TIMER_4_CYCLES;
 8004f42:	4a07      	ldr	r2, [pc, #28]	@ (8004f60 <sTimer4Set+0x34>)
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	8013      	strh	r3, [r2, #0]
	timer_4_flag = 0;
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <sTimer4Set+0x38>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	200001c0 	.word	0x200001c0
 8004f60:	200001be 	.word	0x200001be
 8004f64:	200001bc 	.word	0x200001bc

08004f68 <sTimer2GetFlag>:
/**
 * @brief	get flag timer fuction and auto reset flags and timer counter
 * @return	timer flag
 */
uint8_t sTimer2GetFlag()
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	if(timer_2_flag)
 8004f6c:	4b09      	ldr	r3, [pc, #36]	@ (8004f94 <sTimer2GetFlag+0x2c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <sTimer2GetFlag+0x1e>
	{
		timer_2_flag = 0;
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <sTimer2GetFlag+0x2c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
		timer_2_counter = timer_2_mul;
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <sTimer2GetFlag+0x30>)
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <sTimer2GetFlag+0x34>)
 8004f80:	801a      	strh	r2, [r3, #0]
		return 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <sTimer2GetFlag+0x20>
	}
	return 0;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	200001b7 	.word	0x200001b7
 8004f98:	200001ba 	.word	0x200001ba
 8004f9c:	200001b8 	.word	0x200001b8

08004fa0 <sTimer4GetFlag>:

uint8_t sTimer4GetFlag()
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
	if(timer_4_flag)
 8004fa4:	4b09      	ldr	r3, [pc, #36]	@ (8004fcc <sTimer4GetFlag+0x2c>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <sTimer4GetFlag+0x1e>
	{
		timer_4_flag = 0;
 8004fac:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <sTimer4GetFlag+0x2c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
		timer_4_counter = timer_4_mul;
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <sTimer4GetFlag+0x30>)
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	4b07      	ldr	r3, [pc, #28]	@ (8004fd4 <sTimer4GetFlag+0x34>)
 8004fb8:	801a      	strh	r2, [r3, #0]
		return 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <sTimer4GetFlag+0x20>
	}
	return 0;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	200001bc 	.word	0x200001bc
 8004fd0:	200001c0 	.word	0x200001c0
 8004fd4:	200001be 	.word	0x200001be

08004fd8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief	callback function call every 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe8:	d110      	bne.n	800500c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if (timer_2_counter > 0)
 8004fea:	4b16      	ldr	r3, [pc, #88]	@ (8005044 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			--timer_2_counter;
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ffc:	801a      	strh	r2, [r3, #0]
		}
		if (timer_2_counter <= 0)
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			timer_2_flag = 1;
 8005006:	4b10      	ldr	r3, [pc, #64]	@ (8005048 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a0e      	ldr	r2, [pc, #56]	@ (800504c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d112      	bne.n	800503c <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		if (timer_4_counter > 0)
 8005016:	4b0e      	ldr	r3, [pc, #56]	@ (8005050 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			--timer_4_counter;
 800501e:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005028:	801a      	strh	r2, [r3, #0]
		}
		if (timer_4_counter <= 0)
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			timer_4_flag = 1;
 8005032:	4b08      	ldr	r3, [pc, #32]	@ (8005054 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]
		}
		led7SegDisplay();
 8005038:	f7fd fa96 	bl	8002568 <led7SegDisplay>
	}
}
 800503c:	bf00      	nop
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	200001b8 	.word	0x200001b8
 8005048:	200001b7 	.word	0x200001b7
 800504c:	40000800 	.word	0x40000800
 8005050:	200001be 	.word	0x200001be
 8005054:	200001bc 	.word	0x200001bc

08005058 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800505c:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <MX_SPI1_Init+0x64>)
 800505e:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <MX_SPI1_Init+0x68>)
 8005060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005062:	4b16      	ldr	r3, [pc, #88]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800506a:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <MX_SPI1_Init+0x64>)
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005072:	2200      	movs	r2, #0
 8005074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005078:	2200      	movs	r2, #0
 800507a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800507c:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <MX_SPI1_Init+0x64>)
 800507e:	2200      	movs	r2, #0
 8005080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <MX_SPI1_Init+0x64>)
 800508c:	2200      	movs	r2, #0
 800508e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005092:	2200      	movs	r2, #0
 8005094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005096:	4b09      	ldr	r3, [pc, #36]	@ (80050bc <MX_SPI1_Init+0x64>)
 8005098:	2200      	movs	r2, #0
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509c:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <MX_SPI1_Init+0x64>)
 800509e:	2200      	movs	r2, #0
 80050a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80050a2:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <MX_SPI1_Init+0x64>)
 80050a4:	220a      	movs	r2, #10
 80050a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80050a8:	4804      	ldr	r0, [pc, #16]	@ (80050bc <MX_SPI1_Init+0x64>)
 80050aa:	f002 fc8f 	bl	80079cc <HAL_SPI_Init>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80050b4:	f7ff feda 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	200001c4 	.word	0x200001c4
 80050c0:	40013000 	.word	0x40013000

080050c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	@ 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	609a      	str	r2, [r3, #8]
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a19      	ldr	r2, [pc, #100]	@ (8005148 <HAL_SPI_MspInit+0x84>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d12b      	bne.n	800513e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_SPI_MspInit+0x88>)
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_SPI_MspInit+0x88>)
 80050f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80050f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050f6:	4b15      	ldr	r3, [pc, #84]	@ (800514c <HAL_SPI_MspInit+0x88>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	4b11      	ldr	r3, [pc, #68]	@ (800514c <HAL_SPI_MspInit+0x88>)
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	4a10      	ldr	r2, [pc, #64]	@ (800514c <HAL_SPI_MspInit+0x88>)
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	6313      	str	r3, [r2, #48]	@ 0x30
 8005112:	4b0e      	ldr	r3, [pc, #56]	@ (800514c <HAL_SPI_MspInit+0x88>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800511e:	2338      	movs	r3, #56	@ 0x38
 8005120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005122:	2302      	movs	r3, #2
 8005124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800512e:	2305      	movs	r3, #5
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	4805      	ldr	r0, [pc, #20]	@ (8005150 <HAL_SPI_MspInit+0x8c>)
 800513a:	f000 fc8d 	bl	8005a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800513e:	bf00      	nop
 8005140:	3728      	adds	r7, #40	@ 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40013000 	.word	0x40013000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020400 	.word	0x40020400

08005154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	4b10      	ldr	r3, [pc, #64]	@ (80051a0 <HAL_MspInit+0x4c>)
 8005160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005162:	4a0f      	ldr	r2, [pc, #60]	@ (80051a0 <HAL_MspInit+0x4c>)
 8005164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005168:	6453      	str	r3, [r2, #68]	@ 0x44
 800516a:	4b0d      	ldr	r3, [pc, #52]	@ (80051a0 <HAL_MspInit+0x4c>)
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <HAL_MspInit+0x4c>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <HAL_MspInit+0x4c>)
 8005180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005184:	6413      	str	r3, [r2, #64]	@ 0x40
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_MspInit+0x4c>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800

080051a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <NMI_Handler+0x4>

080051ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <HardFault_Handler+0x4>

080051b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <MemManage_Handler+0x4>

080051bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <BusFault_Handler+0x4>

080051c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <UsageFault_Handler+0x4>

080051cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051fa:	f000 fa45 	bl	8005688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005208:	4802      	ldr	r0, [pc, #8]	@ (8005214 <TIM2_IRQHandler+0x10>)
 800520a:	f003 fabd 	bl	8008788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2000021c 	.word	0x2000021c

08005218 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800521c:	4802      	ldr	r0, [pc, #8]	@ (8005228 <TIM4_IRQHandler+0x10>)
 800521e:	f003 fab3 	bl	8008788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000264 	.word	0x20000264

0800522c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005230:	4802      	ldr	r0, [pc, #8]	@ (800523c <USART1_IRQHandler+0x10>)
 8005232:	f003 fed5 	bl	8008fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	200002ac 	.word	0x200002ac

08005240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005244:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <SystemInit+0x20>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	4a05      	ldr	r2, [pc, #20]	@ (8005260 <SystemInit+0x20>)
 800524c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005278:	463b      	mov	r3, r7
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005280:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <MX_TIM2_Init+0x94>)
 8005282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005286:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8005288:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <MX_TIM2_Init+0x94>)
 800528a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800528e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <MX_TIM2_Init+0x94>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <MX_TIM2_Init+0x94>)
 8005298:	2209      	movs	r2, #9
 800529a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800529c:	4b16      	ldr	r3, [pc, #88]	@ (80052f8 <MX_TIM2_Init+0x94>)
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a2:	4b15      	ldr	r3, [pc, #84]	@ (80052f8 <MX_TIM2_Init+0x94>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052a8:	4813      	ldr	r0, [pc, #76]	@ (80052f8 <MX_TIM2_Init+0x94>)
 80052aa:	f003 f9ad 	bl	8008608 <HAL_TIM_Base_Init>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80052b4:	f7ff fdda 	bl	8004e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4619      	mov	r1, r3
 80052c4:	480c      	ldr	r0, [pc, #48]	@ (80052f8 <MX_TIM2_Init+0x94>)
 80052c6:	f003 fb4f 	bl	8008968 <HAL_TIM_ConfigClockSource>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80052d0:	f7ff fdcc 	bl	8004e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d8:	2300      	movs	r3, #0
 80052da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052dc:	463b      	mov	r3, r7
 80052de:	4619      	mov	r1, r3
 80052e0:	4805      	ldr	r0, [pc, #20]	@ (80052f8 <MX_TIM2_Init+0x94>)
 80052e2:	f003 fd77 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80052ec:	f7ff fdbe 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80052f0:	bf00      	nop
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	2000021c 	.word	0x2000021c

080052fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005310:	463b      	mov	r3, r7
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005318:	4b1d      	ldr	r3, [pc, #116]	@ (8005390 <MX_TIM4_Init+0x94>)
 800531a:	4a1e      	ldr	r2, [pc, #120]	@ (8005394 <MX_TIM4_Init+0x98>)
 800531c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800531e:	4b1c      	ldr	r3, [pc, #112]	@ (8005390 <MX_TIM4_Init+0x94>)
 8005320:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005324:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005326:	4b1a      	ldr	r3, [pc, #104]	@ (8005390 <MX_TIM4_Init+0x94>)
 8005328:	2200      	movs	r2, #0
 800532a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 800532c:	4b18      	ldr	r3, [pc, #96]	@ (8005390 <MX_TIM4_Init+0x94>)
 800532e:	2209      	movs	r2, #9
 8005330:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <MX_TIM4_Init+0x94>)
 8005334:	2200      	movs	r2, #0
 8005336:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005338:	4b15      	ldr	r3, [pc, #84]	@ (8005390 <MX_TIM4_Init+0x94>)
 800533a:	2200      	movs	r2, #0
 800533c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800533e:	4814      	ldr	r0, [pc, #80]	@ (8005390 <MX_TIM4_Init+0x94>)
 8005340:	f003 f962 	bl	8008608 <HAL_TIM_Base_Init>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800534a:	f7ff fd8f 	bl	8004e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800534e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005354:	f107 0308 	add.w	r3, r7, #8
 8005358:	4619      	mov	r1, r3
 800535a:	480d      	ldr	r0, [pc, #52]	@ (8005390 <MX_TIM4_Init+0x94>)
 800535c:	f003 fb04 	bl	8008968 <HAL_TIM_ConfigClockSource>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005366:	f7ff fd81 	bl	8004e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800536a:	2300      	movs	r3, #0
 800536c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005372:	463b      	mov	r3, r7
 8005374:	4619      	mov	r1, r3
 8005376:	4806      	ldr	r0, [pc, #24]	@ (8005390 <MX_TIM4_Init+0x94>)
 8005378:	f003 fd2c 	bl	8008dd4 <HAL_TIMEx_MasterConfigSynchronization>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005382:	f7ff fd73 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005386:	bf00      	nop
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000264 	.word	0x20000264
 8005394:	40000800 	.word	0x40000800

08005398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a8:	d116      	bne.n	80053d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80053c6:	2200      	movs	r2, #0
 80053c8:	2100      	movs	r1, #0
 80053ca:	201c      	movs	r0, #28
 80053cc:	f000 fa7b 	bl	80058c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053d0:	201c      	movs	r0, #28
 80053d2:	f000 fa94 	bl	80058fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80053d6:	e01a      	b.n	800540e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0f      	ldr	r2, [pc, #60]	@ (800541c <HAL_TIM_Base_MspInit+0x84>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d115      	bne.n	800540e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80053f2:	4b09      	ldr	r3, [pc, #36]	@ (8005418 <HAL_TIM_Base_MspInit+0x80>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80053fe:	2200      	movs	r2, #0
 8005400:	2100      	movs	r1, #0
 8005402:	201e      	movs	r0, #30
 8005404:	f000 fa5f 	bl	80058c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005408:	201e      	movs	r0, #30
 800540a:	f000 fa78 	bl	80058fe <HAL_NVIC_EnableIRQ>
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
 800541c:	40000800 	.word	0x40000800

08005420 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005426:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <MX_USART1_UART_Init+0x50>)
 8005428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800542a:	4b10      	ldr	r3, [pc, #64]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 800542c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005432:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005438:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005444:	4b09      	ldr	r3, [pc, #36]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005446:	220c      	movs	r2, #12
 8005448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800544a:	4b08      	ldr	r3, [pc, #32]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005456:	4805      	ldr	r0, [pc, #20]	@ (800546c <MX_USART1_UART_Init+0x4c>)
 8005458:	f003 fd4c 	bl	8008ef4 <HAL_UART_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005462:	f7ff fd03 	bl	8004e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200002ac 	.word	0x200002ac
 8005470:	40011000 	.word	0x40011000

08005474 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	@ 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1d      	ldr	r2, [pc, #116]	@ (8005508 <HAL_UART_MspInit+0x94>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d134      	bne.n	8005500 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	4b1c      	ldr	r3, [pc, #112]	@ (800550c <HAL_UART_MspInit+0x98>)
 800549c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549e:	4a1b      	ldr	r2, [pc, #108]	@ (800550c <HAL_UART_MspInit+0x98>)
 80054a0:	f043 0310 	orr.w	r3, r3, #16
 80054a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80054a6:	4b19      	ldr	r3, [pc, #100]	@ (800550c <HAL_UART_MspInit+0x98>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b15      	ldr	r3, [pc, #84]	@ (800550c <HAL_UART_MspInit+0x98>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	4a14      	ldr	r2, [pc, #80]	@ (800550c <HAL_UART_MspInit+0x98>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054c2:	4b12      	ldr	r3, [pc, #72]	@ (800550c <HAL_UART_MspInit+0x98>)
 80054c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80054d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d4:	2302      	movs	r3, #2
 80054d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054dc:	2303      	movs	r3, #3
 80054de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054e0:	2307      	movs	r3, #7
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	4619      	mov	r1, r3
 80054ea:	4809      	ldr	r0, [pc, #36]	@ (8005510 <HAL_UART_MspInit+0x9c>)
 80054ec:	f000 fab4 	bl	8005a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80054f0:	2200      	movs	r2, #0
 80054f2:	2100      	movs	r1, #0
 80054f4:	2025      	movs	r0, #37	@ 0x25
 80054f6:	f000 f9e6 	bl	80058c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80054fa:	2025      	movs	r0, #37	@ 0x25
 80054fc:	f000 f9ff 	bl	80058fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005500:	bf00      	nop
 8005502:	3728      	adds	r7, #40	@ 0x28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40011000 	.word	0x40011000
 800550c:	40023800 	.word	0x40023800
 8005510:	40020000 	.word	0x40020000

08005514 <BCD2DEC>:
/**
 * @brief: transform splited 8 bit (4 bit MSB represent tens and 4 bit LSB represent units) to decimal
 * @param: splited 8 bit
 */
uint8_t BCD2DEC(uint8_t data)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	0092      	lsls	r2, r2, #2
 8005528:	4413      	add	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	b2db      	uxtb	r3, r3
 8005536:	4413      	add	r3, r2
 8005538:	b2db      	uxtb	r3, r3
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <DEC2BCD>:
/**
 * brief: transform decimal to splited 8 bit (4 bit MSB represent tens and 4 bit LSB represent units)
 * @param: decimal
 */
uint8_t DEC2BCD(uint8_t data)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4a0d      	ldr	r2, [pc, #52]	@ (800558c <DEC2BCD+0x44>)
 8005556:	fba2 2303 	umull	r2, r3, r2, r3
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	b258      	sxtb	r0, r3
 8005562:	79fa      	ldrb	r2, [r7, #7]
 8005564:	4b09      	ldr	r3, [pc, #36]	@ (800558c <DEC2BCD+0x44>)
 8005566:	fba3 1302 	umull	r1, r3, r3, r2
 800556a:	08d9      	lsrs	r1, r3, #3
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	b25b      	sxtb	r3, r3
 800557a:	4303      	orrs	r3, r0
 800557c:	b25b      	sxtb	r3, r3
 800557e:	b2db      	uxtb	r3, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	cccccccd 	.word	0xcccccccd

08005590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80055c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005594:	f7ff fe54 	bl	8005240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005598:	480c      	ldr	r0, [pc, #48]	@ (80055cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800559a:	490d      	ldr	r1, [pc, #52]	@ (80055d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800559c:	4a0d      	ldr	r2, [pc, #52]	@ (80055d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800559e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055a0:	e002      	b.n	80055a8 <LoopCopyDataInit>

080055a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055a6:	3304      	adds	r3, #4

080055a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055ac:	d3f9      	bcc.n	80055a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ae:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055b0:	4c0a      	ldr	r4, [pc, #40]	@ (80055dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055b4:	e001      	b.n	80055ba <LoopFillZerobss>

080055b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055b8:	3204      	adds	r2, #4

080055ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055bc:	d3fb      	bcc.n	80055b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055be:	f004 fced 	bl	8009f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055c2:	f7fd f8f5 	bl	80027b0 <main>
  bx  lr    
 80055c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80055d4:	0800e2e0 	.word	0x0800e2e0
  ldr r2, =_sbss
 80055d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80055dc:	200002f8 	.word	0x200002f8

080055e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055e0:	e7fe      	b.n	80055e0 <ADC_IRQHandler>
	...

080055e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <HAL_Init+0x40>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005624 <HAL_Init+0x40>)
 80055ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_Init+0x40>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005624 <HAL_Init+0x40>)
 80055fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005600:	4b08      	ldr	r3, [pc, #32]	@ (8005624 <HAL_Init+0x40>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a07      	ldr	r2, [pc, #28]	@ (8005624 <HAL_Init+0x40>)
 8005606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800560a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800560c:	2003      	movs	r0, #3
 800560e:	f000 f94f 	bl	80058b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005612:	200f      	movs	r0, #15
 8005614:	f000 f808 	bl	8005628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005618:	f7ff fd9c 	bl	8005154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40023c00 	.word	0x40023c00

08005628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <HAL_InitTick+0x54>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <HAL_InitTick+0x58>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	4619      	mov	r1, r3
 800563a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800563e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f967 	bl	800591a <HAL_SYSTICK_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e00e      	b.n	8005674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b0f      	cmp	r3, #15
 800565a:	d80a      	bhi.n	8005672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800565c:	2200      	movs	r2, #0
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	f000 f92f 	bl	80058c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005668:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <HAL_InitTick+0x5c>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000020 	.word	0x20000020
 8005680:	20000028 	.word	0x20000028
 8005684:	20000024 	.word	0x20000024

08005688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_IncTick+0x20>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_IncTick+0x24>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4413      	add	r3, r2
 8005698:	4a04      	ldr	r2, [pc, #16]	@ (80056ac <HAL_IncTick+0x24>)
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000028 	.word	0x20000028
 80056ac:	200002f4 	.word	0x200002f4

080056b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return uwTick;
 80056b4:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <HAL_GetTick+0x14>)
 80056b6:	681b      	ldr	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200002f4 	.word	0x200002f4

080056c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056d0:	f7ff ffee 	bl	80056b0 <HAL_GetTick>
 80056d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d005      	beq.n	80056ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056e2:	4b0a      	ldr	r3, [pc, #40]	@ (800570c <HAL_Delay+0x44>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ee:	bf00      	nop
 80056f0:	f7ff ffde 	bl	80056b0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d8f7      	bhi.n	80056f0 <HAL_Delay+0x28>
  {
  }
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000028 	.word	0x20000028

08005710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <__NVIC_SetPriorityGrouping+0x44>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800573c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005742:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <__NVIC_SetPriorityGrouping+0x44>)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	60d3      	str	r3, [r2, #12]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800575c:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <__NVIC_GetPriorityGrouping+0x18>)
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f003 0307 	and.w	r3, r3, #7
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	db0b      	blt.n	800579e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	f003 021f 	and.w	r2, r3, #31
 800578c:	4907      	ldr	r1, [pc, #28]	@ (80057ac <__NVIC_EnableIRQ+0x38>)
 800578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	2001      	movs	r0, #1
 8005796:	fa00 f202 	lsl.w	r2, r0, r2
 800579a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	e000e100 	.word	0xe000e100

080057b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	db0a      	blt.n	80057da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	490c      	ldr	r1, [pc, #48]	@ (80057fc <__NVIC_SetPriority+0x4c>)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	440b      	add	r3, r1
 80057d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d8:	e00a      	b.n	80057f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	4908      	ldr	r1, [pc, #32]	@ (8005800 <__NVIC_SetPriority+0x50>)
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	3b04      	subs	r3, #4
 80057e8:	0112      	lsls	r2, r2, #4
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	440b      	add	r3, r1
 80057ee:	761a      	strb	r2, [r3, #24]
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	e000e100 	.word	0xe000e100
 8005800:	e000ed00 	.word	0xe000ed00

08005804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005804:	b480      	push	{r7}
 8005806:	b089      	sub	sp, #36	@ 0x24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f1c3 0307 	rsb	r3, r3, #7
 800581e:	2b04      	cmp	r3, #4
 8005820:	bf28      	it	cs
 8005822:	2304      	movcs	r3, #4
 8005824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3304      	adds	r3, #4
 800582a:	2b06      	cmp	r3, #6
 800582c:	d902      	bls.n	8005834 <NVIC_EncodePriority+0x30>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	3b03      	subs	r3, #3
 8005832:	e000      	b.n	8005836 <NVIC_EncodePriority+0x32>
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	fa02 f303 	lsl.w	r3, r2, r3
 8005842:	43da      	mvns	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	401a      	ands	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800584c:	f04f 31ff 	mov.w	r1, #4294967295
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	43d9      	mvns	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800585c:	4313      	orrs	r3, r2
         );
}
 800585e:	4618      	mov	r0, r3
 8005860:	3724      	adds	r7, #36	@ 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3b01      	subs	r3, #1
 8005878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800587c:	d301      	bcc.n	8005882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800587e:	2301      	movs	r3, #1
 8005880:	e00f      	b.n	80058a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005882:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <SysTick_Config+0x40>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3b01      	subs	r3, #1
 8005888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800588a:	210f      	movs	r1, #15
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	f7ff ff8e 	bl	80057b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <SysTick_Config+0x40>)
 8005896:	2200      	movs	r2, #0
 8005898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800589a:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <SysTick_Config+0x40>)
 800589c:	2207      	movs	r2, #7
 800589e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	e000e010 	.word	0xe000e010

080058b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ff29 	bl	8005710 <__NVIC_SetPriorityGrouping>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b086      	sub	sp, #24
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	4603      	mov	r3, r0
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d8:	f7ff ff3e 	bl	8005758 <__NVIC_GetPriorityGrouping>
 80058dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	6978      	ldr	r0, [r7, #20]
 80058e4:	f7ff ff8e 	bl	8005804 <NVIC_EncodePriority>
 80058e8:	4602      	mov	r2, r0
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff ff5d 	bl	80057b0 <__NVIC_SetPriority>
}
 80058f6:	bf00      	nop
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff ff31 	bl	8005774 <__NVIC_EnableIRQ>
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff ffa2 	bl	800586c <SysTick_Config>
 8005928:	4603      	mov	r3, r0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005940:	f7ff feb6 	bl	80056b0 <HAL_GetTick>
 8005944:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d008      	beq.n	8005964 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e052      	b.n	8005a0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0216 	bic.w	r2, r2, #22
 8005972:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005982:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <HAL_DMA_Abort+0x62>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0208 	bic.w	r2, r2, #8
 80059a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059b4:	e013      	b.n	80059de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059b6:	f7ff fe7b 	bl	80056b0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b05      	cmp	r3, #5
 80059c2:	d90c      	bls.n	80059de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2203      	movs	r2, #3
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e015      	b.n	8005a0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e4      	bne.n	80059b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f0:	223f      	movs	r2, #63	@ 0x3f
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d004      	beq.n	8005a30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2280      	movs	r2, #128	@ 0x80
 8005a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e00c      	b.n	8005a4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2205      	movs	r2, #5
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	@ 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	e16b      	b.n	8005d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a74:	2201      	movs	r2, #1
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	f040 815a 	bne.w	8005d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d005      	beq.n	8005aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d130      	bne.n	8005b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43db      	mvns	r3, r3
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 0201 	and.w	r2, r3, #1
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d017      	beq.n	8005b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	2203      	movs	r2, #3
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d123      	bne.n	8005b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	08da      	lsrs	r2, r3, #3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3208      	adds	r2, #8
 8005b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	220f      	movs	r2, #15
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	08da      	lsrs	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3208      	adds	r2, #8
 8005b96:	69b9      	ldr	r1, [r7, #24]
 8005b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	43db      	mvns	r3, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0203 	and.w	r2, r3, #3
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80b4 	beq.w	8005d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	4b60      	ldr	r3, [pc, #384]	@ (8005d64 <HAL_GPIO_Init+0x30c>)
 8005be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be6:	4a5f      	ldr	r2, [pc, #380]	@ (8005d64 <HAL_GPIO_Init+0x30c>)
 8005be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bee:	4b5d      	ldr	r3, [pc, #372]	@ (8005d64 <HAL_GPIO_Init+0x30c>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8005d68 <HAL_GPIO_Init+0x310>)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	3302      	adds	r3, #2
 8005c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	220f      	movs	r2, #15
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a52      	ldr	r2, [pc, #328]	@ (8005d6c <HAL_GPIO_Init+0x314>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02b      	beq.n	8005c7e <HAL_GPIO_Init+0x226>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a51      	ldr	r2, [pc, #324]	@ (8005d70 <HAL_GPIO_Init+0x318>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d025      	beq.n	8005c7a <HAL_GPIO_Init+0x222>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a50      	ldr	r2, [pc, #320]	@ (8005d74 <HAL_GPIO_Init+0x31c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01f      	beq.n	8005c76 <HAL_GPIO_Init+0x21e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4f      	ldr	r2, [pc, #316]	@ (8005d78 <HAL_GPIO_Init+0x320>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d019      	beq.n	8005c72 <HAL_GPIO_Init+0x21a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a4e      	ldr	r2, [pc, #312]	@ (8005d7c <HAL_GPIO_Init+0x324>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_GPIO_Init+0x216>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4d      	ldr	r2, [pc, #308]	@ (8005d80 <HAL_GPIO_Init+0x328>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00d      	beq.n	8005c6a <HAL_GPIO_Init+0x212>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4c      	ldr	r2, [pc, #304]	@ (8005d84 <HAL_GPIO_Init+0x32c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <HAL_GPIO_Init+0x20e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4b      	ldr	r2, [pc, #300]	@ (8005d88 <HAL_GPIO_Init+0x330>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_GPIO_Init+0x20a>
 8005c5e:	2307      	movs	r3, #7
 8005c60:	e00e      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c62:	2308      	movs	r3, #8
 8005c64:	e00c      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c66:	2306      	movs	r3, #6
 8005c68:	e00a      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c6a:	2305      	movs	r3, #5
 8005c6c:	e008      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c6e:	2304      	movs	r3, #4
 8005c70:	e006      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c72:	2303      	movs	r3, #3
 8005c74:	e004      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e002      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_GPIO_Init+0x228>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	f002 0203 	and.w	r2, r2, #3
 8005c86:	0092      	lsls	r2, r2, #2
 8005c88:	4093      	lsls	r3, r2
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c90:	4935      	ldr	r1, [pc, #212]	@ (8005d68 <HAL_GPIO_Init+0x310>)
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	3302      	adds	r3, #2
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cc2:	4a32      	ldr	r2, [pc, #200]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cc8:	4b30      	ldr	r3, [pc, #192]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cec:	4a27      	ldr	r2, [pc, #156]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cf2:	4b26      	ldr	r3, [pc, #152]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d16:	4a1d      	ldr	r2, [pc, #116]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d40:	4a12      	ldr	r2, [pc, #72]	@ (8005d8c <HAL_GPIO_Init+0x334>)
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b0f      	cmp	r3, #15
 8005d50:	f67f ae90 	bls.w	8005a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	3724      	adds	r7, #36	@ 0x24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	40020400 	.word	0x40020400
 8005d74:	40020800 	.word	0x40020800
 8005d78:	40020c00 	.word	0x40020c00
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40021400 	.word	0x40021400
 8005d84:	40021800 	.word	0x40021800
 8005d88:	40021c00 	.word	0x40021c00
 8005d8c:	40013c00 	.word	0x40013c00

08005d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	807b      	strh	r3, [r7, #2]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005da0:	787b      	ldrb	r3, [r7, #1]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005da6:	887a      	ldrh	r2, [r7, #2]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005dac:	e003      	b.n	8005db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dae:	887b      	ldrh	r3, [r7, #2]
 8005db0:	041a      	lsls	r2, r3, #16
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005dd4:	887a      	ldrh	r2, [r7, #2]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	041a      	lsls	r2, r3, #16
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	43d9      	mvns	r1, r3
 8005de0:	887b      	ldrh	r3, [r7, #2]
 8005de2:	400b      	ands	r3, r1
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	619a      	str	r2, [r3, #24]
}
 8005dea:	bf00      	nop
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e12b      	b.n	8006062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb fd52 	bl	80018c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	@ 0x24
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e5c:	f001 fd8e 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4a81      	ldr	r2, [pc, #516]	@ (800606c <HAL_I2C_Init+0x274>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d807      	bhi.n	8005e7c <HAL_I2C_Init+0x84>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a80      	ldr	r2, [pc, #512]	@ (8006070 <HAL_I2C_Init+0x278>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bf94      	ite	ls
 8005e74:	2301      	movls	r3, #1
 8005e76:	2300      	movhi	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	e006      	b.n	8005e8a <HAL_I2C_Init+0x92>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a7d      	ldr	r2, [pc, #500]	@ (8006074 <HAL_I2C_Init+0x27c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	bf94      	ite	ls
 8005e84:	2301      	movls	r3, #1
 8005e86:	2300      	movhi	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0e7      	b.n	8006062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a78      	ldr	r2, [pc, #480]	@ (8006078 <HAL_I2C_Init+0x280>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0c9b      	lsrs	r3, r3, #18
 8005e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800606c <HAL_I2C_Init+0x274>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d802      	bhi.n	8005ecc <HAL_I2C_Init+0xd4>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e009      	b.n	8005ee0 <HAL_I2C_Init+0xe8>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	4a69      	ldr	r2, [pc, #420]	@ (800607c <HAL_I2C_Init+0x284>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	3301      	adds	r3, #1
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ef2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	495c      	ldr	r1, [pc, #368]	@ (800606c <HAL_I2C_Init+0x274>)
 8005efc:	428b      	cmp	r3, r1
 8005efe:	d819      	bhi.n	8005f34 <HAL_I2C_Init+0x13c>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	1e59      	subs	r1, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005f14:	400b      	ands	r3, r1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_I2C_Init+0x138>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1e59      	subs	r1, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f2e:	e051      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f30:	2304      	movs	r3, #4
 8005f32:	e04f      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d111      	bne.n	8005f60 <HAL_I2C_Init+0x168>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e012      	b.n	8005f86 <HAL_I2C_Init+0x18e>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	1e58      	subs	r0, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6859      	ldr	r1, [r3, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	0099      	lsls	r1, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Init+0x196>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e022      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10e      	bne.n	8005fb4 <HAL_I2C_Init+0x1bc>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1e58      	subs	r0, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	440b      	add	r3, r1
 8005fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fa8:	3301      	adds	r3, #1
 8005faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	e00f      	b.n	8005fd4 <HAL_I2C_Init+0x1dc>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1e58      	subs	r0, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	0099      	lsls	r1, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fd4:	6879      	ldr	r1, [r7, #4]
 8005fd6:	6809      	ldr	r1, [r1, #0]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6911      	ldr	r1, [r2, #16]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68d2      	ldr	r2, [r2, #12]
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	430b      	orrs	r3, r1
 8006016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	000186a0 	.word	0x000186a0
 8006070:	001e847f 	.word	0x001e847f
 8006074:	003d08ff 	.word	0x003d08ff
 8006078:	431bde83 	.word	0x431bde83
 800607c:	10624dd3 	.word	0x10624dd3

08006080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800609a:	f7ff fb09 	bl	80056b0 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	f040 80d9 	bne.w	8006260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	2319      	movs	r3, #25
 80060b4:	2201      	movs	r2, #1
 80060b6:	496d      	ldr	r1, [pc, #436]	@ (800626c <HAL_I2C_Mem_Write+0x1ec>)
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fdb9 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0cc      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Mem_Write+0x56>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0c5      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d007      	beq.n	80060fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800610a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2221      	movs	r2, #33	@ 0x21
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2240      	movs	r2, #64	@ 0x40
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800612c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a4d      	ldr	r2, [pc, #308]	@ (8006270 <HAL_I2C_Mem_Write+0x1f0>)
 800613c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800613e:	88f8      	ldrh	r0, [r7, #6]
 8006140:	893a      	ldrh	r2, [r7, #8]
 8006142:	8979      	ldrh	r1, [r7, #10]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	4603      	mov	r3, r0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fbf0 	bl	8006934 <I2C_RequestMemoryWrite>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d052      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e081      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fe7e 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006172:	2b04      	cmp	r3, #4
 8006174:	d107      	bne.n	8006186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06b      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d11b      	bne.n	8006200 <HAL_I2C_Mem_Write+0x180>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d017      	beq.n	8006200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1aa      	bne.n	800615e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fe71 	bl	8006ef4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621c:	2b04      	cmp	r3, #4
 800621e:	d107      	bne.n	8006230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800622e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e016      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000

08006274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08c      	sub	sp, #48	@ 0x30
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628e:	f7ff fa0f 	bl	80056b0 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b20      	cmp	r3, #32
 800629e:	f040 8214 	bne.w	80066ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2319      	movs	r3, #25
 80062a8:	2201      	movs	r2, #1
 80062aa:	497b      	ldr	r1, [pc, #492]	@ (8006498 <HAL_I2C_Mem_Read+0x224>)
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fcbf 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e207      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Mem_Read+0x56>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e200      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2222      	movs	r2, #34	@ 0x22
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	@ 0x40
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a5b      	ldr	r2, [pc, #364]	@ (800649c <HAL_I2C_Mem_Read+0x228>)
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006332:	88f8      	ldrh	r0, [r7, #6]
 8006334:	893a      	ldrh	r2, [r7, #8]
 8006336:	8979      	ldrh	r1, [r7, #10]
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	4603      	mov	r3, r0
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fb8c 	bl	8006a60 <I2C_RequestMemoryRead>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1bc      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d113      	bne.n	8006382 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	623b      	str	r3, [r7, #32]
 800636e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e190      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11b      	bne.n	80063c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	61fb      	str	r3, [r7, #28]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	e170      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d11b      	bne.n	8006402 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	e150      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006418:	e144      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641e:	2b03      	cmp	r3, #3
 8006420:	f200 80f1 	bhi.w	8006606 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006428:	2b01      	cmp	r3, #1
 800642a:	d123      	bne.n	8006474 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 fda7 	bl	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e145      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006472:	e117      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006478:	2b02      	cmp	r3, #2
 800647a:	d14e      	bne.n	800651a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	2200      	movs	r2, #0
 8006484:	4906      	ldr	r1, [pc, #24]	@ (80064a0 <HAL_I2C_Mem_Read+0x22c>)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fbd2 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d008      	beq.n	80064a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e11a      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
 8006496:	bf00      	nop
 8006498:	00100002 	.word	0x00100002
 800649c:	ffff0000 	.word	0xffff0000
 80064a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006518:	e0c4      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006520:	2200      	movs	r2, #0
 8006522:	496c      	ldr	r1, [pc, #432]	@ (80066d4 <HAL_I2C_Mem_Read+0x460>)
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 fb83 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0cb      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657c:	2200      	movs	r2, #0
 800657e:	4955      	ldr	r1, [pc, #340]	@ (80066d4 <HAL_I2C_Mem_Read+0x460>)
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fb55 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e09d      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800659e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006604:	e04e      	b.n	80066a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006608:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fcba 	bl	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e058      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b04      	cmp	r3, #4
 8006658:	d124      	bne.n	80066a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665e:	2b03      	cmp	r3, #3
 8006660:	d107      	bne.n	8006672 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006670:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f47f aeb6 	bne.w	800641a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
  }
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	@ 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	00010004 	.word	0x00010004

080066d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	@ 0x28
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	460b      	mov	r3, r1
 80066e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80066e8:	f7fe ffe2 	bl	80056b0 <HAL_GetTick>
 80066ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	f040 8111 	bne.w	8006922 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	2319      	movs	r3, #25
 8006706:	2201      	movs	r2, #1
 8006708:	4988      	ldr	r1, [pc, #544]	@ (800692c <HAL_I2C_IsDeviceReady+0x254>)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fa90 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006716:	2302      	movs	r3, #2
 8006718:	e104      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_I2C_IsDeviceReady+0x50>
 8006724:	2302      	movs	r3, #2
 8006726:	e0fd      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b01      	cmp	r3, #1
 800673c:	d007      	beq.n	800674e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800675c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2224      	movs	r2, #36	@ 0x24
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a70      	ldr	r2, [pc, #448]	@ (8006930 <HAL_I2C_IsDeviceReady+0x258>)
 8006770:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006780:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fa4e 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a8:	d103      	bne.n	80067b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e0b6      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80067c6:	f7fe ff73 	bl	80056b0 <HAL_GetTick>
 80067ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067fa:	e025      	b.n	8006848 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067fc:	f7fe ff58 	bl	80056b0 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d302      	bcc.n	8006812 <HAL_I2C_IsDeviceReady+0x13a>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d103      	bne.n	800681a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	22a0      	movs	r2, #160	@ 0xa0
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2ba0      	cmp	r3, #160	@ 0xa0
 8006852:	d005      	beq.n	8006860 <HAL_I2C_IsDeviceReady+0x188>
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <HAL_I2C_IsDeviceReady+0x188>
 800685a:	7dbb      	ldrb	r3, [r7, #22]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0cd      	beq.n	80067fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d129      	bne.n	80068ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006884:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2319      	movs	r3, #25
 80068a2:	2201      	movs	r2, #1
 80068a4:	4921      	ldr	r1, [pc, #132]	@ (800692c <HAL_I2C_IsDeviceReady+0x254>)
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 f9c2 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e036      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e02c      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2319      	movs	r3, #25
 80068ea:	2201      	movs	r2, #1
 80068ec:	490f      	ldr	r1, [pc, #60]	@ (800692c <HAL_I2C_IsDeviceReady+0x254>)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f99e 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e012      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	3301      	adds	r3, #1
 8006902:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	f4ff af32 	bcc.w	8006772 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	00100002 	.word	0x00100002
 8006930:	ffff0000 	.word	0xffff0000

08006934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	4603      	mov	r3, r0
 8006944:	817b      	strh	r3, [r7, #10]
 8006946:	460b      	mov	r3, r1
 8006948:	813b      	strh	r3, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800695c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2200      	movs	r2, #0
 8006966:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f960 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006984:	d103      	bne.n	800698e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e05f      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006992:	897b      	ldrh	r3, [r7, #10]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80069a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	492d      	ldr	r1, [pc, #180]	@ (8006a5c <I2C_RequestMemoryWrite+0x128>)
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f9bb 	bl	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e04c      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d0:	6a39      	ldr	r1, [r7, #32]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fa46 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d107      	bne.n	80069f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e02b      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d105      	bne.n	8006a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]
 8006a0a:	e021      	b.n	8006a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a0c:	893b      	ldrh	r3, [r7, #8]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a1c:	6a39      	ldr	r1, [r7, #32]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fa20 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00d      	beq.n	8006a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d107      	bne.n	8006a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e005      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	00010002 	.word	0x00010002

08006a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f8c2 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac0:	d103      	bne.n	8006aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e0aa      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	4952      	ldr	r1, [pc, #328]	@ (8006c2c <I2C_RequestMemoryRead+0x1cc>)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f91d 	bl	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e097      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0c:	6a39      	ldr	r1, [r7, #32]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f9a8 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d107      	bne.n	8006b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e076      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b3c:	893b      	ldrh	r3, [r7, #8]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	611a      	str	r2, [r3, #16]
 8006b46:	e021      	b.n	8006b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b58:	6a39      	ldr	r1, [r7, #32]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f982 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d107      	bne.n	8006b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e050      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b82:	893b      	ldrh	r3, [r7, #8]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8e:	6a39      	ldr	r1, [r7, #32]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f967 	bl	8006e64 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d107      	bne.n	8006bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e035      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f82b 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bee:	d103      	bne.n	8006bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e013      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bfc:	897b      	ldrh	r3, [r7, #10]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	4906      	ldr	r1, [pc, #24]	@ (8006c2c <I2C_RequestMemoryRead+0x1cc>)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f886 	bl	8006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	00010002 	.word	0x00010002

08006c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c40:	e048      	b.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d044      	beq.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4a:	f7fe fd31 	bl	80056b0 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d302      	bcc.n	8006c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d139      	bne.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10d      	bne.n	8006c86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	43da      	mvns	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bf0c      	ite	eq
 8006c7c:	2301      	moveq	r3, #1
 8006c7e:	2300      	movne	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	e00c      	b.n	8006ca0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	43da      	mvns	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4013      	ands	r3, r2
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bf0c      	ite	eq
 8006c98:	2301      	moveq	r3, #1
 8006c9a:	2300      	movne	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d116      	bne.n	8006cd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc0:	f043 0220 	orr.w	r2, r3, #32
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e023      	b.n	8006d1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10d      	bne.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	43da      	mvns	r2, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	bf0c      	ite	eq
 8006cf0:	2301      	moveq	r3, #1
 8006cf2:	2300      	movne	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	e00c      	b.n	8006d14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	43da      	mvns	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4013      	ands	r3, r2
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d093      	beq.n	8006c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d32:	e071      	b.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d42:	d123      	bne.n	8006d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e067      	b.n	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d041      	beq.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d94:	f7fe fc8c 	bl	80056b0 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d302      	bcc.n	8006daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d136      	bne.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0c1b      	lsrs	r3, r3, #16
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10c      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	43da      	mvns	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2301      	movne	r3, #1
 8006dc8:	2300      	moveq	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	e00b      	b.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	43da      	mvns	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e021      	b.n	8006e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d10c      	bne.n	8006e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	43da      	mvns	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e00b      	b.n	8006e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	43da      	mvns	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f47f af6d 	bne.w	8006d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e70:	e034      	b.n	8006edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 f8e3 	bl	800703e <I2C_IsAcknowledgeFailed>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e034      	b.n	8006eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d028      	beq.n	8006edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fe fc11 	bl	80056b0 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d11d      	bne.n	8006edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eaa:	2b80      	cmp	r3, #128	@ 0x80
 8006eac:	d016      	beq.n	8006edc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	f043 0220 	orr.w	r2, r3, #32
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e007      	b.n	8006eec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ee6:	2b80      	cmp	r3, #128	@ 0x80
 8006ee8:	d1c3      	bne.n	8006e72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f00:	e034      	b.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f89b 	bl	800703e <I2C_IsAcknowledgeFailed>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e034      	b.n	8006f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d028      	beq.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fe fbc9 	bl	80056b0 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11d      	bne.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d016      	beq.n	8006f6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e007      	b.n	8006f7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d1c3      	bne.n	8006f02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f90:	e049      	b.n	8007026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d119      	bne.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0210 	mvn.w	r2, #16
 8006fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e030      	b.n	8007036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd4:	f7fe fb6c 	bl	80056b0 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d11d      	bne.n	8007026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b40      	cmp	r3, #64	@ 0x40
 8006ff6:	d016      	beq.n	8007026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e007      	b.n	8007036 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007030:	2b40      	cmp	r3, #64	@ 0x40
 8007032:	d1ae      	bne.n	8006f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007054:	d11b      	bne.n	800708e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800705e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707a:	f043 0204 	orr.w	r2, r3, #4
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e267      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d075      	beq.n	80071a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ba:	4b88      	ldr	r3, [pc, #544]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 030c 	and.w	r3, r3, #12
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d00c      	beq.n	80070e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070c6:	4b85      	ldr	r3, [pc, #532]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d112      	bne.n	80070f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070d2:	4b82      	ldr	r3, [pc, #520]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070de:	d10b      	bne.n	80070f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e0:	4b7e      	ldr	r3, [pc, #504]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d05b      	beq.n	80071a4 <HAL_RCC_OscConfig+0x108>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d157      	bne.n	80071a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e242      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007100:	d106      	bne.n	8007110 <HAL_RCC_OscConfig+0x74>
 8007102:	4b76      	ldr	r3, [pc, #472]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a75      	ldr	r2, [pc, #468]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	e01d      	b.n	800714c <HAL_RCC_OscConfig+0xb0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007118:	d10c      	bne.n	8007134 <HAL_RCC_OscConfig+0x98>
 800711a:	4b70      	ldr	r3, [pc, #448]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6f      	ldr	r2, [pc, #444]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	4b6d      	ldr	r3, [pc, #436]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6c      	ldr	r2, [pc, #432]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 800712c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	e00b      	b.n	800714c <HAL_RCC_OscConfig+0xb0>
 8007134:	4b69      	ldr	r3, [pc, #420]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a68      	ldr	r2, [pc, #416]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 800713a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4b66      	ldr	r3, [pc, #408]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a65      	ldr	r2, [pc, #404]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800714a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d013      	beq.n	800717c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007154:	f7fe faac 	bl	80056b0 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800715c:	f7fe faa8 	bl	80056b0 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b64      	cmp	r3, #100	@ 0x64
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e207      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	4b5b      	ldr	r3, [pc, #364]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0xc0>
 800717a:	e014      	b.n	80071a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717c:	f7fe fa98 	bl	80056b0 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007184:	f7fe fa94 	bl	80056b0 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b64      	cmp	r3, #100	@ 0x64
 8007190:	d901      	bls.n	8007196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e1f3      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007196:	4b51      	ldr	r3, [pc, #324]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1f0      	bne.n	8007184 <HAL_RCC_OscConfig+0xe8>
 80071a2:	e000      	b.n	80071a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d063      	beq.n	800727a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071b2:	4b4a      	ldr	r3, [pc, #296]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 030c 	and.w	r3, r3, #12
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071be:	4b47      	ldr	r3, [pc, #284]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d11c      	bne.n	8007204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ca:	4b44      	ldr	r3, [pc, #272]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d116      	bne.n	8007204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d6:	4b41      	ldr	r3, [pc, #260]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_RCC_OscConfig+0x152>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d001      	beq.n	80071ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e1c7      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ee:	4b3b      	ldr	r3, [pc, #236]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	4937      	ldr	r1, [pc, #220]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007202:	e03a      	b.n	800727a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d020      	beq.n	800724e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800720c:	4b34      	ldr	r3, [pc, #208]	@ (80072e0 <HAL_RCC_OscConfig+0x244>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007212:	f7fe fa4d 	bl	80056b0 <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800721a:	f7fe fa49 	bl	80056b0 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e1a8      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722c:	4b2b      	ldr	r3, [pc, #172]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f0      	beq.n	800721a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b28      	ldr	r3, [pc, #160]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	4925      	ldr	r1, [pc, #148]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007248:	4313      	orrs	r3, r2
 800724a:	600b      	str	r3, [r1, #0]
 800724c:	e015      	b.n	800727a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800724e:	4b24      	ldr	r3, [pc, #144]	@ (80072e0 <HAL_RCC_OscConfig+0x244>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fe fa2c 	bl	80056b0 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800725c:	f7fe fa28 	bl	80056b0 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e187      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726e:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d036      	beq.n	80072f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d016      	beq.n	80072bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728e:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <HAL_RCC_OscConfig+0x248>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007294:	f7fe fa0c 	bl	80056b0 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800729c:	f7fe fa08 	bl	80056b0 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e167      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ae:	4b0b      	ldr	r3, [pc, #44]	@ (80072dc <HAL_RCC_OscConfig+0x240>)
 80072b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0f0      	beq.n	800729c <HAL_RCC_OscConfig+0x200>
 80072ba:	e01b      	b.n	80072f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072bc:	4b09      	ldr	r3, [pc, #36]	@ (80072e4 <HAL_RCC_OscConfig+0x248>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072c2:	f7fe f9f5 	bl	80056b0 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072c8:	e00e      	b.n	80072e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072ca:	f7fe f9f1 	bl	80056b0 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d907      	bls.n	80072e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e150      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
 80072dc:	40023800 	.word	0x40023800
 80072e0:	42470000 	.word	0x42470000
 80072e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e8:	4b88      	ldr	r3, [pc, #544]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80072ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ea      	bne.n	80072ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8097 	beq.w	8007430 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007306:	4b81      	ldr	r3, [pc, #516]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10f      	bne.n	8007332 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	4b7d      	ldr	r3, [pc, #500]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	4a7c      	ldr	r2, [pc, #496]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800731c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007320:	6413      	str	r3, [r2, #64]	@ 0x40
 8007322:	4b7a      	ldr	r3, [pc, #488]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732a:	60bb      	str	r3, [r7, #8]
 800732c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007332:	4b77      	ldr	r3, [pc, #476]	@ (8007510 <HAL_RCC_OscConfig+0x474>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d118      	bne.n	8007370 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800733e:	4b74      	ldr	r3, [pc, #464]	@ (8007510 <HAL_RCC_OscConfig+0x474>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a73      	ldr	r2, [pc, #460]	@ (8007510 <HAL_RCC_OscConfig+0x474>)
 8007344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800734a:	f7fe f9b1 	bl	80056b0 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007352:	f7fe f9ad 	bl	80056b0 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e10c      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007364:	4b6a      	ldr	r3, [pc, #424]	@ (8007510 <HAL_RCC_OscConfig+0x474>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d106      	bne.n	8007386 <HAL_RCC_OscConfig+0x2ea>
 8007378:	4b64      	ldr	r3, [pc, #400]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800737a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737c:	4a63      	ldr	r2, [pc, #396]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	6713      	str	r3, [r2, #112]	@ 0x70
 8007384:	e01c      	b.n	80073c0 <HAL_RCC_OscConfig+0x324>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d10c      	bne.n	80073a8 <HAL_RCC_OscConfig+0x30c>
 800738e:	4b5f      	ldr	r3, [pc, #380]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007392:	4a5e      	ldr	r2, [pc, #376]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	6713      	str	r3, [r2, #112]	@ 0x70
 800739a:	4b5c      	ldr	r3, [pc, #368]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739e:	4a5b      	ldr	r2, [pc, #364]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073a0:	f043 0301 	orr.w	r3, r3, #1
 80073a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a6:	e00b      	b.n	80073c0 <HAL_RCC_OscConfig+0x324>
 80073a8:	4b58      	ldr	r3, [pc, #352]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ac:	4a57      	ldr	r2, [pc, #348]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b4:	4b55      	ldr	r3, [pc, #340]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	4a54      	ldr	r2, [pc, #336]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073ba:	f023 0304 	bic.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d015      	beq.n	80073f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c8:	f7fe f972 	bl	80056b0 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fe f96e 	bl	80056b0 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e0cb      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e6:	4b49      	ldr	r3, [pc, #292]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ee      	beq.n	80073d0 <HAL_RCC_OscConfig+0x334>
 80073f2:	e014      	b.n	800741e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073f4:	f7fe f95c 	bl	80056b0 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073fa:	e00a      	b.n	8007412 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073fc:	f7fe f958 	bl	80056b0 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740a:	4293      	cmp	r3, r2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e0b5      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007412:	4b3e      	ldr	r3, [pc, #248]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1ee      	bne.n	80073fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d105      	bne.n	8007430 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007424:	4b39      	ldr	r3, [pc, #228]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	4a38      	ldr	r2, [pc, #224]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800742a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800742e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 80a1 	beq.w	800757c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800743a:	4b34      	ldr	r3, [pc, #208]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 030c 	and.w	r3, r3, #12
 8007442:	2b08      	cmp	r3, #8
 8007444:	d05c      	beq.n	8007500 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d141      	bne.n	80074d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744e:	4b31      	ldr	r3, [pc, #196]	@ (8007514 <HAL_RCC_OscConfig+0x478>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007454:	f7fe f92c 	bl	80056b0 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800745c:	f7fe f928 	bl	80056b0 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e087      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746e:	4b27      	ldr	r3, [pc, #156]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69da      	ldr	r2, [r3, #28]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	019b      	lsls	r3, r3, #6
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	3b01      	subs	r3, #1
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	061b      	lsls	r3, r3, #24
 800749e:	491b      	ldr	r1, [pc, #108]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007514 <HAL_RCC_OscConfig+0x478>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074aa:	f7fe f901 	bl	80056b0 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074b2:	f7fe f8fd 	bl	80056b0 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e05c      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c4:	4b11      	ldr	r3, [pc, #68]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_RCC_OscConfig+0x416>
 80074d0:	e054      	b.n	800757c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d2:	4b10      	ldr	r3, [pc, #64]	@ (8007514 <HAL_RCC_OscConfig+0x478>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074d8:	f7fe f8ea 	bl	80056b0 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e0:	f7fe f8e6 	bl	80056b0 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e045      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074f2:	4b06      	ldr	r3, [pc, #24]	@ (800750c <HAL_RCC_OscConfig+0x470>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <HAL_RCC_OscConfig+0x444>
 80074fe:	e03d      	b.n	800757c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d107      	bne.n	8007518 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e038      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
 800750c:	40023800 	.word	0x40023800
 8007510:	40007000 	.word	0x40007000
 8007514:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007518:	4b1b      	ldr	r3, [pc, #108]	@ (8007588 <HAL_RCC_OscConfig+0x4ec>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d028      	beq.n	8007578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007530:	429a      	cmp	r2, r3
 8007532:	d121      	bne.n	8007578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800753e:	429a      	cmp	r2, r3
 8007540:	d11a      	bne.n	8007578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007548:	4013      	ands	r3, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800754e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007550:	4293      	cmp	r3, r2
 8007552:	d111      	bne.n	8007578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	3b01      	subs	r3, #1
 8007562:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d107      	bne.n	8007578 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007572:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800

0800758c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0cc      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075a0:	4b68      	ldr	r3, [pc, #416]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d90c      	bls.n	80075c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b65      	ldr	r3, [pc, #404]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075b6:	4b63      	ldr	r3, [pc, #396]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d001      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0b8      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0302 	and.w	r3, r3, #2
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d020      	beq.n	8007616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e0:	4b59      	ldr	r3, [pc, #356]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4a58      	ldr	r2, [pc, #352]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f8:	4b53      	ldr	r3, [pc, #332]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	4a52      	ldr	r2, [pc, #328]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007604:	4b50      	ldr	r3, [pc, #320]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	494d      	ldr	r1, [pc, #308]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	4313      	orrs	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d044      	beq.n	80076ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d107      	bne.n	800763a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	4b47      	ldr	r3, [pc, #284]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d119      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e07f      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d003      	beq.n	800764a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007646:	2b03      	cmp	r3, #3
 8007648:	d107      	bne.n	800765a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764a:	4b3f      	ldr	r3, [pc, #252]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e06f      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765a:	4b3b      	ldr	r3, [pc, #236]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e067      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800766a:	4b37      	ldr	r3, [pc, #220]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f023 0203 	bic.w	r2, r3, #3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4934      	ldr	r1, [pc, #208]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 8007678:	4313      	orrs	r3, r2
 800767a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800767c:	f7fe f818 	bl	80056b0 <HAL_GetTick>
 8007680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007682:	e00a      	b.n	800769a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007684:	f7fe f814 	bl	80056b0 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e04f      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769a:	4b2b      	ldr	r3, [pc, #172]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 020c 	and.w	r2, r3, #12
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d1eb      	bne.n	8007684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076ac:	4b25      	ldr	r3, [pc, #148]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d20c      	bcs.n	80076d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ba:	4b22      	ldr	r3, [pc, #136]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c2:	4b20      	ldr	r3, [pc, #128]	@ (8007744 <HAL_RCC_ClockConfig+0x1b8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0307 	and.w	r3, r3, #7
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d001      	beq.n	80076d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e032      	b.n	800773a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e0:	4b19      	ldr	r3, [pc, #100]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4916      	ldr	r1, [pc, #88]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076fe:	4b12      	ldr	r3, [pc, #72]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	490e      	ldr	r1, [pc, #56]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	4313      	orrs	r3, r2
 8007710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007712:	f000 f821 	bl	8007758 <HAL_RCC_GetSysClockFreq>
 8007716:	4602      	mov	r2, r0
 8007718:	4b0b      	ldr	r3, [pc, #44]	@ (8007748 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	490a      	ldr	r1, [pc, #40]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 8007724:	5ccb      	ldrb	r3, [r1, r3]
 8007726:	fa22 f303 	lsr.w	r3, r2, r3
 800772a:	4a09      	ldr	r2, [pc, #36]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800772c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800772e:	4b09      	ldr	r3, [pc, #36]	@ (8007754 <HAL_RCC_ClockConfig+0x1c8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4618      	mov	r0, r3
 8007734:	f7fd ff78 	bl	8005628 <HAL_InitTick>

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40023c00 	.word	0x40023c00
 8007748:	40023800 	.word	0x40023800
 800774c:	0800e0e0 	.word	0x0800e0e0
 8007750:	20000020 	.word	0x20000020
 8007754:	20000024 	.word	0x20000024

08007758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800775c:	b094      	sub	sp, #80	@ 0x50
 800775e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	647b      	str	r3, [r7, #68]	@ 0x44
 8007764:	2300      	movs	r3, #0
 8007766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007768:	2300      	movs	r3, #0
 800776a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007770:	4b79      	ldr	r3, [pc, #484]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b08      	cmp	r3, #8
 800777a:	d00d      	beq.n	8007798 <HAL_RCC_GetSysClockFreq+0x40>
 800777c:	2b08      	cmp	r3, #8
 800777e:	f200 80e1 	bhi.w	8007944 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_RCC_GetSysClockFreq+0x34>
 8007786:	2b04      	cmp	r3, #4
 8007788:	d003      	beq.n	8007792 <HAL_RCC_GetSysClockFreq+0x3a>
 800778a:	e0db      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800778c:	4b73      	ldr	r3, [pc, #460]	@ (800795c <HAL_RCC_GetSysClockFreq+0x204>)
 800778e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007790:	e0db      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007792:	4b73      	ldr	r3, [pc, #460]	@ (8007960 <HAL_RCC_GetSysClockFreq+0x208>)
 8007794:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007796:	e0d8      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007798:	4b6f      	ldr	r3, [pc, #444]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077a2:	4b6d      	ldr	r3, [pc, #436]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d063      	beq.n	8007876 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	099b      	lsrs	r3, r3, #6
 80077b4:	2200      	movs	r2, #0
 80077b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077ca:	4622      	mov	r2, r4
 80077cc:	462b      	mov	r3, r5
 80077ce:	f04f 0000 	mov.w	r0, #0
 80077d2:	f04f 0100 	mov.w	r1, #0
 80077d6:	0159      	lsls	r1, r3, #5
 80077d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077dc:	0150      	lsls	r0, r2, #5
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4621      	mov	r1, r4
 80077e4:	1a51      	subs	r1, r2, r1
 80077e6:	6139      	str	r1, [r7, #16]
 80077e8:	4629      	mov	r1, r5
 80077ea:	eb63 0301 	sbc.w	r3, r3, r1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077fc:	4659      	mov	r1, fp
 80077fe:	018b      	lsls	r3, r1, #6
 8007800:	4651      	mov	r1, sl
 8007802:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007806:	4651      	mov	r1, sl
 8007808:	018a      	lsls	r2, r1, #6
 800780a:	4651      	mov	r1, sl
 800780c:	ebb2 0801 	subs.w	r8, r2, r1
 8007810:	4659      	mov	r1, fp
 8007812:	eb63 0901 	sbc.w	r9, r3, r1
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800782a:	4690      	mov	r8, r2
 800782c:	4699      	mov	r9, r3
 800782e:	4623      	mov	r3, r4
 8007830:	eb18 0303 	adds.w	r3, r8, r3
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	462b      	mov	r3, r5
 8007838:	eb49 0303 	adc.w	r3, r9, r3
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800784a:	4629      	mov	r1, r5
 800784c:	024b      	lsls	r3, r1, #9
 800784e:	4621      	mov	r1, r4
 8007850:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007854:	4621      	mov	r1, r4
 8007856:	024a      	lsls	r2, r1, #9
 8007858:	4610      	mov	r0, r2
 800785a:	4619      	mov	r1, r3
 800785c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785e:	2200      	movs	r2, #0
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007868:	f7f9 f99c 	bl	8000ba4 <__aeabi_uldivmod>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4613      	mov	r3, r2
 8007872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007874:	e058      	b.n	8007928 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007876:	4b38      	ldr	r3, [pc, #224]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	099b      	lsrs	r3, r3, #6
 800787c:	2200      	movs	r2, #0
 800787e:	4618      	mov	r0, r3
 8007880:	4611      	mov	r1, r2
 8007882:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007886:	623b      	str	r3, [r7, #32]
 8007888:	2300      	movs	r3, #0
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
 800788c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	f04f 0000 	mov.w	r0, #0
 8007898:	f04f 0100 	mov.w	r1, #0
 800789c:	0159      	lsls	r1, r3, #5
 800789e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078a2:	0150      	lsls	r0, r2, #5
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4641      	mov	r1, r8
 80078aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80078ae:	4649      	mov	r1, r9
 80078b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078c8:	ebb2 040a 	subs.w	r4, r2, sl
 80078cc:	eb63 050b 	sbc.w	r5, r3, fp
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	00eb      	lsls	r3, r5, #3
 80078da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078de:	00e2      	lsls	r2, r4, #3
 80078e0:	4614      	mov	r4, r2
 80078e2:	461d      	mov	r5, r3
 80078e4:	4643      	mov	r3, r8
 80078e6:	18e3      	adds	r3, r4, r3
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	464b      	mov	r3, r9
 80078ec:	eb45 0303 	adc.w	r3, r5, r3
 80078f0:	607b      	str	r3, [r7, #4]
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078fe:	4629      	mov	r1, r5
 8007900:	028b      	lsls	r3, r1, #10
 8007902:	4621      	mov	r1, r4
 8007904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007908:	4621      	mov	r1, r4
 800790a:	028a      	lsls	r2, r1, #10
 800790c:	4610      	mov	r0, r2
 800790e:	4619      	mov	r1, r3
 8007910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007912:	2200      	movs	r2, #0
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	61fa      	str	r2, [r7, #28]
 8007918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800791c:	f7f9 f942 	bl	8000ba4 <__aeabi_uldivmod>
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4613      	mov	r3, r2
 8007926:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007928:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <HAL_RCC_GetSysClockFreq+0x200>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	3301      	adds	r3, #1
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007938:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800793a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007942:	e002      	b.n	800794a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007944:	4b05      	ldr	r3, [pc, #20]	@ (800795c <HAL_RCC_GetSysClockFreq+0x204>)
 8007946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800794a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800794c:	4618      	mov	r0, r3
 800794e:	3750      	adds	r7, #80	@ 0x50
 8007950:	46bd      	mov	sp, r7
 8007952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007956:	bf00      	nop
 8007958:	40023800 	.word	0x40023800
 800795c:	00f42400 	.word	0x00f42400
 8007960:	007a1200 	.word	0x007a1200

08007964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007968:	4b03      	ldr	r3, [pc, #12]	@ (8007978 <HAL_RCC_GetHCLKFreq+0x14>)
 800796a:	681b      	ldr	r3, [r3, #0]
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000020 	.word	0x20000020

0800797c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007980:	f7ff fff0 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 8007984:	4602      	mov	r2, r0
 8007986:	4b05      	ldr	r3, [pc, #20]	@ (800799c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	0a9b      	lsrs	r3, r3, #10
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4903      	ldr	r1, [pc, #12]	@ (80079a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007992:	5ccb      	ldrb	r3, [r1, r3]
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40023800 	.word	0x40023800
 80079a0:	0800e0f0 	.word	0x0800e0f0

080079a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079a8:	f7ff ffdc 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b05      	ldr	r3, [pc, #20]	@ (80079c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0b5b      	lsrs	r3, r3, #13
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4903      	ldr	r1, [pc, #12]	@ (80079c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40023800 	.word	0x40023800
 80079c8:	0800e0f0 	.word	0x0800e0f0

080079cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e07b      	b.n	8007ad6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d108      	bne.n	80079f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ee:	d009      	beq.n	8007a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	61da      	str	r2, [r3, #28]
 80079f6:	e005      	b.n	8007a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fd fb50 	bl	80050c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a88:	ea42 0103 	orr.w	r1, r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	0c1b      	lsrs	r3, r3, #16
 8007aa2:	f003 0104 	and.w	r1, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	f003 0210 	and.w	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b088      	sub	sp, #32
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	603b      	str	r3, [r7, #0]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_SPI_Transmit+0x22>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e12d      	b.n	8007d5c <HAL_SPI_Transmit+0x27e>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b08:	f7fd fdd2 	bl	80056b0 <HAL_GetTick>
 8007b0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d002      	beq.n	8007b24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007b1e:	2302      	movs	r3, #2
 8007b20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b22:	e116      	b.n	8007d52 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_SPI_Transmit+0x52>
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b34:	e10d      	b.n	8007d52 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	88fa      	ldrh	r2, [r7, #6]
 8007b4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	88fa      	ldrh	r2, [r7, #6]
 8007b54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b7c:	d10f      	bne.n	8007b9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b40      	cmp	r3, #64	@ 0x40
 8007baa:	d007      	beq.n	8007bbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc4:	d14f      	bne.n	8007c66 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_SPI_Transmit+0xf6>
 8007bce:	8afb      	ldrh	r3, [r7, #22]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d142      	bne.n	8007c5a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd8:	881a      	ldrh	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be4:	1c9a      	adds	r2, r3, #2
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bf8:	e02f      	b.n	8007c5a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d112      	bne.n	8007c2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	881a      	ldrh	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	1c9a      	adds	r2, r3, #2
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007c2c:	e015      	b.n	8007c5a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c2e:	f7fd fd3f 	bl	80056b0 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d803      	bhi.n	8007c46 <HAL_SPI_Transmit+0x168>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d102      	bne.n	8007c4c <HAL_SPI_Transmit+0x16e>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007c58:	e07b      	b.n	8007d52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1ca      	bne.n	8007bfa <HAL_SPI_Transmit+0x11c>
 8007c64:	e050      	b.n	8007d08 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_SPI_Transmit+0x196>
 8007c6e:	8afb      	ldrh	r3, [r7, #22]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d144      	bne.n	8007cfe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	7812      	ldrb	r2, [r2, #0]
 8007c80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c9a:	e030      	b.n	8007cfe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d113      	bne.n	8007cd2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	330c      	adds	r3, #12
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007cd0:	e015      	b.n	8007cfe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cd2:	f7fd fced 	bl	80056b0 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d803      	bhi.n	8007cea <HAL_SPI_Transmit+0x20c>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d102      	bne.n	8007cf0 <HAL_SPI_Transmit+0x212>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d106      	bne.n	8007cfe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007cfc:	e029      	b.n	8007d52 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1c9      	bne.n	8007c9c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fbdf 	bl	80084d0 <SPI_EndRxTxTransaction>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10a      	bne.n	8007d3c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	613b      	str	r3, [r7, #16]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e003      	b.n	8007d52 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d002      	beq.n	8007d8a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
 8007d86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d88:	e0fb      	b.n	8007f82 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d92:	d112      	bne.n	8007dba <HAL_SPI_Receive+0x56>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10e      	bne.n	8007dba <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007da4:	88fa      	ldrh	r2, [r7, #6]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	4613      	mov	r3, r2
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f8ef 	bl	8007f94 <HAL_SPI_TransmitReceive>
 8007db6:	4603      	mov	r3, r0
 8007db8:	e0e8      	b.n	8007f8c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_SPI_Receive+0x64>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e0e1      	b.n	8007f8c <HAL_SPI_Receive+0x228>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dd0:	f7fd fc6e 	bl	80056b0 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_SPI_Receive+0x7e>
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d102      	bne.n	8007de8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007de6:	e0cc      	b.n	8007f82 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2204      	movs	r2, #4
 8007dec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	88fa      	ldrh	r2, [r7, #6]
 8007e00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	88fa      	ldrh	r2, [r7, #6]
 8007e06:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e2e:	d10f      	bne.n	8007e50 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5a:	2b40      	cmp	r3, #64	@ 0x40
 8007e5c:	d007      	beq.n	8007e6e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d16a      	bne.n	8007f4c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007e76:	e032      	b.n	8007ede <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d115      	bne.n	8007eb2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f103 020c 	add.w	r2, r3, #12
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eb0:	e015      	b.n	8007ede <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb2:	f7fd fbfd 	bl	80056b0 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d803      	bhi.n	8007eca <HAL_SPI_Receive+0x166>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d102      	bne.n	8007ed0 <HAL_SPI_Receive+0x16c>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d106      	bne.n	8007ede <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007edc:	e051      	b.n	8007f82 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1c7      	bne.n	8007e78 <HAL_SPI_Receive+0x114>
 8007ee8:	e035      	b.n	8007f56 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d113      	bne.n	8007f20 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	b292      	uxth	r2, r2
 8007f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0a:	1c9a      	adds	r2, r3, #2
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f1e:	e015      	b.n	8007f4c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f20:	f7fd fbc6 	bl	80056b0 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d803      	bhi.n	8007f38 <HAL_SPI_Receive+0x1d4>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d102      	bne.n	8007f3e <HAL_SPI_Receive+0x1da>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d106      	bne.n	8007f4c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007f4a:	e01a      	b.n	8007f82 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1c9      	bne.n	8007eea <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fa52 	bl	8008404 <SPI_EndRxTransaction>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	75fb      	strb	r3, [r7, #23]
 8007f78:	e003      	b.n	8007f82 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08c      	sub	sp, #48	@ 0x30
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_SPI_TransmitReceive+0x26>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e198      	b.n	80082ec <HAL_SPI_TransmitReceive+0x358>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fc2:	f7fd fb75 	bl	80056b0 <HAL_GetTick>
 8007fc6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007fd8:	887b      	ldrh	r3, [r7, #2]
 8007fda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d00f      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x70>
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fea:	d107      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d103      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x68>
 8007ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d003      	beq.n	8008004 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008002:	e16d      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x82>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_SPI_TransmitReceive+0x82>
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800801c:	e160      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b04      	cmp	r3, #4
 8008028:	d003      	beq.n	8008032 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2205      	movs	r2, #5
 800802e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	887a      	ldrh	r2, [r7, #2]
 8008042:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	887a      	ldrh	r2, [r7, #2]
 8008048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	887a      	ldrh	r2, [r7, #2]
 8008054:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	887a      	ldrh	r2, [r7, #2]
 800805a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	d007      	beq.n	8008086 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800808e:	d17c      	bne.n	800818a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <HAL_SPI_TransmitReceive+0x10a>
 8008098:	8b7b      	ldrh	r3, [r7, #26]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d16a      	bne.n	8008174 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ae:	1c9a      	adds	r2, r3, #2
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c2:	e057      	b.n	8008174 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d11b      	bne.n	800810a <HAL_SPI_TransmitReceive+0x176>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d016      	beq.n	800810a <HAL_SPI_TransmitReceive+0x176>
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d113      	bne.n	800810a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	881a      	ldrh	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f2:	1c9a      	adds	r2, r3, #2
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0301 	and.w	r3, r3, #1
 8008114:	2b01      	cmp	r3, #1
 8008116:	d119      	bne.n	800814c <HAL_SPI_TransmitReceive+0x1b8>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800811c:	b29b      	uxth	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d014      	beq.n	800814c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	b292      	uxth	r2, r2
 800812e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008134:	1c9a      	adds	r2, r3, #2
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813e:	b29b      	uxth	r3, r3
 8008140:	3b01      	subs	r3, #1
 8008142:	b29a      	uxth	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008148:	2301      	movs	r3, #1
 800814a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800814c:	f7fd fab0 	bl	80056b0 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008158:	429a      	cmp	r2, r3
 800815a:	d80b      	bhi.n	8008174 <HAL_SPI_TransmitReceive+0x1e0>
 800815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d007      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008172:	e0b5      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1a2      	bne.n	80080c4 <HAL_SPI_TransmitReceive+0x130>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d19d      	bne.n	80080c4 <HAL_SPI_TransmitReceive+0x130>
 8008188:	e080      	b.n	800828c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_SPI_TransmitReceive+0x204>
 8008192:	8b7b      	ldrh	r3, [r7, #26]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d16f      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	330c      	adds	r3, #12
 80081a2:	7812      	ldrb	r2, [r2, #0]
 80081a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	3b01      	subs	r3, #1
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081be:	e05b      	b.n	8008278 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d11c      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x274>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d017      	beq.n	8008208 <HAL_SPI_TransmitReceive+0x274>
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d114      	bne.n	8008208 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	7812      	ldrb	r2, [r2, #0]
 80081ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008204:	2300      	movs	r3, #0
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b01      	cmp	r3, #1
 8008214:	d119      	bne.n	800824a <HAL_SPI_TransmitReceive+0x2b6>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d014      	beq.n	800824a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68da      	ldr	r2, [r3, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008246:	2301      	movs	r3, #1
 8008248:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800824a:	f7fd fa31 	bl	80056b0 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008256:	429a      	cmp	r2, r3
 8008258:	d803      	bhi.n	8008262 <HAL_SPI_TransmitReceive+0x2ce>
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008260:	d102      	bne.n	8008268 <HAL_SPI_TransmitReceive+0x2d4>
 8008262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008264:	2b00      	cmp	r3, #0
 8008266:	d107      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008276:	e033      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800827c:	b29b      	uxth	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d19e      	bne.n	80081c0 <HAL_SPI_TransmitReceive+0x22c>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008286:	b29b      	uxth	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d199      	bne.n	80081c0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800828c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800828e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f91d 	bl	80084d0 <SPI_EndRxTxTransaction>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80082a8:	e01a      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082b2:	2300      	movs	r3, #0
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	617b      	str	r3, [r7, #20]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082d6:	e003      	b.n	80082e0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80082e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3730      	adds	r7, #48	@ 0x30
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	4613      	mov	r3, r2
 8008302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008304:	f7fd f9d4 	bl	80056b0 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830c:	1a9b      	subs	r3, r3, r2
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4413      	add	r3, r2
 8008312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008314:	f7fd f9cc 	bl	80056b0 <HAL_GetTick>
 8008318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800831a:	4b39      	ldr	r3, [pc, #228]	@ (8008400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	015b      	lsls	r3, r3, #5
 8008320:	0d1b      	lsrs	r3, r3, #20
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800832a:	e054      	b.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d050      	beq.n	80083d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008334:	f7fd f9bc 	bl	80056b0 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	429a      	cmp	r2, r3
 8008342:	d902      	bls.n	800834a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d13d      	bne.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008362:	d111      	bne.n	8008388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800836c:	d004      	beq.n	8008378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008376:	d107      	bne.n	8008388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008390:	d10f      	bne.n	80083b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e017      	b.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689a      	ldr	r2, [r3, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4013      	ands	r3, r2
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	bf0c      	ite	eq
 80083e6:	2301      	moveq	r3, #1
 80083e8:	2300      	movne	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d19b      	bne.n	800832c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000020 	.word	0x20000020

08008404 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008418:	d111      	bne.n	800843e <SPI_EndRxTransaction+0x3a>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008422:	d004      	beq.n	800842e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800842c:	d107      	bne.n	800843e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800843c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008446:	d12a      	bne.n	800849e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008450:	d012      	beq.n	8008478 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2200      	movs	r2, #0
 800845a:	2180      	movs	r1, #128	@ 0x80
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff ff49 	bl	80082f4 <SPI_WaitFlagStateUntilTimeout>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d02d      	beq.n	80084c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846c:	f043 0220 	orr.w	r2, r3, #32
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e026      	b.n	80084c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2200      	movs	r2, #0
 8008480:	2101      	movs	r1, #1
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f7ff ff36 	bl	80082f4 <SPI_WaitFlagStateUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01a      	beq.n	80084c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008492:	f043 0220 	orr.w	r2, r3, #32
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e013      	b.n	80084c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2200      	movs	r2, #0
 80084a6:	2101      	movs	r1, #1
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff ff23 	bl	80082f4 <SPI_WaitFlagStateUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b8:	f043 0220 	orr.w	r2, r3, #32
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e000      	b.n	80084c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2201      	movs	r2, #1
 80084e4:	2102      	movs	r1, #2
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff ff04 	bl	80082f4 <SPI_WaitFlagStateUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f6:	f043 0220 	orr.w	r2, r3, #32
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e032      	b.n	8008568 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008502:	4b1b      	ldr	r3, [pc, #108]	@ (8008570 <SPI_EndRxTxTransaction+0xa0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1b      	ldr	r2, [pc, #108]	@ (8008574 <SPI_EndRxTxTransaction+0xa4>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	0d5b      	lsrs	r3, r3, #21
 800850e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008512:	fb02 f303 	mul.w	r3, r2, r3
 8008516:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008520:	d112      	bne.n	8008548 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2200      	movs	r2, #0
 800852a:	2180      	movs	r1, #128	@ 0x80
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff fee1 	bl	80082f4 <SPI_WaitFlagStateUntilTimeout>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d016      	beq.n	8008566 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853c:	f043 0220 	orr.w	r2, r3, #32
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e00f      	b.n	8008568 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	3b01      	subs	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855e:	2b80      	cmp	r3, #128	@ 0x80
 8008560:	d0f2      	beq.n	8008548 <SPI_EndRxTxTransaction+0x78>
 8008562:	e000      	b.n	8008566 <SPI_EndRxTxTransaction+0x96>
        break;
 8008564:	bf00      	nop
  }

  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000020 	.word	0x20000020
 8008574:	165e9f81 	.word	0x165e9f81

08008578 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e038      	b.n	8008600 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7f9 f860 	bl	8001668 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3308      	adds	r3, #8
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f001 fc12 	bl	8009ddc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	461a      	mov	r2, r3
 80085c2:	68b9      	ldr	r1, [r7, #8]
 80085c4:	f001 fc74 	bl	8009eb0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6858      	ldr	r0, [r3, #4]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	f001 fca1 	bl	8009f1c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	6892      	ldr	r2, [r2, #8]
 80085e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	6892      	ldr	r2, [r2, #8]
 80085ee:	f041 0101 	orr.w	r1, r1, #1
 80085f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e041      	b.n	800869e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7fc feb2 	bl	8005398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f000 fa7e 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d001      	beq.n	80086c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e04e      	b.n	800875e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 0201 	orr.w	r2, r2, #1
 80086d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a23      	ldr	r2, [pc, #140]	@ (800876c <HAL_TIM_Base_Start_IT+0xc4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d022      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ea:	d01d      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008770 <HAL_TIM_Base_Start_IT+0xc8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d018      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008774 <HAL_TIM_Base_Start_IT+0xcc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d013      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1c      	ldr	r2, [pc, #112]	@ (8008778 <HAL_TIM_Base_Start_IT+0xd0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1b      	ldr	r2, [pc, #108]	@ (800877c <HAL_TIM_Base_Start_IT+0xd4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d009      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a19      	ldr	r2, [pc, #100]	@ (8008780 <HAL_TIM_Base_Start_IT+0xd8>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x80>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a18      	ldr	r2, [pc, #96]	@ (8008784 <HAL_TIM_Base_Start_IT+0xdc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d111      	bne.n	800874c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b06      	cmp	r3, #6
 8008738:	d010      	beq.n	800875c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0201 	orr.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874a:	e007      	b.n	800875c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40010400 	.word	0x40010400
 8008780:	40014000 	.word	0x40014000
 8008784:	40001800 	.word	0x40001800

08008788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d020      	beq.n	80087ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d01b      	beq.n	80087ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0202 	mvn.w	r2, #2
 80087bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f999 	bl	8008b0a <HAL_TIM_IC_CaptureCallback>
 80087d8:	e005      	b.n	80087e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f98b 	bl	8008af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f99c 	bl	8008b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d020      	beq.n	8008838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d01b      	beq.n	8008838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f06f 0204 	mvn.w	r2, #4
 8008808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2202      	movs	r2, #2
 800880e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800881a:	2b00      	cmp	r3, #0
 800881c:	d003      	beq.n	8008826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f973 	bl	8008b0a <HAL_TIM_IC_CaptureCallback>
 8008824:	e005      	b.n	8008832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f965 	bl	8008af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f976 	bl	8008b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d020      	beq.n	8008884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f003 0308 	and.w	r3, r3, #8
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01b      	beq.n	8008884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0208 	mvn.w	r2, #8
 8008854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2204      	movs	r2, #4
 800885a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d003      	beq.n	8008872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f94d 	bl	8008b0a <HAL_TIM_IC_CaptureCallback>
 8008870:	e005      	b.n	800887e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f93f 	bl	8008af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f950 	bl	8008b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	2b00      	cmp	r3, #0
 800888c:	d020      	beq.n	80088d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01b      	beq.n	80088d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0210 	mvn.w	r2, #16
 80088a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2208      	movs	r2, #8
 80088a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f927 	bl	8008b0a <HAL_TIM_IC_CaptureCallback>
 80088bc:	e005      	b.n	80088ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f919 	bl	8008af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f92a 	bl	8008b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00c      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d007      	beq.n	80088f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f06f 0201 	mvn.w	r2, #1
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7fc fb72 	bl	8004fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00c      	beq.n	8008918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008904:	2b00      	cmp	r3, #0
 8008906:	d007      	beq.n	8008918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fae4 	bl	8008ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00c      	beq.n	800893c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d007      	beq.n	800893c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8fb 	bl	8008b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0320 	and.w	r3, r3, #32
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0220 	mvn.w	r2, #32
 8008958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fab6 	bl	8008ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_TIM_ConfigClockSource+0x1c>
 8008980:	2302      	movs	r3, #2
 8008982:	e0b4      	b.n	8008aee <HAL_TIM_ConfigClockSource+0x186>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089bc:	d03e      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0xd4>
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	f200 8087 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ca:	f000 8086 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x172>
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d2:	d87f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089d4:	2b70      	cmp	r3, #112	@ 0x70
 80089d6:	d01a      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xa6>
 80089d8:	2b70      	cmp	r3, #112	@ 0x70
 80089da:	d87b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089dc:	2b60      	cmp	r3, #96	@ 0x60
 80089de:	d050      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x11a>
 80089e0:	2b60      	cmp	r3, #96	@ 0x60
 80089e2:	d877      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089e4:	2b50      	cmp	r3, #80	@ 0x50
 80089e6:	d03c      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0xfa>
 80089e8:	2b50      	cmp	r3, #80	@ 0x50
 80089ea:	d873      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	d058      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80089f0:	2b40      	cmp	r3, #64	@ 0x40
 80089f2:	d86f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089f4:	2b30      	cmp	r3, #48	@ 0x30
 80089f6:	d064      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80089f8:	2b30      	cmp	r3, #48	@ 0x30
 80089fa:	d86b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d060      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d867      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05c      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d05a      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a0c:	e062      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a1e:	f000 f9b9 	bl	8008d94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	609a      	str	r2, [r3, #8]
      break;
 8008a3a:	e04f      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4c:	f000 f9a2 	bl	8008d94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a5e:	609a      	str	r2, [r3, #8]
      break;
 8008a60:	e03c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f000 f916 	bl	8008ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2150      	movs	r1, #80	@ 0x50
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 f96f 	bl	8008d5e <TIM_ITRx_SetConfig>
      break;
 8008a80:	e02c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f000 f935 	bl	8008cfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2160      	movs	r1, #96	@ 0x60
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f95f 	bl	8008d5e <TIM_ITRx_SetConfig>
      break;
 8008aa0:	e01c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f000 f8f6 	bl	8008ca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2140      	movs	r1, #64	@ 0x40
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f94f 	bl	8008d5e <TIM_ITRx_SetConfig>
      break;
 8008ac0:	e00c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 f946 	bl	8008d5e <TIM_ITRx_SetConfig>
      break;
 8008ad2:	e003      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad8:	e000      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b083      	sub	sp, #12
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008afe:	bf00      	nop
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
	...

08008b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a46      	ldr	r2, [pc, #280]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d013      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b66:	d00f      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a43      	ldr	r2, [pc, #268]	@ (8008c78 <TIM_Base_SetConfig+0x130>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00b      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a42      	ldr	r2, [pc, #264]	@ (8008c7c <TIM_Base_SetConfig+0x134>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d007      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a41      	ldr	r2, [pc, #260]	@ (8008c80 <TIM_Base_SetConfig+0x138>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a40      	ldr	r2, [pc, #256]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d108      	bne.n	8008b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a35      	ldr	r2, [pc, #212]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d02b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba8:	d027      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a32      	ldr	r2, [pc, #200]	@ (8008c78 <TIM_Base_SetConfig+0x130>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d023      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a31      	ldr	r2, [pc, #196]	@ (8008c7c <TIM_Base_SetConfig+0x134>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d01f      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	@ (8008c80 <TIM_Base_SetConfig+0x138>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d017      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008c88 <TIM_Base_SetConfig+0x140>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c8c <TIM_Base_SetConfig+0x144>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00f      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <TIM_Base_SetConfig+0x148>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <TIM_Base_SetConfig+0x14c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <TIM_Base_SetConfig+0x150>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a29      	ldr	r2, [pc, #164]	@ (8008c9c <TIM_Base_SetConfig+0x154>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d108      	bne.n	8008c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a10      	ldr	r2, [pc, #64]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_Base_SetConfig+0xf8>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a12      	ldr	r2, [pc, #72]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d103      	bne.n	8008c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	611a      	str	r2, [r3, #16]
  }
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40010000 	.word	0x40010000
 8008c78:	40000400 	.word	0x40000400
 8008c7c:	40000800 	.word	0x40000800
 8008c80:	40000c00 	.word	0x40000c00
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	40001800 	.word	0x40001800
 8008c98:	40001c00 	.word	0x40001c00
 8008c9c:	40002000 	.word	0x40002000

08008ca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f023 030a 	bic.w	r3, r3, #10
 8008cdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	621a      	str	r2, [r3, #32]
}
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b087      	sub	sp, #28
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	f023 0210 	bic.w	r2, r3, #16
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	031b      	lsls	r3, r3, #12
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	621a      	str	r2, [r3, #32]
}
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f043 0307 	orr.w	r3, r3, #7
 8008d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	609a      	str	r2, [r3, #8]
}
 8008d88:	bf00      	nop
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	021a      	lsls	r2, r3, #8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	609a      	str	r2, [r3, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e05a      	b.n	8008ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a21      	ldr	r2, [pc, #132]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d022      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e38:	d01d      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d018      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d013      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1a      	ldr	r2, [pc, #104]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00e      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a18      	ldr	r2, [pc, #96]	@ (8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d009      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a17      	ldr	r2, [pc, #92]	@ (8008ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d004      	beq.n	8008e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a15      	ldr	r2, [pc, #84]	@ (8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d10c      	bne.n	8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40010400 	.word	0x40010400
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40001800 	.word	0x40001800

08008ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e042      	b.n	8008f8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fc faaa 	bl	8005474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	@ 0x24
 8008f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fcdb 	bl	80098f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2220      	movs	r2, #32
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d112      	bne.n	8008fd4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_UART_Receive_IT+0x26>
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e00b      	b.n	8008fd6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 faba 	bl	8009544 <UART_Start_Receive_IT>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	e000      	b.n	8008fd6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009006:	2300      	movs	r3, #0
 8009008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800900c:	2300      	movs	r3, #0
 800900e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009016:	f003 030f 	and.w	r3, r3, #15
 800901a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800901e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10f      	bne.n	8009046 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d009      	beq.n	8009046 <HAL_UART_IRQHandler+0x66>
 8009032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb99 	bl	8009776 <UART_Receive_IT>
      return;
 8009044:	e25b      	b.n	80094fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80de 	beq.w	800920c <HAL_UART_IRQHandler+0x22c>
 8009050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009054:	f003 0301 	and.w	r3, r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800905c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009060:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80d1 	beq.w	800920c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800906a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <HAL_UART_IRQHandler+0xae>
 8009076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009086:	f043 0201 	orr.w	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800908e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009092:	f003 0304 	and.w	r3, r3, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <HAL_UART_IRQHandler+0xd2>
 800909a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	f043 0202 	orr.w	r2, r3, #2
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00b      	beq.n	80090d6 <HAL_UART_IRQHandler+0xf6>
 80090be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ce:	f043 0204 	orr.w	r2, r3, #4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d011      	beq.n	8009106 <HAL_UART_IRQHandler+0x126>
 80090e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090e6:	f003 0320 	and.w	r3, r3, #32
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d105      	bne.n	80090fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	f043 0208 	orr.w	r2, r3, #8
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 81f2 	beq.w	80094f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d008      	beq.n	800912e <HAL_UART_IRQHandler+0x14e>
 800911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009120:	f003 0320 	and.w	r3, r3, #32
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fb24 	bl	8009776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009138:	2b40      	cmp	r3, #64	@ 0x40
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <HAL_UART_IRQHandler+0x17a>
 8009152:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009156:	2b00      	cmp	r3, #0
 8009158:	d04f      	beq.n	80091fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa2c 	bl	80095b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916a:	2b40      	cmp	r3, #64	@ 0x40
 800916c:	d141      	bne.n	80091f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3314      	adds	r3, #20
 8009174:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800917c:	e853 3f00 	ldrex	r3, [r3]
 8009180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800918c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3314      	adds	r3, #20
 8009196:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800919a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800919e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1d9      	bne.n	800916e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d013      	beq.n	80091ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c6:	4a7e      	ldr	r2, [pc, #504]	@ (80093c0 <HAL_UART_IRQHandler+0x3e0>)
 80091c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fc fc1f 	bl	8005a12 <HAL_DMA_Abort_IT>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d016      	beq.n	8009208 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e8:	e00e      	b.n	8009208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f994 	bl	8009518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	e00a      	b.n	8009208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f990 	bl	8009518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	e006      	b.n	8009208 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f98c 	bl	8009518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009206:	e175      	b.n	80094f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	bf00      	nop
    return;
 800920a:	e173      	b.n	80094f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 814f 	bne.w	80094b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921a:	f003 0310 	and.w	r3, r3, #16
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 8148 	beq.w	80094b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 8141 	beq.w	80094b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009232:	2300      	movs	r3, #0
 8009234:	60bb      	str	r3, [r7, #8]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60bb      	str	r3, [r7, #8]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	60bb      	str	r3, [r7, #8]
 8009246:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009252:	2b40      	cmp	r3, #64	@ 0x40
 8009254:	f040 80b6 	bne.w	80093c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009264:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 8145 	beq.w	80094f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009276:	429a      	cmp	r2, r3
 8009278:	f080 813e 	bcs.w	80094f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009282:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800928e:	f000 8088 	beq.w	80093a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	330c      	adds	r3, #12
 8009298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80092be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1d9      	bne.n	8009292 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3314      	adds	r3, #20
 80092e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3314      	adds	r3, #20
 80092fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009302:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009306:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800930a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e1      	bne.n	80092de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3314      	adds	r3, #20
 8009320:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800932a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800932c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009330:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3314      	adds	r3, #20
 800933a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800933e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009340:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800934c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e3      	bne.n	800931a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2220      	movs	r2, #32
 8009356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009372:	f023 0310 	bic.w	r3, r3, #16
 8009376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	330c      	adds	r3, #12
 8009380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009384:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009386:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800938a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e3      	bne.n	8009360 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939c:	4618      	mov	r0, r3
 800939e:	f7fc fac8 	bl	8005932 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f8b7 	bl	800952c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093be:	e09b      	b.n	80094f8 <HAL_UART_IRQHandler+0x518>
 80093c0:	0800967f 	.word	0x0800967f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 808e 	beq.w	80094fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80093e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8089 	beq.w	80094fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	330c      	adds	r3, #12
 80093f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009400:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	330c      	adds	r3, #12
 800940a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800940e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800941c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e3      	bne.n	80093ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3314      	adds	r3, #20
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	623b      	str	r3, [r7, #32]
   return(result);
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009446:	633a      	str	r2, [r7, #48]	@ 0x30
 8009448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800944c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e3      	bne.n	8009422 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2220      	movs	r2, #32
 800945e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	330c      	adds	r3, #12
 800946e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	e853 3f00 	ldrex	r3, [r3]
 8009476:	60fb      	str	r3, [r7, #12]
   return(result);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f023 0310 	bic.w	r3, r3, #16
 800947e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	330c      	adds	r3, #12
 8009488:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800948c:	61fa      	str	r2, [r7, #28]
 800948e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	69b9      	ldr	r1, [r7, #24]
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	617b      	str	r3, [r7, #20]
   return(result);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e3      	bne.n	8009468 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2202      	movs	r2, #2
 80094a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f83d 	bl	800952c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094b2:	e023      	b.n	80094fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d009      	beq.n	80094d4 <HAL_UART_IRQHandler+0x4f4>
 80094c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f8ea 	bl	80096a6 <UART_Transmit_IT>
    return;
 80094d2:	e014      	b.n	80094fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00e      	beq.n	80094fe <HAL_UART_IRQHandler+0x51e>
 80094e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d008      	beq.n	80094fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f92a 	bl	8009746 <UART_EndTransmit_IT>
    return;
 80094f2:	e004      	b.n	80094fe <HAL_UART_IRQHandler+0x51e>
    return;
 80094f4:	bf00      	nop
 80094f6:	e002      	b.n	80094fe <HAL_UART_IRQHandler+0x51e>
      return;
 80094f8:	bf00      	nop
 80094fa:	e000      	b.n	80094fe <HAL_UART_IRQHandler+0x51e>
      return;
 80094fc:	bf00      	nop
  }
}
 80094fe:	37e8      	adds	r7, #232	@ 0xe8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	88fa      	ldrh	r2, [r7, #6]
 800955c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	88fa      	ldrh	r2, [r7, #6]
 8009562:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2222      	movs	r2, #34	@ 0x22
 800956e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009588:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695a      	ldr	r2, [r3, #20]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0201 	orr.w	r2, r2, #1
 8009598:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0220 	orr.w	r2, r2, #32
 80095a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b095      	sub	sp, #84	@ 0x54
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	330c      	adds	r3, #12
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	330c      	adds	r3, #12
 80095de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80095e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e5      	bne.n	80095c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3314      	adds	r3, #20
 80095fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	e853 3f00 	ldrex	r3, [r3]
 8009602:	61fb      	str	r3, [r7, #28]
   return(result);
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f023 0301 	bic.w	r3, r3, #1
 800960a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3314      	adds	r3, #20
 8009612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800961a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e5      	bne.n	80095f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800962c:	2b01      	cmp	r3, #1
 800962e:	d119      	bne.n	8009664 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	330c      	adds	r3, #12
 8009636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	e853 3f00 	ldrex	r3, [r3]
 800963e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f023 0310 	bic.w	r3, r3, #16
 8009646:	647b      	str	r3, [r7, #68]	@ 0x44
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	330c      	adds	r3, #12
 800964e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009650:	61ba      	str	r2, [r7, #24]
 8009652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009654:	6979      	ldr	r1, [r7, #20]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	613b      	str	r3, [r7, #16]
   return(result);
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1e5      	bne.n	8009630 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009672:	bf00      	nop
 8009674:	3754      	adds	r7, #84	@ 0x54
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff ff3d 	bl	8009518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b085      	sub	sp, #20
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b21      	cmp	r3, #33	@ 0x21
 80096b8:	d13e      	bne.n	8009738 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c2:	d114      	bne.n	80096ee <UART_Transmit_IT+0x48>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d110      	bne.n	80096ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	1c9a      	adds	r2, r3, #2
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	621a      	str	r2, [r3, #32]
 80096ec:	e008      	b.n	8009700 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	1c59      	adds	r1, r3, #1
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6211      	str	r1, [r2, #32]
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009704:	b29b      	uxth	r3, r3
 8009706:	3b01      	subs	r3, #1
 8009708:	b29b      	uxth	r3, r3
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	4619      	mov	r1, r3
 800970e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10f      	bne.n	8009734 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009722:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009732:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	e000      	b.n	800973a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009738:	2302      	movs	r3, #2
  }
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800975c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fecc 	bl	8009504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b08c      	sub	sp, #48	@ 0x30
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b22      	cmp	r3, #34	@ 0x22
 8009788:	f040 80ae 	bne.w	80098e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009794:	d117      	bne.n	80097c6 <UART_Receive_IT+0x50>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d113      	bne.n	80097c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097be:	1c9a      	adds	r2, r3, #2
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80097c4:	e026      	b.n	8009814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80097cc:	2300      	movs	r3, #0
 80097ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097d8:	d007      	beq.n	80097ea <UART_Receive_IT+0x74>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <UART_Receive_IT+0x82>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d106      	bne.n	80097f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	e008      	b.n	800980a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009804:	b2da      	uxtb	r2, r3
 8009806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29b      	uxth	r3, r3
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	4619      	mov	r1, r3
 8009822:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009824:	2b00      	cmp	r3, #0
 8009826:	d15d      	bne.n	80098e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0220 	bic.w	r2, r2, #32
 8009836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0201 	bic.w	r2, r2, #1
 8009856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986a:	2b01      	cmp	r3, #1
 800986c:	d135      	bne.n	80098da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	330c      	adds	r3, #12
 800987a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	613b      	str	r3, [r7, #16]
   return(result);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f023 0310 	bic.w	r3, r3, #16
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	330c      	adds	r3, #12
 8009892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009894:	623a      	str	r2, [r7, #32]
 8009896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	69f9      	ldr	r1, [r7, #28]
 800989a:	6a3a      	ldr	r2, [r7, #32]
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e5      	bne.n	8009874 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0310 	and.w	r3, r3, #16
 80098b2:	2b10      	cmp	r3, #16
 80098b4:	d10a      	bne.n	80098cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fe2a 	bl	800952c <HAL_UARTEx_RxEventCallback>
 80098d8:	e002      	b.n	80098e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7fb facc 	bl	8004e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	e002      	b.n	80098ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3730      	adds	r7, #48	@ 0x30
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f8:	b0c0      	sub	sp, #256	@ 0x100
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800990c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009910:	68d9      	ldr	r1, [r3, #12]
 8009912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	ea40 0301 	orr.w	r3, r0, r1
 800991c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800991e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	431a      	orrs	r2, r3
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	431a      	orrs	r2, r3
 8009934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800994c:	f021 010c 	bic.w	r1, r1, #12
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800995a:	430b      	orrs	r3, r1
 800995c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800995e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800996a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800996e:	6999      	ldr	r1, [r3, #24]
 8009970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	ea40 0301 	orr.w	r3, r0, r1
 800997a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b8f      	ldr	r3, [pc, #572]	@ (8009bc0 <UART_SetConfig+0x2cc>)
 8009984:	429a      	cmp	r2, r3
 8009986:	d005      	beq.n	8009994 <UART_SetConfig+0xa0>
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4b8d      	ldr	r3, [pc, #564]	@ (8009bc4 <UART_SetConfig+0x2d0>)
 8009990:	429a      	cmp	r2, r3
 8009992:	d104      	bne.n	800999e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009994:	f7fe f806 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 8009998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800999c:	e003      	b.n	80099a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800999e:	f7fd ffed 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 80099a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099b0:	f040 810c 	bne.w	8009bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099b8:	2200      	movs	r2, #0
 80099ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80099c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	1891      	adds	r1, r2, r2
 80099cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80099ce:	415b      	adcs	r3, r3
 80099d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80099d6:	4621      	mov	r1, r4
 80099d8:	eb12 0801 	adds.w	r8, r2, r1
 80099dc:	4629      	mov	r1, r5
 80099de:	eb43 0901 	adc.w	r9, r3, r1
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099f6:	4690      	mov	r8, r2
 80099f8:	4699      	mov	r9, r3
 80099fa:	4623      	mov	r3, r4
 80099fc:	eb18 0303 	adds.w	r3, r8, r3
 8009a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a04:	462b      	mov	r3, r5
 8009a06:	eb49 0303 	adc.w	r3, r9, r3
 8009a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a22:	460b      	mov	r3, r1
 8009a24:	18db      	adds	r3, r3, r3
 8009a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a28:	4613      	mov	r3, r2
 8009a2a:	eb42 0303 	adc.w	r3, r2, r3
 8009a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a38:	f7f7 f8b4 	bl	8000ba4 <__aeabi_uldivmod>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4b61      	ldr	r3, [pc, #388]	@ (8009bc8 <UART_SetConfig+0x2d4>)
 8009a42:	fba3 2302 	umull	r2, r3, r3, r2
 8009a46:	095b      	lsrs	r3, r3, #5
 8009a48:	011c      	lsls	r4, r3, #4
 8009a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	1891      	adds	r1, r2, r2
 8009a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a64:	415b      	adcs	r3, r3
 8009a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8009a72:	4649      	mov	r1, r9
 8009a74:	eb43 0b01 	adc.w	fp, r3, r1
 8009a78:	f04f 0200 	mov.w	r2, #0
 8009a7c:	f04f 0300 	mov.w	r3, #0
 8009a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a8c:	4692      	mov	sl, r2
 8009a8e:	469b      	mov	fp, r3
 8009a90:	4643      	mov	r3, r8
 8009a92:	eb1a 0303 	adds.w	r3, sl, r3
 8009a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8009aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	18db      	adds	r3, r3, r3
 8009abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009abe:	4613      	mov	r3, r2
 8009ac0:	eb42 0303 	adc.w	r3, r2, r3
 8009ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ace:	f7f7 f869 	bl	8000ba4 <__aeabi_uldivmod>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc8 <UART_SetConfig+0x2d4>)
 8009ada:	fba3 2301 	umull	r2, r3, r3, r1
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	2264      	movs	r2, #100	@ 0x64
 8009ae2:	fb02 f303 	mul.w	r3, r2, r3
 8009ae6:	1acb      	subs	r3, r1, r3
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009aee:	4b36      	ldr	r3, [pc, #216]	@ (8009bc8 <UART_SetConfig+0x2d4>)
 8009af0:	fba3 2302 	umull	r2, r3, r3, r2
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009afc:	441c      	add	r4, r3
 8009afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009b10:	4642      	mov	r2, r8
 8009b12:	464b      	mov	r3, r9
 8009b14:	1891      	adds	r1, r2, r2
 8009b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b18:	415b      	adcs	r3, r3
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b20:	4641      	mov	r1, r8
 8009b22:	1851      	adds	r1, r2, r1
 8009b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b26:	4649      	mov	r1, r9
 8009b28:	414b      	adcs	r3, r1
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2c:	f04f 0200 	mov.w	r2, #0
 8009b30:	f04f 0300 	mov.w	r3, #0
 8009b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009b38:	4659      	mov	r1, fp
 8009b3a:	00cb      	lsls	r3, r1, #3
 8009b3c:	4651      	mov	r1, sl
 8009b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b42:	4651      	mov	r1, sl
 8009b44:	00ca      	lsls	r2, r1, #3
 8009b46:	4610      	mov	r0, r2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4642      	mov	r2, r8
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b54:	464b      	mov	r3, r9
 8009b56:	460a      	mov	r2, r1
 8009b58:	eb42 0303 	adc.w	r3, r2, r3
 8009b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b74:	460b      	mov	r3, r1
 8009b76:	18db      	adds	r3, r3, r3
 8009b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	eb42 0303 	adc.w	r3, r2, r3
 8009b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b8a:	f7f7 f80b 	bl	8000ba4 <__aeabi_uldivmod>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <UART_SetConfig+0x2d4>)
 8009b94:	fba3 1302 	umull	r1, r3, r3, r2
 8009b98:	095b      	lsrs	r3, r3, #5
 8009b9a:	2164      	movs	r1, #100	@ 0x64
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	3332      	adds	r3, #50	@ 0x32
 8009ba6:	4a08      	ldr	r2, [pc, #32]	@ (8009bc8 <UART_SetConfig+0x2d4>)
 8009ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	f003 0207 	and.w	r2, r3, #7
 8009bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4422      	add	r2, r4
 8009bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bbc:	e106      	b.n	8009dcc <UART_SetConfig+0x4d8>
 8009bbe:	bf00      	nop
 8009bc0:	40011000 	.word	0x40011000
 8009bc4:	40011400 	.word	0x40011400
 8009bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009bde:	4642      	mov	r2, r8
 8009be0:	464b      	mov	r3, r9
 8009be2:	1891      	adds	r1, r2, r2
 8009be4:	6239      	str	r1, [r7, #32]
 8009be6:	415b      	adcs	r3, r3
 8009be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bee:	4641      	mov	r1, r8
 8009bf0:	1854      	adds	r4, r2, r1
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	eb43 0501 	adc.w	r5, r3, r1
 8009bf8:	f04f 0200 	mov.w	r2, #0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	00eb      	lsls	r3, r5, #3
 8009c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c06:	00e2      	lsls	r2, r4, #3
 8009c08:	4614      	mov	r4, r2
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	4643      	mov	r3, r8
 8009c0e:	18e3      	adds	r3, r4, r3
 8009c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c14:	464b      	mov	r3, r9
 8009c16:	eb45 0303 	adc.w	r3, r5, r3
 8009c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c2e:	f04f 0200 	mov.w	r2, #0
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	008b      	lsls	r3, r1, #2
 8009c3e:	4621      	mov	r1, r4
 8009c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c44:	4621      	mov	r1, r4
 8009c46:	008a      	lsls	r2, r1, #2
 8009c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c4c:	f7f6 ffaa 	bl	8000ba4 <__aeabi_uldivmod>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4b60      	ldr	r3, [pc, #384]	@ (8009dd8 <UART_SetConfig+0x4e4>)
 8009c56:	fba3 2302 	umull	r2, r3, r3, r2
 8009c5a:	095b      	lsrs	r3, r3, #5
 8009c5c:	011c      	lsls	r4, r3, #4
 8009c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c70:	4642      	mov	r2, r8
 8009c72:	464b      	mov	r3, r9
 8009c74:	1891      	adds	r1, r2, r2
 8009c76:	61b9      	str	r1, [r7, #24]
 8009c78:	415b      	adcs	r3, r3
 8009c7a:	61fb      	str	r3, [r7, #28]
 8009c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c80:	4641      	mov	r1, r8
 8009c82:	1851      	adds	r1, r2, r1
 8009c84:	6139      	str	r1, [r7, #16]
 8009c86:	4649      	mov	r1, r9
 8009c88:	414b      	adcs	r3, r1
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c98:	4659      	mov	r1, fp
 8009c9a:	00cb      	lsls	r3, r1, #3
 8009c9c:	4651      	mov	r1, sl
 8009c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ca2:	4651      	mov	r1, sl
 8009ca4:	00ca      	lsls	r2, r1, #3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	4642      	mov	r2, r8
 8009cae:	189b      	adds	r3, r3, r2
 8009cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	460a      	mov	r2, r1
 8009cb8:	eb42 0303 	adc.w	r3, r2, r3
 8009cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009cd8:	4649      	mov	r1, r9
 8009cda:	008b      	lsls	r3, r1, #2
 8009cdc:	4641      	mov	r1, r8
 8009cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce2:	4641      	mov	r1, r8
 8009ce4:	008a      	lsls	r2, r1, #2
 8009ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009cea:	f7f6 ff5b 	bl	8000ba4 <__aeabi_uldivmod>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	4b38      	ldr	r3, [pc, #224]	@ (8009dd8 <UART_SetConfig+0x4e4>)
 8009cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	2264      	movs	r2, #100	@ 0x64
 8009cfe:	fb02 f303 	mul.w	r3, r2, r3
 8009d02:	1acb      	subs	r3, r1, r3
 8009d04:	011b      	lsls	r3, r3, #4
 8009d06:	3332      	adds	r3, #50	@ 0x32
 8009d08:	4a33      	ldr	r2, [pc, #204]	@ (8009dd8 <UART_SetConfig+0x4e4>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d14:	441c      	add	r4, r3
 8009d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	1891      	adds	r1, r2, r2
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	415b      	adcs	r3, r3
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d34:	4641      	mov	r1, r8
 8009d36:	1851      	adds	r1, r2, r1
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	414b      	adcs	r3, r1
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	00cb      	lsls	r3, r1, #3
 8009d50:	4651      	mov	r1, sl
 8009d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d56:	4651      	mov	r1, sl
 8009d58:	00ca      	lsls	r2, r1, #3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	4642      	mov	r2, r8
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d66:	464b      	mov	r3, r9
 8009d68:	460a      	mov	r2, r1
 8009d6a:	eb42 0303 	adc.w	r3, r2, r3
 8009d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d88:	4649      	mov	r1, r9
 8009d8a:	008b      	lsls	r3, r1, #2
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d92:	4641      	mov	r1, r8
 8009d94:	008a      	lsls	r2, r1, #2
 8009d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d9a:	f7f6 ff03 	bl	8000ba4 <__aeabi_uldivmod>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd8 <UART_SetConfig+0x4e4>)
 8009da4:	fba3 1302 	umull	r1, r3, r3, r2
 8009da8:	095b      	lsrs	r3, r3, #5
 8009daa:	2164      	movs	r1, #100	@ 0x64
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	3332      	adds	r3, #50	@ 0x32
 8009db6:	4a08      	ldr	r2, [pc, #32]	@ (8009dd8 <UART_SetConfig+0x4e4>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	095b      	lsrs	r3, r3, #5
 8009dbe:	f003 020f 	and.w	r2, r3, #15
 8009dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4422      	add	r2, r4
 8009dca:	609a      	str	r2, [r3, #8]
}
 8009dcc:	bf00      	nop
 8009dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dd8:	51eb851f 	.word	0x51eb851f

08009ddc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	f023 0101 	bic.w	r1, r3, #1
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	2b08      	cmp	r3, #8
 8009e04:	d102      	bne.n	8009e0c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009e06:	2340      	movs	r3, #64	@ 0x40
 8009e08:	617b      	str	r3, [r7, #20]
 8009e0a:	e001      	b.n	8009e10 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009e1c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009e22:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009e28:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009e2e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009e34:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009e3a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8009e40:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8009e46:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8009e4c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009e6a:	4b10      	ldr	r3, [pc, #64]	@ (8009eac <FSMC_NORSRAM_Init+0xd0>)
 8009e6c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e74:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009e7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	43db      	mvns	r3, r3
 8009e8c:	ea02 0103 	and.w	r1, r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	4319      	orrs	r1, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	0008fb7f 	.word	0x0008fb7f

08009eb0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	011b      	lsls	r3, r3, #4
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	021b      	lsls	r3, r3, #8
 8009edc:	431a      	orrs	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	051b      	lsls	r3, r3, #20
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	3b02      	subs	r3, #2
 8009ef6:	061b      	lsls	r3, r3, #24
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	3201      	adds	r2, #1
 8009f04:	4319      	orrs	r1, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f30:	d11d      	bne.n	8009f6e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f3a:	4b13      	ldr	r3, [pc, #76]	@ (8009f88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	6811      	ldr	r1, [r2, #0]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	6852      	ldr	r2, [r2, #4]
 8009f46:	0112      	lsls	r2, r2, #4
 8009f48:	4311      	orrs	r1, r2
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	6892      	ldr	r2, [r2, #8]
 8009f4e:	0212      	lsls	r2, r2, #8
 8009f50:	4311      	orrs	r1, r2
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	6992      	ldr	r2, [r2, #24]
 8009f56:	4311      	orrs	r1, r2
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	68d2      	ldr	r2, [r2, #12]
 8009f5c:	0412      	lsls	r2, r2, #16
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	ea43 0102 	orr.w	r1, r3, r2
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f6c:	e005      	b.n	8009f7a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8009f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	cff00000 	.word	0xcff00000

08009f8c <memset>:
 8009f8c:	4402      	add	r2, r0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d100      	bne.n	8009f96 <memset+0xa>
 8009f94:	4770      	bx	lr
 8009f96:	f803 1b01 	strb.w	r1, [r3], #1
 8009f9a:	e7f9      	b.n	8009f90 <memset+0x4>

08009f9c <__libc_init_array>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd4 <__libc_init_array+0x38>)
 8009fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8009fd8 <__libc_init_array+0x3c>)
 8009fa2:	1b64      	subs	r4, r4, r5
 8009fa4:	10a4      	asrs	r4, r4, #2
 8009fa6:	2600      	movs	r6, #0
 8009fa8:	42a6      	cmp	r6, r4
 8009faa:	d109      	bne.n	8009fc0 <__libc_init_array+0x24>
 8009fac:	4d0b      	ldr	r5, [pc, #44]	@ (8009fdc <__libc_init_array+0x40>)
 8009fae:	4c0c      	ldr	r4, [pc, #48]	@ (8009fe0 <__libc_init_array+0x44>)
 8009fb0:	f001 f89e 	bl	800b0f0 <_init>
 8009fb4:	1b64      	subs	r4, r4, r5
 8009fb6:	10a4      	asrs	r4, r4, #2
 8009fb8:	2600      	movs	r6, #0
 8009fba:	42a6      	cmp	r6, r4
 8009fbc:	d105      	bne.n	8009fca <__libc_init_array+0x2e>
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc4:	4798      	blx	r3
 8009fc6:	3601      	adds	r6, #1
 8009fc8:	e7ee      	b.n	8009fa8 <__libc_init_array+0xc>
 8009fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fce:	4798      	blx	r3
 8009fd0:	3601      	adds	r6, #1
 8009fd2:	e7f2      	b.n	8009fba <__libc_init_array+0x1e>
 8009fd4:	0800e2d8 	.word	0x0800e2d8
 8009fd8:	0800e2d8 	.word	0x0800e2d8
 8009fdc:	0800e2d8 	.word	0x0800e2d8
 8009fe0:	0800e2dc 	.word	0x0800e2dc
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <cos>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	ec53 2b10 	vmov	r2, r3, d0
 8009fee:	4826      	ldr	r0, [pc, #152]	@ (800a088 <cos+0xa0>)
 8009ff0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009ff4:	4281      	cmp	r1, r0
 8009ff6:	d806      	bhi.n	800a006 <cos+0x1e>
 8009ff8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a080 <cos+0x98>
 8009ffc:	b005      	add	sp, #20
 8009ffe:	f85d eb04 	ldr.w	lr, [sp], #4
 800a002:	f000 b899 	b.w	800a138 <__kernel_cos>
 800a006:	4821      	ldr	r0, [pc, #132]	@ (800a08c <cos+0xa4>)
 800a008:	4281      	cmp	r1, r0
 800a00a:	d908      	bls.n	800a01e <cos+0x36>
 800a00c:	4610      	mov	r0, r2
 800a00e:	4619      	mov	r1, r3
 800a010:	f7f6 f8de 	bl	80001d0 <__aeabi_dsub>
 800a014:	ec41 0b10 	vmov	d0, r0, r1
 800a018:	b005      	add	sp, #20
 800a01a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a01e:	4668      	mov	r0, sp
 800a020:	f000 fa0e 	bl	800a440 <__ieee754_rem_pio2>
 800a024:	f000 0003 	and.w	r0, r0, #3
 800a028:	2801      	cmp	r0, #1
 800a02a:	d00b      	beq.n	800a044 <cos+0x5c>
 800a02c:	2802      	cmp	r0, #2
 800a02e:	d015      	beq.n	800a05c <cos+0x74>
 800a030:	b9d8      	cbnz	r0, 800a06a <cos+0x82>
 800a032:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a036:	ed9d 0b00 	vldr	d0, [sp]
 800a03a:	f000 f87d 	bl	800a138 <__kernel_cos>
 800a03e:	ec51 0b10 	vmov	r0, r1, d0
 800a042:	e7e7      	b.n	800a014 <cos+0x2c>
 800a044:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a048:	ed9d 0b00 	vldr	d0, [sp]
 800a04c:	f000 f93c 	bl	800a2c8 <__kernel_sin>
 800a050:	ec53 2b10 	vmov	r2, r3, d0
 800a054:	4610      	mov	r0, r2
 800a056:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a05a:	e7db      	b.n	800a014 <cos+0x2c>
 800a05c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a060:	ed9d 0b00 	vldr	d0, [sp]
 800a064:	f000 f868 	bl	800a138 <__kernel_cos>
 800a068:	e7f2      	b.n	800a050 <cos+0x68>
 800a06a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a06e:	ed9d 0b00 	vldr	d0, [sp]
 800a072:	2001      	movs	r0, #1
 800a074:	f000 f928 	bl	800a2c8 <__kernel_sin>
 800a078:	e7e1      	b.n	800a03e <cos+0x56>
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w
	...
 800a088:	3fe921fb 	.word	0x3fe921fb
 800a08c:	7fefffff 	.word	0x7fefffff

0800a090 <sin>:
 800a090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a092:	ec53 2b10 	vmov	r2, r3, d0
 800a096:	4826      	ldr	r0, [pc, #152]	@ (800a130 <sin+0xa0>)
 800a098:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a09c:	4281      	cmp	r1, r0
 800a09e:	d807      	bhi.n	800a0b0 <sin+0x20>
 800a0a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a128 <sin+0x98>
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	b005      	add	sp, #20
 800a0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0ac:	f000 b90c 	b.w	800a2c8 <__kernel_sin>
 800a0b0:	4820      	ldr	r0, [pc, #128]	@ (800a134 <sin+0xa4>)
 800a0b2:	4281      	cmp	r1, r0
 800a0b4:	d908      	bls.n	800a0c8 <sin+0x38>
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	f7f6 f889 	bl	80001d0 <__aeabi_dsub>
 800a0be:	ec41 0b10 	vmov	d0, r0, r1
 800a0c2:	b005      	add	sp, #20
 800a0c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0c8:	4668      	mov	r0, sp
 800a0ca:	f000 f9b9 	bl	800a440 <__ieee754_rem_pio2>
 800a0ce:	f000 0003 	and.w	r0, r0, #3
 800a0d2:	2801      	cmp	r0, #1
 800a0d4:	d00c      	beq.n	800a0f0 <sin+0x60>
 800a0d6:	2802      	cmp	r0, #2
 800a0d8:	d011      	beq.n	800a0fe <sin+0x6e>
 800a0da:	b9e8      	cbnz	r0, 800a118 <sin+0x88>
 800a0dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0e0:	ed9d 0b00 	vldr	d0, [sp]
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	f000 f8ef 	bl	800a2c8 <__kernel_sin>
 800a0ea:	ec51 0b10 	vmov	r0, r1, d0
 800a0ee:	e7e6      	b.n	800a0be <sin+0x2e>
 800a0f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0f4:	ed9d 0b00 	vldr	d0, [sp]
 800a0f8:	f000 f81e 	bl	800a138 <__kernel_cos>
 800a0fc:	e7f5      	b.n	800a0ea <sin+0x5a>
 800a0fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a102:	ed9d 0b00 	vldr	d0, [sp]
 800a106:	2001      	movs	r0, #1
 800a108:	f000 f8de 	bl	800a2c8 <__kernel_sin>
 800a10c:	ec53 2b10 	vmov	r2, r3, d0
 800a110:	4610      	mov	r0, r2
 800a112:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a116:	e7d2      	b.n	800a0be <sin+0x2e>
 800a118:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a11c:	ed9d 0b00 	vldr	d0, [sp]
 800a120:	f000 f80a 	bl	800a138 <__kernel_cos>
 800a124:	e7f2      	b.n	800a10c <sin+0x7c>
 800a126:	bf00      	nop
	...
 800a130:	3fe921fb 	.word	0x3fe921fb
 800a134:	7fefffff 	.word	0x7fefffff

0800a138 <__kernel_cos>:
 800a138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	ec57 6b10 	vmov	r6, r7, d0
 800a140:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a144:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a148:	ed8d 1b00 	vstr	d1, [sp]
 800a14c:	d206      	bcs.n	800a15c <__kernel_cos+0x24>
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fc8f 	bl	8000a74 <__aeabi_d2iz>
 800a156:	2800      	cmp	r0, #0
 800a158:	f000 8088 	beq.w	800a26c <__kernel_cos+0x134>
 800a15c:	4632      	mov	r2, r6
 800a15e:	463b      	mov	r3, r7
 800a160:	4630      	mov	r0, r6
 800a162:	4639      	mov	r1, r7
 800a164:	f7f6 f9ec 	bl	8000540 <__aeabi_dmul>
 800a168:	4b51      	ldr	r3, [pc, #324]	@ (800a2b0 <__kernel_cos+0x178>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	f7f6 f9e6 	bl	8000540 <__aeabi_dmul>
 800a174:	a340      	add	r3, pc, #256	@ (adr r3, 800a278 <__kernel_cos+0x140>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	4682      	mov	sl, r0
 800a17c:	468b      	mov	fp, r1
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 f9dd 	bl	8000540 <__aeabi_dmul>
 800a186:	a33e      	add	r3, pc, #248	@ (adr r3, 800a280 <__kernel_cos+0x148>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f7f6 f822 	bl	80001d4 <__adddf3>
 800a190:	4622      	mov	r2, r4
 800a192:	462b      	mov	r3, r5
 800a194:	f7f6 f9d4 	bl	8000540 <__aeabi_dmul>
 800a198:	a33b      	add	r3, pc, #236	@ (adr r3, 800a288 <__kernel_cos+0x150>)
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	f7f6 f817 	bl	80001d0 <__aeabi_dsub>
 800a1a2:	4622      	mov	r2, r4
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	f7f6 f9cb 	bl	8000540 <__aeabi_dmul>
 800a1aa:	a339      	add	r3, pc, #228	@ (adr r3, 800a290 <__kernel_cos+0x158>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f810 	bl	80001d4 <__adddf3>
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	462b      	mov	r3, r5
 800a1b8:	f7f6 f9c2 	bl	8000540 <__aeabi_dmul>
 800a1bc:	a336      	add	r3, pc, #216	@ (adr r3, 800a298 <__kernel_cos+0x160>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	f7f6 f805 	bl	80001d0 <__aeabi_dsub>
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	462b      	mov	r3, r5
 800a1ca:	f7f6 f9b9 	bl	8000540 <__aeabi_dmul>
 800a1ce:	a334      	add	r3, pc, #208	@ (adr r3, 800a2a0 <__kernel_cos+0x168>)
 800a1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d4:	f7f5 fffe 	bl	80001d4 <__adddf3>
 800a1d8:	4622      	mov	r2, r4
 800a1da:	462b      	mov	r3, r5
 800a1dc:	f7f6 f9b0 	bl	8000540 <__aeabi_dmul>
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	462b      	mov	r3, r5
 800a1e4:	f7f6 f9ac 	bl	8000540 <__aeabi_dmul>
 800a1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 f9a4 	bl	8000540 <__aeabi_dmul>
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7f5 ffe6 	bl	80001d0 <__aeabi_dsub>
 800a204:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b4 <__kernel_cos+0x17c>)
 800a206:	4598      	cmp	r8, r3
 800a208:	4606      	mov	r6, r0
 800a20a:	460f      	mov	r7, r1
 800a20c:	d810      	bhi.n	800a230 <__kernel_cos+0xf8>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4650      	mov	r0, sl
 800a214:	4659      	mov	r1, fp
 800a216:	f7f5 ffdb 	bl	80001d0 <__aeabi_dsub>
 800a21a:	460b      	mov	r3, r1
 800a21c:	4926      	ldr	r1, [pc, #152]	@ (800a2b8 <__kernel_cos+0x180>)
 800a21e:	4602      	mov	r2, r0
 800a220:	2000      	movs	r0, #0
 800a222:	f7f5 ffd5 	bl	80001d0 <__aeabi_dsub>
 800a226:	ec41 0b10 	vmov	d0, r0, r1
 800a22a:	b003      	add	sp, #12
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a230:	4b22      	ldr	r3, [pc, #136]	@ (800a2bc <__kernel_cos+0x184>)
 800a232:	4921      	ldr	r1, [pc, #132]	@ (800a2b8 <__kernel_cos+0x180>)
 800a234:	4598      	cmp	r8, r3
 800a236:	bf8c      	ite	hi
 800a238:	4d21      	ldrhi	r5, [pc, #132]	@ (800a2c0 <__kernel_cos+0x188>)
 800a23a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a23e:	2400      	movs	r4, #0
 800a240:	4622      	mov	r2, r4
 800a242:	462b      	mov	r3, r5
 800a244:	2000      	movs	r0, #0
 800a246:	f7f5 ffc3 	bl	80001d0 <__aeabi_dsub>
 800a24a:	4622      	mov	r2, r4
 800a24c:	4680      	mov	r8, r0
 800a24e:	4689      	mov	r9, r1
 800a250:	462b      	mov	r3, r5
 800a252:	4650      	mov	r0, sl
 800a254:	4659      	mov	r1, fp
 800a256:	f7f5 ffbb 	bl	80001d0 <__aeabi_dsub>
 800a25a:	4632      	mov	r2, r6
 800a25c:	463b      	mov	r3, r7
 800a25e:	f7f5 ffb7 	bl	80001d0 <__aeabi_dsub>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4640      	mov	r0, r8
 800a268:	4649      	mov	r1, r9
 800a26a:	e7da      	b.n	800a222 <__kernel_cos+0xea>
 800a26c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a2a8 <__kernel_cos+0x170>
 800a270:	e7db      	b.n	800a22a <__kernel_cos+0xf2>
 800a272:	bf00      	nop
 800a274:	f3af 8000 	nop.w
 800a278:	be8838d4 	.word	0xbe8838d4
 800a27c:	bda8fae9 	.word	0xbda8fae9
 800a280:	bdb4b1c4 	.word	0xbdb4b1c4
 800a284:	3e21ee9e 	.word	0x3e21ee9e
 800a288:	809c52ad 	.word	0x809c52ad
 800a28c:	3e927e4f 	.word	0x3e927e4f
 800a290:	19cb1590 	.word	0x19cb1590
 800a294:	3efa01a0 	.word	0x3efa01a0
 800a298:	16c15177 	.word	0x16c15177
 800a29c:	3f56c16c 	.word	0x3f56c16c
 800a2a0:	5555554c 	.word	0x5555554c
 800a2a4:	3fa55555 	.word	0x3fa55555
 800a2a8:	00000000 	.word	0x00000000
 800a2ac:	3ff00000 	.word	0x3ff00000
 800a2b0:	3fe00000 	.word	0x3fe00000
 800a2b4:	3fd33332 	.word	0x3fd33332
 800a2b8:	3ff00000 	.word	0x3ff00000
 800a2bc:	3fe90000 	.word	0x3fe90000
 800a2c0:	3fd20000 	.word	0x3fd20000
 800a2c4:	00000000 	.word	0x00000000

0800a2c8 <__kernel_sin>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	ec55 4b10 	vmov	r4, r5, d0
 800a2d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a2da:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a2de:	4680      	mov	r8, r0
 800a2e0:	d205      	bcs.n	800a2ee <__kernel_sin+0x26>
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7f6 fbc5 	bl	8000a74 <__aeabi_d2iz>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d052      	beq.n	800a394 <__kernel_sin+0xcc>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f6 f923 	bl	8000540 <__aeabi_dmul>
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4620      	mov	r0, r4
 800a304:	4629      	mov	r1, r5
 800a306:	f7f6 f91b 	bl	8000540 <__aeabi_dmul>
 800a30a:	a342      	add	r3, pc, #264	@ (adr r3, 800a414 <__kernel_sin+0x14c>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	e9cd 0100 	strd	r0, r1, [sp]
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7f6 f912 	bl	8000540 <__aeabi_dmul>
 800a31c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a41c <__kernel_sin+0x154>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	f7f5 ff55 	bl	80001d0 <__aeabi_dsub>
 800a326:	4652      	mov	r2, sl
 800a328:	465b      	mov	r3, fp
 800a32a:	f7f6 f909 	bl	8000540 <__aeabi_dmul>
 800a32e:	a33d      	add	r3, pc, #244	@ (adr r3, 800a424 <__kernel_sin+0x15c>)
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f7f5 ff4e 	bl	80001d4 <__adddf3>
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	f7f6 f900 	bl	8000540 <__aeabi_dmul>
 800a340:	a33a      	add	r3, pc, #232	@ (adr r3, 800a42c <__kernel_sin+0x164>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f5 ff43 	bl	80001d0 <__aeabi_dsub>
 800a34a:	4652      	mov	r2, sl
 800a34c:	465b      	mov	r3, fp
 800a34e:	f7f6 f8f7 	bl	8000540 <__aeabi_dmul>
 800a352:	a338      	add	r3, pc, #224	@ (adr r3, 800a434 <__kernel_sin+0x16c>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f7f5 ff3c 	bl	80001d4 <__adddf3>
 800a35c:	4606      	mov	r6, r0
 800a35e:	460f      	mov	r7, r1
 800a360:	f1b8 0f00 	cmp.w	r8, #0
 800a364:	d11b      	bne.n	800a39e <__kernel_sin+0xd6>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4650      	mov	r0, sl
 800a36c:	4659      	mov	r1, fp
 800a36e:	f7f6 f8e7 	bl	8000540 <__aeabi_dmul>
 800a372:	a325      	add	r3, pc, #148	@ (adr r3, 800a408 <__kernel_sin+0x140>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff2a 	bl	80001d0 <__aeabi_dsub>
 800a37c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a380:	f7f6 f8de 	bl	8000540 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4620      	mov	r0, r4
 800a38a:	4629      	mov	r1, r5
 800a38c:	f7f5 ff22 	bl	80001d4 <__adddf3>
 800a390:	4604      	mov	r4, r0
 800a392:	460d      	mov	r5, r1
 800a394:	ec45 4b10 	vmov	d0, r4, r5
 800a398:	b005      	add	sp, #20
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a410 <__kernel_sin+0x148>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f7f6 f8cb 	bl	8000540 <__aeabi_dmul>
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b6:	f7f6 f8c3 	bl	8000540 <__aeabi_dmul>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	4640      	mov	r0, r8
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	f7f5 ff05 	bl	80001d0 <__aeabi_dsub>
 800a3c6:	4652      	mov	r2, sl
 800a3c8:	465b      	mov	r3, fp
 800a3ca:	f7f6 f8b9 	bl	8000540 <__aeabi_dmul>
 800a3ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3d2:	f7f5 fefd 	bl	80001d0 <__aeabi_dsub>
 800a3d6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a408 <__kernel_sin+0x140>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	4606      	mov	r6, r0
 800a3de:	460f      	mov	r7, r1
 800a3e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3e4:	f7f6 f8ac 	bl	8000540 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f5 fef0 	bl	80001d4 <__adddf3>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	f7f5 fee8 	bl	80001d0 <__aeabi_dsub>
 800a400:	e7c6      	b.n	800a390 <__kernel_sin+0xc8>
 800a402:	bf00      	nop
 800a404:	f3af 8000 	nop.w
 800a408:	55555549 	.word	0x55555549
 800a40c:	3fc55555 	.word	0x3fc55555
 800a410:	3fe00000 	.word	0x3fe00000
 800a414:	5acfd57c 	.word	0x5acfd57c
 800a418:	3de5d93a 	.word	0x3de5d93a
 800a41c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a420:	3e5ae5e6 	.word	0x3e5ae5e6
 800a424:	57b1fe7d 	.word	0x57b1fe7d
 800a428:	3ec71de3 	.word	0x3ec71de3
 800a42c:	19c161d5 	.word	0x19c161d5
 800a430:	3f2a01a0 	.word	0x3f2a01a0
 800a434:	1110f8a6 	.word	0x1110f8a6
 800a438:	3f811111 	.word	0x3f811111
 800a43c:	00000000 	.word	0x00000000

0800a440 <__ieee754_rem_pio2>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	ec57 6b10 	vmov	r6, r7, d0
 800a448:	4bc5      	ldr	r3, [pc, #788]	@ (800a760 <__ieee754_rem_pio2+0x320>)
 800a44a:	b08d      	sub	sp, #52	@ 0x34
 800a44c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a450:	4598      	cmp	r8, r3
 800a452:	4604      	mov	r4, r0
 800a454:	9704      	str	r7, [sp, #16]
 800a456:	d807      	bhi.n	800a468 <__ieee754_rem_pio2+0x28>
 800a458:	2200      	movs	r2, #0
 800a45a:	2300      	movs	r3, #0
 800a45c:	ed80 0b00 	vstr	d0, [r0]
 800a460:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a464:	2500      	movs	r5, #0
 800a466:	e028      	b.n	800a4ba <__ieee754_rem_pio2+0x7a>
 800a468:	4bbe      	ldr	r3, [pc, #760]	@ (800a764 <__ieee754_rem_pio2+0x324>)
 800a46a:	4598      	cmp	r8, r3
 800a46c:	d878      	bhi.n	800a560 <__ieee754_rem_pio2+0x120>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	4dbd      	ldr	r5, [pc, #756]	@ (800a768 <__ieee754_rem_pio2+0x328>)
 800a472:	2b00      	cmp	r3, #0
 800a474:	4630      	mov	r0, r6
 800a476:	a3ac      	add	r3, pc, #688	@ (adr r3, 800a728 <__ieee754_rem_pio2+0x2e8>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	4639      	mov	r1, r7
 800a47e:	dd38      	ble.n	800a4f2 <__ieee754_rem_pio2+0xb2>
 800a480:	f7f5 fea6 	bl	80001d0 <__aeabi_dsub>
 800a484:	45a8      	cmp	r8, r5
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	d01a      	beq.n	800a4c2 <__ieee754_rem_pio2+0x82>
 800a48c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800a730 <__ieee754_rem_pio2+0x2f0>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fe9d 	bl	80001d0 <__aeabi_dsub>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4680      	mov	r8, r0
 800a49c:	4689      	mov	r9, r1
 800a49e:	4630      	mov	r0, r6
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	f7f5 fe95 	bl	80001d0 <__aeabi_dsub>
 800a4a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800a730 <__ieee754_rem_pio2+0x2f0>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f5 fe90 	bl	80001d0 <__aeabi_dsub>
 800a4b0:	e9c4 8900 	strd	r8, r9, [r4]
 800a4b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a4b8:	2501      	movs	r5, #1
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	b00d      	add	sp, #52	@ 0x34
 800a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c2:	a39d      	add	r3, pc, #628	@ (adr r3, 800a738 <__ieee754_rem_pio2+0x2f8>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f5 fe82 	bl	80001d0 <__aeabi_dsub>
 800a4cc:	a39c      	add	r3, pc, #624	@ (adr r3, 800a740 <__ieee754_rem_pio2+0x300>)
 800a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	460f      	mov	r7, r1
 800a4d6:	f7f5 fe7b 	bl	80001d0 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4680      	mov	r8, r0
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f5 fe73 	bl	80001d0 <__aeabi_dsub>
 800a4ea:	a395      	add	r3, pc, #596	@ (adr r3, 800a740 <__ieee754_rem_pio2+0x300>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	e7dc      	b.n	800a4ac <__ieee754_rem_pio2+0x6c>
 800a4f2:	f7f5 fe6f 	bl	80001d4 <__adddf3>
 800a4f6:	45a8      	cmp	r8, r5
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
 800a4fc:	d018      	beq.n	800a530 <__ieee754_rem_pio2+0xf0>
 800a4fe:	a38c      	add	r3, pc, #560	@ (adr r3, 800a730 <__ieee754_rem_pio2+0x2f0>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fe66 	bl	80001d4 <__adddf3>
 800a508:	4602      	mov	r2, r0
 800a50a:	460b      	mov	r3, r1
 800a50c:	4680      	mov	r8, r0
 800a50e:	4689      	mov	r9, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f5 fe5c 	bl	80001d0 <__aeabi_dsub>
 800a518:	a385      	add	r3, pc, #532	@ (adr r3, 800a730 <__ieee754_rem_pio2+0x2f0>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 fe59 	bl	80001d4 <__adddf3>
 800a522:	f04f 35ff 	mov.w	r5, #4294967295
 800a526:	e9c4 8900 	strd	r8, r9, [r4]
 800a52a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a52e:	e7c4      	b.n	800a4ba <__ieee754_rem_pio2+0x7a>
 800a530:	a381      	add	r3, pc, #516	@ (adr r3, 800a738 <__ieee754_rem_pio2+0x2f8>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fe4d 	bl	80001d4 <__adddf3>
 800a53a:	a381      	add	r3, pc, #516	@ (adr r3, 800a740 <__ieee754_rem_pio2+0x300>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	f7f5 fe46 	bl	80001d4 <__adddf3>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4680      	mov	r8, r0
 800a54e:	4689      	mov	r9, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f7f5 fe3c 	bl	80001d0 <__aeabi_dsub>
 800a558:	a379      	add	r3, pc, #484	@ (adr r3, 800a740 <__ieee754_rem_pio2+0x300>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	e7de      	b.n	800a51e <__ieee754_rem_pio2+0xde>
 800a560:	4b82      	ldr	r3, [pc, #520]	@ (800a76c <__ieee754_rem_pio2+0x32c>)
 800a562:	4598      	cmp	r8, r3
 800a564:	f200 80d1 	bhi.w	800a70a <__ieee754_rem_pio2+0x2ca>
 800a568:	f000 f966 	bl	800a838 <fabs>
 800a56c:	ec57 6b10 	vmov	r6, r7, d0
 800a570:	a375      	add	r3, pc, #468	@ (adr r3, 800a748 <__ieee754_rem_pio2+0x308>)
 800a572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f5 ffe1 	bl	8000540 <__aeabi_dmul>
 800a57e:	4b7c      	ldr	r3, [pc, #496]	@ (800a770 <__ieee754_rem_pio2+0x330>)
 800a580:	2200      	movs	r2, #0
 800a582:	f7f5 fe27 	bl	80001d4 <__adddf3>
 800a586:	f7f6 fa75 	bl	8000a74 <__aeabi_d2iz>
 800a58a:	4605      	mov	r5, r0
 800a58c:	f7f5 ff6e 	bl	800046c <__aeabi_i2d>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a598:	a363      	add	r3, pc, #396	@ (adr r3, 800a728 <__ieee754_rem_pio2+0x2e8>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f5 ffcf 	bl	8000540 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	f7f5 fe11 	bl	80001d0 <__aeabi_dsub>
 800a5ae:	a360      	add	r3, pc, #384	@ (adr r3, 800a730 <__ieee754_rem_pio2+0x2f0>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	468b      	mov	fp, r1
 800a5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5bc:	f7f5 ffc0 	bl	8000540 <__aeabi_dmul>
 800a5c0:	2d1f      	cmp	r5, #31
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	dc0c      	bgt.n	800a5e2 <__ieee754_rem_pio2+0x1a2>
 800a5c8:	4b6a      	ldr	r3, [pc, #424]	@ (800a774 <__ieee754_rem_pio2+0x334>)
 800a5ca:	1e6a      	subs	r2, r5, #1
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	4543      	cmp	r3, r8
 800a5d2:	d006      	beq.n	800a5e2 <__ieee754_rem_pio2+0x1a2>
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	4650      	mov	r0, sl
 800a5da:	4659      	mov	r1, fp
 800a5dc:	f7f5 fdf8 	bl	80001d0 <__aeabi_dsub>
 800a5e0:	e00e      	b.n	800a600 <__ieee754_rem_pio2+0x1c0>
 800a5e2:	463b      	mov	r3, r7
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	4659      	mov	r1, fp
 800a5ea:	f7f5 fdf1 	bl	80001d0 <__aeabi_dsub>
 800a5ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a5fc:	2b10      	cmp	r3, #16
 800a5fe:	dc02      	bgt.n	800a606 <__ieee754_rem_pio2+0x1c6>
 800a600:	e9c4 0100 	strd	r0, r1, [r4]
 800a604:	e039      	b.n	800a67a <__ieee754_rem_pio2+0x23a>
 800a606:	a34c      	add	r3, pc, #304	@ (adr r3, 800a738 <__ieee754_rem_pio2+0x2f8>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a610:	f7f5 ff96 	bl	8000540 <__aeabi_dmul>
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4650      	mov	r0, sl
 800a61e:	4659      	mov	r1, fp
 800a620:	f7f5 fdd6 	bl	80001d0 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4680      	mov	r8, r0
 800a62a:	4689      	mov	r9, r1
 800a62c:	4650      	mov	r0, sl
 800a62e:	4659      	mov	r1, fp
 800a630:	f7f5 fdce 	bl	80001d0 <__aeabi_dsub>
 800a634:	4632      	mov	r2, r6
 800a636:	463b      	mov	r3, r7
 800a638:	f7f5 fdca 	bl	80001d0 <__aeabi_dsub>
 800a63c:	a340      	add	r3, pc, #256	@ (adr r3, 800a740 <__ieee754_rem_pio2+0x300>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a64a:	f7f5 ff79 	bl	8000540 <__aeabi_dmul>
 800a64e:	4632      	mov	r2, r6
 800a650:	463b      	mov	r3, r7
 800a652:	f7f5 fdbd 	bl	80001d0 <__aeabi_dsub>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	4606      	mov	r6, r0
 800a65c:	460f      	mov	r7, r1
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 fdb5 	bl	80001d0 <__aeabi_dsub>
 800a666:	9a05      	ldr	r2, [sp, #20]
 800a668:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b31      	cmp	r3, #49	@ 0x31
 800a670:	dc20      	bgt.n	800a6b4 <__ieee754_rem_pio2+0x274>
 800a672:	e9c4 0100 	strd	r0, r1, [r4]
 800a676:	46c2      	mov	sl, r8
 800a678:	46cb      	mov	fp, r9
 800a67a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a67e:	4650      	mov	r0, sl
 800a680:	4642      	mov	r2, r8
 800a682:	464b      	mov	r3, r9
 800a684:	4659      	mov	r1, fp
 800a686:	f7f5 fda3 	bl	80001d0 <__aeabi_dsub>
 800a68a:	463b      	mov	r3, r7
 800a68c:	4632      	mov	r2, r6
 800a68e:	f7f5 fd9f 	bl	80001d0 <__aeabi_dsub>
 800a692:	9b04      	ldr	r3, [sp, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a69a:	f6bf af0e 	bge.w	800a4ba <__ieee754_rem_pio2+0x7a>
 800a69e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6a8:	f8c4 8000 	str.w	r8, [r4]
 800a6ac:	60a0      	str	r0, [r4, #8]
 800a6ae:	60e3      	str	r3, [r4, #12]
 800a6b0:	426d      	negs	r5, r5
 800a6b2:	e702      	b.n	800a4ba <__ieee754_rem_pio2+0x7a>
 800a6b4:	a326      	add	r3, pc, #152	@ (adr r3, 800a750 <__ieee754_rem_pio2+0x310>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6be:	f7f5 ff3f 	bl	8000540 <__aeabi_dmul>
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f5 fd7f 	bl	80001d0 <__aeabi_dsub>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	468b      	mov	fp, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 fd77 	bl	80001d0 <__aeabi_dsub>
 800a6e2:	4632      	mov	r2, r6
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	f7f5 fd73 	bl	80001d0 <__aeabi_dsub>
 800a6ea:	a31b      	add	r3, pc, #108	@ (adr r3, 800a758 <__ieee754_rem_pio2+0x318>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f8:	f7f5 ff22 	bl	8000540 <__aeabi_dmul>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	f7f5 fd66 	bl	80001d0 <__aeabi_dsub>
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	e764      	b.n	800a5d4 <__ieee754_rem_pio2+0x194>
 800a70a:	4b1b      	ldr	r3, [pc, #108]	@ (800a778 <__ieee754_rem_pio2+0x338>)
 800a70c:	4598      	cmp	r8, r3
 800a70e:	d935      	bls.n	800a77c <__ieee754_rem_pio2+0x33c>
 800a710:	4632      	mov	r2, r6
 800a712:	463b      	mov	r3, r7
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	f7f5 fd5a 	bl	80001d0 <__aeabi_dsub>
 800a71c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a720:	e9c4 0100 	strd	r0, r1, [r4]
 800a724:	e69e      	b.n	800a464 <__ieee754_rem_pio2+0x24>
 800a726:	bf00      	nop
 800a728:	54400000 	.word	0x54400000
 800a72c:	3ff921fb 	.word	0x3ff921fb
 800a730:	1a626331 	.word	0x1a626331
 800a734:	3dd0b461 	.word	0x3dd0b461
 800a738:	1a600000 	.word	0x1a600000
 800a73c:	3dd0b461 	.word	0x3dd0b461
 800a740:	2e037073 	.word	0x2e037073
 800a744:	3ba3198a 	.word	0x3ba3198a
 800a748:	6dc9c883 	.word	0x6dc9c883
 800a74c:	3fe45f30 	.word	0x3fe45f30
 800a750:	2e000000 	.word	0x2e000000
 800a754:	3ba3198a 	.word	0x3ba3198a
 800a758:	252049c1 	.word	0x252049c1
 800a75c:	397b839a 	.word	0x397b839a
 800a760:	3fe921fb 	.word	0x3fe921fb
 800a764:	4002d97b 	.word	0x4002d97b
 800a768:	3ff921fb 	.word	0x3ff921fb
 800a76c:	413921fb 	.word	0x413921fb
 800a770:	3fe00000 	.word	0x3fe00000
 800a774:	0800e0f8 	.word	0x0800e0f8
 800a778:	7fefffff 	.word	0x7fefffff
 800a77c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a780:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a784:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a788:	4630      	mov	r0, r6
 800a78a:	460f      	mov	r7, r1
 800a78c:	f7f6 f972 	bl	8000a74 <__aeabi_d2iz>
 800a790:	f7f5 fe6c 	bl	800046c <__aeabi_i2d>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7a0:	f7f5 fd16 	bl	80001d0 <__aeabi_dsub>
 800a7a4:	4b22      	ldr	r3, [pc, #136]	@ (800a830 <__ieee754_rem_pio2+0x3f0>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 feca 	bl	8000540 <__aeabi_dmul>
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	f7f6 f960 	bl	8000a74 <__aeabi_d2iz>
 800a7b4:	f7f5 fe5a 	bl	800046c <__aeabi_i2d>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4639      	mov	r1, r7
 800a7c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a7c4:	f7f5 fd04 	bl	80001d0 <__aeabi_dsub>
 800a7c8:	4b19      	ldr	r3, [pc, #100]	@ (800a830 <__ieee754_rem_pio2+0x3f0>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f7f5 feb8 	bl	8000540 <__aeabi_dmul>
 800a7d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a7d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a7d8:	f04f 0803 	mov.w	r8, #3
 800a7dc:	2600      	movs	r6, #0
 800a7de:	2700      	movs	r7, #0
 800a7e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	46c2      	mov	sl, r8
 800a7ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7ee:	f7f6 f90f 	bl	8000a10 <__aeabi_dcmpeq>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d1f4      	bne.n	800a7e0 <__ieee754_rem_pio2+0x3a0>
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <__ieee754_rem_pio2+0x3f4>)
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	462a      	mov	r2, r5
 800a800:	4653      	mov	r3, sl
 800a802:	4621      	mov	r1, r4
 800a804:	a806      	add	r0, sp, #24
 800a806:	f000 f81f 	bl	800a848 <__kernel_rem_pio2>
 800a80a:	9b04      	ldr	r3, [sp, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	4605      	mov	r5, r0
 800a810:	f6bf ae53 	bge.w	800a4ba <__ieee754_rem_pio2+0x7a>
 800a814:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a818:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a81c:	e9c4 2300 	strd	r2, r3, [r4]
 800a820:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a828:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a82c:	e740      	b.n	800a6b0 <__ieee754_rem_pio2+0x270>
 800a82e:	bf00      	nop
 800a830:	41700000 	.word	0x41700000
 800a834:	0800e178 	.word	0x0800e178

0800a838 <fabs>:
 800a838:	ec51 0b10 	vmov	r0, r1, d0
 800a83c:	4602      	mov	r2, r0
 800a83e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a842:	ec43 2b10 	vmov	d0, r2, r3
 800a846:	4770      	bx	lr

0800a848 <__kernel_rem_pio2>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	ed2d 8b02 	vpush	{d8}
 800a850:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a854:	f112 0f14 	cmn.w	r2, #20
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	9104      	str	r1, [sp, #16]
 800a85c:	4bbe      	ldr	r3, [pc, #760]	@ (800ab58 <__kernel_rem_pio2+0x310>)
 800a85e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800a860:	9008      	str	r0, [sp, #32]
 800a862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	9b06      	ldr	r3, [sp, #24]
 800a86a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a86e:	bfa8      	it	ge
 800a870:	1ed4      	subge	r4, r2, #3
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	bfb2      	itee	lt
 800a876:	2400      	movlt	r4, #0
 800a878:	2318      	movge	r3, #24
 800a87a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a87e:	f06f 0317 	mvn.w	r3, #23
 800a882:	fb04 3303 	mla	r3, r4, r3, r3
 800a886:	eb03 0b02 	add.w	fp, r3, r2
 800a88a:	9b00      	ldr	r3, [sp, #0]
 800a88c:	9a05      	ldr	r2, [sp, #20]
 800a88e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ab48 <__kernel_rem_pio2+0x300>
 800a892:	eb03 0802 	add.w	r8, r3, r2
 800a896:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a898:	1aa7      	subs	r7, r4, r2
 800a89a:	ae20      	add	r6, sp, #128	@ 0x80
 800a89c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a8a0:	2500      	movs	r5, #0
 800a8a2:	4545      	cmp	r5, r8
 800a8a4:	dd13      	ble.n	800a8ce <__kernel_rem_pio2+0x86>
 800a8a6:	9b06      	ldr	r3, [sp, #24]
 800a8a8:	aa20      	add	r2, sp, #128	@ 0x80
 800a8aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a8ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800a8b2:	f04f 0800 	mov.w	r8, #0
 800a8b6:	9b00      	ldr	r3, [sp, #0]
 800a8b8:	4598      	cmp	r8, r3
 800a8ba:	dc31      	bgt.n	800a920 <__kernel_rem_pio2+0xd8>
 800a8bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ab48 <__kernel_rem_pio2+0x300>
 800a8c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8c8:	462f      	mov	r7, r5
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	e01b      	b.n	800a906 <__kernel_rem_pio2+0xbe>
 800a8ce:	42ef      	cmn	r7, r5
 800a8d0:	d407      	bmi.n	800a8e2 <__kernel_rem_pio2+0x9a>
 800a8d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a8d6:	f7f5 fdc9 	bl	800046c <__aeabi_i2d>
 800a8da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8de:	3501      	adds	r5, #1
 800a8e0:	e7df      	b.n	800a8a2 <__kernel_rem_pio2+0x5a>
 800a8e2:	ec51 0b18 	vmov	r0, r1, d8
 800a8e6:	e7f8      	b.n	800a8da <__kernel_rem_pio2+0x92>
 800a8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a8f0:	f7f5 fe26 	bl	8000540 <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fc:	f7f5 fc6a 	bl	80001d4 <__adddf3>
 800a900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a904:	3601      	adds	r6, #1
 800a906:	9b05      	ldr	r3, [sp, #20]
 800a908:	429e      	cmp	r6, r3
 800a90a:	f1a7 0708 	sub.w	r7, r7, #8
 800a90e:	ddeb      	ble.n	800a8e8 <__kernel_rem_pio2+0xa0>
 800a910:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a914:	f108 0801 	add.w	r8, r8, #1
 800a918:	ecaa 7b02 	vstmia	sl!, {d7}
 800a91c:	3508      	adds	r5, #8
 800a91e:	e7ca      	b.n	800a8b6 <__kernel_rem_pio2+0x6e>
 800a920:	9b00      	ldr	r3, [sp, #0]
 800a922:	f8dd 8000 	ldr.w	r8, [sp]
 800a926:	aa0c      	add	r2, sp, #48	@ 0x30
 800a928:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a92c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a92e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800a930:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a934:	9309      	str	r3, [sp, #36]	@ 0x24
 800a936:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800a93a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a93c:	ab98      	add	r3, sp, #608	@ 0x260
 800a93e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a942:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800a946:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a94a:	ac0c      	add	r4, sp, #48	@ 0x30
 800a94c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a94e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800a952:	46a1      	mov	r9, r4
 800a954:	46c2      	mov	sl, r8
 800a956:	f1ba 0f00 	cmp.w	sl, #0
 800a95a:	f1a5 0508 	sub.w	r5, r5, #8
 800a95e:	dc77      	bgt.n	800aa50 <__kernel_rem_pio2+0x208>
 800a960:	4658      	mov	r0, fp
 800a962:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a966:	f000 fac7 	bl	800aef8 <scalbn>
 800a96a:	ec57 6b10 	vmov	r6, r7, d0
 800a96e:	2200      	movs	r2, #0
 800a970:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a974:	4630      	mov	r0, r6
 800a976:	4639      	mov	r1, r7
 800a978:	f7f5 fde2 	bl	8000540 <__aeabi_dmul>
 800a97c:	ec41 0b10 	vmov	d0, r0, r1
 800a980:	f000 fb3a 	bl	800aff8 <floor>
 800a984:	4b75      	ldr	r3, [pc, #468]	@ (800ab5c <__kernel_rem_pio2+0x314>)
 800a986:	ec51 0b10 	vmov	r0, r1, d0
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7f5 fdd8 	bl	8000540 <__aeabi_dmul>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fc1a 	bl	80001d0 <__aeabi_dsub>
 800a99c:	460f      	mov	r7, r1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	f7f6 f868 	bl	8000a74 <__aeabi_d2iz>
 800a9a4:	9002      	str	r0, [sp, #8]
 800a9a6:	f7f5 fd61 	bl	800046c <__aeabi_i2d>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 fc0d 	bl	80001d0 <__aeabi_dsub>
 800a9b6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460f      	mov	r7, r1
 800a9be:	dd6c      	ble.n	800aa9a <__kernel_rem_pio2+0x252>
 800a9c0:	f108 31ff 	add.w	r1, r8, #4294967295
 800a9c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9c6:	9d02      	ldr	r5, [sp, #8]
 800a9c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9cc:	f1cb 0018 	rsb	r0, fp, #24
 800a9d0:	fa43 f200 	asr.w	r2, r3, r0
 800a9d4:	4415      	add	r5, r2
 800a9d6:	4082      	lsls	r2, r0
 800a9d8:	1a9b      	subs	r3, r3, r2
 800a9da:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9dc:	9502      	str	r5, [sp, #8]
 800a9de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a9e2:	f1cb 0217 	rsb	r2, fp, #23
 800a9e6:	fa43 f902 	asr.w	r9, r3, r2
 800a9ea:	f1b9 0f00 	cmp.w	r9, #0
 800a9ee:	dd64      	ble.n	800aaba <__kernel_rem_pio2+0x272>
 800a9f0:	9b02      	ldr	r3, [sp, #8]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	9302      	str	r3, [sp, #8]
 800a9f8:	4615      	mov	r5, r2
 800a9fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a9fe:	4590      	cmp	r8, r2
 800aa00:	f300 80b8 	bgt.w	800ab74 <__kernel_rem_pio2+0x32c>
 800aa04:	f1bb 0f00 	cmp.w	fp, #0
 800aa08:	dd07      	ble.n	800aa1a <__kernel_rem_pio2+0x1d2>
 800aa0a:	f1bb 0f01 	cmp.w	fp, #1
 800aa0e:	f000 80bf 	beq.w	800ab90 <__kernel_rem_pio2+0x348>
 800aa12:	f1bb 0f02 	cmp.w	fp, #2
 800aa16:	f000 80c6 	beq.w	800aba6 <__kernel_rem_pio2+0x35e>
 800aa1a:	f1b9 0f02 	cmp.w	r9, #2
 800aa1e:	d14c      	bne.n	800aaba <__kernel_rem_pio2+0x272>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	494e      	ldr	r1, [pc, #312]	@ (800ab60 <__kernel_rem_pio2+0x318>)
 800aa26:	2000      	movs	r0, #0
 800aa28:	f7f5 fbd2 	bl	80001d0 <__aeabi_dsub>
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	460f      	mov	r7, r1
 800aa30:	2d00      	cmp	r5, #0
 800aa32:	d042      	beq.n	800aaba <__kernel_rem_pio2+0x272>
 800aa34:	4658      	mov	r0, fp
 800aa36:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800ab50 <__kernel_rem_pio2+0x308>
 800aa3a:	f000 fa5d 	bl	800aef8 <scalbn>
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4639      	mov	r1, r7
 800aa42:	ec53 2b10 	vmov	r2, r3, d0
 800aa46:	f7f5 fbc3 	bl	80001d0 <__aeabi_dsub>
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	e034      	b.n	800aaba <__kernel_rem_pio2+0x272>
 800aa50:	4b44      	ldr	r3, [pc, #272]	@ (800ab64 <__kernel_rem_pio2+0x31c>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa58:	f7f5 fd72 	bl	8000540 <__aeabi_dmul>
 800aa5c:	f7f6 f80a 	bl	8000a74 <__aeabi_d2iz>
 800aa60:	f7f5 fd04 	bl	800046c <__aeabi_i2d>
 800aa64:	4b40      	ldr	r3, [pc, #256]	@ (800ab68 <__kernel_rem_pio2+0x320>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	4606      	mov	r6, r0
 800aa6a:	460f      	mov	r7, r1
 800aa6c:	f7f5 fd68 	bl	8000540 <__aeabi_dmul>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa78:	f7f5 fbaa 	bl	80001d0 <__aeabi_dsub>
 800aa7c:	f7f5 fffa 	bl	8000a74 <__aeabi_d2iz>
 800aa80:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa84:	f849 0b04 	str.w	r0, [r9], #4
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f7f5 fba2 	bl	80001d4 <__adddf3>
 800aa90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa98:	e75d      	b.n	800a956 <__kernel_rem_pio2+0x10e>
 800aa9a:	d107      	bne.n	800aaac <__kernel_rem_pio2+0x264>
 800aa9c:	f108 33ff 	add.w	r3, r8, #4294967295
 800aaa0:	aa0c      	add	r2, sp, #48	@ 0x30
 800aaa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaa6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800aaaa:	e79e      	b.n	800a9ea <__kernel_rem_pio2+0x1a2>
 800aaac:	4b2f      	ldr	r3, [pc, #188]	@ (800ab6c <__kernel_rem_pio2+0x324>)
 800aaae:	2200      	movs	r2, #0
 800aab0:	f7f5 ffcc 	bl	8000a4c <__aeabi_dcmpge>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d143      	bne.n	800ab40 <__kernel_rem_pio2+0x2f8>
 800aab8:	4681      	mov	r9, r0
 800aaba:	2200      	movs	r2, #0
 800aabc:	2300      	movs	r3, #0
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	f7f5 ffa5 	bl	8000a10 <__aeabi_dcmpeq>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f000 80bf 	beq.w	800ac4a <__kernel_rem_pio2+0x402>
 800aacc:	f108 33ff 	add.w	r3, r8, #4294967295
 800aad0:	2200      	movs	r2, #0
 800aad2:	9900      	ldr	r1, [sp, #0]
 800aad4:	428b      	cmp	r3, r1
 800aad6:	da6e      	bge.n	800abb6 <__kernel_rem_pio2+0x36e>
 800aad8:	2a00      	cmp	r2, #0
 800aada:	f000 8089 	beq.w	800abf0 <__kernel_rem_pio2+0x3a8>
 800aade:	f108 38ff 	add.w	r8, r8, #4294967295
 800aae2:	ab0c      	add	r3, sp, #48	@ 0x30
 800aae4:	f1ab 0b18 	sub.w	fp, fp, #24
 800aae8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0f6      	beq.n	800aade <__kernel_rem_pio2+0x296>
 800aaf0:	4658      	mov	r0, fp
 800aaf2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800ab50 <__kernel_rem_pio2+0x308>
 800aaf6:	f000 f9ff 	bl	800aef8 <scalbn>
 800aafa:	f108 0301 	add.w	r3, r8, #1
 800aafe:	00da      	lsls	r2, r3, #3
 800ab00:	9205      	str	r2, [sp, #20]
 800ab02:	ec55 4b10 	vmov	r4, r5, d0
 800ab06:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ab08:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ab64 <__kernel_rem_pio2+0x31c>
 800ab0c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ab10:	4646      	mov	r6, r8
 800ab12:	f04f 0a00 	mov.w	sl, #0
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	f280 80cf 	bge.w	800acba <__kernel_rem_pio2+0x472>
 800ab1c:	4644      	mov	r4, r8
 800ab1e:	2c00      	cmp	r4, #0
 800ab20:	f2c0 80fd 	blt.w	800ad1e <__kernel_rem_pio2+0x4d6>
 800ab24:	4b12      	ldr	r3, [pc, #72]	@ (800ab70 <__kernel_rem_pio2+0x328>)
 800ab26:	461f      	mov	r7, r3
 800ab28:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ab2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab2e:	9306      	str	r3, [sp, #24]
 800ab30:	f04f 0a00 	mov.w	sl, #0
 800ab34:	f04f 0b00 	mov.w	fp, #0
 800ab38:	2600      	movs	r6, #0
 800ab3a:	eba8 0504 	sub.w	r5, r8, r4
 800ab3e:	e0e2      	b.n	800ad06 <__kernel_rem_pio2+0x4be>
 800ab40:	f04f 0902 	mov.w	r9, #2
 800ab44:	e754      	b.n	800a9f0 <__kernel_rem_pio2+0x1a8>
 800ab46:	bf00      	nop
	...
 800ab54:	3ff00000 	.word	0x3ff00000
 800ab58:	0800e2c0 	.word	0x0800e2c0
 800ab5c:	40200000 	.word	0x40200000
 800ab60:	3ff00000 	.word	0x3ff00000
 800ab64:	3e700000 	.word	0x3e700000
 800ab68:	41700000 	.word	0x41700000
 800ab6c:	3fe00000 	.word	0x3fe00000
 800ab70:	0800e280 	.word	0x0800e280
 800ab74:	f854 3b04 	ldr.w	r3, [r4], #4
 800ab78:	b945      	cbnz	r5, 800ab8c <__kernel_rem_pio2+0x344>
 800ab7a:	b123      	cbz	r3, 800ab86 <__kernel_rem_pio2+0x33e>
 800ab7c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ab80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab84:	2301      	movs	r3, #1
 800ab86:	3201      	adds	r2, #1
 800ab88:	461d      	mov	r5, r3
 800ab8a:	e738      	b.n	800a9fe <__kernel_rem_pio2+0x1b6>
 800ab8c:	1acb      	subs	r3, r1, r3
 800ab8e:	e7f7      	b.n	800ab80 <__kernel_rem_pio2+0x338>
 800ab90:	f108 32ff 	add.w	r2, r8, #4294967295
 800ab94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ab96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab9e:	a90c      	add	r1, sp, #48	@ 0x30
 800aba0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aba4:	e739      	b.n	800aa1a <__kernel_rem_pio2+0x1d2>
 800aba6:	f108 32ff 	add.w	r2, r8, #4294967295
 800abaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800abac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800abb4:	e7f3      	b.n	800ab9e <__kernel_rem_pio2+0x356>
 800abb6:	a90c      	add	r1, sp, #48	@ 0x30
 800abb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	430a      	orrs	r2, r1
 800abc0:	e787      	b.n	800aad2 <__kernel_rem_pio2+0x28a>
 800abc2:	3401      	adds	r4, #1
 800abc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800abc8:	2a00      	cmp	r2, #0
 800abca:	d0fa      	beq.n	800abc2 <__kernel_rem_pio2+0x37a>
 800abcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800abd2:	eb0d 0503 	add.w	r5, sp, r3
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	aa20      	add	r2, sp, #128	@ 0x80
 800abda:	4443      	add	r3, r8
 800abdc:	f108 0701 	add.w	r7, r8, #1
 800abe0:	3d98      	subs	r5, #152	@ 0x98
 800abe2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800abe6:	4444      	add	r4, r8
 800abe8:	42bc      	cmp	r4, r7
 800abea:	da04      	bge.n	800abf6 <__kernel_rem_pio2+0x3ae>
 800abec:	46a0      	mov	r8, r4
 800abee:	e6a2      	b.n	800a936 <__kernel_rem_pio2+0xee>
 800abf0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abf2:	2401      	movs	r4, #1
 800abf4:	e7e6      	b.n	800abc4 <__kernel_rem_pio2+0x37c>
 800abf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800abfc:	f7f5 fc36 	bl	800046c <__aeabi_i2d>
 800ac00:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800aec8 <__kernel_rem_pio2+0x680>
 800ac04:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac10:	46b2      	mov	sl, r6
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	9b05      	ldr	r3, [sp, #20]
 800ac18:	4598      	cmp	r8, r3
 800ac1a:	dd05      	ble.n	800ac28 <__kernel_rem_pio2+0x3e0>
 800ac1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac20:	3701      	adds	r7, #1
 800ac22:	eca5 7b02 	vstmia	r5!, {d7}
 800ac26:	e7df      	b.n	800abe8 <__kernel_rem_pio2+0x3a0>
 800ac28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ac2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ac30:	f7f5 fc86 	bl	8000540 <__aeabi_dmul>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac3c:	f7f5 faca 	bl	80001d4 <__adddf3>
 800ac40:	f108 0801 	add.w	r8, r8, #1
 800ac44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac48:	e7e5      	b.n	800ac16 <__kernel_rem_pio2+0x3ce>
 800ac4a:	f1cb 0000 	rsb	r0, fp, #0
 800ac4e:	ec47 6b10 	vmov	d0, r6, r7
 800ac52:	f000 f951 	bl	800aef8 <scalbn>
 800ac56:	ec55 4b10 	vmov	r4, r5, d0
 800ac5a:	4b9d      	ldr	r3, [pc, #628]	@ (800aed0 <__kernel_rem_pio2+0x688>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	f7f5 fef3 	bl	8000a4c <__aeabi_dcmpge>
 800ac66:	b300      	cbz	r0, 800acaa <__kernel_rem_pio2+0x462>
 800ac68:	4b9a      	ldr	r3, [pc, #616]	@ (800aed4 <__kernel_rem_pio2+0x68c>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fc66 	bl	8000540 <__aeabi_dmul>
 800ac74:	f7f5 fefe 	bl	8000a74 <__aeabi_d2iz>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	f7f5 fbf7 	bl	800046c <__aeabi_i2d>
 800ac7e:	4b94      	ldr	r3, [pc, #592]	@ (800aed0 <__kernel_rem_pio2+0x688>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	f7f5 fc5d 	bl	8000540 <__aeabi_dmul>
 800ac86:	460b      	mov	r3, r1
 800ac88:	4602      	mov	r2, r0
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f7f5 fa9f 	bl	80001d0 <__aeabi_dsub>
 800ac92:	f7f5 feef 	bl	8000a74 <__aeabi_d2iz>
 800ac96:	ab0c      	add	r3, sp, #48	@ 0x30
 800ac98:	f10b 0b18 	add.w	fp, fp, #24
 800ac9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800aca0:	f108 0801 	add.w	r8, r8, #1
 800aca4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800aca8:	e722      	b.n	800aaf0 <__kernel_rem_pio2+0x2a8>
 800acaa:	4620      	mov	r0, r4
 800acac:	4629      	mov	r1, r5
 800acae:	f7f5 fee1 	bl	8000a74 <__aeabi_d2iz>
 800acb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800acb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800acb8:	e71a      	b.n	800aaf0 <__kernel_rem_pio2+0x2a8>
 800acba:	ab0c      	add	r3, sp, #48	@ 0x30
 800acbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800acc0:	f7f5 fbd4 	bl	800046c <__aeabi_i2d>
 800acc4:	4622      	mov	r2, r4
 800acc6:	462b      	mov	r3, r5
 800acc8:	f7f5 fc3a 	bl	8000540 <__aeabi_dmul>
 800accc:	4652      	mov	r2, sl
 800acce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800acd2:	465b      	mov	r3, fp
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f7f5 fc32 	bl	8000540 <__aeabi_dmul>
 800acdc:	3e01      	subs	r6, #1
 800acde:	4604      	mov	r4, r0
 800ace0:	460d      	mov	r5, r1
 800ace2:	e718      	b.n	800ab16 <__kernel_rem_pio2+0x2ce>
 800ace4:	9906      	ldr	r1, [sp, #24]
 800ace6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800acea:	9106      	str	r1, [sp, #24]
 800acec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800acf0:	f7f5 fc26 	bl	8000540 <__aeabi_dmul>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4650      	mov	r0, sl
 800acfa:	4659      	mov	r1, fp
 800acfc:	f7f5 fa6a 	bl	80001d4 <__adddf3>
 800ad00:	3601      	adds	r6, #1
 800ad02:	4682      	mov	sl, r0
 800ad04:	468b      	mov	fp, r1
 800ad06:	9b00      	ldr	r3, [sp, #0]
 800ad08:	429e      	cmp	r6, r3
 800ad0a:	dc01      	bgt.n	800ad10 <__kernel_rem_pio2+0x4c8>
 800ad0c:	42b5      	cmp	r5, r6
 800ad0e:	dae9      	bge.n	800ace4 <__kernel_rem_pio2+0x49c>
 800ad10:	ab48      	add	r3, sp, #288	@ 0x120
 800ad12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad16:	e9c5 ab00 	strd	sl, fp, [r5]
 800ad1a:	3c01      	subs	r4, #1
 800ad1c:	e6ff      	b.n	800ab1e <__kernel_rem_pio2+0x2d6>
 800ad1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	dc0b      	bgt.n	800ad3c <__kernel_rem_pio2+0x4f4>
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dc39      	bgt.n	800ad9c <__kernel_rem_pio2+0x554>
 800ad28:	d05d      	beq.n	800ade6 <__kernel_rem_pio2+0x59e>
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	f003 0007 	and.w	r0, r3, #7
 800ad30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800ad34:	ecbd 8b02 	vpop	{d8}
 800ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d1f3      	bne.n	800ad2a <__kernel_rem_pio2+0x4e2>
 800ad42:	9b05      	ldr	r3, [sp, #20]
 800ad44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ad48:	eb0d 0403 	add.w	r4, sp, r3
 800ad4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ad50:	4625      	mov	r5, r4
 800ad52:	46c2      	mov	sl, r8
 800ad54:	f1ba 0f00 	cmp.w	sl, #0
 800ad58:	f1a5 0508 	sub.w	r5, r5, #8
 800ad5c:	dc6b      	bgt.n	800ae36 <__kernel_rem_pio2+0x5ee>
 800ad5e:	4645      	mov	r5, r8
 800ad60:	2d01      	cmp	r5, #1
 800ad62:	f1a4 0408 	sub.w	r4, r4, #8
 800ad66:	f300 8087 	bgt.w	800ae78 <__kernel_rem_pio2+0x630>
 800ad6a:	9c05      	ldr	r4, [sp, #20]
 800ad6c:	ab48      	add	r3, sp, #288	@ 0x120
 800ad6e:	441c      	add	r4, r3
 800ad70:	2000      	movs	r0, #0
 800ad72:	2100      	movs	r1, #0
 800ad74:	f1b8 0f01 	cmp.w	r8, #1
 800ad78:	f300 809c 	bgt.w	800aeb4 <__kernel_rem_pio2+0x66c>
 800ad7c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ad80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	f040 80a6 	bne.w	800aed8 <__kernel_rem_pio2+0x690>
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	e9c3 7800 	strd	r7, r8, [r3]
 800ad92:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ad96:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ad9a:	e7c6      	b.n	800ad2a <__kernel_rem_pio2+0x4e2>
 800ad9c:	9d05      	ldr	r5, [sp, #20]
 800ad9e:	ab48      	add	r3, sp, #288	@ 0x120
 800ada0:	441d      	add	r5, r3
 800ada2:	4644      	mov	r4, r8
 800ada4:	2000      	movs	r0, #0
 800ada6:	2100      	movs	r1, #0
 800ada8:	2c00      	cmp	r4, #0
 800adaa:	da35      	bge.n	800ae18 <__kernel_rem_pio2+0x5d0>
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	d038      	beq.n	800ae24 <__kernel_rem_pio2+0x5dc>
 800adb2:	4602      	mov	r2, r0
 800adb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800adb8:	9c04      	ldr	r4, [sp, #16]
 800adba:	e9c4 2300 	strd	r2, r3, [r4]
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800adc6:	f7f5 fa03 	bl	80001d0 <__aeabi_dsub>
 800adca:	ad4a      	add	r5, sp, #296	@ 0x128
 800adcc:	2401      	movs	r4, #1
 800adce:	45a0      	cmp	r8, r4
 800add0:	da2b      	bge.n	800ae2a <__kernel_rem_pio2+0x5e2>
 800add2:	f1b9 0f00 	cmp.w	r9, #0
 800add6:	d002      	beq.n	800adde <__kernel_rem_pio2+0x596>
 800add8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800addc:	4619      	mov	r1, r3
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ade4:	e7a1      	b.n	800ad2a <__kernel_rem_pio2+0x4e2>
 800ade6:	9c05      	ldr	r4, [sp, #20]
 800ade8:	ab48      	add	r3, sp, #288	@ 0x120
 800adea:	441c      	add	r4, r3
 800adec:	2000      	movs	r0, #0
 800adee:	2100      	movs	r1, #0
 800adf0:	f1b8 0f00 	cmp.w	r8, #0
 800adf4:	da09      	bge.n	800ae0a <__kernel_rem_pio2+0x5c2>
 800adf6:	f1b9 0f00 	cmp.w	r9, #0
 800adfa:	d002      	beq.n	800ae02 <__kernel_rem_pio2+0x5ba>
 800adfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae00:	4619      	mov	r1, r3
 800ae02:	9b04      	ldr	r3, [sp, #16]
 800ae04:	e9c3 0100 	strd	r0, r1, [r3]
 800ae08:	e78f      	b.n	800ad2a <__kernel_rem_pio2+0x4e2>
 800ae0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae0e:	f7f5 f9e1 	bl	80001d4 <__adddf3>
 800ae12:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae16:	e7eb      	b.n	800adf0 <__kernel_rem_pio2+0x5a8>
 800ae18:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ae1c:	f7f5 f9da 	bl	80001d4 <__adddf3>
 800ae20:	3c01      	subs	r4, #1
 800ae22:	e7c1      	b.n	800ada8 <__kernel_rem_pio2+0x560>
 800ae24:	4602      	mov	r2, r0
 800ae26:	460b      	mov	r3, r1
 800ae28:	e7c6      	b.n	800adb8 <__kernel_rem_pio2+0x570>
 800ae2a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ae2e:	f7f5 f9d1 	bl	80001d4 <__adddf3>
 800ae32:	3401      	adds	r4, #1
 800ae34:	e7cb      	b.n	800adce <__kernel_rem_pio2+0x586>
 800ae36:	ed95 7b00 	vldr	d7, [r5]
 800ae3a:	ed8d 7b00 	vstr	d7, [sp]
 800ae3e:	ed95 7b02 	vldr	d7, [r5, #8]
 800ae42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae46:	ec53 2b17 	vmov	r2, r3, d7
 800ae4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae4e:	f7f5 f9c1 	bl	80001d4 <__adddf3>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4606      	mov	r6, r0
 800ae58:	460f      	mov	r7, r1
 800ae5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae5e:	f7f5 f9b7 	bl	80001d0 <__aeabi_dsub>
 800ae62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae66:	f7f5 f9b5 	bl	80001d4 <__adddf3>
 800ae6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ae72:	e9c5 6700 	strd	r6, r7, [r5]
 800ae76:	e76d      	b.n	800ad54 <__kernel_rem_pio2+0x50c>
 800ae78:	ed94 7b00 	vldr	d7, [r4]
 800ae7c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ae80:	ec51 0b17 	vmov	r0, r1, d7
 800ae84:	4652      	mov	r2, sl
 800ae86:	465b      	mov	r3, fp
 800ae88:	ed8d 7b00 	vstr	d7, [sp]
 800ae8c:	f7f5 f9a2 	bl	80001d4 <__adddf3>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4606      	mov	r6, r0
 800ae96:	460f      	mov	r7, r1
 800ae98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae9c:	f7f5 f998 	bl	80001d0 <__aeabi_dsub>
 800aea0:	4652      	mov	r2, sl
 800aea2:	465b      	mov	r3, fp
 800aea4:	f7f5 f996 	bl	80001d4 <__adddf3>
 800aea8:	3d01      	subs	r5, #1
 800aeaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aeae:	e9c4 6700 	strd	r6, r7, [r4]
 800aeb2:	e755      	b.n	800ad60 <__kernel_rem_pio2+0x518>
 800aeb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aeb8:	f7f5 f98c 	bl	80001d4 <__adddf3>
 800aebc:	f108 38ff 	add.w	r8, r8, #4294967295
 800aec0:	e758      	b.n	800ad74 <__kernel_rem_pio2+0x52c>
 800aec2:	bf00      	nop
 800aec4:	f3af 8000 	nop.w
	...
 800aed0:	41700000 	.word	0x41700000
 800aed4:	3e700000 	.word	0x3e700000
 800aed8:	9b04      	ldr	r3, [sp, #16]
 800aeda:	9a04      	ldr	r2, [sp, #16]
 800aedc:	601f      	str	r7, [r3, #0]
 800aede:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800aee2:	605c      	str	r4, [r3, #4]
 800aee4:	609d      	str	r5, [r3, #8]
 800aee6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aeea:	60d3      	str	r3, [r2, #12]
 800aeec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aef0:	6110      	str	r0, [r2, #16]
 800aef2:	6153      	str	r3, [r2, #20]
 800aef4:	e719      	b.n	800ad2a <__kernel_rem_pio2+0x4e2>
 800aef6:	bf00      	nop

0800aef8 <scalbn>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	ec55 4b10 	vmov	r4, r5, d0
 800aefe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800af02:	4606      	mov	r6, r0
 800af04:	462b      	mov	r3, r5
 800af06:	b991      	cbnz	r1, 800af2e <scalbn+0x36>
 800af08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800af0c:	4323      	orrs	r3, r4
 800af0e:	d03d      	beq.n	800af8c <scalbn+0x94>
 800af10:	4b35      	ldr	r3, [pc, #212]	@ (800afe8 <scalbn+0xf0>)
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	2200      	movs	r2, #0
 800af18:	f7f5 fb12 	bl	8000540 <__aeabi_dmul>
 800af1c:	4b33      	ldr	r3, [pc, #204]	@ (800afec <scalbn+0xf4>)
 800af1e:	429e      	cmp	r6, r3
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	da0f      	bge.n	800af46 <scalbn+0x4e>
 800af26:	a328      	add	r3, pc, #160	@ (adr r3, 800afc8 <scalbn+0xd0>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	e01e      	b.n	800af6c <scalbn+0x74>
 800af2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800af32:	4291      	cmp	r1, r2
 800af34:	d10b      	bne.n	800af4e <scalbn+0x56>
 800af36:	4622      	mov	r2, r4
 800af38:	4620      	mov	r0, r4
 800af3a:	4629      	mov	r1, r5
 800af3c:	f7f5 f94a 	bl	80001d4 <__adddf3>
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	e022      	b.n	800af8c <scalbn+0x94>
 800af46:	460b      	mov	r3, r1
 800af48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af4c:	3936      	subs	r1, #54	@ 0x36
 800af4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800af52:	4296      	cmp	r6, r2
 800af54:	dd0d      	ble.n	800af72 <scalbn+0x7a>
 800af56:	2d00      	cmp	r5, #0
 800af58:	a11d      	add	r1, pc, #116	@ (adr r1, 800afd0 <scalbn+0xd8>)
 800af5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af5e:	da02      	bge.n	800af66 <scalbn+0x6e>
 800af60:	a11d      	add	r1, pc, #116	@ (adr r1, 800afd8 <scalbn+0xe0>)
 800af62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af66:	a31a      	add	r3, pc, #104	@ (adr r3, 800afd0 <scalbn+0xd8>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fae8 	bl	8000540 <__aeabi_dmul>
 800af70:	e7e6      	b.n	800af40 <scalbn+0x48>
 800af72:	1872      	adds	r2, r6, r1
 800af74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800af78:	428a      	cmp	r2, r1
 800af7a:	dcec      	bgt.n	800af56 <scalbn+0x5e>
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	dd08      	ble.n	800af92 <scalbn+0x9a>
 800af80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af8c:	ec45 4b10 	vmov	d0, r4, r5
 800af90:	bd70      	pop	{r4, r5, r6, pc}
 800af92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800af96:	da08      	bge.n	800afaa <scalbn+0xb2>
 800af98:	2d00      	cmp	r5, #0
 800af9a:	a10b      	add	r1, pc, #44	@ (adr r1, 800afc8 <scalbn+0xd0>)
 800af9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa0:	dac1      	bge.n	800af26 <scalbn+0x2e>
 800afa2:	a10f      	add	r1, pc, #60	@ (adr r1, 800afe0 <scalbn+0xe8>)
 800afa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa8:	e7bd      	b.n	800af26 <scalbn+0x2e>
 800afaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800afae:	3236      	adds	r2, #54	@ 0x36
 800afb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800afb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afb8:	4620      	mov	r0, r4
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <scalbn+0xf8>)
 800afbc:	4629      	mov	r1, r5
 800afbe:	2200      	movs	r2, #0
 800afc0:	e7d4      	b.n	800af6c <scalbn+0x74>
 800afc2:	bf00      	nop
 800afc4:	f3af 8000 	nop.w
 800afc8:	c2f8f359 	.word	0xc2f8f359
 800afcc:	01a56e1f 	.word	0x01a56e1f
 800afd0:	8800759c 	.word	0x8800759c
 800afd4:	7e37e43c 	.word	0x7e37e43c
 800afd8:	8800759c 	.word	0x8800759c
 800afdc:	fe37e43c 	.word	0xfe37e43c
 800afe0:	c2f8f359 	.word	0xc2f8f359
 800afe4:	81a56e1f 	.word	0x81a56e1f
 800afe8:	43500000 	.word	0x43500000
 800afec:	ffff3cb0 	.word	0xffff3cb0
 800aff0:	3c900000 	.word	0x3c900000
 800aff4:	00000000 	.word	0x00000000

0800aff8 <floor>:
 800aff8:	ec51 0b10 	vmov	r0, r1, d0
 800affc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b008:	2e13      	cmp	r6, #19
 800b00a:	460c      	mov	r4, r1
 800b00c:	4605      	mov	r5, r0
 800b00e:	4680      	mov	r8, r0
 800b010:	dc34      	bgt.n	800b07c <floor+0x84>
 800b012:	2e00      	cmp	r6, #0
 800b014:	da17      	bge.n	800b046 <floor+0x4e>
 800b016:	a332      	add	r3, pc, #200	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 f8da 	bl	80001d4 <__adddf3>
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fd1c 	bl	8000a60 <__aeabi_dcmpgt>
 800b028:	b150      	cbz	r0, 800b040 <floor+0x48>
 800b02a:	2c00      	cmp	r4, #0
 800b02c:	da55      	bge.n	800b0da <floor+0xe2>
 800b02e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b032:	432c      	orrs	r4, r5
 800b034:	2500      	movs	r5, #0
 800b036:	42ac      	cmp	r4, r5
 800b038:	4c2b      	ldr	r4, [pc, #172]	@ (800b0e8 <floor+0xf0>)
 800b03a:	bf08      	it	eq
 800b03c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	e023      	b.n	800b08e <floor+0x96>
 800b046:	4f29      	ldr	r7, [pc, #164]	@ (800b0ec <floor+0xf4>)
 800b048:	4137      	asrs	r7, r6
 800b04a:	ea01 0307 	and.w	r3, r1, r7
 800b04e:	4303      	orrs	r3, r0
 800b050:	d01d      	beq.n	800b08e <floor+0x96>
 800b052:	a323      	add	r3, pc, #140	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b058:	f7f5 f8bc 	bl	80001d4 <__adddf3>
 800b05c:	2200      	movs	r2, #0
 800b05e:	2300      	movs	r3, #0
 800b060:	f7f5 fcfe 	bl	8000a60 <__aeabi_dcmpgt>
 800b064:	2800      	cmp	r0, #0
 800b066:	d0eb      	beq.n	800b040 <floor+0x48>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	bfbe      	ittt	lt
 800b06c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b070:	4133      	asrlt	r3, r6
 800b072:	18e4      	addlt	r4, r4, r3
 800b074:	ea24 0407 	bic.w	r4, r4, r7
 800b078:	2500      	movs	r5, #0
 800b07a:	e7e1      	b.n	800b040 <floor+0x48>
 800b07c:	2e33      	cmp	r6, #51	@ 0x33
 800b07e:	dd0a      	ble.n	800b096 <floor+0x9e>
 800b080:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b084:	d103      	bne.n	800b08e <floor+0x96>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	f7f5 f8a3 	bl	80001d4 <__adddf3>
 800b08e:	ec41 0b10 	vmov	d0, r0, r1
 800b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b096:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b09a:	f04f 37ff 	mov.w	r7, #4294967295
 800b09e:	40df      	lsrs	r7, r3
 800b0a0:	4207      	tst	r7, r0
 800b0a2:	d0f4      	beq.n	800b08e <floor+0x96>
 800b0a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0e0 <floor+0xe8>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f893 	bl	80001d4 <__adddf3>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f7f5 fcd5 	bl	8000a60 <__aeabi_dcmpgt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0c2      	beq.n	800b040 <floor+0x48>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	da0a      	bge.n	800b0d4 <floor+0xdc>
 800b0be:	2e14      	cmp	r6, #20
 800b0c0:	d101      	bne.n	800b0c6 <floor+0xce>
 800b0c2:	3401      	adds	r4, #1
 800b0c4:	e006      	b.n	800b0d4 <floor+0xdc>
 800b0c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	40b3      	lsls	r3, r6
 800b0ce:	441d      	add	r5, r3
 800b0d0:	4545      	cmp	r5, r8
 800b0d2:	d3f6      	bcc.n	800b0c2 <floor+0xca>
 800b0d4:	ea25 0507 	bic.w	r5, r5, r7
 800b0d8:	e7b2      	b.n	800b040 <floor+0x48>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	462c      	mov	r4, r5
 800b0de:	e7af      	b.n	800b040 <floor+0x48>
 800b0e0:	8800759c 	.word	0x8800759c
 800b0e4:	7e37e43c 	.word	0x7e37e43c
 800b0e8:	bff00000 	.word	0xbff00000
 800b0ec:	000fffff 	.word	0x000fffff

0800b0f0 <_init>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	bf00      	nop
 800b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	4770      	bx	lr

0800b0fc <_fini>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr
