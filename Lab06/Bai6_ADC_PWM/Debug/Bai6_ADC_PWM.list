
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034a8  0800de48  0800de48  0001de48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112f0  080112f0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080112f0  080112f0  000212f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112f8  080112f8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112f8  080112f8  000212f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112fc  080112fc  000212fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011300  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          000004f0  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a695  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000047d5  00000000  00000000  0004a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a8  00000000  00000000  0004f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001248  00000000  00000000  00050868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002718e  00000000  00000000  00051ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000213c4  00000000  00000000  00078c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e12b5  00000000  00000000  0009a002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000075a4  00000000  00000000  0017b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0018285c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de30 	.word	0x0800de30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800de30 	.word	0x0800de30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001004:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <MX_ADC1_Init+0x10c>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <MX_ADC1_Init+0x108>)
 800100a:	2200      	movs	r2, #0
 800100c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001016:	2201      	movs	r2, #1
 8001018:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <MX_ADC1_Init+0x108>)
 800101c:	2200      	movs	r2, #0
 800101e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <MX_ADC1_Init+0x108>)
 800102a:	2200      	movs	r2, #0
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001030:	4a33      	ldr	r2, [pc, #204]	; (8001100 <MX_ADC1_Init+0x110>)
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <MX_ADC1_Init+0x108>)
 800103c:	2205      	movs	r2, #5
 800103e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_ADC1_Init+0x108>)
 800104a:	2201      	movs	r2, #1
 800104c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104e:	482a      	ldr	r0, [pc, #168]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001050:	f002 fc76 	bl	8003940 <HAL_ADC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f001 fe48 	bl	8002cee <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800105e:	2308      	movs	r3, #8
 8001060:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_ADC1_Init+0x108>)
 8001070:	f002 fdd8 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800107a:	f001 fe38 	bl	8002cee <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800107e:	2309      	movs	r3, #9
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_ADC1_Init+0x108>)
 800108c:	f002 fdca 	bl	8003c24 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001096:	f001 fe2a 	bl	8002cee <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800109a:	230a      	movs	r3, #10
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800109e:	2303      	movs	r3, #3
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010a8:	f002 fdbc 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010b2:	f001 fe1c 	bl	8002cee <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010b6:	230b      	movs	r3, #11
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	f002 fdae 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010ce:	f001 fe0e 	bl	8002cee <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010d2:	230c      	movs	r3, #12
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010d6:	2305      	movs	r3, #5
 80010d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	4619      	mov	r1, r3
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010e0:	f002 fda0 	bl	8003c24 <HAL_ADC_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80010ea:	f001 fe00 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001f8 	.word	0x200001f8
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <HAL_ADC_MspInit+0x110>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d171      	bne.n	800120a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a3a      	ldr	r2, [pc, #232]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117a:	2307      	movs	r3, #7
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x118>)
 800118e:	f003 fcfd 	bl	8004b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001192:	2303      	movs	r3, #3
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <HAL_ADC_MspInit+0x11c>)
 80011a6:	f003 fcf1 	bl	8004b8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_ADC_MspInit+0x124>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011f0:	f003 f8ca 	bl	8004388 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011fa:	f001 fd78 	bl	8002cee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400
 8001224:	20000240 	.word	0x20000240
 8001228:	40026410 	.word	0x40026410

0800122c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2108      	movs	r1, #8
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <button_init+0x14>)
 8001236:	f003 fe45 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020c00 	.word	0x40020c00

08001244 <button_Scan>:

void button_Scan(){
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2108      	movs	r1, #8
 800124e:	482f      	ldr	r0, [pc, #188]	; (800130c <button_Scan+0xc8>)
 8001250:	f003 fe38 	bl	8004ec4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001254:	2201      	movs	r2, #1
 8001256:	2108      	movs	r1, #8
 8001258:	482c      	ldr	r0, [pc, #176]	; (800130c <button_Scan+0xc8>)
 800125a:	f003 fe33 	bl	8004ec4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800125e:	230a      	movs	r3, #10
 8001260:	2202      	movs	r2, #2
 8001262:	492b      	ldr	r1, [pc, #172]	; (8001310 <button_Scan+0xcc>)
 8001264:	482b      	ldr	r0, [pc, #172]	; (8001314 <button_Scan+0xd0>)
 8001266:	f005 fc64 	bl	8006b32 <HAL_SPI_Receive>
	  int button_index = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800126e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001272:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	e03f      	b.n	80012fa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db06      	blt.n	800128e <button_Scan+0x4a>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b03      	cmp	r3, #3
 8001284:	dc03      	bgt.n	800128e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3304      	adds	r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e018      	b.n	80012c0 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b03      	cmp	r3, #3
 8001292:	dd07      	ble.n	80012a4 <button_Scan+0x60>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b07      	cmp	r3, #7
 8001298:	dc04      	bgt.n	80012a4 <button_Scan+0x60>
			  button_index = 7 - i;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f1c3 0307 	rsb	r3, r3, #7
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e00d      	b.n	80012c0 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	dd06      	ble.n	80012b8 <button_Scan+0x74>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0b      	cmp	r3, #11
 80012ae:	dc03      	bgt.n	80012b8 <button_Scan+0x74>
			  button_index = i + 4;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3304      	adds	r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e003      	b.n	80012c0 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1c3 0317 	rsb	r3, r3, #23
 80012be:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <button_Scan+0xcc>)
 80012c2:	881a      	ldrh	r2, [r3, #0]
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	4013      	ands	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <button_Scan+0x96>
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <button_Scan+0xd4>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2100      	movs	r1, #0
 80012d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012d8:	e009      	b.n	80012ee <button_Scan+0xaa>
		  else button_count[button_index]++;
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <button_Scan+0xd4>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b299      	uxth	r1, r3
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <button_Scan+0xd4>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80012ee:	897b      	ldrh	r3, [r7, #10]
 80012f0:	085b      	lsrs	r3, r3, #1
 80012f2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	ddbc      	ble.n	800127a <button_Scan+0x36>
	  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40020c00 	.word	0x40020c00
 8001310:	200002c0 	.word	0x200002c0
 8001314:	200003e4 	.word	0x200003e4
 8001318:	200002a0 	.word	0x200002a0

0800131c <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001320:	2100      	movs	r1, #0
 8001322:	4802      	ldr	r0, [pc, #8]	; (800132c <buzzer_init+0x10>)
 8001324:	f006 f946 	bl	80075b4 <HAL_TIM_PWM_Start>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000488 	.word	0x20000488

08001330 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <buzzer_SetVolume+0x28>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <buzzer_SetVolume+0x28>)
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <buzzer_SetVolume+0x2c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	200002c2 	.word	0x200002c2
 800135c:	20000488 	.word	0x20000488

08001360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_DMA_Init+0x3c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <MX_DMA_Init+0x3c>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_DMA_Init+0x3c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2038      	movs	r0, #56	; 0x38
 8001388:	f002 ffc7 	bl	800431a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800138c:	2038      	movs	r0, #56	; 0x38
 800138e:	f002 ffe0 	bl	8004352 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80013a4:	201e      	movs	r0, #30
 80013a6:	f002 f9e7 	bl	8003778 <DEC2BCD>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b17      	ldr	r3, [pc, #92]	; (800140c <ds3231_init+0x6c>)
 80013b0:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80013b2:	2016      	movs	r0, #22
 80013b4:	f002 f9e0 	bl	8003778 <DEC2BCD>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <ds3231_init+0x6c>)
 80013be:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80013c0:	2015      	movs	r0, #21
 80013c2:	f002 f9d9 	bl	8003778 <DEC2BCD>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <ds3231_init+0x6c>)
 80013cc:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80013ce:	2006      	movs	r0, #6
 80013d0:	f002 f9d2 	bl	8003778 <DEC2BCD>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <ds3231_init+0x6c>)
 80013da:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 80013dc:	200f      	movs	r0, #15
 80013de:	f002 f9cb 	bl	8003778 <DEC2BCD>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <ds3231_init+0x6c>)
 80013e8:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80013ea:	2009      	movs	r0, #9
 80013ec:	f002 f9c4 	bl	8003778 <DEC2BCD>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <ds3231_init+0x6c>)
 80013f6:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80013f8:	2017      	movs	r0, #23
 80013fa:	f002 f9bd 	bl	8003778 <DEC2BCD>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <ds3231_init+0x6c>)
 8001404:	719a      	strb	r2, [r3, #6]
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002c4 	.word	0x200002c4

08001410 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af04      	add	r7, sp, #16
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f9a8 	bl	8003778 <DEC2BCD>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	b29a      	uxth	r2, r3
 8001430:	230a      	movs	r3, #10
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 030f 	add.w	r3, r7, #15
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	21d0      	movs	r1, #208	; 0xd0
 8001442:	4803      	ldr	r0, [pc, #12]	; (8001450 <ds3231_Write+0x40>)
 8001444:	f003 fe9c 	bl	8005180 <HAL_I2C_Mem_Write>
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000328 	.word	0x20000328

08001454 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800145a:	230a      	movs	r3, #10
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2307      	movs	r3, #7
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <ds3231_ReadTime+0xa4>)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	2200      	movs	r2, #0
 800146a:	21d0      	movs	r1, #208	; 0xd0
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <ds3231_ReadTime+0xa8>)
 800146e:	f003 ff81 	bl	8005374 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001472:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <ds3231_ReadTime+0xa4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 f964 	bl	8003744 <BCD2DEC>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <ds3231_ReadTime+0xac>)
 8001482:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <ds3231_ReadTime+0xa4>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 f95b 	bl	8003744 <BCD2DEC>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <ds3231_ReadTime+0xb0>)
 8001494:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <ds3231_ReadTime+0xa4>)
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f952 	bl	8003744 <BCD2DEC>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <ds3231_ReadTime+0xb4>)
 80014a6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <ds3231_ReadTime+0xa4>)
 80014aa:	78db      	ldrb	r3, [r3, #3]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 f949 	bl	8003744 <BCD2DEC>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <ds3231_ReadTime+0xb8>)
 80014b8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <ds3231_ReadTime+0xa4>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 f940 	bl	8003744 <BCD2DEC>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <ds3231_ReadTime+0xbc>)
 80014ca:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <ds3231_ReadTime+0xa4>)
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 f937 	bl	8003744 <BCD2DEC>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <ds3231_ReadTime+0xc0>)
 80014dc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <ds3231_ReadTime+0xa4>)
 80014e0:	799b      	ldrb	r3, [r3, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 f92e 	bl	8003744 <BCD2DEC>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <ds3231_ReadTime+0xc4>)
 80014ee:	701a      	strb	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002c4 	.word	0x200002c4
 80014fc:	20000328 	.word	0x20000328
 8001500:	200002cd 	.word	0x200002cd
 8001504:	200002cc 	.word	0x200002cc
 8001508:	200002cb 	.word	0x200002cb
 800150c:	200002cf 	.word	0x200002cf
 8001510:	200002ce 	.word	0x200002ce
 8001514:	200002d0 	.word	0x200002d0
 8001518:	200002d1 	.word	0x200002d1

0800151c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_FSMC_Init+0xec>)
 800154a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800154e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <MX_FSMC_Init+0xec>)
 8001552:	4a2e      	ldr	r2, [pc, #184]	; (800160c <MX_FSMC_Init+0xf0>)
 8001554:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <MX_FSMC_Init+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800155c:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <MX_FSMC_Init+0xec>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <MX_FSMC_Init+0xec>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <MX_FSMC_Init+0xec>)
 800156a:	2210      	movs	r2, #16
 800156c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <MX_FSMC_Init+0xec>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <MX_FSMC_Init+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <MX_FSMC_Init+0xec>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_FSMC_Init+0xec>)
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_FSMC_Init+0xec>)
 8001588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_FSMC_Init+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_FSMC_Init+0xec>)
 8001596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_FSMC_Init+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_FSMC_Init+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_FSMC_Init+0xec>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80015ae:	230f      	movs	r3, #15
 80015b0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80015b2:	230f      	movs	r3, #15
 80015b4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80015b6:	233c      	movs	r3, #60	; 0x3c
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80015be:	2310      	movs	r3, #16
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80015c2:	2311      	movs	r3, #17
 80015c4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015c6:	2300      	movs	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80015ca:	2308      	movs	r3, #8
 80015cc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015ce:	230f      	movs	r3, #15
 80015d0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80015d2:	2309      	movs	r3, #9
 80015d4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015da:	2310      	movs	r3, #16
 80015dc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015de:	2311      	movs	r3, #17
 80015e0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015e6:	463a      	mov	r2, r7
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_FSMC_Init+0xec>)
 80015f0:	f005 fe82 	bl	80072f8 <HAL_SRAM_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80015fa:	f001 fb78 	bl	8002cee <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80015fe:	bf00      	nop
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200002d4 	.word	0x200002d4
 800160c:	a0000104 	.word	0xa0000104

08001610 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_FSMC_MspInit+0x88>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d131      	bne.n	8001690 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_FSMC_MspInit+0x88>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_FSMC_MspInit+0x8c>)
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_FSMC_MspInit+0x8c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6393      	str	r3, [r2, #56]	; 0x38
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_FSMC_MspInit+0x8c>)
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800164e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001652:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001660:	230c      	movs	r3, #12
 8001662:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <HAL_FSMC_MspInit+0x90>)
 800166a:	f003 fa8f 	bl	8004b8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800166e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001672:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001680:	230c      	movs	r3, #12
 8001682:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <HAL_FSMC_MspInit+0x94>)
 800168a:	f003 fa7f 	bl	8004b8c <HAL_GPIO_Init>
 800168e:	e000      	b.n	8001692 <HAL_FSMC_MspInit+0x82>
    return;
 8001690:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000324 	.word	0x20000324
 800169c:	40023800 	.word	0x40023800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40020c00 	.word	0x40020c00

080016a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016b0:	f7ff ffae 	bl	8001610 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	4b76      	ldr	r3, [pc, #472]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a75      	ldr	r2, [pc, #468]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	623b      	str	r3, [r7, #32]
 80016ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a67      	ldr	r2, [pc, #412]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a60      	ldr	r2, [pc, #384]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a59      	ldr	r2, [pc, #356]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b4c      	ldr	r3, [pc, #304]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a4b      	ldr	r2, [pc, #300]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80017a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <MX_GPIO_Init+0x1f4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2170      	movs	r1, #112	; 0x70
 80017b6:	483f      	ldr	r0, [pc, #252]	; (80018b4 <MX_GPIO_Init+0x1f8>)
 80017b8:	f003 fb84 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c2:	483d      	ldr	r0, [pc, #244]	; (80018b8 <MX_GPIO_Init+0x1fc>)
 80017c4:	f003 fb7e 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	483b      	ldr	r0, [pc, #236]	; (80018bc <MX_GPIO_Init+0x200>)
 80017ce:	f003 fb79 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d8:	4839      	ldr	r0, [pc, #228]	; (80018c0 <MX_GPIO_Init+0x204>)
 80017da:	f003 fb73 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2108      	movs	r1, #8
 80017e2:	4838      	ldr	r0, [pc, #224]	; (80018c4 <MX_GPIO_Init+0x208>)
 80017e4:	f003 fb6e 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80017e8:	2370      	movs	r3, #112	; 0x70
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	482d      	ldr	r0, [pc, #180]	; (80018b4 <MX_GPIO_Init+0x1f8>)
 8001800:	f003 f9c4 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4826      	ldr	r0, [pc, #152]	; (80018b8 <MX_GPIO_Init+0x1fc>)
 800181e:	f003 f9b5 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4822      	ldr	r0, [pc, #136]	; (80018c0 <MX_GPIO_Init+0x204>)
 8001836:	f003 f9a9 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800183a:	2330      	movs	r3, #48	; 0x30
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	4619      	mov	r1, r3
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <MX_GPIO_Init+0x1fc>)
 800184e:	f003 f99d 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4814      	ldr	r0, [pc, #80]	; (80018bc <MX_GPIO_Init+0x200>)
 800186a:	f003 f98f 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	480e      	ldr	r0, [pc, #56]	; (80018c0 <MX_GPIO_Init+0x204>)
 8001888:	f003 f980 	bl	8004b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800188c:	2308      	movs	r3, #8
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <MX_GPIO_Init+0x208>)
 80018a4:	f003 f972 	bl	8004b8c <HAL_GPIO_Init>

}
 80018a8:	bf00      	nop
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020c00 	.word	0x40020c00

080018c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ce:	4a13      	ldr	r2, [pc, #76]	; (800191c <MX_I2C1_Init+0x54>)
 80018d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_I2C1_Init+0x50>)
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_I2C1_Init+0x58>)
 80018d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_I2C1_Init+0x50>)
 80018e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <MX_I2C1_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_I2C1_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001904:	4804      	ldr	r0, [pc, #16]	; (8001918 <MX_I2C1_Init+0x50>)
 8001906:	f003 faf7 	bl	8004ef8 <HAL_I2C_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001910:	f001 f9ed 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000328 	.word	0x20000328
 800191c:	40005400 	.word	0x40005400
 8001920:	000186a0 	.word	0x000186a0

08001924 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_I2C_MspInit+0x84>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12b      	bne.n	800199e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_I2C_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001966:	2312      	movs	r3, #18
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001972:	2304      	movs	r3, #4
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <HAL_I2C_MspInit+0x8c>)
 800197e:	f003 f905 	bl	8004b8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x88>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_I2C_MspInit+0x88>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400

080019b4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <LCD_WR_REG+0x1c>)
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	8013      	strh	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	600ffffe 	.word	0x600ffffe

080019d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80019de:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <LCD_WR_DATA+0x1c>)
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	8053      	strh	r3, [r2, #2]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	600ffffe 	.word	0x600ffffe

080019f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LCD_RD_DATA+0x20>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	b29b      	uxth	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	600ffffe 	.word	0x600ffffe

08001a18 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	80fb      	strh	r3, [r7, #6]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80bb      	strh	r3, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	807b      	strh	r3, [r7, #2]
 8001a32:	4613      	mov	r3, r2
 8001a34:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001a36:	202a      	movs	r0, #42	; 0x2a
 8001a38:	f7ff ffbc 	bl	80019b4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ffc6 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ffc0 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ffba 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffb4 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a6c:	202b      	movs	r0, #43	; 0x2b
 8001a6e:	f7ff ffa1 	bl	80019b4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffab 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffa5 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff9f 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a96:	883b      	ldrh	r3, [r7, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff99 	bl	80019d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001aa2:	202c      	movs	r0, #44	; 0x2c
 8001aa4:	f7ff ff86 	bl	80019b4 <LCD_WR_REG>
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <lcd_Clear+0x60>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <lcd_Clear+0x60>)
 8001ac4:	885b      	ldrh	r3, [r3, #2]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff ffa3 	bl	8001a18 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	81fb      	strh	r3, [r7, #14]
 8001ad6:	e011      	b.n	8001afc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	81bb      	strh	r3, [r7, #12]
 8001adc:	e006      	b.n	8001aec <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff77 	bl	80019d4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001ae6:	89bb      	ldrh	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	81bb      	strh	r3, [r7, #12]
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <lcd_Clear+0x60>)
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	89ba      	ldrh	r2, [r7, #12]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3f3      	bcc.n	8001ade <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001af6:	89fb      	ldrh	r3, [r7, #14]
 8001af8:	3301      	adds	r3, #1
 8001afa:	81fb      	strh	r3, [r7, #14]
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <lcd_Clear+0x60>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	89fa      	ldrh	r2, [r7, #14]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3e8      	bcc.n	8001ad8 <lcd_Clear+0x28>
		}
	}
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000037c 	.word	0x2000037c

08001b14 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	4603      	mov	r3, r0
 8001b28:	80bb      	strh	r3, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	883b      	ldrh	r3, [r7, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	88b9      	ldrh	r1, [r7, #4]
 8001b40:	88f8      	ldrh	r0, [r7, #6]
 8001b42:	f7ff ff69 	bl	8001a18 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	81fb      	strh	r3, [r7, #14]
 8001b4a:	e010      	b.n	8001b6e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	81bb      	strh	r3, [r7, #12]
 8001b50:	e006      	b.n	8001b60 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001b52:	8c3b      	ldrh	r3, [r7, #32]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff3d 	bl	80019d4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001b5a:	89bb      	ldrh	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	81bb      	strh	r3, [r7, #12]
 8001b60:	89ba      	ldrh	r2, [r7, #12]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3f4      	bcc.n	8001b52 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001b68:	89fb      	ldrh	r3, [r7, #14]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	81fb      	strh	r3, [r7, #14]
 8001b6e:	89fa      	ldrh	r2, [r7, #14]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3ea      	bcc.n	8001b4c <lcd_Fill+0x38>
		}
	}
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}

08001b80 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	88fa      	ldrh	r2, [r7, #6]
 8001b96:	88b9      	ldrh	r1, [r7, #4]
 8001b98:	88f8      	ldrh	r0, [r7, #6]
 8001b9a:	f7ff ff3d 	bl	8001a18 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff17 	bl	80019d4 <LCD_WR_DATA>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001bae:	b590      	push	{r4, r7, lr}
 8001bb0:	b08d      	sub	sp, #52	; 0x34
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80bb      	strh	r3, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001bdc:	883a      	ldrh	r2, [r7, #0]
 8001bde:	88bb      	ldrh	r3, [r7, #4]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	dd02      	ble.n	8001bf8 <lcd_DrawLine+0x4a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e00b      	b.n	8001c10 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <lcd_DrawLine+0x56>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e005      	b.n	8001c10 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	dd02      	ble.n	8001c1c <lcd_DrawLine+0x6e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e00b      	b.n	8001c34 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <lcd_DrawLine+0x7a>
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e005      	b.n	8001c34 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001c28:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	425b      	negs	r3, r3
 8001c32:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001c34:	6a3a      	ldr	r2, [r7, #32]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dd02      	ble.n	8001c42 <lcd_DrawLine+0x94>
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	e001      	b.n	8001c46 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c4a:	e02b      	b.n	8001ca4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	b291      	uxth	r1, r2
 8001c54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff91 	bl	8001b80 <lcd_DrawPoint>
		xerr+=delta_x;
 8001c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	4413      	add	r3, r2
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	dd07      	ble.n	8001c86 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	dd07      	ble.n	8001c9e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001c9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ca4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dacf      	bge.n	8001c4c <lcd_DrawLine+0x9e>
		}
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3734      	adds	r7, #52	; 0x34
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
	...

08001cb8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	80fb      	strh	r3, [r7, #6]
 8001cca:	4603      	mov	r3, r0
 8001ccc:	80bb      	strh	r3, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001cde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	fb12 f303 	smulbb	r3, r2, r3
 8001d0e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	3b20      	subs	r3, #32
 8001d14:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29c      	uxth	r4, r3
 8001d24:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	88b9      	ldrh	r1, [r7, #4]
 8001d36:	88f8      	ldrh	r0, [r7, #6]
 8001d38:	4622      	mov	r2, r4
 8001d3a:	f7ff fe6d 	bl	8001a18 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	827b      	strh	r3, [r7, #18]
 8001d42:	e07a      	b.n	8001e3a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001d44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d028      	beq.n	8001d9e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d108      	bne.n	8001d66 <lcd_ShowChar+0xae>
 8001d54:	78fa      	ldrb	r2, [r7, #3]
 8001d56:	8a7b      	ldrh	r3, [r7, #18]
 8001d58:	493c      	ldr	r1, [pc, #240]	; (8001e4c <lcd_ShowChar+0x194>)
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	440a      	add	r2, r1
 8001d5e:	4413      	add	r3, r2
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	75fb      	strb	r3, [r7, #23]
 8001d64:	e01b      	b.n	8001d9e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d6a:	2b18      	cmp	r3, #24
 8001d6c:	d10b      	bne.n	8001d86 <lcd_ShowChar+0xce>
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	8a79      	ldrh	r1, [r7, #18]
 8001d72:	4837      	ldr	r0, [pc, #220]	; (8001e50 <lcd_ShowChar+0x198>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4403      	add	r3, r0
 8001d7e:	440b      	add	r3, r1
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	75fb      	strb	r3, [r7, #23]
 8001d84:	e00b      	b.n	8001d9e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	d15a      	bne.n	8001e44 <lcd_ShowChar+0x18c>
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	8a7b      	ldrh	r3, [r7, #18]
 8001d92:	4930      	ldr	r1, [pc, #192]	; (8001e54 <lcd_ShowChar+0x19c>)
 8001d94:	0192      	lsls	r2, r2, #6
 8001d96:	440a      	add	r2, r1
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75bb      	strb	r3, [r7, #22]
 8001da2:	e044      	b.n	8001e2e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001da4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d120      	bne.n	8001dee <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001dac:	7dfa      	ldrb	r2, [r7, #23]
 8001dae:	7dbb      	ldrb	r3, [r7, #22]
 8001db0:	fa42 f303 	asr.w	r3, r2, r3
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <lcd_ShowChar+0x10e>
 8001dbc:	883b      	ldrh	r3, [r7, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fe08 	bl	80019d4 <LCD_WR_DATA>
 8001dc4:	e003      	b.n	8001dce <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe03 	bl	80019d4 <LCD_WR_DATA>
				m++;
 8001dce:	7d7b      	ldrb	r3, [r7, #21]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001dd4:	7d7b      	ldrb	r3, [r7, #21]
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ddc:	fb01 f202 	mul.w	r2, r1, r2
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11f      	bne.n	8001e28 <lcd_ShowChar+0x170>
				{
					m=0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	757b      	strb	r3, [r7, #21]
					break;
 8001dec:	e022      	b.n	8001e34 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001dee:	7dfa      	ldrb	r2, [r7, #23]
 8001df0:	7dbb      	ldrb	r3, [r7, #22]
 8001df2:	fa42 f303 	asr.w	r3, r2, r3
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <lcd_ShowChar+0x152>
 8001dfe:	883a      	ldrh	r2, [r7, #0]
 8001e00:	88b9      	ldrh	r1, [r7, #4]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff febb 	bl	8001b80 <lcd_DrawPoint>
				x++;
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	8a3b      	ldrh	r3, [r7, #16]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d105      	bne.n	8001e28 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001e1c:	8a3b      	ldrh	r3, [r7, #16]
 8001e1e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	3301      	adds	r3, #1
 8001e24:	80bb      	strh	r3, [r7, #4]
					break;
 8001e26:	e005      	b.n	8001e34 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001e28:	7dbb      	ldrb	r3, [r7, #22]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	75bb      	strb	r3, [r7, #22]
 8001e2e:	7dbb      	ldrb	r3, [r7, #22]
 8001e30:	2b07      	cmp	r3, #7
 8001e32:	d9b7      	bls.n	8001da4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001e34:	8a7b      	ldrh	r3, [r7, #18]
 8001e36:	3301      	adds	r3, #1
 8001e38:	827b      	strh	r3, [r7, #18]
 8001e3a:	8a7a      	ldrh	r2, [r7, #18]
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d380      	bcc.n	8001d44 <lcd_ShowChar+0x8c>
 8001e42:	e000      	b.n	8001e46 <lcd_ShowChar+0x18e>
		else return;
 8001e44:	bf00      	nop
				}
			}
		}
	}
}
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	0800df24 	.word	0x0800df24
 8001e50:	0800e514 	.word	0x0800e514
 8001e54:	0800f6e4 	.word	0x0800f6e4

08001e58 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	460a      	mov	r2, r1
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001e6c:	e004      	b.n	8001e78 <mypow+0x20>
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	79bb      	ldrb	r3, [r7, #6]
 8001e7a:	1e5a      	subs	r2, r3, #1
 8001e7c:	71ba      	strb	r2, [r7, #6]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f5      	bne.n	8001e6e <mypow+0x16>
	return result;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af04      	add	r7, sp, #16
 8001e96:	4604      	mov	r4, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	80fb      	strh	r3, [r7, #6]
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80bb      	strh	r3, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e059      	b.n	8001f74 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ec0:	887c      	ldrh	r4, [r7, #2]
 8001ec2:	787a      	ldrb	r2, [r7, #1]
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f7ff ffc1 	bl	8001e58 <mypow>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	fbb4 f1f3 	udiv	r1, r4, r3
 8001edc:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <lcd_ShowIntNum+0xf8>)
 8001ede:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	1aca      	subs	r2, r1, r3
 8001eee:	4613      	mov	r3, r2
 8001ef0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d121      	bne.n	8001f3c <lcd_ShowIntNum+0xac>
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	429a      	cmp	r2, r3
 8001f00:	da1c      	bge.n	8001f3c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001f02:	7b3b      	ldrb	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d117      	bne.n	8001f38 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	fb12 f303 	smulbb	r3, r2, r3
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4413      	add	r3, r2
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	8c3a      	ldrh	r2, [r7, #32]
 8001f1e:	88b9      	ldrh	r1, [r7, #4]
 8001f20:	2300      	movs	r3, #0
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	2220      	movs	r2, #32
 8001f32:	f7ff fec1 	bl	8001cb8 <lcd_ShowChar>
				continue;
 8001f36:	e01a      	b.n	8001f6e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	7b7b      	ldrb	r3, [r7, #13]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	fb12 f303 	smulbb	r3, r2, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b298      	uxth	r0, r3
 8001f50:	7b3b      	ldrb	r3, [r7, #12]
 8001f52:	3330      	adds	r3, #48	; 0x30
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8c3c      	ldrh	r4, [r7, #32]
 8001f58:	88b9      	ldrh	r1, [r7, #4]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4623      	mov	r3, r4
 8001f6a:	f7ff fea5 	bl	8001cb8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	787b      	ldrb	r3, [r7, #1]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3a1      	bcc.n	8001ec0 <lcd_ShowIntNum+0x30>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	cccccccd 	.word	0xcccccccd

08001f8c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b08b      	sub	sp, #44	; 0x2c
 8001f90:	af04      	add	r7, sp, #16
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	81bb      	strh	r3, [r7, #12]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fba:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002094 <lcd_ShowFloatNum+0x108>
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc6:	ee17 3a90 	vmov	r3, s15
 8001fca:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]
 8001fd0:	e057      	b.n	8002082 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001fd2:	8abc      	ldrh	r4, [r7, #20]
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff ff38 	bl	8001e58 <mypow>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	fbb4 f1f3 	udiv	r1, r4, r3
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <lcd_ShowFloatNum+0x10c>)
 8001ff0:	fba3 2301 	umull	r2, r3, r3, r1
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	1aca      	subs	r2, r1, r3
 8002000:	4613      	mov	r3, r2
 8002002:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8002004:	7dfa      	ldrb	r2, [r7, #23]
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	3b02      	subs	r3, #2
 800200a:	429a      	cmp	r2, r3
 800200c:	d11d      	bne.n	800204a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	3b02      	subs	r3, #2
 8002012:	b29a      	uxth	r2, r3
 8002014:	7dbb      	ldrb	r3, [r7, #22]
 8002016:	b29b      	uxth	r3, r3
 8002018:	fb12 f303 	smulbb	r3, r2, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	4413      	add	r3, r2
 8002022:	b298      	uxth	r0, r3
 8002024:	88ba      	ldrh	r2, [r7, #4]
 8002026:	89b9      	ldrh	r1, [r7, #12]
 8002028:	2300      	movs	r3, #0
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	4613      	mov	r3, r2
 8002038:	222e      	movs	r2, #46	; 0x2e
 800203a:	f7ff fe3d 	bl	8001cb8 <lcd_ShowChar>
			t++;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	3301      	adds	r3, #1
 8002042:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	3301      	adds	r3, #1
 8002048:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	b29a      	uxth	r2, r3
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	b29b      	uxth	r3, r3
 8002052:	fb12 f303 	smulbb	r3, r2, r3
 8002056:	b29a      	uxth	r2, r3
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	4413      	add	r3, r2
 800205c:	b298      	uxth	r0, r3
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	3330      	adds	r3, #48	; 0x30
 8002062:	b2da      	uxtb	r2, r3
 8002064:	88bc      	ldrh	r4, [r7, #4]
 8002066:	89b9      	ldrh	r1, [r7, #12]
 8002068:	2300      	movs	r3, #0
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4623      	mov	r3, r4
 8002078:	f7ff fe1e 	bl	8001cb8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800207c:	7dfb      	ldrb	r3, [r7, #23]
 800207e:	3301      	adds	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
 8002082:	7dfa      	ldrb	r2, [r7, #23]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3a3      	bcc.n	8001fd2 <lcd_ShowFloatNum+0x46>
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd90      	pop	{r4, r7, pc}
 8002094:	42c80000 	.word	0x42c80000
 8002098:	cccccccd 	.word	0xcccccccd

0800209c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <lcd_SetDir+0x44>)
 80020b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <lcd_SetDir+0x44>)
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80020c4:	e006      	b.n	80020d4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <lcd_SetDir+0x44>)
 80020c8:	22f0      	movs	r2, #240	; 0xf0
 80020ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <lcd_SetDir+0x44>)
 80020ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020d2:	805a      	strh	r2, [r3, #2]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	2000037c 	.word	0x2000037c

080020e4 <lcd_init>:


void lcd_init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ee:	48aa      	ldr	r0, [pc, #680]	; (8002398 <lcd_init+0x2b4>)
 80020f0:	f002 fee8 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80020f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020f8:	f001 fbfe 	bl	80038f8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002102:	48a5      	ldr	r0, [pc, #660]	; (8002398 <lcd_init+0x2b4>)
 8002104:	f002 fede 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210c:	f001 fbf4 	bl	80038f8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff ffc3 	bl	800209c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002116:	20d3      	movs	r0, #211	; 0xd3
 8002118:	f7ff fc4c 	bl	80019b4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800211c:	f7ff fc6a 	bl	80019f4 <LCD_RD_DATA>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b9d      	ldr	r3, [pc, #628]	; (800239c <lcd_init+0x2b8>)
 8002126:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002128:	f7ff fc64 	bl	80019f4 <LCD_RD_DATA>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b9a      	ldr	r3, [pc, #616]	; (800239c <lcd_init+0x2b8>)
 8002132:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002134:	f7ff fc5e 	bl	80019f4 <LCD_RD_DATA>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b97      	ldr	r3, [pc, #604]	; (800239c <lcd_init+0x2b8>)
 800213e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002140:	4b96      	ldr	r3, [pc, #600]	; (800239c <lcd_init+0x2b8>)
 8002142:	889b      	ldrh	r3, [r3, #4]
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b94      	ldr	r3, [pc, #592]	; (800239c <lcd_init+0x2b8>)
 800214a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800214c:	f7ff fc52 	bl	80019f4 <LCD_RD_DATA>
 8002150:	4603      	mov	r3, r0
 8002152:	461a      	mov	r2, r3
 8002154:	4b91      	ldr	r3, [pc, #580]	; (800239c <lcd_init+0x2b8>)
 8002156:	889b      	ldrh	r3, [r3, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b8f      	ldr	r3, [pc, #572]	; (800239c <lcd_init+0x2b8>)
 800215e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002160:	20cf      	movs	r0, #207	; 0xcf
 8002162:	f7ff fc27 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff fc34 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800216c:	20c1      	movs	r0, #193	; 0xc1
 800216e:	f7ff fc31 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002172:	2030      	movs	r0, #48	; 0x30
 8002174:	f7ff fc2e 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002178:	20ed      	movs	r0, #237	; 0xed
 800217a:	f7ff fc1b 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	f7ff fc28 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002184:	2003      	movs	r0, #3
 8002186:	f7ff fc25 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800218a:	2012      	movs	r0, #18
 800218c:	f7ff fc22 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002190:	2081      	movs	r0, #129	; 0x81
 8002192:	f7ff fc1f 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002196:	20e8      	movs	r0, #232	; 0xe8
 8002198:	f7ff fc0c 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800219c:	2085      	movs	r0, #133	; 0x85
 800219e:	f7ff fc19 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80021a2:	2010      	movs	r0, #16
 80021a4:	f7ff fc16 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80021a8:	207a      	movs	r0, #122	; 0x7a
 80021aa:	f7ff fc13 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80021ae:	20cb      	movs	r0, #203	; 0xcb
 80021b0:	f7ff fc00 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80021b4:	2039      	movs	r0, #57	; 0x39
 80021b6:	f7ff fc0d 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	f7ff fc0a 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff fc07 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80021c6:	2034      	movs	r0, #52	; 0x34
 80021c8:	f7ff fc04 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80021cc:	2002      	movs	r0, #2
 80021ce:	f7ff fc01 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80021d2:	20f7      	movs	r0, #247	; 0xf7
 80021d4:	f7ff fbee 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80021d8:	2020      	movs	r0, #32
 80021da:	f7ff fbfb 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80021de:	20ea      	movs	r0, #234	; 0xea
 80021e0:	f7ff fbe8 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fbf5 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fbf2 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80021f0:	20c0      	movs	r0, #192	; 0xc0
 80021f2:	f7ff fbdf 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80021f6:	201b      	movs	r0, #27
 80021f8:	f7ff fbec 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80021fc:	20c1      	movs	r0, #193	; 0xc1
 80021fe:	f7ff fbd9 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fbe6 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002208:	20c5      	movs	r0, #197	; 0xc5
 800220a:	f7ff fbd3 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800220e:	2030      	movs	r0, #48	; 0x30
 8002210:	f7ff fbe0 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002214:	2030      	movs	r0, #48	; 0x30
 8002216:	f7ff fbdd 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800221a:	20c7      	movs	r0, #199	; 0xc7
 800221c:	f7ff fbca 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002220:	20b7      	movs	r0, #183	; 0xb7
 8002222:	f7ff fbd7 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002226:	2036      	movs	r0, #54	; 0x36
 8002228:	f7ff fbc4 	bl	80019b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800222c:	2008      	movs	r0, #8
 800222e:	f7ff fbd1 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002232:	203a      	movs	r0, #58	; 0x3a
 8002234:	f7ff fbbe 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002238:	2055      	movs	r0, #85	; 0x55
 800223a:	f7ff fbcb 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800223e:	20b1      	movs	r0, #177	; 0xb1
 8002240:	f7ff fbb8 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fbc5 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800224a:	201a      	movs	r0, #26
 800224c:	f7ff fbc2 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002250:	20b6      	movs	r0, #182	; 0xb6
 8002252:	f7ff fbaf 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002256:	200a      	movs	r0, #10
 8002258:	f7ff fbbc 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800225c:	20a2      	movs	r0, #162	; 0xa2
 800225e:	f7ff fbb9 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002262:	20f2      	movs	r0, #242	; 0xf2
 8002264:	f7ff fba6 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff fbb3 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800226e:	2026      	movs	r0, #38	; 0x26
 8002270:	f7ff fba0 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff fbad 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800227a:	20e0      	movs	r0, #224	; 0xe0
 800227c:	f7ff fb9a 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002280:	200f      	movs	r0, #15
 8002282:	f7ff fba7 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002286:	202a      	movs	r0, #42	; 0x2a
 8002288:	f7ff fba4 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800228c:	2028      	movs	r0, #40	; 0x28
 800228e:	f7ff fba1 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002292:	2008      	movs	r0, #8
 8002294:	f7ff fb9e 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002298:	200e      	movs	r0, #14
 800229a:	f7ff fb9b 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800229e:	2008      	movs	r0, #8
 80022a0:	f7ff fb98 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80022a4:	2054      	movs	r0, #84	; 0x54
 80022a6:	f7ff fb95 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80022aa:	20a9      	movs	r0, #169	; 0xa9
 80022ac:	f7ff fb92 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80022b0:	2043      	movs	r0, #67	; 0x43
 80022b2:	f7ff fb8f 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80022b6:	200a      	movs	r0, #10
 80022b8:	f7ff fb8c 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80022bc:	200f      	movs	r0, #15
 80022be:	f7ff fb89 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff fb86 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7ff fb83 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fb80 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fb7d 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80022da:	20e1      	movs	r0, #225	; 0xe1
 80022dc:	f7ff fb6a 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7ff fb77 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80022e6:	2015      	movs	r0, #21
 80022e8:	f7ff fb74 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80022ec:	2017      	movs	r0, #23
 80022ee:	f7ff fb71 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80022f2:	2007      	movs	r0, #7
 80022f4:	f7ff fb6e 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80022f8:	2011      	movs	r0, #17
 80022fa:	f7ff fb6b 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80022fe:	2006      	movs	r0, #6
 8002300:	f7ff fb68 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002304:	202b      	movs	r0, #43	; 0x2b
 8002306:	f7ff fb65 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800230a:	2056      	movs	r0, #86	; 0x56
 800230c:	f7ff fb62 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002310:	203c      	movs	r0, #60	; 0x3c
 8002312:	f7ff fb5f 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002316:	2005      	movs	r0, #5
 8002318:	f7ff fb5c 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800231c:	2010      	movs	r0, #16
 800231e:	f7ff fb59 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002322:	200f      	movs	r0, #15
 8002324:	f7ff fb56 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002328:	203f      	movs	r0, #63	; 0x3f
 800232a:	f7ff fb53 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800232e:	203f      	movs	r0, #63	; 0x3f
 8002330:	f7ff fb50 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002334:	200f      	movs	r0, #15
 8002336:	f7ff fb4d 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800233a:	202b      	movs	r0, #43	; 0x2b
 800233c:	f7ff fb3a 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002340:	2000      	movs	r0, #0
 8002342:	f7ff fb47 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff fb44 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff fb41 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002352:	203f      	movs	r0, #63	; 0x3f
 8002354:	f7ff fb3e 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002358:	202a      	movs	r0, #42	; 0x2a
 800235a:	f7ff fb2b 	bl	80019b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fb38 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fb35 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800236a:	2000      	movs	r0, #0
 800236c:	f7ff fb32 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002370:	20ef      	movs	r0, #239	; 0xef
 8002372:	f7ff fb2f 	bl	80019d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002376:	2011      	movs	r0, #17
 8002378:	f7ff fb1c 	bl	80019b4 <LCD_WR_REG>
	HAL_Delay(120);
 800237c:	2078      	movs	r0, #120	; 0x78
 800237e:	f001 fabb 	bl	80038f8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002382:	2029      	movs	r0, #41	; 0x29
 8002384:	f7ff fb16 	bl	80019b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238e:	4804      	ldr	r0, [pc, #16]	; (80023a0 <lcd_init+0x2bc>)
 8002390:	f002 fd98 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020800 	.word	0x40020800
 800239c:	2000037c 	.word	0x2000037c
 80023a0:	40020000 	.word	0x40020000

080023a4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af04      	add	r7, sp, #16
 80023aa:	60ba      	str	r2, [r7, #8]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	81fb      	strh	r3, [r7, #14]
 80023b2:	460b      	mov	r3, r1
 80023b4:	81bb      	strh	r3, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80023c2:	e048      	b.n	8002456 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d145      	bne.n	8002456 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80023ca:	89fa      	ldrh	r2, [r7, #14]
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <lcd_ShowStr+0xc4>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	1acb      	subs	r3, r1, r3
 80023dc:	429a      	cmp	r2, r3
 80023de:	dc3f      	bgt.n	8002460 <lcd_ShowStr+0xbc>
 80023e0:	89ba      	ldrh	r2, [r7, #12]
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <lcd_ShowStr+0xc4>)
 80023e4:	885b      	ldrh	r3, [r3, #2]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80023ec:	1acb      	subs	r3, r1, r3
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dc36      	bgt.n	8002460 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d902      	bls.n	8002400 <lcd_ShowStr+0x5c>
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
 80023fe:	e02a      	b.n	8002456 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d10b      	bne.n	8002420 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002408:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800240c:	b29a      	uxth	r2, r3
 800240e:	89bb      	ldrh	r3, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002414:	8abb      	ldrh	r3, [r7, #20]
 8002416:	81fb      	strh	r3, [r7, #14]
					str++;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	e017      	b.n	8002450 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	88fc      	ldrh	r4, [r7, #6]
 8002426:	89b9      	ldrh	r1, [r7, #12]
 8002428:	89f8      	ldrh	r0, [r7, #14]
 800242a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	4623      	mov	r3, r4
 800243c:	f7ff fc3c 	bl	8001cb8 <lcd_ShowChar>
					x+=sizey/2;
 8002440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	b29a      	uxth	r2, r3
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	4413      	add	r3, r2
 800244e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1b2      	bne.n	80023c4 <lcd_ShowStr+0x20>
 800245e:	e000      	b.n	8002462 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002460:	bf00      	nop
			}
		}
	}
}
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	2000037c 	.word	0x2000037c

0800246c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002470:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <led7_Scan+0x104>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b3d      	ldr	r3, [pc, #244]	; (8002570 <led7_Scan+0x104>)
 800247a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <led7_Scan+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <led7_Scan+0x10c>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21a      	sxth	r2, r3
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <led7_Scan+0x104>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b21b      	sxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	b29a      	uxth	r2, r3
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <led7_Scan+0x104>)
 8002496:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <led7_Scan+0x108>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d847      	bhi.n	8002530 <led7_Scan+0xc4>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <led7_Scan+0x3c>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024d7 	.word	0x080024d7
 80024b0:	080024f5 	.word	0x080024f5
 80024b4:	08002513 	.word	0x08002513
	case 0:
		spi_buffer |= 0x00b0;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <led7_Scan+0x104>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <led7_Scan+0x104>)
 80024c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <led7_Scan+0x104>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <led7_Scan+0x104>)
 80024d2:	801a      	strh	r2, [r3, #0]
		break;
 80024d4:	e02d      	b.n	8002532 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80024d6:	4b26      	ldr	r3, [pc, #152]	; (8002570 <led7_Scan+0x104>)
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b23      	ldr	r3, [pc, #140]	; (8002570 <led7_Scan+0x104>)
 80024e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <led7_Scan+0x104>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	f023 0320 	bic.w	r3, r3, #32
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <led7_Scan+0x104>)
 80024f0:	801a      	strh	r2, [r3, #0]
		break;
 80024f2:	e01e      	b.n	8002532 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <led7_Scan+0x104>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <led7_Scan+0x104>)
 8002500:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <led7_Scan+0x104>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	f023 0310 	bic.w	r3, r3, #16
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <led7_Scan+0x104>)
 800250e:	801a      	strh	r2, [r3, #0]
		break;
 8002510:	e00f      	b.n	8002532 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <led7_Scan+0x104>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <led7_Scan+0x104>)
 800251e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <led7_Scan+0x104>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <led7_Scan+0x104>)
 800252c:	801a      	strh	r2, [r3, #0]
		break;
 800252e:	e000      	b.n	8002532 <led7_Scan+0xc6>
	default:
		break;
 8002530:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <led7_Scan+0x108>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	425a      	negs	r2, r3
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	bf58      	it	pl
 8002544:	4253      	negpl	r3, r2
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <led7_Scan+0x108>)
 8002548:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	480b      	ldr	r0, [pc, #44]	; (800257c <led7_Scan+0x110>)
 8002550:	f002 fcb8 	bl	8004ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002554:	2301      	movs	r3, #1
 8002556:	2202      	movs	r2, #2
 8002558:	4905      	ldr	r1, [pc, #20]	; (8002570 <led7_Scan+0x104>)
 800255a:	4809      	ldr	r0, [pc, #36]	; (8002580 <led7_Scan+0x114>)
 800255c:	f004 f9ad 	bl	80068ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002560:	2201      	movs	r2, #1
 8002562:	2140      	movs	r1, #64	; 0x40
 8002564:	4805      	ldr	r0, [pc, #20]	; (800257c <led7_Scan+0x110>)
 8002566:	f002 fcad 	bl	8004ec4 <HAL_GPIO_WritePin>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000004 	.word	0x20000004
 8002574:	20000384 	.word	0x20000384
 8002578:	20000000 	.word	0x20000000
 800257c:	40021800 	.word	0x40021800
 8002580:	200003e4 	.word	0x200003e4
 8002584:	00000000 	.word	0x00000000

08002588 <ex61>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t counter61 = 0;
char buffer61[20];
void ex61(){
 8002588:	b580      	push	{r7, lr}
 800258a:	ed2d 8b02 	vpush	{d8}
 800258e:	b084      	sub	sp, #16
 8002590:	af04      	add	r7, sp, #16
	counter61 = (counter61 + 1) % 20;
 8002592:	4ba7      	ldr	r3, [pc, #668]	; (8002830 <ex61+0x2a8>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	4ba6      	ldr	r3, [pc, #664]	; (8002834 <ex61+0x2ac>)
 800259a:	fb83 1302 	smull	r1, r3, r3, r2
 800259e:	10d9      	asrs	r1, r3, #3
 80025a0:	17d3      	asrs	r3, r2, #31
 80025a2:	1ac9      	subs	r1, r1, r3
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	1ad1      	subs	r1, r2, r3
 80025ae:	b2ca      	uxtb	r2, r1
 80025b0:	4b9f      	ldr	r3, [pc, #636]	; (8002830 <ex61+0x2a8>)
 80025b2:	701a      	strb	r2, [r3, #0]
	if (counter61 == 0) {
 80025b4:	4b9e      	ldr	r3, [pc, #632]	; (8002830 <ex61+0x2a8>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 80e7 	bne.w	800278c <ex61+0x204>
		sensor_Read();
 80025be:	f000 fba9 	bl	8002d14 <sensor_Read>
		lcd_ShowStr(10, 20, "Power: ", RED, BLACK, 16, 0);
 80025c2:	2300      	movs	r3, #0
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	2310      	movs	r3, #16
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2300      	movs	r3, #0
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d2:	4a99      	ldr	r2, [pc, #612]	; (8002838 <ex61+0x2b0>)
 80025d4:	2114      	movs	r1, #20
 80025d6:	200a      	movs	r0, #10
 80025d8:	f7ff fee4 	bl	80023a4 <lcd_ShowStr>
		lcd_ShowFloatNum(150, 20, sensor_GetVoltage() * sensor_GetCurrent() * 0.001, 4, RED, BLACK, 16);
 80025dc:	f000 fbc0 	bl	8002d60 <sensor_GetVoltage>
 80025e0:	eeb0 8a40 	vmov.f32	s16, s0
 80025e4:	f000 fbf8 	bl	8002dd8 <sensor_GetCurrent>
 80025e8:	eef0 7a40 	vmov.f32	s15, s0
 80025ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80025f0:	ee17 0a90 	vmov	r0, s15
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_f2d>
 80025f8:	a38b      	add	r3, pc, #556	; (adr r3, 8002828 <ex61+0x2a0>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd fffb 	bl	80005f8 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe faed 	bl	8000be8 <__aeabi_d2f>
 800260e:	4601      	mov	r1, r0
 8002610:	2310      	movs	r3, #16
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2300      	movs	r3, #0
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800261c:	2204      	movs	r2, #4
 800261e:	ee00 1a10 	vmov	s0, r1
 8002622:	2114      	movs	r1, #20
 8002624:	2096      	movs	r0, #150	; 0x96
 8002626:	f7ff fcb1 	bl	8001f8c <lcd_ShowFloatNum>
		uart_Rs232SendString((uint8_t*)"\nPower: ");
 800262a:	4884      	ldr	r0, [pc, #528]	; (800283c <ex61+0x2b4>)
 800262c:	f000 ff82 	bl	8003534 <uart_Rs232SendString>
		sprintf(buffer61, "%.2f", sensor_GetVoltage() * sensor_GetCurrent() * 0.001);
 8002630:	f000 fb96 	bl	8002d60 <sensor_GetVoltage>
 8002634:	eeb0 8a40 	vmov.f32	s16, s0
 8002638:	f000 fbce 	bl	8002dd8 <sensor_GetCurrent>
 800263c:	eef0 7a40 	vmov.f32	s15, s0
 8002640:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002644:	ee17 0a90 	vmov	r0, s15
 8002648:	f7fd ff7e 	bl	8000548 <__aeabi_f2d>
 800264c:	a376      	add	r3, pc, #472	; (adr r3, 8002828 <ex61+0x2a0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd ffd1 	bl	80005f8 <__aeabi_dmul>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4979      	ldr	r1, [pc, #484]	; (8002840 <ex61+0x2b8>)
 800265c:	4879      	ldr	r0, [pc, #484]	; (8002844 <ex61+0x2bc>)
 800265e:	f007 ff47 	bl	800a4f0 <siprintf>
		uart_Rs232SendString((uint8_t*)buffer61);
 8002662:	4878      	ldr	r0, [pc, #480]	; (8002844 <ex61+0x2bc>)
 8002664:	f000 ff66 	bl	8003534 <uart_Rs232SendString>

		lcd_ShowStr(10, 40, "Light: ", RED, BLACK, 16, 0);
 8002668:	2300      	movs	r3, #0
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2310      	movs	r3, #16
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002678:	4a73      	ldr	r2, [pc, #460]	; (8002848 <ex61+0x2c0>)
 800267a:	2128      	movs	r1, #40	; 0x28
 800267c:	200a      	movs	r0, #10
 800267e:	f7ff fe91 	bl	80023a4 <lcd_ShowStr>
		lcd_ShowIntNum(150, 40, sensor_GetLight(), 4, RED, BLACK, 16);
 8002682:	f000 fb55 	bl	8002d30 <sensor_GetLight>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	2310      	movs	r3, #16
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2300      	movs	r3, #0
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2304      	movs	r3, #4
 800269a:	2128      	movs	r1, #40	; 0x28
 800269c:	2096      	movs	r0, #150	; 0x96
 800269e:	f7ff fbf7 	bl	8001e90 <lcd_ShowIntNum>
		uart_Rs232SendString((uint8_t*)"\nLight: ");
 80026a2:	486a      	ldr	r0, [pc, #424]	; (800284c <ex61+0x2c4>)
 80026a4:	f000 ff46 	bl	8003534 <uart_Rs232SendString>
		uart_Rs232SendNum(sensor_GetLight());
 80026a8:	f000 fb42 	bl	8002d30 <sensor_GetLight>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 ff5a 	bl	8003568 <uart_Rs232SendNum>

		lcd_ShowStr(10, 60, "Temperature: ", RED, BLACK, 16, 0);
 80026b4:	2300      	movs	r3, #0
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	2310      	movs	r3, #16
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026c4:	4a62      	ldr	r2, [pc, #392]	; (8002850 <ex61+0x2c8>)
 80026c6:	213c      	movs	r1, #60	; 0x3c
 80026c8:	200a      	movs	r0, #10
 80026ca:	f7ff fe6b 	bl	80023a4 <lcd_ShowStr>
		lcd_ShowFloatNum(150, 60, sensor_GetTemperature(), 4, RED, BLACK, 16);
 80026ce:	f000 fbdf 	bl	8002e90 <sensor_GetTemperature>
 80026d2:	eef0 7a40 	vmov.f32	s15, s0
 80026d6:	2310      	movs	r3, #16
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026e2:	2204      	movs	r2, #4
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	213c      	movs	r1, #60	; 0x3c
 80026ea:	2096      	movs	r0, #150	; 0x96
 80026ec:	f7ff fc4e 	bl	8001f8c <lcd_ShowFloatNum>
		uart_Rs232SendString((uint8_t*)"\nTemperature: ");
 80026f0:	4858      	ldr	r0, [pc, #352]	; (8002854 <ex61+0x2cc>)
 80026f2:	f000 ff1f 	bl	8003534 <uart_Rs232SendString>
		sprintf(buffer61, "%.2f", sensor_GetTemperature());
 80026f6:	f000 fbcb 	bl	8002e90 <sensor_GetTemperature>
 80026fa:	ee10 3a10 	vmov	r3, s0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <ex61+0x2b8>)
 800270a:	484e      	ldr	r0, [pc, #312]	; (8002844 <ex61+0x2bc>)
 800270c:	f007 fef0 	bl	800a4f0 <siprintf>
		uart_Rs232SendString((uint8_t*)buffer61);
 8002710:	484c      	ldr	r0, [pc, #304]	; (8002844 <ex61+0x2bc>)
 8002712:	f000 ff0f 	bl	8003534 <uart_Rs232SendString>

		lcd_ShowStr(10, 80, "Potentiometer: ", RED, BLACK, 16, 0);
 8002716:	2300      	movs	r3, #0
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2310      	movs	r3, #16
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2300      	movs	r3, #0
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002726:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <ex61+0x2d0>)
 8002728:	2150      	movs	r1, #80	; 0x50
 800272a:	200a      	movs	r0, #10
 800272c:	f7ff fe3a 	bl	80023a4 <lcd_ShowStr>
		lcd_ShowIntNum(150, 80, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 8002730:	f000 fb0a 	bl	8002d48 <sensor_GetPotentiometer>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	2310      	movs	r3, #16
 800273a:	9302      	str	r3, [sp, #8]
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2304      	movs	r3, #4
 8002748:	2150      	movs	r1, #80	; 0x50
 800274a:	2096      	movs	r0, #150	; 0x96
 800274c:	f7ff fba0 	bl	8001e90 <lcd_ShowIntNum>
		uart_Rs232SendString((uint8_t*)"\nPotentiometer: ");
 8002750:	4842      	ldr	r0, [pc, #264]	; (800285c <ex61+0x2d4>)
 8002752:	f000 feef 	bl	8003534 <uart_Rs232SendString>
		uart_Rs232SendNum(sensor_GetPotentiometer());
 8002756:	f000 faf7 	bl	8002d48 <sensor_GetPotentiometer>
 800275a:	4603      	mov	r3, r0
 800275c:	4618      	mov	r0, r3
 800275e:	f000 ff03 	bl	8003568 <uart_Rs232SendNum>
		uart_Rs232SendString((uint8_t*)"\n");
 8002762:	483f      	ldr	r0, [pc, #252]	; (8002860 <ex61+0x2d8>)
 8002764:	f000 fee6 	bl	8003534 <uart_Rs232SendString>

		if (sensor_GetPotentiometer() > 0.7 * 4095) {
 8002768:	f000 faee 	bl	8002d48 <sensor_GetPotentiometer>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	f640 3332 	movw	r3, #2866	; 0xb32
 8002774:	429a      	cmp	r2, r3
 8002776:	d906      	bls.n	8002786 <ex61+0x1fe>
			buzzer_SetVolume(50);
 8002778:	2032      	movs	r0, #50	; 0x32
 800277a:	f7fe fdd9 	bl	8001330 <buzzer_SetVolume>
			uart_Rs232SendString((uint8_t*)"\nWARNING\n");
 800277e:	4839      	ldr	r0, [pc, #228]	; (8002864 <ex61+0x2dc>)
 8002780:	f000 fed8 	bl	8003534 <uart_Rs232SendString>
 8002784:	e002      	b.n	800278c <ex61+0x204>
		} else {
			buzzer_SetVolume(0);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fdd2 	bl	8001330 <buzzer_SetVolume>
		}
	}
	ds3231_ReadTime();
 800278c:	f7fe fe62 	bl	8001454 <ds3231_ReadTime>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 16);
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <ex61+0x2e0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	2310      	movs	r3, #16
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	2300      	movs	r3, #0
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2302      	movs	r3, #2
 80027a6:	2164      	movs	r1, #100	; 0x64
 80027a8:	2046      	movs	r0, #70	; 0x46
 80027aa:	f7ff fb71 	bl	8001e90 <lcd_ShowIntNum>
	lcd_ShowStr(95, 100, ":", GREEN, BLACK, 16, 0);
 80027ae:	2300      	movs	r3, #0
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	2310      	movs	r3, #16
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027be:	4a2b      	ldr	r2, [pc, #172]	; (800286c <ex61+0x2e4>)
 80027c0:	2164      	movs	r1, #100	; 0x64
 80027c2:	205f      	movs	r0, #95	; 0x5f
 80027c4:	f7ff fdee 	bl	80023a4 <lcd_ShowStr>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 16);
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <ex61+0x2e8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	2300      	movs	r3, #0
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2302      	movs	r3, #2
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	206e      	movs	r0, #110	; 0x6e
 80027e2:	f7ff fb55 	bl	8001e90 <lcd_ShowIntNum>
	lcd_ShowStr(135, 100, ":", GREEN, BLACK, 16, 0);
 80027e6:	2300      	movs	r3, #0
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2310      	movs	r3, #16
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027f6:	4a1d      	ldr	r2, [pc, #116]	; (800286c <ex61+0x2e4>)
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	2087      	movs	r0, #135	; 0x87
 80027fc:	f7ff fdd2 	bl	80023a4 <lcd_ShowStr>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 16);
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <ex61+0x2ec>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b29a      	uxth	r2, r3
 8002806:	2310      	movs	r3, #16
 8002808:	9302      	str	r3, [sp, #8]
 800280a:	2300      	movs	r3, #0
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2302      	movs	r3, #2
 8002816:	2164      	movs	r1, #100	; 0x64
 8002818:	2096      	movs	r0, #150	; 0x96
 800281a:	f7ff fb39 	bl	8001e90 <lcd_ShowIntNum>
}
 800281e:	bf00      	nop
 8002820:	46bd      	mov	sp, r7
 8002822:	ecbd 8b02 	vpop	{d8}
 8002826:	bd80      	pop	{r7, pc}
 8002828:	d2f1a9fc 	.word	0xd2f1a9fc
 800282c:	3f50624d 	.word	0x3f50624d
 8002830:	20000388 	.word	0x20000388
 8002834:	66666667 	.word	0x66666667
 8002838:	0800de48 	.word	0x0800de48
 800283c:	0800de50 	.word	0x0800de50
 8002840:	0800de5c 	.word	0x0800de5c
 8002844:	2000038c 	.word	0x2000038c
 8002848:	0800de64 	.word	0x0800de64
 800284c:	0800de6c 	.word	0x0800de6c
 8002850:	0800de78 	.word	0x0800de78
 8002854:	0800de88 	.word	0x0800de88
 8002858:	0800de98 	.word	0x0800de98
 800285c:	0800dea8 	.word	0x0800dea8
 8002860:	0800debc 	.word	0x0800debc
 8002864:	0800dec0 	.word	0x0800dec0
 8002868:	200002cb 	.word	0x200002cb
 800286c:	0800decc 	.word	0x0800decc
 8002870:	200002cc 	.word	0x200002cc
 8002874:	200002cd 	.word	0x200002cd

08002878 <ex61_rt>:
void ex61_rt(){
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	ds3231_init();
 800287c:	f7fe fd90 	bl	80013a0 <ds3231_init>
	ds3231_Write(ADRESS_YEAR, 23);
 8002880:	2117      	movs	r1, #23
 8002882:	2006      	movs	r0, #6
 8002884:	f7fe fdc4 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_MONTH, 10);
 8002888:	210a      	movs	r1, #10
 800288a:	2005      	movs	r0, #5
 800288c:	f7fe fdc0 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_DATE, 20);
 8002890:	2114      	movs	r1, #20
 8002892:	2004      	movs	r0, #4
 8002894:	f7fe fdbc 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_DAY, 6);
 8002898:	2106      	movs	r1, #6
 800289a:	2003      	movs	r0, #3
 800289c:	f7fe fdb8 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_HOUR, 20);
 80028a0:	2114      	movs	r1, #20
 80028a2:	2002      	movs	r0, #2
 80028a4:	f7fe fdb4 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_MIN, 11);
 80028a8:	210b      	movs	r1, #11
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7fe fdb0 	bl	8001410 <ds3231_Write>
	ds3231_Write(ADRESS_SEC, 23);
 80028b0:	2117      	movs	r1, #23
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fdac 	bl	8001410 <ds3231_Write>
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <ex61_uart>:
void ex61_uart(){
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	uart_init_rs232();
 80028c0:	f000 fe2a 	bl	8003518 <uart_init_rs232>
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <queue62_init>:
typedef struct {
	float arr[SIZE62];
    int front;
    int rear;
} queue62;
void queue62_init(queue62 *q) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    q->front = -1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f04f 32ff 	mov.w	r2, #4294967295
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
    q->rear = -1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <queue62_insert>:
void queue62_insert(queue62 *q, float value) {
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	ed87 0a00 	vstr	s0, [r7]
    if ((q->rear + 1) % SIZE62 == q->front) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	1c59      	adds	r1, r3, #1
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <queue62_insert+0x9c>)
 8002900:	fb83 2301 	smull	r2, r3, r3, r1
 8002904:	109a      	asrs	r2, r3, #2
 8002906:	17cb      	asrs	r3, r1, #31
 8002908:	1ad2      	subs	r2, r2, r3
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	1aca      	subs	r2, r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	429a      	cmp	r2, r3
 800291a:	d10f      	bne.n	800293c <queue62_insert+0x50>
        q->front = (q->front + 1) % SIZE62;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	1c59      	adds	r1, r3, #1
 8002922:	4b19      	ldr	r3, [pc, #100]	; (8002988 <queue62_insert+0x9c>)
 8002924:	fb83 2301 	smull	r2, r3, r3, r1
 8002928:	109a      	asrs	r2, r3, #2
 800292a:	17cb      	asrs	r3, r1, #31
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	1aca      	subs	r2, r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
    }
    if (q->front == -1) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d102      	bne.n	800294c <queue62_insert+0x60>
        q->front = 0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
    }
    q->rear = (q->rear + 1) % SIZE62;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	1c59      	adds	r1, r3, #1
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <queue62_insert+0x9c>)
 8002954:	fb83 2301 	smull	r2, r3, r3, r1
 8002958:	109a      	asrs	r2, r3, #2
 800295a:	17cb      	asrs	r3, r1, #31
 800295c:	1ad2      	subs	r2, r2, r3
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	1aca      	subs	r2, r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
    q->arr[q->rear] = value;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	601a      	str	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	66666667 	.word	0x66666667
 800298c:	00000000 	.word	0x00000000

08002990 <ex62>:
queue62 q62;
uint8_t counter62 = 0;
uint8_t x62 = 0;
uint8_t y62 = 0;
uint8_t oldy62 = 0;
void ex62(queue62 *q) {
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	ed2d 8b02 	vpush	{d8}
 8002996:	b089      	sub	sp, #36	; 0x24
 8002998:	af04      	add	r7, sp, #16
 800299a:	6078      	str	r0, [r7, #4]
	counter62 = (counter62 + 1) % (20 * 5);
 800299c:	4b72      	ldr	r3, [pc, #456]	; (8002b68 <ex62+0x1d8>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a72      	ldr	r2, [pc, #456]	; (8002b6c <ex62+0x1dc>)
 80029a4:	fb82 1203 	smull	r1, r2, r2, r3
 80029a8:	1151      	asrs	r1, r2, #5
 80029aa:	17da      	asrs	r2, r3, #31
 80029ac:	1a8a      	subs	r2, r1, r2
 80029ae:	2164      	movs	r1, #100	; 0x64
 80029b0:	fb01 f202 	mul.w	r2, r1, r2
 80029b4:	1a9a      	subs	r2, r3, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <ex62+0x1d8>)
 80029ba:	701a      	strb	r2, [r3, #0]
	lcd_DrawLine(40, 300, 40, 300 - HEIGHT62, WHITE);
 80029bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2396      	movs	r3, #150	; 0x96
 80029c4:	2228      	movs	r2, #40	; 0x28
 80029c6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029ca:	2028      	movs	r0, #40	; 0x28
 80029cc:	f7ff f8ef 	bl	8001bae <lcd_DrawLine>
	lcd_DrawLine(40, 300, 220, 300, WHITE);
 80029d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80029da:	22dc      	movs	r2, #220	; 0xdc
 80029dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80029e0:	2028      	movs	r0, #40	; 0x28
 80029e2:	f7ff f8e4 	bl	8001bae <lcd_DrawLine>
	lcd_ShowIntNum(10, 300 - 10, MIN62, 2, WHITE, BLACK, 16);
 80029e6:	2310      	movs	r3, #16
 80029e8:	9302      	str	r3, [sp, #8]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2302      	movs	r3, #2
 80029f6:	222d      	movs	r2, #45	; 0x2d
 80029f8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80029fc:	200a      	movs	r0, #10
 80029fe:	f7ff fa47 	bl	8001e90 <lcd_ShowIntNum>
	lcd_ShowIntNum(10, 300 - HEIGHT62 - 10, MAX62, 2, WHITE, BLACK, 16);
 8002a02:	2310      	movs	r3, #16
 8002a04:	9302      	str	r3, [sp, #8]
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2302      	movs	r3, #2
 8002a12:	2232      	movs	r2, #50	; 0x32
 8002a14:	218c      	movs	r1, #140	; 0x8c
 8002a16:	200a      	movs	r0, #10
 8002a18:	f7ff fa3a 	bl	8001e90 <lcd_ShowIntNum>
	if (counter62 == 0) {
 8002a1c:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <ex62+0x1d8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f040 8095 	bne.w	8002b50 <ex62+0x1c0>
		sensor_Read();
 8002a26:	f000 f975 	bl	8002d14 <sensor_Read>
		queue62_insert(q, sensor_GetVoltage() * sensor_GetCurrent() * 0.001);
 8002a2a:	f000 f999 	bl	8002d60 <sensor_GetVoltage>
 8002a2e:	eeb0 8a40 	vmov.f32	s16, s0
 8002a32:	f000 f9d1 	bl	8002dd8 <sensor_GetCurrent>
 8002a36:	eef0 7a40 	vmov.f32	s15, s0
 8002a3a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002a3e:	ee17 0a90 	vmov	r0, s15
 8002a42:	f7fd fd81 	bl	8000548 <__aeabi_f2d>
 8002a46:	a346      	add	r3, pc, #280	; (adr r3, 8002b60 <ex62+0x1d0>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fdd4 	bl	80005f8 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8c6 	bl	8000be8 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	ee00 3a10 	vmov	s0, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff42 	bl	80028ec <queue62_insert>
		lcd_Fill(40 + OFFSET62, 300 - HEIGHT62 + OFFSET62, 220 - OFFSET62, 300 - OFFSET62, BLACK);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f240 1327 	movw	r3, #295	; 0x127
 8002a70:	22d7      	movs	r2, #215	; 0xd7
 8002a72:	219b      	movs	r1, #155	; 0x9b
 8002a74:	202d      	movs	r0, #45	; 0x2d
 8002a76:	f7ff f84d 	bl	8001b14 <lcd_Fill>

		if (q->front != -1) {
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a82:	d065      	beq.n	8002b50 <ex62+0x1c0>
			x62 = 50;
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <ex62+0x1e0>)
 8002a86:	2232      	movs	r2, #50	; 0x32
 8002a88:	701a      	strb	r2, [r3, #0]
			for (int i = q->front; i != q->rear; i = (i + 1) % SIZE62) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e059      	b.n	8002b46 <ex62+0x1b6>
				y62 = (q->arr[i] - MIN62) * (HEIGHT62 / (MAX62 - MIN62));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002b74 <ex62+0x1e4>
 8002aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002aa6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab2:	edc7 7a00 	vstr	s15, [r7]
 8002ab6:	783b      	ldrb	r3, [r7, #0]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <ex62+0x1e8>)
 8002abc:	701a      	strb	r2, [r3, #0]
				lcd_DrawPoint(x62, 300 - y62, RED);
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <ex62+0x1e0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b298      	uxth	r0, r3
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <ex62+0x1e8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f7ff f853 	bl	8001b80 <lcd_DrawPoint>
				if (i != q->front) {
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d018      	beq.n	8002b16 <ex62+0x186>
					lcd_DrawLine(x62 - 20, 300 - oldy62, x62, 300 - y62, YELLOW);
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <ex62+0x1e0>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b14      	subs	r3, #20
 8002aec:	b298      	uxth	r0, r3
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <ex62+0x1ec>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002af8:	b299      	uxth	r1, r3
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <ex62+0x1e0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <ex62+0x1e8>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f64f 74e0 	movw	r4, #65504	; 0xffe0
 8002b10:	9400      	str	r4, [sp, #0]
 8002b12:	f7ff f84c 	bl	8001bae <lcd_DrawLine>
				}
				oldy62 = y62;
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <ex62+0x1e8>)
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <ex62+0x1ec>)
 8002b1c:	701a      	strb	r2, [r3, #0]
				x62 += 20;
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <ex62+0x1e0>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <ex62+0x1e0>)
 8002b28:	701a      	strb	r2, [r3, #0]
			for (int i = q->front; i != q->rear; i = (i + 1) % SIZE62) {
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <ex62+0x1f0>)
 8002b30:	fb83 1302 	smull	r1, r3, r3, r2
 8002b34:	1099      	asrs	r1, r3, #2
 8002b36:	17d3      	asrs	r3, r2, #31
 8002b38:	1ac9      	subs	r1, r1, r3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1a0      	bne.n	8002a92 <ex62+0x102>
			}
		}
	}
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	ecbd 8b02 	vpop	{d8}
 8002b5a:	bd90      	pop	{r4, r7, pc}
 8002b5c:	f3af 8000 	nop.w
 8002b60:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b64:	3f50624d 	.word	0x3f50624d
 8002b68:	200003d0 	.word	0x200003d0
 8002b6c:	51eb851f 	.word	0x51eb851f
 8002b70:	200003d1 	.word	0x200003d1
 8002b74:	42340000 	.word	0x42340000
 8002b78:	200003d2 	.word	0x200003d2
 8002b7c:	200003d3 	.word	0x200003d3
 8002b80:	66666667 	.word	0x66666667

08002b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b88:	f000 fe44 	bl	8003814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b8c:	f000 f832 	bl	8002bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b90:	f7fe fd94 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b94:	f7fe fbe4 	bl	8001360 <MX_DMA_Init>
  MX_SPI1_Init();
 8002b98:	f000 f9e8 	bl	8002f6c <MX_SPI1_Init>
  MX_FSMC_Init();
 8002b9c:	f7fe fcbe 	bl	800151c <MX_FSMC_Init>
  MX_I2C1_Init();
 8002ba0:	f7fe fe92 	bl	80018c8 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002ba4:	f000 fbf4 	bl	8003390 <MX_TIM13_Init>
  MX_TIM2_Init();
 8002ba8:	f000 fba6 	bl	80032f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002bac:	f7fe fa20 	bl	8000ff0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002bb0:	f000 fd4e 	bl	8003650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002bb4:	f000 f888 	bl	8002cc8 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe ff79 	bl	8001ab0 <lcd_Clear>
 ex61_rt();
 8002bbe:	f7ff fe5b 	bl	8002878 <ex61_rt>
 ex61_uart();
 8002bc2:	f7ff fe7b 	bl	80028bc <ex61_uart>
 queue62_init(&q62);
 8002bc6:	4809      	ldr	r0, [pc, #36]	; (8002bec <main+0x68>)
 8002bc8:	f7ff fe7e 	bl	80028c8 <queue62_init>
  while (1)
  {
	  while(!flag_timer2);
 8002bcc:	bf00      	nop
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <main+0x6c>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0fb      	beq.n	8002bce <main+0x4a>
	  flag_timer2 = 0;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <main+0x6c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002bdc:	f7fe fb32 	bl	8001244 <button_Scan>
//	  test_LedDebug();
//	  test_Adc();
//	  test_Buzzer();
	  ex61();
 8002be0:	f7ff fcd2 	bl	8002588 <ex61>
	  ex62(&q62);
 8002be4:	4801      	ldr	r0, [pc, #4]	; (8002bec <main+0x68>)
 8002be6:	f7ff fed3 	bl	8002990 <ex62>
	  while(!flag_timer2);
 8002bea:	e7ef      	b.n	8002bcc <main+0x48>
 8002bec:	200003a0 	.word	0x200003a0
 8002bf0:	200003de 	.word	0x200003de

08002bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bfa:	f107 0320 	add.w	r3, r7, #32
 8002bfe:	2230      	movs	r2, #48	; 0x30
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f007 fcd7 	bl	800a5b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	4b28      	ldr	r3, [pc, #160]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a27      	ldr	r2, [pc, #156]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <SystemClock_Config+0xcc>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <SystemClock_Config+0xd0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c50:	2302      	movs	r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c54:	2301      	movs	r3, #1
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c58:	2310      	movs	r3, #16
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c60:	2300      	movs	r3, #0
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c64:	2308      	movs	r3, #8
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c68:	23a8      	movs	r3, #168	; 0xa8
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c70:	2304      	movs	r3, #4
 8002c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c74:	f107 0320 	add.w	r3, r7, #32
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 f8fd 	bl	8005e78 <HAL_RCC_OscConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c84:	f000 f833 	bl	8002cee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c88:	230f      	movs	r3, #15
 8002c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002c9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2105      	movs	r1, #5
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fb5e 	bl	8006368 <HAL_RCC_ClockConfig>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cb2:	f000 f81c 	bl	8002cee <Error_Handler>
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3750      	adds	r7, #80	; 0x50
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <system_init>:

/* USER CODE BEGIN 4 */

void system_init(){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
	ds3231_init();
 8002ccc:	f7fe fb68 	bl	80013a0 <ds3231_init>
	timer_init();
 8002cd0:	f000 f8fc 	bl	8002ecc <timer_init>
	button_init();
 8002cd4:	f7fe faaa 	bl	800122c <button_init>
	lcd_init();
 8002cd8:	f7ff fa04 	bl	80020e4 <lcd_init>
	sensor_init();
 8002cdc:	f000 f80c 	bl	8002cf8 <sensor_init>
	buzzer_init();
 8002ce0:	f7fe fb1c 	bl	800131c <buzzer_init>
	setTimer2(50);
 8002ce4:	2032      	movs	r0, #50	; 0x32
 8002ce6:	f000 f8fb 	bl	8002ee0 <setTimer2>
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}

08002cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf2:	b672      	cpsid	i
}
 8002cf4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf6:	e7fe      	b.n	8002cf6 <Error_Handler+0x8>

08002cf8 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	4903      	ldr	r1, [pc, #12]	; (8002d0c <sensor_init+0x14>)
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <sensor_init+0x18>)
 8002d02:	f000 fe61 	bl	80039c8 <HAL_ADC_Start_DMA>
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003d4 	.word	0x200003d4
 8002d10:	200001f8 	.word	0x200001f8

08002d14 <sensor_Read>:

void sensor_Read(){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002d18:	2205      	movs	r2, #5
 8002d1a:	4903      	ldr	r1, [pc, #12]	; (8002d28 <sensor_Read+0x14>)
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <sensor_Read+0x18>)
 8002d1e:	f000 fe53 	bl	80039c8 <HAL_ADC_Start_DMA>
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200003d4 	.word	0x200003d4
 8002d2c:	200001f8 	.word	0x200001f8

08002d30 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <sensor_GetLight+0x14>)
 8002d36:	889b      	ldrh	r3, [r3, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	200003d4 	.word	0x200003d4

08002d48 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <sensor_GetPotentiometer+0x14>)
 8002d4e:	88db      	ldrh	r3, [r3, #6]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200003d4 	.word	0x200003d4

08002d60 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <sensor_GetVoltage+0x70>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d70:	ee17 0a90 	vmov	r0, s15
 8002d74:	f7fd fbe8 	bl	8000548 <__aeabi_f2d>
 8002d78:	a311      	add	r3, pc, #68	; (adr r3, 8002dc0 <sensor_GetVoltage+0x60>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fc3b 	bl	80005f8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <sensor_GetVoltage+0x74>)
 8002d90:	f7fd fc32 	bl	80005f8 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	a30a      	add	r3, pc, #40	; (adr r3, 8002dc8 <sensor_GetVoltage+0x68>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fd53 	bl	800084c <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7fd ff1b 	bl	8000be8 <__aeabi_d2f>
 8002db2:	4603      	mov	r3, r0
 8002db4:	ee07 3a90 	vmov	s15, r3
}
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	66666666 	.word	0x66666666
 8002dc4:	400a6666 	.word	0x400a6666
 8002dc8:	cccccccd 	.word	0xcccccccd
 8002dcc:	40b908ac 	.word	0x40b908ac
 8002dd0:	200003d4 	.word	0x200003d4
 8002dd4:	40280000 	.word	0x40280000

08002dd8 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <sensor_GetCurrent+0xa8>)
 8002dde:	885b      	ldrh	r3, [r3, #2]
 8002de0:	ee07 3a90 	vmov	s15, r3
 8002de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de8:	ee17 0a90 	vmov	r0, s15
 8002dec:	f7fd fbac 	bl	8000548 <__aeabi_f2d>
 8002df0:	a31f      	add	r3, pc, #124	; (adr r3, 8002e70 <sensor_GetCurrent+0x98>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fbff 	bl	80005f8 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	4b1f      	ldr	r3, [pc, #124]	; (8002e84 <sensor_GetCurrent+0xac>)
 8002e08:	f7fd fbf6 	bl	80005f8 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	a318      	add	r3, pc, #96	; (adr r3, 8002e78 <sensor_GetCurrent+0xa0>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fd17 	bl	800084c <__aeabi_ddiv>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <sensor_GetCurrent+0xb0>)
 8002e2c:	f7fd fa2c 	bl	8000288 <__aeabi_dsub>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4610      	mov	r0, r2
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <sensor_GetCurrent+0xb4>)
 8002e3e:	f7fd fbdb 	bl	80005f8 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <sensor_GetCurrent+0xb0>)
 8002e50:	f7fd fcfc 	bl	800084c <__aeabi_ddiv>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fec4 	bl	8000be8 <__aeabi_d2f>
 8002e60:	4603      	mov	r3, r0
 8002e62:	ee07 3a90 	vmov	s15, r3
}
 8002e66:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	f3af 8000 	nop.w
 8002e70:	66666666 	.word	0x66666666
 8002e74:	400a6666 	.word	0x400a6666
 8002e78:	147ae148 	.word	0x147ae148
 8002e7c:	40a4b2ee 	.word	0x40a4b2ee
 8002e80:	200003d4 	.word	0x200003d4
 8002e84:	408f4000 	.word	0x408f4000
 8002e88:	40040000 	.word	0x40040000
 8002e8c:	40140000 	.word	0x40140000

08002e90 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <sensor_GetTemperature+0x30>)
 8002e96:	891b      	ldrh	r3, [r3, #8]
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002ec4 <sensor_GetTemperature+0x34>
 8002ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002ec8 <sensor_GetTemperature+0x38>
 8002eac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002eb0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	200003d4 	.word	0x200003d4
 8002ec4:	43a50000 	.word	0x43a50000
 8002ec8:	457ff000 	.word	0x457ff000

08002ecc <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <timer_init+0x10>)
 8002ed2:	f004 faa5 	bl	8007420 <HAL_TIM_Base_Start_IT>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000440 	.word	0x20000440

08002ee0 <setTimer2>:

void setTimer2(uint16_t duration){
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <setTimer2+0x2c>)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <setTimer2+0x2c>)
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <setTimer2+0x30>)
 8002ef6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <setTimer2+0x34>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	801a      	strh	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200003e2 	.word	0x200003e2
 8002f10:	200003e0 	.word	0x200003e0
 8002f14:	200003de 	.word	0x200003de

08002f18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d116      	bne.n	8002f58 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f3c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002f4e:	881a      	ldrh	r2, [r3, #0]
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002f52:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002f54:	f7ff fa8a 	bl	800246c <led7_Scan>
	}
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	200003e0 	.word	0x200003e0
 8002f64:	200003de 	.word	0x200003de
 8002f68:	200003e2 	.word	0x200003e2

08002f6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <MX_SPI1_Init+0x68>)
 8002f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f76:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fb8:	220a      	movs	r2, #10
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fbc:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <MX_SPI1_Init+0x64>)
 8002fbe:	f003 fbf3 	bl	80067a8 <HAL_SPI_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fc8:	f7ff fe91 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	200003e4 	.word	0x200003e4
 8002fd4:	40013000 	.word	0x40013000

08002fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_SPI_MspInit+0x84>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12b      	bne.n	8003052 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_SPI_MspInit+0x88>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_SPI_MspInit+0x88>)
 8003004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_SPI_MspInit+0x88>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_SPI_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_SPI_MspInit+0x88>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_SPI_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003032:	2338      	movs	r3, #56	; 0x38
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003042:	2305      	movs	r3, #5
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_SPI_MspInit+0x8c>)
 800304e:	f001 fd9d 	bl	8004b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40013000 	.word	0x40013000
 8003060:	40023800 	.word	0x40023800
 8003064:	40020400 	.word	0x40020400

08003068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <HAL_MspInit+0x4c>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a0f      	ldr	r2, [pc, #60]	; (80030b4 <HAL_MspInit+0x4c>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_MspInit+0x4c>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_MspInit+0x4c>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_MspInit+0x4c>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_MspInit+0x4c>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003104:	f000 fbd8 	bl	80038b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}

0800310c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <TIM2_IRQHandler+0x10>)
 8003112:	f004 fb17 	bl	8007744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000440 	.word	0x20000440

08003120 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <USART1_IRQHandler+0x10>)
 8003126:	f005 fa77 	bl	8008618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000538 	.word	0x20000538

08003134 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <DMA2_Stream0_IRQHandler+0x10>)
 800313a:	f001 fabd 	bl	80046b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000240 	.word	0x20000240

08003148 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
	return 1;
 800314c:	2301      	movs	r3, #1
}
 800314e:	4618      	mov	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <_kill>:

int _kill(int pid, int sig)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003162:	f007 fa7b 	bl	800a65c <__errno>
 8003166:	4603      	mov	r3, r0
 8003168:	2216      	movs	r2, #22
 800316a:	601a      	str	r2, [r3, #0]
	return -1;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_exit>:

void _exit (int status)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003180:	f04f 31ff 	mov.w	r1, #4294967295
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ffe7 	bl	8003158 <_kill>
	while (1) {}		/* Make sure we hang here */
 800318a:	e7fe      	b.n	800318a <_exit+0x12>

0800318c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e00a      	b.n	80031b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800319e:	f3af 8000 	nop.w
 80031a2:	4601      	mov	r1, r0
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	60ba      	str	r2, [r7, #8]
 80031aa:	b2ca      	uxtb	r2, r1
 80031ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	dbf0      	blt.n	800319e <_read+0x12>
	}

return len;
 80031bc:	687b      	ldr	r3, [r7, #4]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e009      	b.n	80031ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	60ba      	str	r2, [r7, #8]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	3301      	adds	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbf1      	blt.n	80031d8 <_write+0x12>
	}
	return len;
 80031f4:	687b      	ldr	r3, [r7, #4]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <_close>:

int _close(int file)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	return -1;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003226:	605a      	str	r2, [r3, #4]
	return 0;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <_isatty>:

int _isatty(int file)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
	return 1;
 800323e:	2301      	movs	r3, #1
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
	return 0;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <_sbrk+0x5c>)
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <_sbrk+0x60>)
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <_sbrk+0x64>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <_sbrk+0x64>)
 8003286:	4a12      	ldr	r2, [pc, #72]	; (80032d0 <_sbrk+0x68>)
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	429a      	cmp	r2, r3
 8003296:	d207      	bcs.n	80032a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003298:	f007 f9e0 	bl	800a65c <__errno>
 800329c:	4603      	mov	r3, r0
 800329e:	220c      	movs	r2, #12
 80032a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	e009      	b.n	80032bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a8:	4b08      	ldr	r3, [pc, #32]	; (80032cc <_sbrk+0x64>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <_sbrk+0x64>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	4a05      	ldr	r2, [pc, #20]	; (80032cc <_sbrk+0x64>)
 80032b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20020000 	.word	0x20020000
 80032c8:	00000400 	.word	0x00000400
 80032cc:	2000043c 	.word	0x2000043c
 80032d0:	200006d0 	.word	0x200006d0

080032d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <SystemInit+0x20>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <SystemInit+0x20>)
 80032e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0308 	add.w	r3, r7, #8
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	463b      	mov	r3, r7
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <MX_TIM2_Init+0x94>)
 8003316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800331a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <MX_TIM2_Init+0x94>)
 800331e:	f240 3247 	movw	r2, #839	; 0x347
 8003322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <MX_TIM2_Init+0x94>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <MX_TIM2_Init+0x94>)
 800332c:	2263      	movs	r2, #99	; 0x63
 800332e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <MX_TIM2_Init+0x94>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <MX_TIM2_Init+0x94>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800333c:	4813      	ldr	r0, [pc, #76]	; (800338c <MX_TIM2_Init+0x94>)
 800333e:	f004 f81f 	bl	8007380 <HAL_TIM_Base_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003348:	f7ff fcd1 	bl	8002cee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4619      	mov	r1, r3
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <MX_TIM2_Init+0x94>)
 800335a:	f004 fbbd 	bl	8007ad8 <HAL_TIM_ConfigClockSource>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003364:	f7ff fcc3 	bl	8002cee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003368:	2300      	movs	r3, #0
 800336a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003370:	463b      	mov	r3, r7
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <MX_TIM2_Init+0x94>)
 8003376:	f004 ffaf 	bl	80082d8 <HAL_TIMEx_MasterConfigSynchronization>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003380:	f7ff fcb5 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000440 	.word	0x20000440

08003390 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003396:	1d3b      	adds	r3, r7, #4
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80033a8:	4b1e      	ldr	r3, [pc, #120]	; (8003424 <MX_TIM13_Init+0x94>)
 80033aa:	4a1f      	ldr	r2, [pc, #124]	; (8003428 <MX_TIM13_Init+0x98>)
 80033ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <MX_TIM13_Init+0x94>)
 80033b0:	f240 3247 	movw	r2, #839	; 0x347
 80033b4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b6:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <MX_TIM13_Init+0x94>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <MX_TIM13_Init+0x94>)
 80033be:	2263      	movs	r2, #99	; 0x63
 80033c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <MX_TIM13_Init+0x94>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <MX_TIM13_Init+0x94>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80033ce:	4815      	ldr	r0, [pc, #84]	; (8003424 <MX_TIM13_Init+0x94>)
 80033d0:	f003 ffd6 	bl	8007380 <HAL_TIM_Base_Init>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80033da:	f7ff fc88 	bl	8002cee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80033de:	4811      	ldr	r0, [pc, #68]	; (8003424 <MX_TIM13_Init+0x94>)
 80033e0:	f004 f88e 	bl	8007500 <HAL_TIM_PWM_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80033ea:	f7ff fc80 	bl	8002cee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033ee:	2360      	movs	r3, #96	; 0x60
 80033f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	2200      	movs	r2, #0
 8003402:	4619      	mov	r1, r3
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <MX_TIM13_Init+0x94>)
 8003406:	f004 faa5 	bl	8007954 <HAL_TIM_PWM_ConfigChannel>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003410:	f7ff fc6d 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003414:	4803      	ldr	r0, [pc, #12]	; (8003424 <MX_TIM13_Init+0x94>)
 8003416:	f000 f845 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 800341a:	bf00      	nop
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000488 	.word	0x20000488
 8003428:	40001c00 	.word	0x40001c00

0800342c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d116      	bne.n	800346c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	201c      	movs	r0, #28
 8003460:	f000 ff5b 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003464:	201c      	movs	r0, #28
 8003466:	f000 ff74 	bl	8004352 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800346a:	e012      	b.n	8003492 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_TIM_Base_MspInit+0x74>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10d      	bne.n	8003492 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 8003480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003484:	6413      	str	r3, [r2, #64]	; 0x40
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_TIM_Base_MspInit+0x70>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	40001c00 	.word	0x40001c00

080034a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_TIM_MspPostInit+0x68>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11e      	bne.n	8003504 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_TIM_MspPostInit+0x6c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_TIM_MspPostInit+0x6c>)
 80034d0:	f043 0320 	orr.w	r3, r3, #32
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <HAL_TIM_MspPostInit+0x6c>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80034f4:	2309      	movs	r3, #9
 80034f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	4619      	mov	r1, r3
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <HAL_TIM_MspPostInit+0x70>)
 8003500:	f001 fb44 	bl	8004b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003504:	bf00      	nop
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40001c00 	.word	0x40001c00
 8003510:	40023800 	.word	0x40023800
 8003514:	40021400 	.word	0x40021400

08003518 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800351c:	2201      	movs	r2, #1
 800351e:	4903      	ldr	r1, [pc, #12]	; (800352c <uart_init_rs232+0x14>)
 8003520:	4803      	ldr	r0, [pc, #12]	; (8003530 <uart_init_rs232+0x18>)
 8003522:	f005 f848 	bl	80085b6 <HAL_UART_Receive_IT>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200004d0 	.word	0x200004d0
 8003530:	20000538 	.word	0x20000538

08003534 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4907      	ldr	r1, [pc, #28]	; (800355c <uart_Rs232SendString+0x28>)
 8003540:	4807      	ldr	r0, [pc, #28]	; (8003560 <uart_Rs232SendString+0x2c>)
 8003542:	f006 ffd5 	bl	800a4f0 <siprintf>
 8003546:	4603      	mov	r3, r0
 8003548:	b29a      	uxth	r2, r3
 800354a:	230a      	movs	r3, #10
 800354c:	4904      	ldr	r1, [pc, #16]	; (8003560 <uart_Rs232SendString+0x2c>)
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <uart_Rs232SendString+0x30>)
 8003550:	f004 ff9f 	bl	8008492 <HAL_UART_Transmit>
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	0800df10 	.word	0x0800df10
 8003560:	200004d4 	.word	0x200004d4
 8003564:	20000538 	.word	0x20000538

08003568 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8003576:	4824      	ldr	r0, [pc, #144]	; (8003608 <uart_Rs232SendNum+0xa0>)
 8003578:	f7ff ffdc 	bl	8003534 <uart_Rs232SendString>
		return;
 800357c:	e040      	b.n	8003600 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8003582:	230a      	movs	r3, #10
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	e038      	b.n	80035fa <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3b01      	subs	r3, #1
 800358c:	4619      	mov	r1, r3
 800358e:	200a      	movs	r0, #10
 8003590:	f7fe fc62 	bl	8001e58 <mypow>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4293      	cmp	r3, r2
 800359c:	d315      	bcc.n	80035ca <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	4619      	mov	r1, r3
 80035a8:	200a      	movs	r0, #10
 80035aa:	f7fe fc55 	bl	8001e58 <mypow>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4914      	ldr	r1, [pc, #80]	; (800360c <uart_Rs232SendNum+0xa4>)
 80035bc:	4814      	ldr	r0, [pc, #80]	; (8003610 <uart_Rs232SendNum+0xa8>)
 80035be:	f006 ff97 	bl	800a4f0 <siprintf>
            uart_Rs232SendString(msg);
 80035c2:	4813      	ldr	r0, [pc, #76]	; (8003610 <uart_Rs232SendNum+0xa8>)
 80035c4:	f7ff ffb6 	bl	8003534 <uart_Rs232SendString>
 80035c8:	e005      	b.n	80035d6 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80035d0:	480d      	ldr	r0, [pc, #52]	; (8003608 <uart_Rs232SendNum+0xa0>)
 80035d2:	f7ff ffaf 	bl	8003534 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3b01      	subs	r3, #1
 80035da:	4619      	mov	r1, r3
 80035dc:	200a      	movs	r0, #10
 80035de:	f7fe fc3b 	bl	8001e58 <mypow>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035ec:	fb01 f202 	mul.w	r2, r1, r2
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	dcc3      	bgt.n	8003588 <uart_Rs232SendNum+0x20>
    }
}
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	0800df14 	.word	0x0800df14
 800360c:	0800df18 	.word	0x0800df18
 8003610:	200004d4 	.word	0x200004d4

08003614 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_UART_RxCpltCallback+0x30>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10a      	bne.n	800363c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003626:	230a      	movs	r3, #10
 8003628:	2201      	movs	r2, #1
 800362a:	4907      	ldr	r1, [pc, #28]	; (8003648 <HAL_UART_RxCpltCallback+0x34>)
 800362c:	4807      	ldr	r0, [pc, #28]	; (800364c <HAL_UART_RxCpltCallback+0x38>)
 800362e:	f004 ff30 	bl	8008492 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003632:	2201      	movs	r2, #1
 8003634:	4904      	ldr	r1, [pc, #16]	; (8003648 <HAL_UART_RxCpltCallback+0x34>)
 8003636:	4805      	ldr	r0, [pc, #20]	; (800364c <HAL_UART_RxCpltCallback+0x38>)
 8003638:	f004 ffbd 	bl	80085b6 <HAL_UART_Receive_IT>
	}
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40011000 	.word	0x40011000
 8003648:	200004d0 	.word	0x200004d0
 800364c:	20000538 	.word	0x20000538

08003650 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <MX_USART1_UART_Init+0x50>)
 8003658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800365a:	4b10      	ldr	r3, [pc, #64]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800365c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003674:	4b09      	ldr	r3, [pc, #36]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003676:	220c      	movs	r2, #12
 8003678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800367a:	4b08      	ldr	r3, [pc, #32]	; (800369c <MX_USART1_UART_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003682:	2200      	movs	r2, #0
 8003684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003686:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_USART1_UART_Init+0x4c>)
 8003688:	f004 feb6 	bl	80083f8 <HAL_UART_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003692:	f7ff fb2c 	bl	8002cee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	20000538 	.word	0x20000538
 80036a0:	40011000 	.word	0x40011000

080036a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	; 0x28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_UART_MspInit+0x94>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d134      	bne.n	8003730 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <HAL_UART_MspInit+0x98>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_UART_MspInit+0x98>)
 80036d0:	f043 0310 	orr.w	r3, r3, #16
 80036d4:	6453      	str	r3, [r2, #68]	; 0x44
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_UART_MspInit+0x98>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_UART_MspInit+0x98>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a14      	ldr	r2, [pc, #80]	; (800373c <HAL_UART_MspInit+0x98>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_UART_MspInit+0x98>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370c:	2303      	movs	r3, #3
 800370e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003710:	2307      	movs	r3, #7
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4619      	mov	r1, r3
 800371a:	4809      	ldr	r0, [pc, #36]	; (8003740 <HAL_UART_MspInit+0x9c>)
 800371c:	f001 fa36 	bl	8004b8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	2100      	movs	r1, #0
 8003724:	2025      	movs	r0, #37	; 0x25
 8003726:	f000 fdf8 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800372a:	2025      	movs	r0, #37	; 0x25
 800372c:	f000 fe11 	bl	8004352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003730:	bf00      	nop
 8003732:	3728      	adds	r7, #40	; 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40011000 	.word	0x40011000
 800373c:	40023800 	.word	0x40023800
 8003740:	40020000 	.word	0x40020000

08003744 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4413      	add	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	b2da      	uxtb	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	b2db      	uxtb	r3, r3
 8003766:	4413      	add	r3, r2
 8003768:	b2db      	uxtb	r3, r3
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <DEC2BCD+0x44>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	b2db      	uxtb	r3, r3
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	b258      	sxtb	r0, r3
 8003792:	79fa      	ldrb	r2, [r7, #7]
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <DEC2BCD+0x44>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	08d9      	lsrs	r1, r3, #3
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	b25b      	sxtb	r3, r3
 80037aa:	4303      	orrs	r3, r0
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	cccccccd 	.word	0xcccccccd

080037c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037c6:	490e      	ldr	r1, [pc, #56]	; (8003800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037c8:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037cc:	e002      	b.n	80037d4 <LoopCopyDataInit>

080037ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d2:	3304      	adds	r3, #4

080037d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037d8:	d3f9      	bcc.n	80037ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037dc:	4c0b      	ldr	r4, [pc, #44]	; (800380c <LoopFillZerobss+0x26>)
  movs r3, #0
 80037de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e0:	e001      	b.n	80037e6 <LoopFillZerobss>

080037e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e4:	3204      	adds	r2, #4

080037e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037e8:	d3fb      	bcc.n	80037e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037ea:	f7ff fd73 	bl	80032d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ee:	f006 ff3b 	bl	800a668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037f2:	f7ff f9c7 	bl	8002b84 <main>
  bx  lr    
 80037f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003804:	08011300 	.word	0x08011300
  ldr r2, =_sbss
 8003808:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800380c:	200006cc 	.word	0x200006cc

08003810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC_IRQHandler>
	...

08003814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003818:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_Init+0x40>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <HAL_Init+0x40>)
 800381e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_Init+0x40>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_Init+0x40>)
 800382a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800382e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <HAL_Init+0x40>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a07      	ldr	r2, [pc, #28]	; (8003854 <HAL_Init+0x40>)
 8003836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800383c:	2003      	movs	r0, #3
 800383e:	f000 fd61 	bl	8004304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003842:	200f      	movs	r0, #15
 8003844:	f000 f808 	bl	8003858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003848:	f7ff fc0e 	bl	8003068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00

08003858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_InitTick+0x54>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_InitTick+0x58>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003872:	fbb2 f3f3 	udiv	r3, r2, r3
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fd79 	bl	800436e <HAL_SYSTICK_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e00e      	b.n	80038a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b0f      	cmp	r3, #15
 800388a:	d80a      	bhi.n	80038a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800388c:	2200      	movs	r2, #0
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	f000 fd41 	bl	800431a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003898:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <HAL_InitTick+0x5c>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000008 	.word	0x20000008
 80038b0:	20000010 	.word	0x20000010
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_IncTick+0x20>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_IncTick+0x24>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <HAL_IncTick+0x24>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000010 	.word	0x20000010
 80038dc:	2000057c 	.word	0x2000057c

080038e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return uwTick;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_GetTick+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000057c 	.word	0x2000057c

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff ffee 	bl	80038e0 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d005      	beq.n	800391e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_Delay+0x44>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800391e:	bf00      	nop
 8003920:	f7ff ffde 	bl	80038e0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d8f7      	bhi.n	8003920 <HAL_Delay+0x28>
  {
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000010 	.word	0x20000010

08003940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e033      	b.n	80039be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fbd0 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d118      	bne.n	80039b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003986:	f023 0302 	bic.w	r3, r3, #2
 800398a:	f043 0202 	orr.w	r2, r3, #2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa68 	bl	8003e68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	f043 0201 	orr.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
 80039ae:	e001      	b.n	80039b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_Start_DMA+0x1e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0e9      	b.n	8003bba <HAL_ADC_Start_DMA+0x1f2>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d018      	beq.n	8003a2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a0c:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <HAL_ADC_Start_DMA+0x1fc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6d      	ldr	r2, [pc, #436]	; (8003bc8 <HAL_ADC_Start_DMA+0x200>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0c9a      	lsrs	r2, r3, #18
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a20:	e002      	b.n	8003a28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f9      	bne.n	8003a22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d107      	bne.n	8003a4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 80a1 	bne.w	8003ba0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	d106      	bne.n	8003aac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f023 0206 	bic.w	r2, r3, #6
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
 8003aaa:	e002      	b.n	8003ab2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aba:	4b44      	ldr	r3, [pc, #272]	; (8003bcc <HAL_ADC_Start_DMA+0x204>)
 8003abc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	4a43      	ldr	r2, [pc, #268]	; (8003bd0 <HAL_ADC_Start_DMA+0x208>)
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_ADC_Start_DMA+0x20c>)
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4a41      	ldr	r2, [pc, #260]	; (8003bd8 <HAL_ADC_Start_DMA+0x210>)
 8003ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ade:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003aee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003afe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	334c      	adds	r3, #76	; 0x4c
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f000 fce8 	bl	80044e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d12a      	bne.n	8003b76 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_ADC_Start_DMA+0x214>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d015      	beq.n	8003b56 <HAL_ADC_Start_DMA+0x18e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <HAL_ADC_Start_DMA+0x218>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_Start_DMA+0x178>
 8003b34:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <HAL_ADC_Start_DMA+0x204>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_ADC_Start_DMA+0x21c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d136      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <HAL_ADC_Start_DMA+0x204>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d130      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d129      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	e020      	b.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_ADC_Start_DMA+0x214>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d11b      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d114      	bne.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000008 	.word	0x20000008
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	40012300 	.word	0x40012300
 8003bd0:	08004061 	.word	0x08004061
 8003bd4:	0800411b 	.word	0x0800411b
 8003bd8:	08004137 	.word	0x08004137
 8003bdc:	40012000 	.word	0x40012000
 8003be0:	40012100 	.word	0x40012100
 8003be4:	40012200 	.word	0x40012200

08003be8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x1c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e105      	b.n	8003e4c <HAL_ADC_ConfigChannel+0x228>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b09      	cmp	r3, #9
 8003c4e:	d925      	bls.n	8003c9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68d9      	ldr	r1, [r3, #12]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	3b1e      	subs	r3, #30
 8003c66:	2207      	movs	r2, #7
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	400a      	ands	r2, r1
 8003c74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68d9      	ldr	r1, [r3, #12]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	4618      	mov	r0, r3
 8003c88:	4603      	mov	r3, r0
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4403      	add	r3, r0
 8003c8e:	3b1e      	subs	r3, #30
 8003c90:	409a      	lsls	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	e022      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6919      	ldr	r1, [r3, #16]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6919      	ldr	r1, [r3, #16]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4403      	add	r3, r0
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d824      	bhi.n	8003d34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b05      	subs	r3, #5
 8003cfc:	221f      	movs	r2, #31
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	3b05      	subs	r3, #5
 8003d26:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34
 8003d32:	e04c      	b.n	8003dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d824      	bhi.n	8003d86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b23      	subs	r3, #35	; 0x23
 8003d4e:	221f      	movs	r2, #31
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43da      	mvns	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	3b23      	subs	r3, #35	; 0x23
 8003d78:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
 8003d84:	e023      	b.n	8003dce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	3b41      	subs	r3, #65	; 0x41
 8003d98:	221f      	movs	r2, #31
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	400a      	ands	r2, r1
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4618      	mov	r0, r3
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3b41      	subs	r3, #65	; 0x41
 8003dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_ADC_ConfigChannel+0x234>)
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <HAL_ADC_ConfigChannel+0x238>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d109      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x1cc>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d105      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_ADC_ConfigChannel+0x238>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d123      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x21e>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d003      	beq.n	8003e0a <HAL_ADC_ConfigChannel+0x1e6>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b11      	cmp	r3, #17
 8003e08:	d11b      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d111      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <HAL_ADC_ConfigChannel+0x23c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_ADC_ConfigChannel+0x240>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	0c9a      	lsrs	r2, r3, #18
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e34:	e002      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f9      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012300 	.word	0x40012300
 8003e5c:	40012000 	.word	0x40012000
 8003e60:	20000008 	.word	0x20000008
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <ADC_Init+0x1f0>)
 8003e72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	021a      	lsls	r2, r3, #8
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <ADC_Init+0x1f4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	e00f      	b.n	8003f66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0202 	bic.w	r2, r2, #2
 8003f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	7e1b      	ldrb	r3, [r3, #24]
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	035a      	lsls	r2, r3, #13
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	e007      	b.n	8003fdc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	051a      	lsls	r2, r3, #20
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6899      	ldr	r1, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800401e:	025a      	lsls	r2, r3, #9
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004036:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	029a      	lsls	r2, r3, #10
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40012300 	.word	0x40012300
 800405c:	0f000001 	.word	0x0f000001

08004060 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13c      	bne.n	80040f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d12b      	bne.n	80040ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004098:	2b00      	cmp	r3, #0
 800409a:	d127      	bne.n	80040ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d119      	bne.n	80040ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0220 	bic.w	r2, r2, #32
 80040c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f043 0201 	orr.w	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fd7b 	bl	8003be8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040f2:	e00e      	b.n	8004112 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fd85 	bl	8003c10 <HAL_ADC_ErrorCallback>
}
 8004106:	e004      	b.n	8004112 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fd67 	bl	8003bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2240      	movs	r2, #64	; 0x40
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f7ff fd5a 	bl	8003c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004180:	4013      	ands	r3, r2
 8004182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800418c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004196:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	60d3      	str	r3, [r2, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <__NVIC_GetPriorityGrouping+0x18>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	f003 0307 	and.w	r3, r3, #7
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db0b      	blt.n	80041f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <__NVIC_EnableIRQ+0x38>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e100 	.word	0xe000e100

08004204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db0a      	blt.n	800422e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	; (8004250 <__NVIC_SetPriority+0x4c>)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	0112      	lsls	r2, r2, #4
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	440b      	add	r3, r1
 8004228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422c:	e00a      	b.n	8004244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4908      	ldr	r1, [pc, #32]	; (8004254 <__NVIC_SetPriority+0x50>)
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	3b04      	subs	r3, #4
 800423c:	0112      	lsls	r2, r2, #4
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	440b      	add	r3, r1
 8004242:	761a      	strb	r2, [r3, #24]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000e100 	.word	0xe000e100
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d0:	d301      	bcc.n	80042d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00f      	b.n	80042f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <SysTick_Config+0x40>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042de:	210f      	movs	r1, #15
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f7ff ff8e 	bl	8004204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <SysTick_Config+0x40>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <SysTick_Config+0x40>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010

08004304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff29 	bl	8004164 <__NVIC_SetPriorityGrouping>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800432c:	f7ff ff3e 	bl	80041ac <__NVIC_GetPriorityGrouping>
 8004330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f7ff ff8e 	bl	8004258 <NVIC_EncodePriority>
 800433c:	4602      	mov	r2, r0
 800433e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff5d 	bl	8004204 <__NVIC_SetPriority>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	4603      	mov	r3, r0
 800435a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff31 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ffa2 	bl	80042c0 <SysTick_Config>
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7ff faa4 	bl	80038e0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e099      	b.n	80044d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c4:	e00f      	b.n	80043e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c6:	f7ff fa8b 	bl	80038e0 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d908      	bls.n	80043e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e078      	b.n	80044d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e8      	bne.n	80043c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_DMA_Init+0x158>)
 8004400:	4013      	ands	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b04      	cmp	r3, #4
 800443e:	d107      	bne.n	8004450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b04      	cmp	r3, #4
 8004478:	d117      	bne.n	80044aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb01 	bl	8004a94 <DMA_CheckFifoParam>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044a6:	2301      	movs	r3, #1
 80044a8:	e016      	b.n	80044d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fab8 	bl	8004a28 <DMA_CalcBaseAndBitshift>
 80044b8:	4603      	mov	r3, r0
 80044ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	223f      	movs	r2, #63	; 0x3f
 80044c2:	409a      	lsls	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	f010803f 	.word	0xf010803f

080044e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_DMA_Start_IT+0x26>
 8004506:	2302      	movs	r3, #2
 8004508:	e040      	b.n	800458c <HAL_DMA_Start_IT+0xa8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12f      	bne.n	800457e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fa4a 	bl	80049cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	223f      	movs	r2, #63	; 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0216 	orr.w	r2, r2, #22
 8004552:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0208 	orr.w	r2, r2, #8
 800456a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e005      	b.n	800458a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800458a:	7dfb      	ldrb	r3, [r7, #23]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045a2:	f7ff f99d 	bl	80038e0 <HAL_GetTick>
 80045a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d008      	beq.n	80045c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e052      	b.n	800466c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0216 	bic.w	r2, r2, #22
 80045d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_DMA_Abort+0x62>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0208 	bic.w	r2, r2, #8
 8004604:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004616:	e013      	b.n	8004640 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004618:	f7ff f962 	bl	80038e0 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b05      	cmp	r3, #5
 8004624:	d90c      	bls.n	8004640 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2203      	movs	r2, #3
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e015      	b.n	800466c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e4      	bne.n	8004618 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004652:	223f      	movs	r2, #63	; 0x3f
 8004654:	409a      	lsls	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d004      	beq.n	8004692 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00c      	b.n	80046ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2205      	movs	r2, #5
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046c4:	4b8e      	ldr	r3, [pc, #568]	; (8004900 <HAL_DMA_IRQHandler+0x248>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a8e      	ldr	r2, [pc, #568]	; (8004904 <HAL_DMA_IRQHandler+0x24c>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0a9b      	lsrs	r3, r3, #10
 80046d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	2208      	movs	r2, #8
 80046e4:	409a      	lsls	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01a      	beq.n	8004724 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	2208      	movs	r2, #8
 8004712:	409a      	lsls	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f043 0201 	orr.w	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2201      	movs	r2, #1
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d012      	beq.n	800475a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	2201      	movs	r2, #1
 8004748:	409a      	lsls	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	f043 0202 	orr.w	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2204      	movs	r2, #4
 8004760:	409a      	lsls	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d012      	beq.n	8004790 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	2204      	movs	r2, #4
 800477e:	409a      	lsls	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	f043 0204 	orr.w	r2, r3, #4
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	2210      	movs	r2, #16
 8004796:	409a      	lsls	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d043      	beq.n	8004828 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03c      	beq.n	8004828 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2210      	movs	r2, #16
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d018      	beq.n	80047fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d024      	beq.n	8004828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
 80047e6:	e01f      	b.n	8004828 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01b      	beq.n	8004828 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
 80047f8:	e016      	b.n	8004828 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0208 	bic.w	r2, r2, #8
 8004816:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	2220      	movs	r2, #32
 800482e:	409a      	lsls	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 808f 	beq.w	8004958 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8087 	beq.w	8004958 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2220      	movs	r2, #32
 8004850:	409a      	lsls	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b05      	cmp	r3, #5
 8004860:	d136      	bne.n	80048d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0216 	bic.w	r2, r2, #22
 8004870:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004880:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <HAL_DMA_IRQHandler+0x1da>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0208 	bic.w	r2, r2, #8
 80048a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	223f      	movs	r2, #63	; 0x3f
 80048a8:	409a      	lsls	r2, r3
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d07e      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
        }
        return;
 80048ce:	e079      	b.n	80049c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d01d      	beq.n	800491a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10d      	bne.n	8004908 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
 80048fc:	e02c      	b.n	8004958 <HAL_DMA_IRQHandler+0x2a0>
 80048fe:	bf00      	nop
 8004900:	20000008 	.word	0x20000008
 8004904:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d023      	beq.n	8004958 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
 8004918:	e01e      	b.n	8004958 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10f      	bne.n	8004948 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0210 	bic.w	r2, r2, #16
 8004936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	2b00      	cmp	r3, #0
 800495e:	d032      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d022      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2205      	movs	r2, #5
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	3301      	adds	r3, #1
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	429a      	cmp	r2, r3
 800498e:	d307      	bcc.n	80049a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f2      	bne.n	8004984 <HAL_DMA_IRQHandler+0x2cc>
 800499e:	e000      	b.n	80049a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
 80049c2:	e000      	b.n	80049c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049c4:	bf00      	nop
    }
  }
}
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d108      	bne.n	8004a0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a0a:	e007      	b.n	8004a1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	60da      	str	r2, [r3, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	3b10      	subs	r3, #16
 8004a38:	4a14      	ldr	r2, [pc, #80]	; (8004a8c <DMA_CalcBaseAndBitshift+0x64>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	091b      	lsrs	r3, r3, #4
 8004a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a42:	4a13      	ldr	r2, [pc, #76]	; (8004a90 <DMA_CalcBaseAndBitshift+0x68>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d909      	bls.n	8004a6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	659a      	str	r2, [r3, #88]	; 0x58
 8004a68:	e007      	b.n	8004a7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a72:	f023 0303 	bic.w	r3, r3, #3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	aaaaaaab 	.word	0xaaaaaaab
 8004a90:	08010ebc 	.word	0x08010ebc

08004a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d11f      	bne.n	8004aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d856      	bhi.n	8004b62 <DMA_CheckFifoParam+0xce>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <DMA_CheckFifoParam+0x28>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004acd 	.word	0x08004acd
 8004ac0:	08004adf 	.word	0x08004adf
 8004ac4:	08004acd 	.word	0x08004acd
 8004ac8:	08004b63 	.word	0x08004b63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d046      	beq.n	8004b66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004adc:	e043      	b.n	8004b66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ae6:	d140      	bne.n	8004b6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aec:	e03d      	b.n	8004b6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af6:	d121      	bne.n	8004b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d837      	bhi.n	8004b6e <DMA_CheckFifoParam+0xda>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <DMA_CheckFifoParam+0x70>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b1b 	.word	0x08004b1b
 8004b0c:	08004b15 	.word	0x08004b15
 8004b10:	08004b2d 	.word	0x08004b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      break;
 8004b18:	e030      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d025      	beq.n	8004b72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2a:	e022      	b.n	8004b72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b34:	d11f      	bne.n	8004b76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b3a:	e01c      	b.n	8004b76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d903      	bls.n	8004b4a <DMA_CheckFifoParam+0xb6>
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d003      	beq.n	8004b50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b48:	e018      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b4e:	e015      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b60:	e00b      	b.n	8004b7a <DMA_CheckFifoParam+0xe6>
      break;
 8004b62:	bf00      	nop
 8004b64:	e00a      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;
 8004b66:	bf00      	nop
 8004b68:	e008      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;
 8004b6a:	bf00      	nop
 8004b6c:	e006      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e004      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;
 8004b72:	bf00      	nop
 8004b74:	e002      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <DMA_CheckFifoParam+0xe8>
      break;
 8004b7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop

08004b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e16b      	b.n	8004e80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ba8:	2201      	movs	r2, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f040 815a 	bne.w	8004e7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d005      	beq.n	8004bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d130      	bne.n	8004c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	2203      	movs	r2, #3
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c14:	2201      	movs	r2, #1
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 0201 	and.w	r2, r3, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d017      	beq.n	8004c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d123      	bne.n	8004cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	08da      	lsrs	r2, r3, #3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3208      	adds	r2, #8
 8004c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	220f      	movs	r2, #15
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0203 	and.w	r2, r3, #3
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b4 	beq.w	8004e7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4b60      	ldr	r3, [pc, #384]	; (8004e98 <HAL_GPIO_Init+0x30c>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	4a5f      	ldr	r2, [pc, #380]	; (8004e98 <HAL_GPIO_Init+0x30c>)
 8004d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d20:	6453      	str	r3, [r2, #68]	; 0x44
 8004d22:	4b5d      	ldr	r3, [pc, #372]	; (8004e98 <HAL_GPIO_Init+0x30c>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d2e:	4a5b      	ldr	r2, [pc, #364]	; (8004e9c <HAL_GPIO_Init+0x310>)
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	220f      	movs	r2, #15
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_GPIO_Init+0x314>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02b      	beq.n	8004db2 <HAL_GPIO_Init+0x226>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a51      	ldr	r2, [pc, #324]	; (8004ea4 <HAL_GPIO_Init+0x318>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d025      	beq.n	8004dae <HAL_GPIO_Init+0x222>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a50      	ldr	r2, [pc, #320]	; (8004ea8 <HAL_GPIO_Init+0x31c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01f      	beq.n	8004daa <HAL_GPIO_Init+0x21e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a4f      	ldr	r2, [pc, #316]	; (8004eac <HAL_GPIO_Init+0x320>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d019      	beq.n	8004da6 <HAL_GPIO_Init+0x21a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a4e      	ldr	r2, [pc, #312]	; (8004eb0 <HAL_GPIO_Init+0x324>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <HAL_GPIO_Init+0x216>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a4d      	ldr	r2, [pc, #308]	; (8004eb4 <HAL_GPIO_Init+0x328>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00d      	beq.n	8004d9e <HAL_GPIO_Init+0x212>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4c      	ldr	r2, [pc, #304]	; (8004eb8 <HAL_GPIO_Init+0x32c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0x20e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4b      	ldr	r2, [pc, #300]	; (8004ebc <HAL_GPIO_Init+0x330>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <HAL_GPIO_Init+0x20a>
 8004d92:	2307      	movs	r3, #7
 8004d94:	e00e      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d96:	2308      	movs	r3, #8
 8004d98:	e00c      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d9a:	2306      	movs	r3, #6
 8004d9c:	e00a      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004d9e:	2305      	movs	r3, #5
 8004da0:	e008      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004da2:	2304      	movs	r3, #4
 8004da4:	e006      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004da6:	2303      	movs	r3, #3
 8004da8:	e004      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e002      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_GPIO_Init+0x228>
 8004db2:	2300      	movs	r3, #0
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	f002 0203 	and.w	r2, r2, #3
 8004dba:	0092      	lsls	r2, r2, #2
 8004dbc:	4093      	lsls	r3, r2
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc4:	4935      	ldr	r1, [pc, #212]	; (8004e9c <HAL_GPIO_Init+0x310>)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	3302      	adds	r3, #2
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004df6:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004dfc:	4b30      	ldr	r3, [pc, #192]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e20:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e26:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e74:	4a12      	ldr	r2, [pc, #72]	; (8004ec0 <HAL_GPIO_Init+0x334>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	f67f ae90 	bls.w	8004ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3724      	adds	r7, #36	; 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40020000 	.word	0x40020000
 8004ea4:	40020400 	.word	0x40020400
 8004ea8:	40020800 	.word	0x40020800
 8004eac:	40020c00 	.word	0x40020c00
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40021400 	.word	0x40021400
 8004eb8:	40021800 	.word	0x40021800
 8004ebc:	40021c00 	.word	0x40021c00
 8004ec0:	40013c00 	.word	0x40013c00

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ee0:	e003      	b.n	8004eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	041a      	lsls	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	619a      	str	r2, [r3, #24]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e12b      	b.n	8005162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d106      	bne.n	8004f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fd00 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2224      	movs	r2, #36	; 0x24
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f001 fbfc 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 8004f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4a81      	ldr	r2, [pc, #516]	; (800516c <HAL_I2C_Init+0x274>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d807      	bhi.n	8004f7c <HAL_I2C_Init+0x84>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a80      	ldr	r2, [pc, #512]	; (8005170 <HAL_I2C_Init+0x278>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	bf94      	ite	ls
 8004f74:	2301      	movls	r3, #1
 8004f76:	2300      	movhi	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e006      	b.n	8004f8a <HAL_I2C_Init+0x92>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a7d      	ldr	r2, [pc, #500]	; (8005174 <HAL_I2C_Init+0x27c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	bf94      	ite	ls
 8004f84:	2301      	movls	r3, #1
 8004f86:	2300      	movhi	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e0e7      	b.n	8005162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a78      	ldr	r2, [pc, #480]	; (8005178 <HAL_I2C_Init+0x280>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0c9b      	lsrs	r3, r3, #18
 8004f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a6a      	ldr	r2, [pc, #424]	; (800516c <HAL_I2C_Init+0x274>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d802      	bhi.n	8004fcc <HAL_I2C_Init+0xd4>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	e009      	b.n	8004fe0 <HAL_I2C_Init+0xe8>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fd2:	fb02 f303 	mul.w	r3, r2, r3
 8004fd6:	4a69      	ldr	r2, [pc, #420]	; (800517c <HAL_I2C_Init+0x284>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	099b      	lsrs	r3, r3, #6
 8004fde:	3301      	adds	r3, #1
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	495c      	ldr	r1, [pc, #368]	; (800516c <HAL_I2C_Init+0x274>)
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	d819      	bhi.n	8005034 <HAL_I2C_Init+0x13c>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1e59      	subs	r1, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	fbb1 f3f3 	udiv	r3, r1, r3
 800500e:	1c59      	adds	r1, r3, #1
 8005010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005014:	400b      	ands	r3, r1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_I2C_Init+0x138>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1e59      	subs	r1, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	fbb1 f3f3 	udiv	r3, r1, r3
 8005028:	3301      	adds	r3, #1
 800502a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502e:	e051      	b.n	80050d4 <HAL_I2C_Init+0x1dc>
 8005030:	2304      	movs	r3, #4
 8005032:	e04f      	b.n	80050d4 <HAL_I2C_Init+0x1dc>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <HAL_I2C_Init+0x168>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	1e58      	subs	r0, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	440b      	add	r3, r1
 800504a:	fbb0 f3f3 	udiv	r3, r0, r3
 800504e:	3301      	adds	r3, #1
 8005050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	e012      	b.n	8005086 <HAL_I2C_Init+0x18e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	0099      	lsls	r1, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	fbb0 f3f3 	udiv	r3, r0, r3
 8005076:	3301      	adds	r3, #1
 8005078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Init+0x196>
 800508a:	2301      	movs	r3, #1
 800508c:	e022      	b.n	80050d4 <HAL_I2C_Init+0x1dc>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10e      	bne.n	80050b4 <HAL_I2C_Init+0x1bc>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1e58      	subs	r0, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	460b      	mov	r3, r1
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	440b      	add	r3, r1
 80050a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80050a8:	3301      	adds	r3, #1
 80050aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b2:	e00f      	b.n	80050d4 <HAL_I2C_Init+0x1dc>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1e58      	subs	r0, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	0099      	lsls	r1, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ca:	3301      	adds	r3, #1
 80050cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	6809      	ldr	r1, [r1, #0]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69da      	ldr	r2, [r3, #28]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6911      	ldr	r1, [r2, #16]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68d2      	ldr	r2, [r2, #12]
 800510e:	4311      	orrs	r1, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	430b      	orrs	r3, r1
 8005116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	000186a0 	.word	0x000186a0
 8005170:	001e847f 	.word	0x001e847f
 8005174:	003d08ff 	.word	0x003d08ff
 8005178:	431bde83 	.word	0x431bde83
 800517c:	10624dd3 	.word	0x10624dd3

08005180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	461a      	mov	r2, r3
 800518e:	4603      	mov	r3, r0
 8005190:	817b      	strh	r3, [r7, #10]
 8005192:	460b      	mov	r3, r1
 8005194:	813b      	strh	r3, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800519a:	f7fe fba1 	bl	80038e0 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	f040 80d9 	bne.w	8005360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	2319      	movs	r3, #25
 80051b4:	2201      	movs	r2, #1
 80051b6:	496d      	ldr	r1, [pc, #436]	; (800536c <HAL_I2C_Mem_Write+0x1ec>)
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fc7f 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
 80051c6:	e0cc      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_I2C_Mem_Write+0x56>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0c5      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d007      	beq.n	80051fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0201 	orr.w	r2, r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2221      	movs	r2, #33	; 0x21
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2240      	movs	r2, #64	; 0x40
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <HAL_I2C_Mem_Write+0x1f0>)
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800523e:	88f8      	ldrh	r0, [r7, #6]
 8005240:	893a      	ldrh	r2, [r7, #8]
 8005242:	8979      	ldrh	r1, [r7, #10]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fab6 	bl	80057c0 <I2C_RequestMemoryWrite>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d052      	beq.n	8005300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e081      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fd00 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b04      	cmp	r3, #4
 8005274:	d107      	bne.n	8005286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e06b      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d11b      	bne.n	8005300 <HAL_I2C_Mem_Write+0x180>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d017      	beq.n	8005300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	781a      	ldrb	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1aa      	bne.n	800525e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fcec 	bl	8005cea <I2C_WaitOnBTFFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b04      	cmp	r3, #4
 800531e:	d107      	bne.n	8005330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e016      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	00100002 	.word	0x00100002
 8005370:	ffff0000 	.word	0xffff0000

08005374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	; 0x30
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800538e:	f7fe faa7 	bl	80038e0 <HAL_GetTick>
 8005392:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b20      	cmp	r3, #32
 800539e:	f040 8208 	bne.w	80057b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2319      	movs	r3, #25
 80053a8:	2201      	movs	r2, #1
 80053aa:	497b      	ldr	r1, [pc, #492]	; (8005598 <HAL_I2C_Mem_Read+0x224>)
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fb85 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
 80053ba:	e1fb      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_I2C_Mem_Read+0x56>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e1f4      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d007      	beq.n	80053f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2222      	movs	r2, #34	; 0x22
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a5b      	ldr	r2, [pc, #364]	; (800559c <HAL_I2C_Mem_Read+0x228>)
 8005430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005432:	88f8      	ldrh	r0, [r7, #6]
 8005434:	893a      	ldrh	r2, [r7, #8]
 8005436:	8979      	ldrh	r1, [r7, #10]
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	4603      	mov	r3, r0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa52 	bl	80058ec <I2C_RequestMemoryRead>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e1b0      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d113      	bne.n	8005482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e184      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005486:	2b01      	cmp	r3, #1
 8005488:	d11b      	bne.n	80054c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e164      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d11b      	bne.n	8005502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	e144      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005518:	e138      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	2b03      	cmp	r3, #3
 8005520:	f200 80f1 	bhi.w	8005706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	2b01      	cmp	r3, #1
 800552a:	d123      	bne.n	8005574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 fc1b 	bl	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e139      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005572:	e10b      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005578:	2b02      	cmp	r3, #2
 800557a:	d14e      	bne.n	800561a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	2200      	movs	r2, #0
 8005584:	4906      	ldr	r1, [pc, #24]	; (80055a0 <HAL_I2C_Mem_Read+0x22c>)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa98 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e10e      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
 8005596:	bf00      	nop
 8005598:	00100002 	.word	0x00100002
 800559c:	ffff0000 	.word	0xffff0000
 80055a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005618:	e0b8      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	2200      	movs	r2, #0
 8005622:	4966      	ldr	r1, [pc, #408]	; (80057bc <HAL_I2C_Mem_Read+0x448>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fa49 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e0bf      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	494f      	ldr	r1, [pc, #316]	; (80057bc <HAL_I2C_Mem_Read+0x448>)
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa1b 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e091      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005704:	e042      	b.n	800578c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 fb2e 	bl	8005d6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e04c      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d118      	bne.n	800578c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	f47f aec2 	bne.w	800551a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3728      	adds	r7, #40	; 0x28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	00010004 	.word	0x00010004

080057c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f960 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00d      	beq.n	800581e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005810:	d103      	bne.n	800581a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e05f      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800582c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	492d      	ldr	r1, [pc, #180]	; (80058e8 <I2C_RequestMemoryWrite+0x128>)
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f998 	bl	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04c      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	6a39      	ldr	r1, [r7, #32]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fa02 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00d      	beq.n	8005886 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b04      	cmp	r3, #4
 8005870:	d107      	bne.n	8005882 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005880:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e02b      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800588c:	893b      	ldrh	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	611a      	str	r2, [r3, #16]
 8005896:	e021      	b.n	80058dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005898:	893b      	ldrh	r3, [r7, #8]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	b29b      	uxth	r3, r3
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a8:	6a39      	ldr	r1, [r7, #32]
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f9dc 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d107      	bne.n	80058ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e005      	b.n	80058de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058d2:	893b      	ldrh	r3, [r7, #8]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	00010002 	.word	0x00010002

080058ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2200      	movs	r2, #0
 800592e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 f8c2 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00d      	beq.n	800595a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594c:	d103      	bne.n	8005956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e0aa      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	4952      	ldr	r1, [pc, #328]	; (8005ab8 <I2C_RequestMemoryRead+0x1cc>)
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f8fa 	bl	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e097      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	6a39      	ldr	r1, [r7, #32]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f964 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d107      	bne.n	80059be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e076      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d105      	bne.n	80059d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]
 80059d2:	e021      	b.n	8005a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059d4:	893b      	ldrh	r3, [r7, #8]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e4:	6a39      	ldr	r1, [r7, #32]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f93e 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00d      	beq.n	8005a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d107      	bne.n	8005a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e050      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0e:	893b      	ldrh	r3, [r7, #8]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1a:	6a39      	ldr	r1, [r7, #32]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f923 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d107      	bne.n	8005a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e035      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f82b 	bl	8005abc <I2C_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7a:	d103      	bne.n	8005a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e013      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f043 0301 	orr.w	r3, r3, #1
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	4906      	ldr	r1, [pc, #24]	; (8005ab8 <I2C_RequestMemoryRead+0x1cc>)
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f863 	bl	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	00010002 	.word	0x00010002

08005abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005acc:	e025      	b.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d021      	beq.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fd ff03 	bl	80038e0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e023      	b.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d10d      	bne.n	8005b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	43da      	mvns	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bf0c      	ite	eq
 8005b36:	2301      	moveq	r3, #1
 8005b38:	2300      	movne	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	e00c      	b.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	43da      	mvns	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d0b6      	beq.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b78:	e051      	b.n	8005c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d123      	bne.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e046      	b.n	8005c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d021      	beq.n	8005c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7fd fe81 	bl	80038e0 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d116      	bne.n	8005c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e020      	b.n	8005c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10c      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e00b      	b.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	43da      	mvns	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d18d      	bne.n	8005b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c74:	e02d      	b.n	8005cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f8ce 	bl	8005e18 <I2C_IsAcknowledgeFailed>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e02d      	b.n	8005ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d021      	beq.n	8005cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fd fe27 	bl	80038e0 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d116      	bne.n	8005cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f043 0220 	orr.w	r2, r3, #32
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e007      	b.n	8005ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	2b80      	cmp	r3, #128	; 0x80
 8005cde:	d1ca      	bne.n	8005c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cf6:	e02d      	b.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f88d 	bl	8005e18 <I2C_IsAcknowledgeFailed>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e02d      	b.n	8005d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0e:	d021      	beq.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d10:	f7fd fde6 	bl	80038e0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d302      	bcc.n	8005d26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d116      	bne.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e007      	b.n	8005d64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d1ca      	bne.n	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d78:	e042      	b.n	8005e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d119      	bne.n	8005dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e029      	b.n	8005e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dbc:	f7fd fd90 	bl	80038e0 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	f043 0220 	orr.w	r2, r3, #32
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e007      	b.n	8005e10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d1b5      	bne.n	8005d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e2e:	d11b      	bne.n	8005e68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e267      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d075      	beq.n	8005f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e96:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d00c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ea2:	4b85      	ldr	r3, [pc, #532]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d112      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eae:	4b82      	ldr	r3, [pc, #520]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eba:	d10b      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	4b7e      	ldr	r3, [pc, #504]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d05b      	beq.n	8005f80 <HAL_RCC_OscConfig+0x108>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d157      	bne.n	8005f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e242      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d106      	bne.n	8005eec <HAL_RCC_OscConfig+0x74>
 8005ede:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e01d      	b.n	8005f28 <HAL_RCC_OscConfig+0xb0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x98>
 8005ef6:	4b70      	ldr	r3, [pc, #448]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a6f      	ldr	r2, [pc, #444]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a6c      	ldr	r2, [pc, #432]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e00b      	b.n	8005f28 <HAL_RCC_OscConfig+0xb0>
 8005f10:	4b69      	ldr	r3, [pc, #420]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a68      	ldr	r2, [pc, #416]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4b66      	ldr	r3, [pc, #408]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a65      	ldr	r2, [pc, #404]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d013      	beq.n	8005f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fd fcd6 	bl	80038e0 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f38:	f7fd fcd2 	bl	80038e0 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b64      	cmp	r3, #100	; 0x64
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e207      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4a:	4b5b      	ldr	r3, [pc, #364]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0xc0>
 8005f56:	e014      	b.n	8005f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f58:	f7fd fcc2 	bl	80038e0 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f60:	f7fd fcbe 	bl	80038e0 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b64      	cmp	r3, #100	; 0x64
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1f3      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f72:	4b51      	ldr	r3, [pc, #324]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0xe8>
 8005f7e:	e000      	b.n	8005f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d063      	beq.n	8006056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f8e:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 030c 	and.w	r3, r3, #12
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f9a:	4b47      	ldr	r3, [pc, #284]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	d11c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fa6:	4b44      	ldr	r3, [pc, #272]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d116      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fb2:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d005      	beq.n	8005fca <HAL_RCC_OscConfig+0x152>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d001      	beq.n	8005fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e1c7      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fca:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4937      	ldr	r1, [pc, #220]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fde:	e03a      	b.n	8006056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d020      	beq.n	800602a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe8:	4b34      	ldr	r3, [pc, #208]	; (80060bc <HAL_RCC_OscConfig+0x244>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fee:	f7fd fc77 	bl	80038e0 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff4:	e008      	b.n	8006008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff6:	f7fd fc73 	bl	80038e0 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d901      	bls.n	8006008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e1a8      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d0f0      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	4925      	ldr	r1, [pc, #148]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
 8006028:	e015      	b.n	8006056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <HAL_RCC_OscConfig+0x244>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd fc56 	bl	80038e0 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006038:	f7fd fc52 	bl	80038e0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e187      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d036      	beq.n	80060d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d016      	beq.n	8006098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <HAL_RCC_OscConfig+0x248>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fd fc36 	bl	80038e0 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006078:	f7fd fc32 	bl	80038e0 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e167      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608a:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <HAL_RCC_OscConfig+0x240>)
 800608c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0x200>
 8006096:	e01b      	b.n	80060d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCC_OscConfig+0x248>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609e:	f7fd fc1f 	bl	80038e0 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a4:	e00e      	b.n	80060c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a6:	f7fd fc1b 	bl	80038e0 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d907      	bls.n	80060c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e150      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
 80060b8:	40023800 	.word	0x40023800
 80060bc:	42470000 	.word	0x42470000
 80060c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c4:	4b88      	ldr	r3, [pc, #544]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8097 	beq.w	800620c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060e2:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10f      	bne.n	800610e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	4b7d      	ldr	r3, [pc, #500]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	4a7c      	ldr	r2, [pc, #496]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80060f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6413      	str	r3, [r2, #64]	; 0x40
 80060fe:	4b7a      	ldr	r3, [pc, #488]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610e:	4b77      	ldr	r3, [pc, #476]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d118      	bne.n	800614c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800611a:	4b74      	ldr	r3, [pc, #464]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a73      	ldr	r2, [pc, #460]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006126:	f7fd fbdb 	bl	80038e0 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800612e:	f7fd fbd7 	bl	80038e0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e10c      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006140:	4b6a      	ldr	r3, [pc, #424]	; (80062ec <HAL_RCC_OscConfig+0x474>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d106      	bne.n	8006162 <HAL_RCC_OscConfig+0x2ea>
 8006154:	4b64      	ldr	r3, [pc, #400]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	4a63      	ldr	r2, [pc, #396]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6713      	str	r3, [r2, #112]	; 0x70
 8006160:	e01c      	b.n	800619c <HAL_RCC_OscConfig+0x324>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b05      	cmp	r3, #5
 8006168:	d10c      	bne.n	8006184 <HAL_RCC_OscConfig+0x30c>
 800616a:	4b5f      	ldr	r3, [pc, #380]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800616c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616e:	4a5e      	ldr	r2, [pc, #376]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006170:	f043 0304 	orr.w	r3, r3, #4
 8006174:	6713      	str	r3, [r2, #112]	; 0x70
 8006176:	4b5c      	ldr	r3, [pc, #368]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	4a5b      	ldr	r2, [pc, #364]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800617c:	f043 0301 	orr.w	r3, r3, #1
 8006180:	6713      	str	r3, [r2, #112]	; 0x70
 8006182:	e00b      	b.n	800619c <HAL_RCC_OscConfig+0x324>
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006188:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	6713      	str	r3, [r2, #112]	; 0x70
 8006190:	4b55      	ldr	r3, [pc, #340]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a54      	ldr	r2, [pc, #336]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006196:	f023 0304 	bic.w	r3, r3, #4
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d015      	beq.n	80061d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fd fb9c 	bl	80038e0 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061ac:	f7fd fb98 	bl	80038e0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e0cb      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c2:	4b49      	ldr	r3, [pc, #292]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0ee      	beq.n	80061ac <HAL_RCC_OscConfig+0x334>
 80061ce:	e014      	b.n	80061fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d0:	f7fd fb86 	bl	80038e0 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fd fb82 	bl	80038e0 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0b5      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ee:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ee      	bne.n	80061d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d105      	bne.n	800620c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006200:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	4a38      	ldr	r2, [pc, #224]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800620a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80a1 	beq.w	8006358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006216:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
 800621e:	2b08      	cmp	r3, #8
 8006220:	d05c      	beq.n	80062dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d141      	bne.n	80062ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fd fb56 	bl	80038e0 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006238:	f7fd fb52 	bl	80038e0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e087      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	4b27      	ldr	r3, [pc, #156]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	019b      	lsls	r3, r3, #6
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	3b01      	subs	r3, #1
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	061b      	lsls	r3, r3, #24
 800627a:	491b      	ldr	r1, [pc, #108]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006286:	f7fd fb2b 	bl	80038e0 <HAL_GetTick>
 800628a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628e:	f7fd fb27 	bl	80038e0 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e05c      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a0:	4b11      	ldr	r3, [pc, #68]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d0f0      	beq.n	800628e <HAL_RCC_OscConfig+0x416>
 80062ac:	e054      	b.n	8006358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HAL_RCC_OscConfig+0x478>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fd fb14 	bl	80038e0 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fd fb10 	bl	80038e0 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e045      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <HAL_RCC_OscConfig+0x470>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x444>
 80062da:	e03d      	b.n	8006358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e038      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40007000 	.word	0x40007000
 80062f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x4ec>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d028      	beq.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d121      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d11a      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006324:	4013      	ands	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800632a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800632c:	4293      	cmp	r3, r2
 800632e:	d111      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	3b01      	subs	r3, #1
 800633e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d107      	bne.n	8006354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800

08006368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0cc      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800637c:	4b68      	ldr	r3, [pc, #416]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d90c      	bls.n	80063a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b65      	ldr	r3, [pc, #404]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b63      	ldr	r3, [pc, #396]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0b8      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063bc:	4b59      	ldr	r3, [pc, #356]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a58      	ldr	r2, [pc, #352]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d4:	4b53      	ldr	r3, [pc, #332]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a52      	ldr	r2, [pc, #328]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e0:	4b50      	ldr	r3, [pc, #320]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	494d      	ldr	r1, [pc, #308]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d044      	beq.n	8006488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b47      	ldr	r3, [pc, #284]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d119      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e07f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d003      	beq.n	8006426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006422:	2b03      	cmp	r3, #3
 8006424:	d107      	bne.n	8006436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006426:	4b3f      	ldr	r3, [pc, #252]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e06f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006436:	4b3b      	ldr	r3, [pc, #236]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e067      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f023 0203 	bic.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	4934      	ldr	r1, [pc, #208]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	4313      	orrs	r3, r2
 8006456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006458:	f7fd fa42 	bl	80038e0 <HAL_GetTick>
 800645c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	e00a      	b.n	8006476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006460:	f7fd fa3e 	bl	80038e0 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	; 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e04f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	4b2b      	ldr	r3, [pc, #172]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 020c 	and.w	r2, r3, #12
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	429a      	cmp	r2, r3
 8006486:	d1eb      	bne.n	8006460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006488:	4b25      	ldr	r3, [pc, #148]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d20c      	bcs.n	80064b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b22      	ldr	r3, [pc, #136]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <HAL_RCC_ClockConfig+0x1b8>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e032      	b.n	8006516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064bc:	4b19      	ldr	r3, [pc, #100]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4916      	ldr	r1, [pc, #88]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064da:	4b12      	ldr	r3, [pc, #72]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	490e      	ldr	r1, [pc, #56]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064ee:	f000 f821 	bl	8006534 <HAL_RCC_GetSysClockFreq>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	490a      	ldr	r1, [pc, #40]	; (8006528 <HAL_RCC_ClockConfig+0x1c0>)
 8006500:	5ccb      	ldrb	r3, [r1, r3]
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	4a09      	ldr	r2, [pc, #36]	; (800652c <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCC_ClockConfig+0x1c8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fd f9a2 	bl	8003858 <HAL_InitTick>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40023c00 	.word	0x40023c00
 8006524:	40023800 	.word	0x40023800
 8006528:	08010ea4 	.word	0x08010ea4
 800652c:	20000008 	.word	0x20000008
 8006530:	2000000c 	.word	0x2000000c

08006534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006538:	b094      	sub	sp, #80	; 0x50
 800653a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	647b      	str	r3, [r7, #68]	; 0x44
 8006540:	2300      	movs	r3, #0
 8006542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006544:	2300      	movs	r3, #0
 8006546:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800654c:	4b79      	ldr	r3, [pc, #484]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f003 030c 	and.w	r3, r3, #12
 8006554:	2b08      	cmp	r3, #8
 8006556:	d00d      	beq.n	8006574 <HAL_RCC_GetSysClockFreq+0x40>
 8006558:	2b08      	cmp	r3, #8
 800655a:	f200 80e1 	bhi.w	8006720 <HAL_RCC_GetSysClockFreq+0x1ec>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x34>
 8006562:	2b04      	cmp	r3, #4
 8006564:	d003      	beq.n	800656e <HAL_RCC_GetSysClockFreq+0x3a>
 8006566:	e0db      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006568:	4b73      	ldr	r3, [pc, #460]	; (8006738 <HAL_RCC_GetSysClockFreq+0x204>)
 800656a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800656c:	e0db      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800656e:	4b73      	ldr	r3, [pc, #460]	; (800673c <HAL_RCC_GetSysClockFreq+0x208>)
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006572:	e0d8      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006574:	4b6f      	ldr	r3, [pc, #444]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800657c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800657e:	4b6d      	ldr	r3, [pc, #436]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d063      	beq.n	8006652 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800658a:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	099b      	lsrs	r3, r3, #6
 8006590:	2200      	movs	r2, #0
 8006592:	63bb      	str	r3, [r7, #56]	; 0x38
 8006594:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659c:	633b      	str	r3, [r7, #48]	; 0x30
 800659e:	2300      	movs	r3, #0
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
 80065a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f04f 0000 	mov.w	r0, #0
 80065ae:	f04f 0100 	mov.w	r1, #0
 80065b2:	0159      	lsls	r1, r3, #5
 80065b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065b8:	0150      	lsls	r0, r2, #5
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4621      	mov	r1, r4
 80065c0:	1a51      	subs	r1, r2, r1
 80065c2:	6139      	str	r1, [r7, #16]
 80065c4:	4629      	mov	r1, r5
 80065c6:	eb63 0301 	sbc.w	r3, r3, r1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d8:	4659      	mov	r1, fp
 80065da:	018b      	lsls	r3, r1, #6
 80065dc:	4651      	mov	r1, sl
 80065de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065e2:	4651      	mov	r1, sl
 80065e4:	018a      	lsls	r2, r1, #6
 80065e6:	4651      	mov	r1, sl
 80065e8:	ebb2 0801 	subs.w	r8, r2, r1
 80065ec:	4659      	mov	r1, fp
 80065ee:	eb63 0901 	sbc.w	r9, r3, r1
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006606:	4690      	mov	r8, r2
 8006608:	4699      	mov	r9, r3
 800660a:	4623      	mov	r3, r4
 800660c:	eb18 0303 	adds.w	r3, r8, r3
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	462b      	mov	r3, r5
 8006614:	eb49 0303 	adc.w	r3, r9, r3
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	f04f 0200 	mov.w	r2, #0
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006626:	4629      	mov	r1, r5
 8006628:	024b      	lsls	r3, r1, #9
 800662a:	4621      	mov	r1, r4
 800662c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006630:	4621      	mov	r1, r4
 8006632:	024a      	lsls	r2, r1, #9
 8006634:	4610      	mov	r0, r2
 8006636:	4619      	mov	r1, r3
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	2200      	movs	r2, #0
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
 800663e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006644:	f7fa fb20 	bl	8000c88 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4613      	mov	r3, r2
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006650:	e058      	b.n	8006704 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006652:	4b38      	ldr	r3, [pc, #224]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	2200      	movs	r2, #0
 800665a:	4618      	mov	r0, r3
 800665c:	4611      	mov	r1, r2
 800665e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006662:	623b      	str	r3, [r7, #32]
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	f04f 0000 	mov.w	r0, #0
 8006674:	f04f 0100 	mov.w	r1, #0
 8006678:	0159      	lsls	r1, r3, #5
 800667a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800667e:	0150      	lsls	r0, r2, #5
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4641      	mov	r1, r8
 8006686:	ebb2 0a01 	subs.w	sl, r2, r1
 800668a:	4649      	mov	r1, r9
 800668c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800669c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066a4:	ebb2 040a 	subs.w	r4, r2, sl
 80066a8:	eb63 050b 	sbc.w	r5, r3, fp
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	00eb      	lsls	r3, r5, #3
 80066b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066ba:	00e2      	lsls	r2, r4, #3
 80066bc:	4614      	mov	r4, r2
 80066be:	461d      	mov	r5, r3
 80066c0:	4643      	mov	r3, r8
 80066c2:	18e3      	adds	r3, r4, r3
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	464b      	mov	r3, r9
 80066c8:	eb45 0303 	adc.w	r3, r5, r3
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066da:	4629      	mov	r1, r5
 80066dc:	028b      	lsls	r3, r1, #10
 80066de:	4621      	mov	r1, r4
 80066e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066e4:	4621      	mov	r1, r4
 80066e6:	028a      	lsls	r2, r1, #10
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ee:	2200      	movs	r2, #0
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	61fa      	str	r2, [r7, #28]
 80066f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066f8:	f7fa fac6 	bl	8000c88 <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4613      	mov	r3, r2
 8006702:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006704:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <HAL_RCC_GetSysClockFreq+0x200>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	3301      	adds	r3, #1
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800671e:	e002      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_RCC_GetSysClockFreq+0x204>)
 8006722:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006728:	4618      	mov	r0, r3
 800672a:	3750      	adds	r7, #80	; 0x50
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800
 8006738:	00f42400 	.word	0x00f42400
 800673c:	007a1200 	.word	0x007a1200

08006740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006744:	4b03      	ldr	r3, [pc, #12]	; (8006754 <HAL_RCC_GetHCLKFreq+0x14>)
 8006746:	681b      	ldr	r3, [r3, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	20000008 	.word	0x20000008

08006758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800675c:	f7ff fff0 	bl	8006740 <HAL_RCC_GetHCLKFreq>
 8006760:	4602      	mov	r2, r0
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	0a9b      	lsrs	r3, r3, #10
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	4903      	ldr	r1, [pc, #12]	; (800677c <HAL_RCC_GetPCLK1Freq+0x24>)
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40023800 	.word	0x40023800
 800677c:	08010eb4 	.word	0x08010eb4

08006780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006784:	f7ff ffdc 	bl	8006740 <HAL_RCC_GetHCLKFreq>
 8006788:	4602      	mov	r2, r0
 800678a:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	0b5b      	lsrs	r3, r3, #13
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	4903      	ldr	r1, [pc, #12]	; (80067a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006796:	5ccb      	ldrb	r3, [r1, r3]
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40023800 	.word	0x40023800
 80067a4:	08010eb4 	.word	0x08010eb4

080067a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e07b      	b.n	80068b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d108      	bne.n	80067d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ca:	d009      	beq.n	80067e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	61da      	str	r2, [r3, #28]
 80067d2:	e005      	b.n	80067e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fc fbec 	bl	8002fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006816:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006864:	ea42 0103 	orr.w	r1, r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	0c1b      	lsrs	r3, r3, #16
 800687e:	f003 0104 	and.w	r1, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	f003 0210 	and.w	r2, r3, #16
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d101      	bne.n	80068dc <HAL_SPI_Transmit+0x22>
 80068d8:	2302      	movs	r3, #2
 80068da:	e126      	b.n	8006b2a <HAL_SPI_Transmit+0x270>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068e4:	f7fc fffc 	bl	80038e0 <HAL_GetTick>
 80068e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
 80068fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068fe:	e10b      	b.n	8006b18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_SPI_Transmit+0x52>
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006910:	e102      	b.n	8006b18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2203      	movs	r2, #3
 8006916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	88fa      	ldrh	r2, [r7, #6]
 8006930:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006958:	d10f      	bne.n	800697a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006978:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d007      	beq.n	8006998 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a0:	d14b      	bne.n	8006a3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_SPI_Transmit+0xf6>
 80069aa:	8afb      	ldrh	r3, [r7, #22]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d13e      	bne.n	8006a2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	1c9a      	adds	r2, r3, #2
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069d4:	e02b      	b.n	8006a2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d112      	bne.n	8006a0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a08:	e011      	b.n	8006a2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0a:	f7fc ff69 	bl	80038e0 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d803      	bhi.n	8006a22 <HAL_SPI_Transmit+0x168>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d102      	bne.n	8006a28 <HAL_SPI_Transmit+0x16e>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d102      	bne.n	8006a2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a2c:	e074      	b.n	8006b18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ce      	bne.n	80069d6 <HAL_SPI_Transmit+0x11c>
 8006a38:	e04c      	b.n	8006ad4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_SPI_Transmit+0x18e>
 8006a42:	8afb      	ldrh	r3, [r7, #22]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d140      	bne.n	8006aca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a6e:	e02c      	b.n	8006aca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d113      	bne.n	8006aa6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	7812      	ldrb	r2, [r2, #0]
 8006a8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006aa4:	e011      	b.n	8006aca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa6:	f7fc ff1b 	bl	80038e0 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d803      	bhi.n	8006abe <HAL_SPI_Transmit+0x204>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d102      	bne.n	8006ac4 <HAL_SPI_Transmit+0x20a>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ac8:	e026      	b.n	8006b18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1cd      	bne.n	8006a70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 fbcb 	bl	8007274 <SPI_EndRxTxTransaction>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006af2:	2300      	movs	r3, #0
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e000      	b.n	8006b18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006b16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b28:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b088      	sub	sp, #32
 8006b36:	af02      	add	r7, sp, #8
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4e:	d112      	bne.n	8006b76 <HAL_SPI_Receive+0x44>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10e      	bne.n	8006b76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2204      	movs	r2, #4
 8006b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f8f1 	bl	8006d54 <HAL_SPI_TransmitReceive>
 8006b72:	4603      	mov	r3, r0
 8006b74:	e0ea      	b.n	8006d4c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_SPI_Receive+0x52>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0e3      	b.n	8006d4c <HAL_SPI_Receive+0x21a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b8c:	f7fc fea8 	bl	80038e0 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d002      	beq.n	8006ba4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ba2:	e0ca      	b.n	8006d3a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SPI_Receive+0x7e>
 8006baa:	88fb      	ldrh	r3, [r7, #6]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006bb4:	e0c1      	b.n	8006d3a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	88fa      	ldrh	r2, [r7, #6]
 8006bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d10f      	bne.n	8006c1e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d162      	bne.n	8006d0a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c44:	e02e      	b.n	8006ca4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d115      	bne.n	8006c80 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f103 020c 	add.w	r2, r3, #12
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c7e:	e011      	b.n	8006ca4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c80:	f7fc fe2e 	bl	80038e0 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d803      	bhi.n	8006c98 <HAL_SPI_Receive+0x166>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d102      	bne.n	8006c9e <HAL_SPI_Receive+0x16c>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ca2:	e04a      	b.n	8006d3a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1cb      	bne.n	8006c46 <HAL_SPI_Receive+0x114>
 8006cae:	e031      	b.n	8006d14 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d113      	bne.n	8006ce6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	b292      	uxth	r2, r2
 8006cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ce4:	e011      	b.n	8006d0a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce6:	f7fc fdfb 	bl	80038e0 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d803      	bhi.n	8006cfe <HAL_SPI_Receive+0x1cc>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d102      	bne.n	8006d04 <HAL_SPI_Receive+0x1d2>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d08:	e017      	b.n	8006d3a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1cd      	bne.n	8006cb0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fa45 	bl	80071a8 <SPI_EndRxTransaction>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
 8006d36:	e000      	b.n	8006d3a <HAL_SPI_Receive+0x208>
  }

error :
 8006d38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d62:	2301      	movs	r3, #1
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d101      	bne.n	8006d7a <HAL_SPI_TransmitReceive+0x26>
 8006d76:	2302      	movs	r3, #2
 8006d78:	e18a      	b.n	8007090 <HAL_SPI_TransmitReceive+0x33c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d82:	f7fc fdad 	bl	80038e0 <HAL_GetTick>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d98:	887b      	ldrh	r3, [r7, #2]
 8006d9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d00f      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x70>
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006daa:	d107      	bne.n	8006dbc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d103      	bne.n	8006dbc <HAL_SPI_TransmitReceive+0x68>
 8006db4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d003      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006dc2:	e15b      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_SPI_TransmitReceive+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_SPI_TransmitReceive+0x82>
 8006dd0:	887b      	ldrh	r3, [r7, #2]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ddc:	e14e      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d003      	beq.n	8006df2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2205      	movs	r2, #5
 8006dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	887a      	ldrh	r2, [r7, #2]
 8006e02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	887a      	ldrh	r2, [r7, #2]
 8006e14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	887a      	ldrh	r2, [r7, #2]
 8006e1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d007      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d178      	bne.n	8006f42 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_SPI_TransmitReceive+0x10a>
 8006e58:	8b7b      	ldrh	r3, [r7, #26]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d166      	bne.n	8006f2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	881a      	ldrh	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e82:	e053      	b.n	8006f2c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d11b      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x176>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <HAL_SPI_TransmitReceive+0x176>
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d113      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	1c9a      	adds	r2, r3, #2
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d119      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x1b8>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d014      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eec:	b292      	uxth	r2, r2
 8006eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	1c9a      	adds	r2, r3, #2
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f0c:	f7fc fce8 	bl	80038e0 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d807      	bhi.n	8006f2c <HAL_SPI_TransmitReceive+0x1d8>
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d003      	beq.n	8006f2c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f2a:	e0a7      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1a6      	bne.n	8006e84 <HAL_SPI_TransmitReceive+0x130>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1a1      	bne.n	8006e84 <HAL_SPI_TransmitReceive+0x130>
 8006f40:	e07c      	b.n	800703c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_TransmitReceive+0x1fc>
 8006f4a:	8b7b      	ldrh	r3, [r7, #26]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d16b      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f76:	e057      	b.n	8007028 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d11c      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x26c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <HAL_SPI_TransmitReceive+0x26c>
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d114      	bne.n	8006fc0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d119      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x2ae>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d014      	beq.n	8007002 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ffe:	2301      	movs	r3, #1
 8007000:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007002:	f7fc fc6d 	bl	80038e0 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700e:	429a      	cmp	r2, r3
 8007010:	d803      	bhi.n	800701a <HAL_SPI_TransmitReceive+0x2c6>
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007018:	d102      	bne.n	8007020 <HAL_SPI_TransmitReceive+0x2cc>
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	2b00      	cmp	r3, #0
 800701e:	d103      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007026:	e029      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1a2      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x224>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d19d      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f917 	bl	8007274 <SPI_EndRxTxTransaction>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2220      	movs	r2, #32
 8007056:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007058:	e010      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10b      	bne.n	800707a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	e000      	b.n	800707c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800707a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800708c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007090:	4618      	mov	r0, r3
 8007092:	3730      	adds	r7, #48	; 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	4613      	mov	r3, r2
 80070a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070a8:	f7fc fc1a 	bl	80038e0 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070b8:	f7fc fc12 	bl	80038e0 <HAL_GetTick>
 80070bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070be:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	015b      	lsls	r3, r3, #5
 80070c4:	0d1b      	lsrs	r3, r3, #20
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ce:	e054      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d050      	beq.n	800717a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070d8:	f7fc fc02 	bl	80038e0 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d902      	bls.n	80070ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d13d      	bne.n	800716a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007106:	d111      	bne.n	800712c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007110:	d004      	beq.n	800711c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800711a:	d107      	bne.n	800712c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800712a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007134:	d10f      	bne.n	8007156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e017      	b.n	800719a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3b01      	subs	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	b2db      	uxtb	r3, r3
 8007190:	461a      	mov	r2, r3
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	429a      	cmp	r2, r3
 8007196:	d19b      	bne.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20000008 	.word	0x20000008

080071a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071bc:	d111      	bne.n	80071e2 <SPI_EndRxTransaction+0x3a>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c6:	d004      	beq.n	80071d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d0:	d107      	bne.n	80071e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ea:	d12a      	bne.n	8007242 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d012      	beq.n	800721c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2180      	movs	r1, #128	; 0x80
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f7ff ff49 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d02d      	beq.n	8007268 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007210:	f043 0220 	orr.w	r2, r3, #32
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007218:	2303      	movs	r3, #3
 800721a:	e026      	b.n	800726a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2200      	movs	r2, #0
 8007224:	2101      	movs	r1, #1
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff ff36 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01a      	beq.n	8007268 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e013      	b.n	800726a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	2101      	movs	r1, #1
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff23 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	f043 0220 	orr.w	r2, r3, #32
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e000      	b.n	800726a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007280:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <SPI_EndRxTxTransaction+0x7c>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <SPI_EndRxTxTransaction+0x80>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	0d5b      	lsrs	r3, r3, #21
 800728c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007290:	fb02 f303 	mul.w	r3, r2, r3
 8007294:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800729e:	d112      	bne.n	80072c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2200      	movs	r2, #0
 80072a8:	2180      	movs	r1, #128	; 0x80
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff fef4 	bl	8007098 <SPI_WaitFlagStateUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d016      	beq.n	80072e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f043 0220 	orr.w	r2, r3, #32
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e00f      	b.n	80072e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d0f2      	beq.n	80072c6 <SPI_EndRxTxTransaction+0x52>
 80072e0:	e000      	b.n	80072e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80072e2:	bf00      	nop
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	20000008 	.word	0x20000008
 80072f4:	165e9f81 	.word	0x165e9f81

080072f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e034      	b.n	8007378 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7fa f9c0 	bl	80016a8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3308      	adds	r3, #8
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f002 f8d4 	bl	80094e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	f002 f91e 	bl	8009584 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6858      	ldr	r0, [r3, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	f002 f953 	bl	8009600 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	6892      	ldr	r2, [r2, #8]
 800736e:	f041 0101 	orr.w	r1, r1, #1
 8007372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e041      	b.n	8007416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fc f840 	bl	800342c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f000 fc7a 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	d001      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e04e      	b.n	80074d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a23      	ldr	r2, [pc, #140]	; (80074e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d022      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007462:	d01d      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1f      	ldr	r2, [pc, #124]	; (80074e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1e      	ldr	r2, [pc, #120]	; (80074ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d013      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a19      	ldr	r2, [pc, #100]	; (80074f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIM_Base_Start_IT+0x80>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <HAL_TIM_Base_Start_IT+0xdc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d111      	bne.n	80074c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b06      	cmp	r3, #6
 80074b0:	d010      	beq.n	80074d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0201 	orr.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	e007      	b.n	80074d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40000400 	.word	0x40000400
 80074ec:	40000800 	.word	0x40000800
 80074f0:	40000c00 	.word	0x40000c00
 80074f4:	40010400 	.word	0x40010400
 80074f8:	40014000 	.word	0x40014000
 80074fc:	40001800 	.word	0x40001800

08007500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e041      	b.n	8007596 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f839 	bl	800759e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3304      	adds	r3, #4
 800753c:	4619      	mov	r1, r3
 800753e:	4610      	mov	r0, r2
 8007540:	f000 fbba 	bl	8007cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <HAL_TIM_PWM_Start+0x24>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	bf14      	ite	ne
 80075d0:	2301      	movne	r3, #1
 80075d2:	2300      	moveq	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	e022      	b.n	800761e <HAL_TIM_PWM_Start+0x6a>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d109      	bne.n	80075f2 <HAL_TIM_PWM_Start+0x3e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	e015      	b.n	800761e <HAL_TIM_PWM_Start+0x6a>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d109      	bne.n	800760c <HAL_TIM_PWM_Start+0x58>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	e008      	b.n	800761e <HAL_TIM_PWM_Start+0x6a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e07c      	b.n	8007720 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0x82>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007634:	e013      	b.n	800765e <HAL_TIM_PWM_Start+0xaa>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b04      	cmp	r3, #4
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0x92>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007644:	e00b      	b.n	800765e <HAL_TIM_PWM_Start+0xaa>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b08      	cmp	r3, #8
 800764a:	d104      	bne.n	8007656 <HAL_TIM_PWM_Start+0xa2>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007654:	e003      	b.n	800765e <HAL_TIM_PWM_Start+0xaa>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2201      	movs	r2, #1
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fe10 	bl	800828c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a2d      	ldr	r2, [pc, #180]	; (8007728 <HAL_TIM_PWM_Start+0x174>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIM_PWM_Start+0xcc>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a2c      	ldr	r2, [pc, #176]	; (800772c <HAL_TIM_PWM_Start+0x178>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d101      	bne.n	8007684 <HAL_TIM_PWM_Start+0xd0>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_TIM_PWM_Start+0xd2>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_TIM_PWM_Start+0x174>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d022      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ac:	d01d      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1f      	ldr	r2, [pc, #124]	; (8007730 <HAL_TIM_PWM_Start+0x17c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <HAL_TIM_PWM_Start+0x180>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1c      	ldr	r2, [pc, #112]	; (8007738 <HAL_TIM_PWM_Start+0x184>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a16      	ldr	r2, [pc, #88]	; (800772c <HAL_TIM_PWM_Start+0x178>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a18      	ldr	r2, [pc, #96]	; (800773c <HAL_TIM_PWM_Start+0x188>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_TIM_PWM_Start+0x136>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a16      	ldr	r2, [pc, #88]	; (8007740 <HAL_TIM_PWM_Start+0x18c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d111      	bne.n	800770e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d010      	beq.n	800771e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770c:	e007      	b.n	800771e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0201 	orr.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	40010000 	.word	0x40010000
 800772c:	40010400 	.word	0x40010400
 8007730:	40000400 	.word	0x40000400
 8007734:	40000800 	.word	0x40000800
 8007738:	40000c00 	.word	0x40000c00
 800773c:	40014000 	.word	0x40014000
 8007740:	40001800 	.word	0x40001800

08007744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b02      	cmp	r3, #2
 8007758:	d122      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b02      	cmp	r3, #2
 8007766:	d11b      	bne.n	80077a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0202 	mvn.w	r2, #2
 8007770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa77 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 800778c:	e005      	b.n	800779a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa69 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fa7a 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d122      	bne.n	80077f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d11b      	bne.n	80077f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0204 	mvn.w	r2, #4
 80077c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa4d 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 80077e0:	e005      	b.n	80077ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa3f 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fa50 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d122      	bne.n	8007848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b08      	cmp	r3, #8
 800780e:	d11b      	bne.n	8007848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0208 	mvn.w	r2, #8
 8007818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2204      	movs	r2, #4
 800781e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa23 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa15 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fa26 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0310 	and.w	r3, r3, #16
 8007852:	2b10      	cmp	r3, #16
 8007854:	d122      	bne.n	800789c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0310 	and.w	r3, r3, #16
 8007860:	2b10      	cmp	r3, #16
 8007862:	d11b      	bne.n	800789c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0210 	mvn.w	r2, #16
 800786c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2208      	movs	r2, #8
 8007872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9f9 	bl	8007c7a <HAL_TIM_IC_CaptureCallback>
 8007888:	e005      	b.n	8007896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9eb 	bl	8007c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9fc 	bl	8007c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d10e      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d107      	bne.n	80078c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f06f 0201 	mvn.w	r2, #1
 80078c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fb fb28 	bl	8002f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d10e      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d107      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd78 	bl	80083e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b40      	cmp	r3, #64	; 0x40
 8007900:	d10e      	bne.n	8007920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b40      	cmp	r3, #64	; 0x40
 800790e:	d107      	bne.n	8007920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9c1 	bl	8007ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b20      	cmp	r3, #32
 800792c:	d10e      	bne.n	800794c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b20      	cmp	r3, #32
 800793a:	d107      	bne.n	800794c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0220 	mvn.w	r2, #32
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fd42 	bl	80083d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800796e:	2302      	movs	r3, #2
 8007970:	e0ae      	b.n	8007ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b0c      	cmp	r3, #12
 800797e:	f200 809f 	bhi.w	8007ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007982:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079bd 	.word	0x080079bd
 800798c:	08007ac1 	.word	0x08007ac1
 8007990:	08007ac1 	.word	0x08007ac1
 8007994:	08007ac1 	.word	0x08007ac1
 8007998:	080079fd 	.word	0x080079fd
 800799c:	08007ac1 	.word	0x08007ac1
 80079a0:	08007ac1 	.word	0x08007ac1
 80079a4:	08007ac1 	.word	0x08007ac1
 80079a8:	08007a3f 	.word	0x08007a3f
 80079ac:	08007ac1 	.word	0x08007ac1
 80079b0:	08007ac1 	.word	0x08007ac1
 80079b4:	08007ac1 	.word	0x08007ac1
 80079b8:	08007a7f 	.word	0x08007a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fa18 	bl	8007df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0208 	orr.w	r2, r2, #8
 80079d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0204 	bic.w	r2, r2, #4
 80079e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6999      	ldr	r1, [r3, #24]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	619a      	str	r2, [r3, #24]
      break;
 80079fa:	e064      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fa68 	bl	8007ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6999      	ldr	r1, [r3, #24]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	021a      	lsls	r2, r3, #8
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	619a      	str	r2, [r3, #24]
      break;
 8007a3c:	e043      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fabd 	bl	8007fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0208 	orr.w	r2, r2, #8
 8007a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0204 	bic.w	r2, r2, #4
 8007a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	61da      	str	r2, [r3, #28]
      break;
 8007a7c:	e023      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68b9      	ldr	r1, [r7, #8]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fb11 	bl	80080ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	69da      	ldr	r2, [r3, #28]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69d9      	ldr	r1, [r3, #28]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	021a      	lsls	r2, r3, #8
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	61da      	str	r2, [r3, #28]
      break;
 8007abe:	e002      	b.n	8007ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_ConfigClockSource+0x1c>
 8007af0:	2302      	movs	r3, #2
 8007af2:	e0b4      	b.n	8007c5e <HAL_TIM_ConfigClockSource+0x186>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2c:	d03e      	beq.n	8007bac <HAL_TIM_ConfigClockSource+0xd4>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	f200 8087 	bhi.w	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3a:	f000 8086 	beq.w	8007c4a <HAL_TIM_ConfigClockSource+0x172>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d87f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b44:	2b70      	cmp	r3, #112	; 0x70
 8007b46:	d01a      	beq.n	8007b7e <HAL_TIM_ConfigClockSource+0xa6>
 8007b48:	2b70      	cmp	r3, #112	; 0x70
 8007b4a:	d87b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b4c:	2b60      	cmp	r3, #96	; 0x60
 8007b4e:	d050      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8007b50:	2b60      	cmp	r3, #96	; 0x60
 8007b52:	d877      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b54:	2b50      	cmp	r3, #80	; 0x50
 8007b56:	d03c      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8007b58:	2b50      	cmp	r3, #80	; 0x50
 8007b5a:	d873      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d058      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x13a>
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d86f      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d064      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b68:	2b30      	cmp	r3, #48	; 0x30
 8007b6a:	d86b      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d060      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d867      	bhi.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d05c      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b78:	2b10      	cmp	r3, #16
 8007b7a:	d05a      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x15a>
 8007b7c:	e062      	b.n	8007c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	6899      	ldr	r1, [r3, #8]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f000 fb5d 	bl	800824c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	609a      	str	r2, [r3, #8]
      break;
 8007baa:	e04f      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f000 fb46 	bl	800824c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bce:	609a      	str	r2, [r3, #8]
      break;
 8007bd0:	e03c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 faba 	bl	8008158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2150      	movs	r1, #80	; 0x50
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb13 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e02c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 fad9 	bl	80081b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2160      	movs	r1, #96	; 0x60
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fb03 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e01c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 fa9a 	bl	8008158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2140      	movs	r1, #64	; 0x40
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 faf3 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e00c      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f000 faea 	bl	8008216 <TIM_ITRx_SetConfig>
      break;
 8007c42:	e003      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
      break;
 8007c48:	e000      	b.n	8007c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007caa:	bf00      	nop
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a40      	ldr	r2, [pc, #256]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d013      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d00f      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a3d      	ldr	r2, [pc, #244]	; (8007dd0 <TIM_Base_SetConfig+0x118>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00b      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	; (8007dd4 <TIM_Base_SetConfig+0x11c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d007      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a3b      	ldr	r2, [pc, #236]	; (8007dd8 <TIM_Base_SetConfig+0x120>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a3a      	ldr	r2, [pc, #232]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d108      	bne.n	8007d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2f      	ldr	r2, [pc, #188]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d02b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d18:	d027      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2c      	ldr	r2, [pc, #176]	; (8007dd0 <TIM_Base_SetConfig+0x118>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d023      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a2b      	ldr	r2, [pc, #172]	; (8007dd4 <TIM_Base_SetConfig+0x11c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d01f      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2a      	ldr	r2, [pc, #168]	; (8007dd8 <TIM_Base_SetConfig+0x120>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d01b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d017      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a28      	ldr	r2, [pc, #160]	; (8007de0 <TIM_Base_SetConfig+0x128>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d013      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a27      	ldr	r2, [pc, #156]	; (8007de4 <TIM_Base_SetConfig+0x12c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00f      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a26      	ldr	r2, [pc, #152]	; (8007de8 <TIM_Base_SetConfig+0x130>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00b      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a25      	ldr	r2, [pc, #148]	; (8007dec <TIM_Base_SetConfig+0x134>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a24      	ldr	r2, [pc, #144]	; (8007df0 <TIM_Base_SetConfig+0x138>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <TIM_Base_SetConfig+0x13c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d108      	bne.n	8007d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <TIM_Base_SetConfig+0x114>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0xf8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a0c      	ldr	r2, [pc, #48]	; (8007ddc <TIM_Base_SetConfig+0x124>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d103      	bne.n	8007db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	691a      	ldr	r2, [r3, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	615a      	str	r2, [r3, #20]
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40010000 	.word	0x40010000
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40000c00 	.word	0x40000c00
 8007ddc:	40010400 	.word	0x40010400
 8007de0:	40014000 	.word	0x40014000
 8007de4:	40014400 	.word	0x40014400
 8007de8:	40014800 	.word	0x40014800
 8007dec:	40001800 	.word	0x40001800
 8007df0:	40001c00 	.word	0x40001c00
 8007df4:	40002000 	.word	0x40002000

08007df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f023 0302 	bic.w	r3, r3, #2
 8007e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a20      	ldr	r2, [pc, #128]	; (8007ed0 <TIM_OC1_SetConfig+0xd8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_OC1_SetConfig+0x64>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a1f      	ldr	r2, [pc, #124]	; (8007ed4 <TIM_OC1_SetConfig+0xdc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d10c      	bne.n	8007e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0308 	bic.w	r3, r3, #8
 8007e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f023 0304 	bic.w	r3, r3, #4
 8007e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a15      	ldr	r2, [pc, #84]	; (8007ed0 <TIM_OC1_SetConfig+0xd8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC1_SetConfig+0x8e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a14      	ldr	r2, [pc, #80]	; (8007ed4 <TIM_OC1_SetConfig+0xdc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d111      	bne.n	8007eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	621a      	str	r2, [r3, #32]
}
 8007ec4:	bf00      	nop
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40010400 	.word	0x40010400

08007ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	f023 0210 	bic.w	r2, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f023 0320 	bic.w	r3, r3, #32
 8007f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <TIM_OC2_SetConfig+0xe4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d003      	beq.n	8007f40 <TIM_OC2_SetConfig+0x68>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <TIM_OC2_SetConfig+0xe8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10d      	bne.n	8007f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <TIM_OC2_SetConfig+0xe4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_OC2_SetConfig+0x94>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <TIM_OC2_SetConfig+0xe8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d113      	bne.n	8007f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40010400 	.word	0x40010400

08007fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800800c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	4313      	orrs	r3, r2
 8008018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a21      	ldr	r2, [pc, #132]	; (80080a4 <TIM_OC3_SetConfig+0xe0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d003      	beq.n	800802a <TIM_OC3_SetConfig+0x66>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a20      	ldr	r2, [pc, #128]	; (80080a8 <TIM_OC3_SetConfig+0xe4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d10d      	bne.n	8008046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a16      	ldr	r2, [pc, #88]	; (80080a4 <TIM_OC3_SetConfig+0xe0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d003      	beq.n	8008056 <TIM_OC3_SetConfig+0x92>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a15      	ldr	r2, [pc, #84]	; (80080a8 <TIM_OC3_SetConfig+0xe4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d113      	bne.n	800807e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800805c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	011b      	lsls	r3, r3, #4
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	621a      	str	r2, [r3, #32]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	40010000 	.word	0x40010000
 80080a8:	40010400 	.word	0x40010400

080080ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	031b      	lsls	r3, r3, #12
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a12      	ldr	r2, [pc, #72]	; (8008150 <TIM_OC4_SetConfig+0xa4>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_OC4_SetConfig+0x68>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a11      	ldr	r2, [pc, #68]	; (8008154 <TIM_OC4_SetConfig+0xa8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d109      	bne.n	8008128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800811a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	019b      	lsls	r3, r3, #6
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	40010000 	.word	0x40010000
 8008154:	40010400 	.word	0x40010400

08008158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f023 0201 	bic.w	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f023 030a 	bic.w	r3, r3, #10
 8008194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b087      	sub	sp, #28
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f023 0210 	bic.w	r2, r3, #16
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	031b      	lsls	r3, r3, #12
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008216:	b480      	push	{r7}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
 800821e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	f043 0307 	orr.w	r3, r3, #7
 8008238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	021a      	lsls	r2, r3, #8
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	431a      	orrs	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4313      	orrs	r3, r2
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	609a      	str	r2, [r3, #8]
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f003 031f 	and.w	r3, r3, #31
 800829e:	2201      	movs	r2, #1
 80082a0:	fa02 f303 	lsl.w	r3, r2, r3
 80082a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1a      	ldr	r2, [r3, #32]
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	401a      	ands	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	fa01 f303 	lsl.w	r3, r1, r3
 80082c4:	431a      	orrs	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	621a      	str	r2, [r3, #32]
}
 80082ca:	bf00      	nop
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d101      	bne.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082ec:	2302      	movs	r3, #2
 80082ee:	e05a      	b.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a21      	ldr	r2, [pc, #132]	; (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d022      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833c:	d01d      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a1d      	ldr	r2, [pc, #116]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d018      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d013      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1a      	ldr	r2, [pc, #104]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d00e      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a18      	ldr	r2, [pc, #96]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d009      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d004      	beq.n	800837a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a15      	ldr	r2, [pc, #84]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d10c      	bne.n	8008394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4313      	orrs	r3, r2
 800838a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00
 80083c4:	40010400 	.word	0x40010400
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40001800 	.word	0x40001800

080083d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e03f      	b.n	800848a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fb f940 	bl	80036a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	; 0x24
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800843a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fddb 	bl	8008ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b08a      	sub	sp, #40	; 0x28
 8008496:	af02      	add	r7, sp, #8
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d17c      	bne.n	80085ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_UART_Transmit+0x2c>
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e075      	b.n	80085ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Transmit+0x3e>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e06e      	b.n	80085ae <HAL_UART_Transmit+0x11c>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2221      	movs	r2, #33	; 0x21
 80084e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084e6:	f7fb f9fb 	bl	80038e0 <HAL_GetTick>
 80084ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	88fa      	ldrh	r2, [r7, #6]
 80084f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008500:	d108      	bne.n	8008514 <HAL_UART_Transmit+0x82>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d104      	bne.n	8008514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e003      	b.n	800851c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008524:	e02a      	b.n	800857c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	2180      	movs	r1, #128	; 0x80
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fb1f 	bl	8008b74 <UART_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e036      	b.n	80085ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10b      	bne.n	800855e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	3302      	adds	r3, #2
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e007      	b.n	800856e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	3301      	adds	r3, #1
 800856c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1cf      	bne.n	8008526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2200      	movs	r2, #0
 800858e:	2140      	movs	r1, #64	; 0x40
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 faef 	bl	8008b74 <UART_WaitOnFlagUntilTimeout>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3720      	adds	r7, #32
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d11d      	bne.n	800860c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_UART_Receive_IT+0x26>
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e016      	b.n	800860e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <HAL_UART_Receive_IT+0x38>
 80085ea:	2302      	movs	r3, #2
 80085ec:	e00f      	b.n	800860e <HAL_UART_Receive_IT+0x58>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	461a      	mov	r2, r3
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fb24 	bl	8008c50 <UART_Start_Receive_IT>
 8008608:	4603      	mov	r3, r0
 800860a:	e000      	b.n	800860e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800860c:	2302      	movs	r3, #2
  }
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b0ba      	sub	sp, #232	; 0xe8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800863e:	2300      	movs	r3, #0
 8008640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fc03 	bl	8008e82 <UART_Receive_IT>
      return;
 800867c:	e256      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800867e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80de 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
 8008688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008698:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80d1 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f043 0201 	orr.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
 80086d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f043 0202 	orr.w	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
 80086f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f043 0204 	orr.w	r2, r3, #4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d011      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	f043 0208 	orr.w	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 81ed 	beq.w	8008b22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
 8008754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fb8e 	bl	8008e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <HAL_UART_IRQHandler+0x17a>
 800878a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d04f      	beq.n	8008832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa96 	bl	8008cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d141      	bne.n	800882a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d9      	bne.n	80087a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d013      	beq.n	8008822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	4a7d      	ldr	r2, [pc, #500]	; (80089f4 <HAL_UART_IRQHandler+0x3dc>)
 8008800:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	4618      	mov	r0, r3
 8008808:	f7fb ff34 	bl	8004674 <HAL_DMA_Abort_IT>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	e00e      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f990 	bl	8008b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e00a      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f98c 	bl	8008b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e006      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f988 	bl	8008b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800883e:	e170      	b.n	8008b22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	bf00      	nop
    return;
 8008842:	e16e      	b.n	8008b22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	2b01      	cmp	r3, #1
 800884a:	f040 814a 	bne.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800884e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8143 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800885c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 813c 	beq.w	8008ae2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886a:	2300      	movs	r3, #0
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888a:	2b40      	cmp	r3, #64	; 0x40
 800888c:	f040 80b4 	bne.w	80089f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800889c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8140 	beq.w	8008b26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ae:	429a      	cmp	r2, r3
 80088b0:	f080 8139 	bcs.w	8008b26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088c6:	f000 8088 	beq.w	80089da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	330c      	adds	r3, #12
 80088d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800890e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d9      	bne.n	80088ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3314      	adds	r3, #20
 8008936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800893a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800893e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800894c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e1      	bne.n	8008916 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3314      	adds	r3, #20
 8008958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3314      	adds	r3, #20
 8008972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800897c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089aa:	f023 0310 	bic.w	r3, r3, #16
 80089ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80089be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e3      	bne.n	8008998 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fb fddd 	bl	8004594 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f8b6 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f0:	e099      	b.n	8008b26 <HAL_UART_IRQHandler+0x50e>
 80089f2:	bf00      	nop
 80089f4:	08008d8b 	.word	0x08008d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 808b 	beq.w	8008b2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8086 	beq.w	8008b2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a42:	647a      	str	r2, [r7, #68]	; 0x44
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e3      	bne.n	8008a1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	623b      	str	r3, [r7, #32]
   return(result);
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3314      	adds	r3, #20
 8008a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac0:	61fa      	str	r2, [r7, #28]
 8008ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e3      	bne.n	8008a9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f83e 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae0:	e023      	b.n	8008b2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d009      	beq.n	8008b02 <HAL_UART_IRQHandler+0x4ea>
 8008aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f959 	bl	8008db2 <UART_Transmit_IT>
    return;
 8008b00:	e014      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00e      	beq.n	8008b2c <HAL_UART_IRQHandler+0x514>
 8008b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d008      	beq.n	8008b2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f999 	bl	8008e52 <UART_EndTransmit_IT>
    return;
 8008b20:	e004      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
    return;
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
      return;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
      return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	37e8      	adds	r7, #232	; 0xe8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b090      	sub	sp, #64	; 0x40
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	4613      	mov	r3, r2
 8008b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b84:	e050      	b.n	8008c28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8c:	d04c      	beq.n	8008c28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b94:	f7fa fea4 	bl	80038e0 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d241      	bcs.n	8008c28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	330c      	adds	r3, #12
 8008baa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	e853 3f00 	ldrex	r3, [r3]
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bc4:	637a      	str	r2, [r7, #52]	; 0x34
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e5      	bne.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3314      	adds	r3, #20
 8008bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	613b      	str	r3, [r7, #16]
   return(result);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf8:	623a      	str	r2, [r7, #32]
 8008bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	69f9      	ldr	r1, [r7, #28]
 8008bfe:	6a3a      	ldr	r2, [r7, #32]
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e5      	bne.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e00f      	b.n	8008c48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4013      	ands	r3, r2
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	bf0c      	ite	eq
 8008c38:	2301      	moveq	r3, #1
 8008c3a:	2300      	movne	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d09f      	beq.n	8008b86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3740      	adds	r7, #64	; 0x40
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2222      	movs	r2, #34	; 0x22
 8008c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	695a      	ldr	r2, [r3, #20]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f042 0201 	orr.w	r2, r2, #1
 8008ca4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0220 	orr.w	r2, r2, #32
 8008cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b095      	sub	sp, #84	; 0x54
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	330c      	adds	r3, #12
 8008cea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cec:	643a      	str	r2, [r7, #64]	; 0x40
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e5      	bne.n	8008ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3314      	adds	r3, #20
 8008d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e5      	bne.n	8008d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d119      	bne.n	8008d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	330c      	adds	r3, #12
 8008d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0310 	bic.w	r3, r3, #16
 8008d52:	647b      	str	r3, [r7, #68]	; 0x44
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	330c      	adds	r3, #12
 8008d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d5c:	61ba      	str	r2, [r7, #24]
 8008d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6979      	ldr	r1, [r7, #20]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d7e:	bf00      	nop
 8008d80:	3754      	adds	r7, #84	; 0x54
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7ff fecf 	bl	8008b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b085      	sub	sp, #20
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b21      	cmp	r3, #33	; 0x21
 8008dc4:	d13e      	bne.n	8008e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	d114      	bne.n	8008dfa <UART_Transmit_IT+0x48>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d110      	bne.n	8008dfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	1c9a      	adds	r2, r3, #2
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]
 8008df8:	e008      	b.n	8008e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	1c59      	adds	r1, r3, #1
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	6211      	str	r1, [r2, #32]
 8008e04:	781a      	ldrb	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10f      	bne.n	8008e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	e000      	b.n	8008e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e44:	2302      	movs	r3, #2
  }
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2220      	movs	r2, #32
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff fe5e 	bl	8008b34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b08c      	sub	sp, #48	; 0x30
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b22      	cmp	r3, #34	; 0x22
 8008e94:	f040 80ab 	bne.w	8008fee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea0:	d117      	bne.n	8008ed2 <UART_Receive_IT+0x50>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d113      	bne.n	8008ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	629a      	str	r2, [r3, #40]	; 0x28
 8008ed0:	e026      	b.n	8008f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee4:	d007      	beq.n	8008ef6 <UART_Receive_IT+0x74>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <UART_Receive_IT+0x82>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	701a      	strb	r2, [r3, #0]
 8008f02:	e008      	b.n	8008f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d15a      	bne.n	8008fea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0220 	bic.w	r2, r2, #32
 8008f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695a      	ldr	r2, [r3, #20]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d135      	bne.n	8008fe0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	330c      	adds	r3, #12
 8008f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f023 0310 	bic.w	r3, r3, #16
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	330c      	adds	r3, #12
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	623a      	str	r2, [r7, #32]
 8008f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	69f9      	ldr	r1, [r7, #28]
 8008fa0:	6a3a      	ldr	r2, [r7, #32]
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e5      	bne.n	8008f7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b10      	cmp	r3, #16
 8008fba:	d10a      	bne.n	8008fd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fdbf 	bl	8008b5c <HAL_UARTEx_RxEventCallback>
 8008fde:	e002      	b.n	8008fe6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7fa fb17 	bl	8003614 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e002      	b.n	8008ff0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3730      	adds	r7, #48	; 0x30
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ffc:	b0c0      	sub	sp, #256	; 0x100
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009014:	68d9      	ldr	r1, [r3, #12]
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	ea40 0301 	orr.w	r3, r0, r1
 8009020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	431a      	orrs	r2, r3
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	431a      	orrs	r2, r3
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	4313      	orrs	r3, r2
 8009040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009050:	f021 010c 	bic.w	r1, r1, #12
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800905e:	430b      	orrs	r3, r1
 8009060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800906e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009072:	6999      	ldr	r1, [r3, #24]
 8009074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	ea40 0301 	orr.w	r3, r0, r1
 800907e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b8f      	ldr	r3, [pc, #572]	; (80092c4 <UART_SetConfig+0x2cc>)
 8009088:	429a      	cmp	r2, r3
 800908a:	d005      	beq.n	8009098 <UART_SetConfig+0xa0>
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b8d      	ldr	r3, [pc, #564]	; (80092c8 <UART_SetConfig+0x2d0>)
 8009094:	429a      	cmp	r2, r3
 8009096:	d104      	bne.n	80090a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009098:	f7fd fb72 	bl	8006780 <HAL_RCC_GetPCLK2Freq>
 800909c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090a0:	e003      	b.n	80090aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090a2:	f7fd fb59 	bl	8006758 <HAL_RCC_GetPCLK1Freq>
 80090a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ae:	69db      	ldr	r3, [r3, #28]
 80090b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b4:	f040 810c 	bne.w	80092d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090ca:	4622      	mov	r2, r4
 80090cc:	462b      	mov	r3, r5
 80090ce:	1891      	adds	r1, r2, r2
 80090d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80090d2:	415b      	adcs	r3, r3
 80090d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090da:	4621      	mov	r1, r4
 80090dc:	eb12 0801 	adds.w	r8, r2, r1
 80090e0:	4629      	mov	r1, r5
 80090e2:	eb43 0901 	adc.w	r9, r3, r1
 80090e6:	f04f 0200 	mov.w	r2, #0
 80090ea:	f04f 0300 	mov.w	r3, #0
 80090ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090fa:	4690      	mov	r8, r2
 80090fc:	4699      	mov	r9, r3
 80090fe:	4623      	mov	r3, r4
 8009100:	eb18 0303 	adds.w	r3, r8, r3
 8009104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009108:	462b      	mov	r3, r5
 800910a:	eb49 0303 	adc.w	r3, r9, r3
 800910e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800911e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009126:	460b      	mov	r3, r1
 8009128:	18db      	adds	r3, r3, r3
 800912a:	653b      	str	r3, [r7, #80]	; 0x50
 800912c:	4613      	mov	r3, r2
 800912e:	eb42 0303 	adc.w	r3, r2, r3
 8009132:	657b      	str	r3, [r7, #84]	; 0x54
 8009134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800913c:	f7f7 fda4 	bl	8000c88 <__aeabi_uldivmod>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4b61      	ldr	r3, [pc, #388]	; (80092cc <UART_SetConfig+0x2d4>)
 8009146:	fba3 2302 	umull	r2, r3, r3, r2
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	011c      	lsls	r4, r3, #4
 800914e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009152:	2200      	movs	r2, #0
 8009154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009158:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800915c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	1891      	adds	r1, r2, r2
 8009166:	64b9      	str	r1, [r7, #72]	; 0x48
 8009168:	415b      	adcs	r3, r3
 800916a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800916c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009170:	4641      	mov	r1, r8
 8009172:	eb12 0a01 	adds.w	sl, r2, r1
 8009176:	4649      	mov	r1, r9
 8009178:	eb43 0b01 	adc.w	fp, r3, r1
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800918c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009190:	4692      	mov	sl, r2
 8009192:	469b      	mov	fp, r3
 8009194:	4643      	mov	r3, r8
 8009196:	eb1a 0303 	adds.w	r3, sl, r3
 800919a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800919e:	464b      	mov	r3, r9
 80091a0:	eb4b 0303 	adc.w	r3, fp, r3
 80091a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091bc:	460b      	mov	r3, r1
 80091be:	18db      	adds	r3, r3, r3
 80091c0:	643b      	str	r3, [r7, #64]	; 0x40
 80091c2:	4613      	mov	r3, r2
 80091c4:	eb42 0303 	adc.w	r3, r2, r3
 80091c8:	647b      	str	r3, [r7, #68]	; 0x44
 80091ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091d2:	f7f7 fd59 	bl	8000c88 <__aeabi_uldivmod>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	4b3b      	ldr	r3, [pc, #236]	; (80092cc <UART_SetConfig+0x2d4>)
 80091de:	fba3 2301 	umull	r2, r3, r3, r1
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	2264      	movs	r2, #100	; 0x64
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	1acb      	subs	r3, r1, r3
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091f2:	4b36      	ldr	r3, [pc, #216]	; (80092cc <UART_SetConfig+0x2d4>)
 80091f4:	fba3 2302 	umull	r2, r3, r3, r2
 80091f8:	095b      	lsrs	r3, r3, #5
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009200:	441c      	add	r4, r3
 8009202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009206:	2200      	movs	r2, #0
 8009208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800920c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009214:	4642      	mov	r2, r8
 8009216:	464b      	mov	r3, r9
 8009218:	1891      	adds	r1, r2, r2
 800921a:	63b9      	str	r1, [r7, #56]	; 0x38
 800921c:	415b      	adcs	r3, r3
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009224:	4641      	mov	r1, r8
 8009226:	1851      	adds	r1, r2, r1
 8009228:	6339      	str	r1, [r7, #48]	; 0x30
 800922a:	4649      	mov	r1, r9
 800922c:	414b      	adcs	r3, r1
 800922e:	637b      	str	r3, [r7, #52]	; 0x34
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800923c:	4659      	mov	r1, fp
 800923e:	00cb      	lsls	r3, r1, #3
 8009240:	4651      	mov	r1, sl
 8009242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009246:	4651      	mov	r1, sl
 8009248:	00ca      	lsls	r2, r1, #3
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	4603      	mov	r3, r0
 8009250:	4642      	mov	r2, r8
 8009252:	189b      	adds	r3, r3, r2
 8009254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009258:	464b      	mov	r3, r9
 800925a:	460a      	mov	r2, r1
 800925c:	eb42 0303 	adc.w	r3, r2, r3
 8009260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009270:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009278:	460b      	mov	r3, r1
 800927a:	18db      	adds	r3, r3, r3
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
 800927e:	4613      	mov	r3, r2
 8009280:	eb42 0303 	adc.w	r3, r2, r3
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800928a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800928e:	f7f7 fcfb 	bl	8000c88 <__aeabi_uldivmod>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <UART_SetConfig+0x2d4>)
 8009298:	fba3 1302 	umull	r1, r3, r3, r2
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	2164      	movs	r1, #100	; 0x64
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	3332      	adds	r3, #50	; 0x32
 80092aa:	4a08      	ldr	r2, [pc, #32]	; (80092cc <UART_SetConfig+0x2d4>)
 80092ac:	fba2 2303 	umull	r2, r3, r2, r3
 80092b0:	095b      	lsrs	r3, r3, #5
 80092b2:	f003 0207 	and.w	r2, r3, #7
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4422      	add	r2, r4
 80092be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092c0:	e106      	b.n	80094d0 <UART_SetConfig+0x4d8>
 80092c2:	bf00      	nop
 80092c4:	40011000 	.word	0x40011000
 80092c8:	40011400 	.word	0x40011400
 80092cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80092de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80092e2:	4642      	mov	r2, r8
 80092e4:	464b      	mov	r3, r9
 80092e6:	1891      	adds	r1, r2, r2
 80092e8:	6239      	str	r1, [r7, #32]
 80092ea:	415b      	adcs	r3, r3
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
 80092ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092f2:	4641      	mov	r1, r8
 80092f4:	1854      	adds	r4, r2, r1
 80092f6:	4649      	mov	r1, r9
 80092f8:	eb43 0501 	adc.w	r5, r3, r1
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	00eb      	lsls	r3, r5, #3
 8009306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800930a:	00e2      	lsls	r2, r4, #3
 800930c:	4614      	mov	r4, r2
 800930e:	461d      	mov	r5, r3
 8009310:	4643      	mov	r3, r8
 8009312:	18e3      	adds	r3, r4, r3
 8009314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009318:	464b      	mov	r3, r9
 800931a:	eb45 0303 	adc.w	r3, r5, r3
 800931e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800932e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009332:	f04f 0200 	mov.w	r2, #0
 8009336:	f04f 0300 	mov.w	r3, #0
 800933a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800933e:	4629      	mov	r1, r5
 8009340:	008b      	lsls	r3, r1, #2
 8009342:	4621      	mov	r1, r4
 8009344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009348:	4621      	mov	r1, r4
 800934a:	008a      	lsls	r2, r1, #2
 800934c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009350:	f7f7 fc9a 	bl	8000c88 <__aeabi_uldivmod>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4b60      	ldr	r3, [pc, #384]	; (80094dc <UART_SetConfig+0x4e4>)
 800935a:	fba3 2302 	umull	r2, r3, r3, r2
 800935e:	095b      	lsrs	r3, r3, #5
 8009360:	011c      	lsls	r4, r3, #4
 8009362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009366:	2200      	movs	r2, #0
 8009368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800936c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	1891      	adds	r1, r2, r2
 800937a:	61b9      	str	r1, [r7, #24]
 800937c:	415b      	adcs	r3, r3
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009384:	4641      	mov	r1, r8
 8009386:	1851      	adds	r1, r2, r1
 8009388:	6139      	str	r1, [r7, #16]
 800938a:	4649      	mov	r1, r9
 800938c:	414b      	adcs	r3, r1
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800939c:	4659      	mov	r1, fp
 800939e:	00cb      	lsls	r3, r1, #3
 80093a0:	4651      	mov	r1, sl
 80093a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093a6:	4651      	mov	r1, sl
 80093a8:	00ca      	lsls	r2, r1, #3
 80093aa:	4610      	mov	r0, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	4642      	mov	r2, r8
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093b8:	464b      	mov	r3, r9
 80093ba:	460a      	mov	r2, r1
 80093bc:	eb42 0303 	adc.w	r3, r2, r3
 80093c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80093ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80093dc:	4649      	mov	r1, r9
 80093de:	008b      	lsls	r3, r1, #2
 80093e0:	4641      	mov	r1, r8
 80093e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093e6:	4641      	mov	r1, r8
 80093e8:	008a      	lsls	r2, r1, #2
 80093ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80093ee:	f7f7 fc4b 	bl	8000c88 <__aeabi_uldivmod>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	4b38      	ldr	r3, [pc, #224]	; (80094dc <UART_SetConfig+0x4e4>)
 80093fa:	fba3 2301 	umull	r2, r3, r3, r1
 80093fe:	095b      	lsrs	r3, r3, #5
 8009400:	2264      	movs	r2, #100	; 0x64
 8009402:	fb02 f303 	mul.w	r3, r2, r3
 8009406:	1acb      	subs	r3, r1, r3
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	3332      	adds	r3, #50	; 0x32
 800940c:	4a33      	ldr	r2, [pc, #204]	; (80094dc <UART_SetConfig+0x4e4>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	095b      	lsrs	r3, r3, #5
 8009414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009418:	441c      	add	r4, r3
 800941a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800941e:	2200      	movs	r2, #0
 8009420:	673b      	str	r3, [r7, #112]	; 0x70
 8009422:	677a      	str	r2, [r7, #116]	; 0x74
 8009424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	1891      	adds	r1, r2, r2
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	415b      	adcs	r3, r3
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009438:	4641      	mov	r1, r8
 800943a:	1851      	adds	r1, r2, r1
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	4649      	mov	r1, r9
 8009440:	414b      	adcs	r3, r1
 8009442:	607b      	str	r3, [r7, #4]
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	f04f 0300 	mov.w	r3, #0
 800944c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009450:	4659      	mov	r1, fp
 8009452:	00cb      	lsls	r3, r1, #3
 8009454:	4651      	mov	r1, sl
 8009456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800945a:	4651      	mov	r1, sl
 800945c:	00ca      	lsls	r2, r1, #3
 800945e:	4610      	mov	r0, r2
 8009460:	4619      	mov	r1, r3
 8009462:	4603      	mov	r3, r0
 8009464:	4642      	mov	r2, r8
 8009466:	189b      	adds	r3, r3, r2
 8009468:	66bb      	str	r3, [r7, #104]	; 0x68
 800946a:	464b      	mov	r3, r9
 800946c:	460a      	mov	r2, r1
 800946e:	eb42 0303 	adc.w	r3, r2, r3
 8009472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	663b      	str	r3, [r7, #96]	; 0x60
 800947e:	667a      	str	r2, [r7, #100]	; 0x64
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800948c:	4649      	mov	r1, r9
 800948e:	008b      	lsls	r3, r1, #2
 8009490:	4641      	mov	r1, r8
 8009492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009496:	4641      	mov	r1, r8
 8009498:	008a      	lsls	r2, r1, #2
 800949a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800949e:	f7f7 fbf3 	bl	8000c88 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <UART_SetConfig+0x4e4>)
 80094a8:	fba3 1302 	umull	r1, r3, r3, r2
 80094ac:	095b      	lsrs	r3, r3, #5
 80094ae:	2164      	movs	r1, #100	; 0x64
 80094b0:	fb01 f303 	mul.w	r3, r1, r3
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	3332      	adds	r3, #50	; 0x32
 80094ba:	4a08      	ldr	r2, [pc, #32]	; (80094dc <UART_SetConfig+0x4e4>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	095b      	lsrs	r3, r3, #5
 80094c2:	f003 020f 	and.w	r2, r3, #15
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4422      	add	r2, r4
 80094ce:	609a      	str	r2, [r3, #8]
}
 80094d0:	bf00      	nop
 80094d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094d6:	46bd      	mov	sp, r7
 80094d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094dc:	51eb851f 	.word	0x51eb851f

080094e0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4b20      	ldr	r3, [pc, #128]	; (8009580 <FSMC_NORSRAM_Init+0xa0>)
 80094fe:	4013      	ands	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800950a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009510:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009516:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800951c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8009522:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8009528:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800952e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009534:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800953a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009540:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009546:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800954c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b08      	cmp	r3, #8
 800955a:	d103      	bne.n	8009564 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009562:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	fff00080 	.word	0xfff00080

08009584 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80095a6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095b2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80095ba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80095c2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095cc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	3b02      	subs	r3, #2
 80095d4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80095d6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095dc:	4313      	orrs	r3, r2
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6979      	ldr	r1, [r7, #20]
 80095ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
	...

08009600 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009618:	d122      	bne.n	8009660 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009622:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4b15      	ldr	r3, [pc, #84]	; (800967c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009628:	4013      	ands	r3, r2
 800962a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009636:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800963e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009646:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800964c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800965e:	e005      	b.n	800966c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	cff00000 	.word	0xcff00000

08009680 <__cvt>:
 8009680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009684:	ec55 4b10 	vmov	r4, r5, d0
 8009688:	2d00      	cmp	r5, #0
 800968a:	460e      	mov	r6, r1
 800968c:	4619      	mov	r1, r3
 800968e:	462b      	mov	r3, r5
 8009690:	bfbb      	ittet	lt
 8009692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009696:	461d      	movlt	r5, r3
 8009698:	2300      	movge	r3, #0
 800969a:	232d      	movlt	r3, #45	; 0x2d
 800969c:	700b      	strb	r3, [r1, #0]
 800969e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096a4:	4691      	mov	r9, r2
 80096a6:	f023 0820 	bic.w	r8, r3, #32
 80096aa:	bfbc      	itt	lt
 80096ac:	4622      	movlt	r2, r4
 80096ae:	4614      	movlt	r4, r2
 80096b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096b4:	d005      	beq.n	80096c2 <__cvt+0x42>
 80096b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096ba:	d100      	bne.n	80096be <__cvt+0x3e>
 80096bc:	3601      	adds	r6, #1
 80096be:	2102      	movs	r1, #2
 80096c0:	e000      	b.n	80096c4 <__cvt+0x44>
 80096c2:	2103      	movs	r1, #3
 80096c4:	ab03      	add	r3, sp, #12
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	ab02      	add	r3, sp, #8
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	ec45 4b10 	vmov	d0, r4, r5
 80096d0:	4653      	mov	r3, sl
 80096d2:	4632      	mov	r2, r6
 80096d4:	f001 f880 	bl	800a7d8 <_dtoa_r>
 80096d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80096dc:	4607      	mov	r7, r0
 80096de:	d102      	bne.n	80096e6 <__cvt+0x66>
 80096e0:	f019 0f01 	tst.w	r9, #1
 80096e4:	d022      	beq.n	800972c <__cvt+0xac>
 80096e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096ea:	eb07 0906 	add.w	r9, r7, r6
 80096ee:	d110      	bne.n	8009712 <__cvt+0x92>
 80096f0:	783b      	ldrb	r3, [r7, #0]
 80096f2:	2b30      	cmp	r3, #48	; 0x30
 80096f4:	d10a      	bne.n	800970c <__cvt+0x8c>
 80096f6:	2200      	movs	r2, #0
 80096f8:	2300      	movs	r3, #0
 80096fa:	4620      	mov	r0, r4
 80096fc:	4629      	mov	r1, r5
 80096fe:	f7f7 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009702:	b918      	cbnz	r0, 800970c <__cvt+0x8c>
 8009704:	f1c6 0601 	rsb	r6, r6, #1
 8009708:	f8ca 6000 	str.w	r6, [sl]
 800970c:	f8da 3000 	ldr.w	r3, [sl]
 8009710:	4499      	add	r9, r3
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f7f7 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800971e:	b108      	cbz	r0, 8009724 <__cvt+0xa4>
 8009720:	f8cd 900c 	str.w	r9, [sp, #12]
 8009724:	2230      	movs	r2, #48	; 0x30
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	454b      	cmp	r3, r9
 800972a:	d307      	bcc.n	800973c <__cvt+0xbc>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009730:	1bdb      	subs	r3, r3, r7
 8009732:	4638      	mov	r0, r7
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	b004      	add	sp, #16
 8009738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800973c:	1c59      	adds	r1, r3, #1
 800973e:	9103      	str	r1, [sp, #12]
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e7f0      	b.n	8009726 <__cvt+0xa6>

08009744 <__exponent>:
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009746:	4603      	mov	r3, r0
 8009748:	2900      	cmp	r1, #0
 800974a:	bfb8      	it	lt
 800974c:	4249      	neglt	r1, r1
 800974e:	f803 2b02 	strb.w	r2, [r3], #2
 8009752:	bfb4      	ite	lt
 8009754:	222d      	movlt	r2, #45	; 0x2d
 8009756:	222b      	movge	r2, #43	; 0x2b
 8009758:	2909      	cmp	r1, #9
 800975a:	7042      	strb	r2, [r0, #1]
 800975c:	dd2a      	ble.n	80097b4 <__exponent+0x70>
 800975e:	f10d 0207 	add.w	r2, sp, #7
 8009762:	4617      	mov	r7, r2
 8009764:	260a      	movs	r6, #10
 8009766:	4694      	mov	ip, r2
 8009768:	fb91 f5f6 	sdiv	r5, r1, r6
 800976c:	fb06 1415 	mls	r4, r6, r5, r1
 8009770:	3430      	adds	r4, #48	; 0x30
 8009772:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009776:	460c      	mov	r4, r1
 8009778:	2c63      	cmp	r4, #99	; 0x63
 800977a:	f102 32ff 	add.w	r2, r2, #4294967295
 800977e:	4629      	mov	r1, r5
 8009780:	dcf1      	bgt.n	8009766 <__exponent+0x22>
 8009782:	3130      	adds	r1, #48	; 0x30
 8009784:	f1ac 0402 	sub.w	r4, ip, #2
 8009788:	f802 1c01 	strb.w	r1, [r2, #-1]
 800978c:	1c41      	adds	r1, r0, #1
 800978e:	4622      	mov	r2, r4
 8009790:	42ba      	cmp	r2, r7
 8009792:	d30a      	bcc.n	80097aa <__exponent+0x66>
 8009794:	f10d 0209 	add.w	r2, sp, #9
 8009798:	eba2 020c 	sub.w	r2, r2, ip
 800979c:	42bc      	cmp	r4, r7
 800979e:	bf88      	it	hi
 80097a0:	2200      	movhi	r2, #0
 80097a2:	4413      	add	r3, r2
 80097a4:	1a18      	subs	r0, r3, r0
 80097a6:	b003      	add	sp, #12
 80097a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80097ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80097b2:	e7ed      	b.n	8009790 <__exponent+0x4c>
 80097b4:	2330      	movs	r3, #48	; 0x30
 80097b6:	3130      	adds	r1, #48	; 0x30
 80097b8:	7083      	strb	r3, [r0, #2]
 80097ba:	70c1      	strb	r1, [r0, #3]
 80097bc:	1d03      	adds	r3, r0, #4
 80097be:	e7f1      	b.n	80097a4 <__exponent+0x60>

080097c0 <_printf_float>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	ed2d 8b02 	vpush	{d8}
 80097c8:	b08d      	sub	sp, #52	; 0x34
 80097ca:	460c      	mov	r4, r1
 80097cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097d0:	4616      	mov	r6, r2
 80097d2:	461f      	mov	r7, r3
 80097d4:	4605      	mov	r5, r0
 80097d6:	f000 fef7 	bl	800a5c8 <_localeconv_r>
 80097da:	f8d0 a000 	ldr.w	sl, [r0]
 80097de:	4650      	mov	r0, sl
 80097e0:	f7f6 fd46 	bl	8000270 <strlen>
 80097e4:	2300      	movs	r3, #0
 80097e6:	930a      	str	r3, [sp, #40]	; 0x28
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	f8d8 3000 	ldr.w	r3, [r8]
 80097f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80097f4:	3307      	adds	r3, #7
 80097f6:	f023 0307 	bic.w	r3, r3, #7
 80097fa:	f103 0208 	add.w	r2, r3, #8
 80097fe:	f8c8 2000 	str.w	r2, [r8]
 8009802:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009810:	ee08 0a10 	vmov	s16, r0
 8009814:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800981c:	4b9e      	ldr	r3, [pc, #632]	; (8009a98 <_printf_float+0x2d8>)
 800981e:	f04f 32ff 	mov.w	r2, #4294967295
 8009822:	f7f7 f983 	bl	8000b2c <__aeabi_dcmpun>
 8009826:	bb88      	cbnz	r0, 800988c <_printf_float+0xcc>
 8009828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800982c:	4b9a      	ldr	r3, [pc, #616]	; (8009a98 <_printf_float+0x2d8>)
 800982e:	f04f 32ff 	mov.w	r2, #4294967295
 8009832:	f7f7 f95d 	bl	8000af0 <__aeabi_dcmple>
 8009836:	bb48      	cbnz	r0, 800988c <_printf_float+0xcc>
 8009838:	2200      	movs	r2, #0
 800983a:	2300      	movs	r3, #0
 800983c:	4640      	mov	r0, r8
 800983e:	4649      	mov	r1, r9
 8009840:	f7f7 f94c 	bl	8000adc <__aeabi_dcmplt>
 8009844:	b110      	cbz	r0, 800984c <_printf_float+0x8c>
 8009846:	232d      	movs	r3, #45	; 0x2d
 8009848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800984c:	4a93      	ldr	r2, [pc, #588]	; (8009a9c <_printf_float+0x2dc>)
 800984e:	4b94      	ldr	r3, [pc, #592]	; (8009aa0 <_printf_float+0x2e0>)
 8009850:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009854:	bf94      	ite	ls
 8009856:	4690      	movls	r8, r2
 8009858:	4698      	movhi	r8, r3
 800985a:	2303      	movs	r3, #3
 800985c:	6123      	str	r3, [r4, #16]
 800985e:	9b05      	ldr	r3, [sp, #20]
 8009860:	f023 0304 	bic.w	r3, r3, #4
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	f04f 0900 	mov.w	r9, #0
 800986a:	9700      	str	r7, [sp, #0]
 800986c:	4633      	mov	r3, r6
 800986e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f9da 	bl	8009c2c <_printf_common>
 8009878:	3001      	adds	r0, #1
 800987a:	f040 8090 	bne.w	800999e <_printf_float+0x1de>
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	b00d      	add	sp, #52	; 0x34
 8009884:	ecbd 8b02 	vpop	{d8}
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	4642      	mov	r2, r8
 800988e:	464b      	mov	r3, r9
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f7 f94a 	bl	8000b2c <__aeabi_dcmpun>
 8009898:	b140      	cbz	r0, 80098ac <_printf_float+0xec>
 800989a:	464b      	mov	r3, r9
 800989c:	2b00      	cmp	r3, #0
 800989e:	bfbc      	itt	lt
 80098a0:	232d      	movlt	r3, #45	; 0x2d
 80098a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098a6:	4a7f      	ldr	r2, [pc, #508]	; (8009aa4 <_printf_float+0x2e4>)
 80098a8:	4b7f      	ldr	r3, [pc, #508]	; (8009aa8 <_printf_float+0x2e8>)
 80098aa:	e7d1      	b.n	8009850 <_printf_float+0x90>
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098b2:	9206      	str	r2, [sp, #24]
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	d13f      	bne.n	8009938 <_printf_float+0x178>
 80098b8:	2306      	movs	r3, #6
 80098ba:	6063      	str	r3, [r4, #4]
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	6861      	ldr	r1, [r4, #4]
 80098c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098c4:	2300      	movs	r3, #0
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	ab0a      	add	r3, sp, #40	; 0x28
 80098ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098ce:	ab09      	add	r3, sp, #36	; 0x24
 80098d0:	ec49 8b10 	vmov	d0, r8, r9
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	6022      	str	r2, [r4, #0]
 80098d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff fecf 	bl	8009680 <__cvt>
 80098e2:	9b06      	ldr	r3, [sp, #24]
 80098e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098e6:	2b47      	cmp	r3, #71	; 0x47
 80098e8:	4680      	mov	r8, r0
 80098ea:	d108      	bne.n	80098fe <_printf_float+0x13e>
 80098ec:	1cc8      	adds	r0, r1, #3
 80098ee:	db02      	blt.n	80098f6 <_printf_float+0x136>
 80098f0:	6863      	ldr	r3, [r4, #4]
 80098f2:	4299      	cmp	r1, r3
 80098f4:	dd41      	ble.n	800997a <_printf_float+0x1ba>
 80098f6:	f1ab 0302 	sub.w	r3, fp, #2
 80098fa:	fa5f fb83 	uxtb.w	fp, r3
 80098fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009902:	d820      	bhi.n	8009946 <_printf_float+0x186>
 8009904:	3901      	subs	r1, #1
 8009906:	465a      	mov	r2, fp
 8009908:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800990c:	9109      	str	r1, [sp, #36]	; 0x24
 800990e:	f7ff ff19 	bl	8009744 <__exponent>
 8009912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009914:	1813      	adds	r3, r2, r0
 8009916:	2a01      	cmp	r2, #1
 8009918:	4681      	mov	r9, r0
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	dc02      	bgt.n	8009924 <_printf_float+0x164>
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	07d2      	lsls	r2, r2, #31
 8009922:	d501      	bpl.n	8009928 <_printf_float+0x168>
 8009924:	3301      	adds	r3, #1
 8009926:	6123      	str	r3, [r4, #16]
 8009928:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800992c:	2b00      	cmp	r3, #0
 800992e:	d09c      	beq.n	800986a <_printf_float+0xaa>
 8009930:	232d      	movs	r3, #45	; 0x2d
 8009932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009936:	e798      	b.n	800986a <_printf_float+0xaa>
 8009938:	9a06      	ldr	r2, [sp, #24]
 800993a:	2a47      	cmp	r2, #71	; 0x47
 800993c:	d1be      	bne.n	80098bc <_printf_float+0xfc>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1bc      	bne.n	80098bc <_printf_float+0xfc>
 8009942:	2301      	movs	r3, #1
 8009944:	e7b9      	b.n	80098ba <_printf_float+0xfa>
 8009946:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800994a:	d118      	bne.n	800997e <_printf_float+0x1be>
 800994c:	2900      	cmp	r1, #0
 800994e:	6863      	ldr	r3, [r4, #4]
 8009950:	dd0b      	ble.n	800996a <_printf_float+0x1aa>
 8009952:	6121      	str	r1, [r4, #16]
 8009954:	b913      	cbnz	r3, 800995c <_printf_float+0x19c>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	07d0      	lsls	r0, r2, #31
 800995a:	d502      	bpl.n	8009962 <_printf_float+0x1a2>
 800995c:	3301      	adds	r3, #1
 800995e:	440b      	add	r3, r1
 8009960:	6123      	str	r3, [r4, #16]
 8009962:	65a1      	str	r1, [r4, #88]	; 0x58
 8009964:	f04f 0900 	mov.w	r9, #0
 8009968:	e7de      	b.n	8009928 <_printf_float+0x168>
 800996a:	b913      	cbnz	r3, 8009972 <_printf_float+0x1b2>
 800996c:	6822      	ldr	r2, [r4, #0]
 800996e:	07d2      	lsls	r2, r2, #31
 8009970:	d501      	bpl.n	8009976 <_printf_float+0x1b6>
 8009972:	3302      	adds	r3, #2
 8009974:	e7f4      	b.n	8009960 <_printf_float+0x1a0>
 8009976:	2301      	movs	r3, #1
 8009978:	e7f2      	b.n	8009960 <_printf_float+0x1a0>
 800997a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009980:	4299      	cmp	r1, r3
 8009982:	db05      	blt.n	8009990 <_printf_float+0x1d0>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	6121      	str	r1, [r4, #16]
 8009988:	07d8      	lsls	r0, r3, #31
 800998a:	d5ea      	bpl.n	8009962 <_printf_float+0x1a2>
 800998c:	1c4b      	adds	r3, r1, #1
 800998e:	e7e7      	b.n	8009960 <_printf_float+0x1a0>
 8009990:	2900      	cmp	r1, #0
 8009992:	bfd4      	ite	le
 8009994:	f1c1 0202 	rsble	r2, r1, #2
 8009998:	2201      	movgt	r2, #1
 800999a:	4413      	add	r3, r2
 800999c:	e7e0      	b.n	8009960 <_printf_float+0x1a0>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	055a      	lsls	r2, r3, #21
 80099a2:	d407      	bmi.n	80099b4 <_printf_float+0x1f4>
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	4642      	mov	r2, r8
 80099a8:	4631      	mov	r1, r6
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	d12c      	bne.n	8009a0c <_printf_float+0x24c>
 80099b2:	e764      	b.n	800987e <_printf_float+0xbe>
 80099b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099b8:	f240 80e0 	bls.w	8009b7c <_printf_float+0x3bc>
 80099bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099c0:	2200      	movs	r2, #0
 80099c2:	2300      	movs	r3, #0
 80099c4:	f7f7 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d034      	beq.n	8009a36 <_printf_float+0x276>
 80099cc:	4a37      	ldr	r2, [pc, #220]	; (8009aac <_printf_float+0x2ec>)
 80099ce:	2301      	movs	r3, #1
 80099d0:	4631      	mov	r1, r6
 80099d2:	4628      	mov	r0, r5
 80099d4:	47b8      	blx	r7
 80099d6:	3001      	adds	r0, #1
 80099d8:	f43f af51 	beq.w	800987e <_printf_float+0xbe>
 80099dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e0:	429a      	cmp	r2, r3
 80099e2:	db02      	blt.n	80099ea <_printf_float+0x22a>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	07d8      	lsls	r0, r3, #31
 80099e8:	d510      	bpl.n	8009a0c <_printf_float+0x24c>
 80099ea:	ee18 3a10 	vmov	r3, s16
 80099ee:	4652      	mov	r2, sl
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af41 	beq.w	800987e <_printf_float+0xbe>
 80099fc:	f04f 0800 	mov.w	r8, #0
 8009a00:	f104 091a 	add.w	r9, r4, #26
 8009a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a06:	3b01      	subs	r3, #1
 8009a08:	4543      	cmp	r3, r8
 8009a0a:	dc09      	bgt.n	8009a20 <_printf_float+0x260>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	f100 8107 	bmi.w	8009c22 <_printf_float+0x462>
 8009a14:	68e0      	ldr	r0, [r4, #12]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	bfb8      	it	lt
 8009a1c:	4618      	movlt	r0, r3
 8009a1e:	e730      	b.n	8009882 <_printf_float+0xc2>
 8009a20:	2301      	movs	r3, #1
 8009a22:	464a      	mov	r2, r9
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f af27 	beq.w	800987e <_printf_float+0xbe>
 8009a30:	f108 0801 	add.w	r8, r8, #1
 8009a34:	e7e6      	b.n	8009a04 <_printf_float+0x244>
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc39      	bgt.n	8009ab0 <_printf_float+0x2f0>
 8009a3c:	4a1b      	ldr	r2, [pc, #108]	; (8009aac <_printf_float+0x2ec>)
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f af19 	beq.w	800987e <_printf_float+0xbe>
 8009a4c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a50:	4313      	orrs	r3, r2
 8009a52:	d102      	bne.n	8009a5a <_printf_float+0x29a>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	07d9      	lsls	r1, r3, #31
 8009a58:	d5d8      	bpl.n	8009a0c <_printf_float+0x24c>
 8009a5a:	ee18 3a10 	vmov	r3, s16
 8009a5e:	4652      	mov	r2, sl
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af09 	beq.w	800987e <_printf_float+0xbe>
 8009a6c:	f04f 0900 	mov.w	r9, #0
 8009a70:	f104 0a1a 	add.w	sl, r4, #26
 8009a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a76:	425b      	negs	r3, r3
 8009a78:	454b      	cmp	r3, r9
 8009a7a:	dc01      	bgt.n	8009a80 <_printf_float+0x2c0>
 8009a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a7e:	e792      	b.n	80099a6 <_printf_float+0x1e6>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4652      	mov	r2, sl
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f aef7 	beq.w	800987e <_printf_float+0xbe>
 8009a90:	f109 0901 	add.w	r9, r9, #1
 8009a94:	e7ee      	b.n	8009a74 <_printf_float+0x2b4>
 8009a96:	bf00      	nop
 8009a98:	7fefffff 	.word	0x7fefffff
 8009a9c:	08010ec4 	.word	0x08010ec4
 8009aa0:	08010ec8 	.word	0x08010ec8
 8009aa4:	08010ecc 	.word	0x08010ecc
 8009aa8:	08010ed0 	.word	0x08010ed0
 8009aac:	08010ed4 	.word	0x08010ed4
 8009ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	bfa8      	it	ge
 8009ab8:	461a      	movge	r2, r3
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	4691      	mov	r9, r2
 8009abe:	dc37      	bgt.n	8009b30 <_printf_float+0x370>
 8009ac0:	f04f 0b00 	mov.w	fp, #0
 8009ac4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ac8:	f104 021a 	add.w	r2, r4, #26
 8009acc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ace:	9305      	str	r3, [sp, #20]
 8009ad0:	eba3 0309 	sub.w	r3, r3, r9
 8009ad4:	455b      	cmp	r3, fp
 8009ad6:	dc33      	bgt.n	8009b40 <_printf_float+0x380>
 8009ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009adc:	429a      	cmp	r2, r3
 8009ade:	db3b      	blt.n	8009b58 <_printf_float+0x398>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07da      	lsls	r2, r3, #31
 8009ae4:	d438      	bmi.n	8009b58 <_printf_float+0x398>
 8009ae6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009aea:	eba2 0903 	sub.w	r9, r2, r3
 8009aee:	9b05      	ldr	r3, [sp, #20]
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	4591      	cmp	r9, r2
 8009af4:	bfa8      	it	ge
 8009af6:	4691      	movge	r9, r2
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	dc35      	bgt.n	8009b6a <_printf_float+0x3aa>
 8009afe:	f04f 0800 	mov.w	r8, #0
 8009b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b06:	f104 0a1a 	add.w	sl, r4, #26
 8009b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	eba3 0309 	sub.w	r3, r3, r9
 8009b14:	4543      	cmp	r3, r8
 8009b16:	f77f af79 	ble.w	8009a0c <_printf_float+0x24c>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f aeaa 	beq.w	800987e <_printf_float+0xbe>
 8009b2a:	f108 0801 	add.w	r8, r8, #1
 8009b2e:	e7ec      	b.n	8009b0a <_printf_float+0x34a>
 8009b30:	4613      	mov	r3, r2
 8009b32:	4631      	mov	r1, r6
 8009b34:	4642      	mov	r2, r8
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d1c0      	bne.n	8009ac0 <_printf_float+0x300>
 8009b3e:	e69e      	b.n	800987e <_printf_float+0xbe>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4631      	mov	r1, r6
 8009b44:	4628      	mov	r0, r5
 8009b46:	9205      	str	r2, [sp, #20]
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f ae97 	beq.w	800987e <_printf_float+0xbe>
 8009b50:	9a05      	ldr	r2, [sp, #20]
 8009b52:	f10b 0b01 	add.w	fp, fp, #1
 8009b56:	e7b9      	b.n	8009acc <_printf_float+0x30c>
 8009b58:	ee18 3a10 	vmov	r3, s16
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4628      	mov	r0, r5
 8009b62:	47b8      	blx	r7
 8009b64:	3001      	adds	r0, #1
 8009b66:	d1be      	bne.n	8009ae6 <_printf_float+0x326>
 8009b68:	e689      	b.n	800987e <_printf_float+0xbe>
 8009b6a:	9a05      	ldr	r2, [sp, #20]
 8009b6c:	464b      	mov	r3, r9
 8009b6e:	4442      	add	r2, r8
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	d1c1      	bne.n	8009afe <_printf_float+0x33e>
 8009b7a:	e680      	b.n	800987e <_printf_float+0xbe>
 8009b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7e:	2a01      	cmp	r2, #1
 8009b80:	dc01      	bgt.n	8009b86 <_printf_float+0x3c6>
 8009b82:	07db      	lsls	r3, r3, #31
 8009b84:	d53a      	bpl.n	8009bfc <_printf_float+0x43c>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4642      	mov	r2, r8
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f ae74 	beq.w	800987e <_printf_float+0xbe>
 8009b96:	ee18 3a10 	vmov	r3, s16
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f ae6b 	beq.w	800987e <_printf_float+0xbe>
 8009ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bac:	2200      	movs	r2, #0
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009bb4:	f7f6 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb8:	b9d8      	cbnz	r0, 8009bf2 <_printf_float+0x432>
 8009bba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bbe:	f108 0201 	add.w	r2, r8, #1
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	47b8      	blx	r7
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d10e      	bne.n	8009bea <_printf_float+0x42a>
 8009bcc:	e657      	b.n	800987e <_printf_float+0xbe>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b8      	blx	r7
 8009bd8:	3001      	adds	r0, #1
 8009bda:	f43f ae50 	beq.w	800987e <_printf_float+0xbe>
 8009bde:	f108 0801 	add.w	r8, r8, #1
 8009be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be4:	3b01      	subs	r3, #1
 8009be6:	4543      	cmp	r3, r8
 8009be8:	dcf1      	bgt.n	8009bce <_printf_float+0x40e>
 8009bea:	464b      	mov	r3, r9
 8009bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bf0:	e6da      	b.n	80099a8 <_printf_float+0x1e8>
 8009bf2:	f04f 0800 	mov.w	r8, #0
 8009bf6:	f104 0a1a 	add.w	sl, r4, #26
 8009bfa:	e7f2      	b.n	8009be2 <_printf_float+0x422>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4642      	mov	r2, r8
 8009c00:	e7df      	b.n	8009bc2 <_printf_float+0x402>
 8009c02:	2301      	movs	r3, #1
 8009c04:	464a      	mov	r2, r9
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f ae36 	beq.w	800987e <_printf_float+0xbe>
 8009c12:	f108 0801 	add.w	r8, r8, #1
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c1a:	1a5b      	subs	r3, r3, r1
 8009c1c:	4543      	cmp	r3, r8
 8009c1e:	dcf0      	bgt.n	8009c02 <_printf_float+0x442>
 8009c20:	e6f8      	b.n	8009a14 <_printf_float+0x254>
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	f104 0919 	add.w	r9, r4, #25
 8009c2a:	e7f4      	b.n	8009c16 <_printf_float+0x456>

08009c2c <_printf_common>:
 8009c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	4616      	mov	r6, r2
 8009c32:	4699      	mov	r9, r3
 8009c34:	688a      	ldr	r2, [r1, #8]
 8009c36:	690b      	ldr	r3, [r1, #16]
 8009c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	bfb8      	it	lt
 8009c40:	4613      	movlt	r3, r2
 8009c42:	6033      	str	r3, [r6, #0]
 8009c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c48:	4607      	mov	r7, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	b10a      	cbz	r2, 8009c52 <_printf_common+0x26>
 8009c4e:	3301      	adds	r3, #1
 8009c50:	6033      	str	r3, [r6, #0]
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	0699      	lsls	r1, r3, #26
 8009c56:	bf42      	ittt	mi
 8009c58:	6833      	ldrmi	r3, [r6, #0]
 8009c5a:	3302      	addmi	r3, #2
 8009c5c:	6033      	strmi	r3, [r6, #0]
 8009c5e:	6825      	ldr	r5, [r4, #0]
 8009c60:	f015 0506 	ands.w	r5, r5, #6
 8009c64:	d106      	bne.n	8009c74 <_printf_common+0x48>
 8009c66:	f104 0a19 	add.w	sl, r4, #25
 8009c6a:	68e3      	ldr	r3, [r4, #12]
 8009c6c:	6832      	ldr	r2, [r6, #0]
 8009c6e:	1a9b      	subs	r3, r3, r2
 8009c70:	42ab      	cmp	r3, r5
 8009c72:	dc26      	bgt.n	8009cc2 <_printf_common+0x96>
 8009c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c78:	1e13      	subs	r3, r2, #0
 8009c7a:	6822      	ldr	r2, [r4, #0]
 8009c7c:	bf18      	it	ne
 8009c7e:	2301      	movne	r3, #1
 8009c80:	0692      	lsls	r2, r2, #26
 8009c82:	d42b      	bmi.n	8009cdc <_printf_common+0xb0>
 8009c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	47c0      	blx	r8
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d01e      	beq.n	8009cd0 <_printf_common+0xa4>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	6922      	ldr	r2, [r4, #16]
 8009c96:	f003 0306 	and.w	r3, r3, #6
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	bf02      	ittt	eq
 8009c9e:	68e5      	ldreq	r5, [r4, #12]
 8009ca0:	6833      	ldreq	r3, [r6, #0]
 8009ca2:	1aed      	subeq	r5, r5, r3
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	bf0c      	ite	eq
 8009ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cac:	2500      	movne	r5, #0
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	bfc4      	itt	gt
 8009cb2:	1a9b      	subgt	r3, r3, r2
 8009cb4:	18ed      	addgt	r5, r5, r3
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	341a      	adds	r4, #26
 8009cba:	42b5      	cmp	r5, r6
 8009cbc:	d11a      	bne.n	8009cf4 <_printf_common+0xc8>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e008      	b.n	8009cd4 <_printf_common+0xa8>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	4638      	mov	r0, r7
 8009cca:	47c0      	blx	r8
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d103      	bne.n	8009cd8 <_printf_common+0xac>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd8:	3501      	adds	r5, #1
 8009cda:	e7c6      	b.n	8009c6a <_printf_common+0x3e>
 8009cdc:	18e1      	adds	r1, r4, r3
 8009cde:	1c5a      	adds	r2, r3, #1
 8009ce0:	2030      	movs	r0, #48	; 0x30
 8009ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ce6:	4422      	add	r2, r4
 8009ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	e7c7      	b.n	8009c84 <_printf_common+0x58>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	47c0      	blx	r8
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d0e6      	beq.n	8009cd0 <_printf_common+0xa4>
 8009d02:	3601      	adds	r6, #1
 8009d04:	e7d9      	b.n	8009cba <_printf_common+0x8e>
	...

08009d08 <_printf_i>:
 8009d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	7e0f      	ldrb	r7, [r1, #24]
 8009d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d10:	2f78      	cmp	r7, #120	; 0x78
 8009d12:	4691      	mov	r9, r2
 8009d14:	4680      	mov	r8, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	469a      	mov	sl, r3
 8009d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d1e:	d807      	bhi.n	8009d30 <_printf_i+0x28>
 8009d20:	2f62      	cmp	r7, #98	; 0x62
 8009d22:	d80a      	bhi.n	8009d3a <_printf_i+0x32>
 8009d24:	2f00      	cmp	r7, #0
 8009d26:	f000 80d4 	beq.w	8009ed2 <_printf_i+0x1ca>
 8009d2a:	2f58      	cmp	r7, #88	; 0x58
 8009d2c:	f000 80c0 	beq.w	8009eb0 <_printf_i+0x1a8>
 8009d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d38:	e03a      	b.n	8009db0 <_printf_i+0xa8>
 8009d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d3e:	2b15      	cmp	r3, #21
 8009d40:	d8f6      	bhi.n	8009d30 <_printf_i+0x28>
 8009d42:	a101      	add	r1, pc, #4	; (adr r1, 8009d48 <_printf_i+0x40>)
 8009d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d48:	08009da1 	.word	0x08009da1
 8009d4c:	08009db5 	.word	0x08009db5
 8009d50:	08009d31 	.word	0x08009d31
 8009d54:	08009d31 	.word	0x08009d31
 8009d58:	08009d31 	.word	0x08009d31
 8009d5c:	08009d31 	.word	0x08009d31
 8009d60:	08009db5 	.word	0x08009db5
 8009d64:	08009d31 	.word	0x08009d31
 8009d68:	08009d31 	.word	0x08009d31
 8009d6c:	08009d31 	.word	0x08009d31
 8009d70:	08009d31 	.word	0x08009d31
 8009d74:	08009eb9 	.word	0x08009eb9
 8009d78:	08009de1 	.word	0x08009de1
 8009d7c:	08009e73 	.word	0x08009e73
 8009d80:	08009d31 	.word	0x08009d31
 8009d84:	08009d31 	.word	0x08009d31
 8009d88:	08009edb 	.word	0x08009edb
 8009d8c:	08009d31 	.word	0x08009d31
 8009d90:	08009de1 	.word	0x08009de1
 8009d94:	08009d31 	.word	0x08009d31
 8009d98:	08009d31 	.word	0x08009d31
 8009d9c:	08009e7b 	.word	0x08009e7b
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	1d1a      	adds	r2, r3, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	602a      	str	r2, [r5, #0]
 8009da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009db0:	2301      	movs	r3, #1
 8009db2:	e09f      	b.n	8009ef4 <_printf_i+0x1ec>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	682b      	ldr	r3, [r5, #0]
 8009db8:	0607      	lsls	r7, r0, #24
 8009dba:	f103 0104 	add.w	r1, r3, #4
 8009dbe:	6029      	str	r1, [r5, #0]
 8009dc0:	d501      	bpl.n	8009dc6 <_printf_i+0xbe>
 8009dc2:	681e      	ldr	r6, [r3, #0]
 8009dc4:	e003      	b.n	8009dce <_printf_i+0xc6>
 8009dc6:	0646      	lsls	r6, r0, #25
 8009dc8:	d5fb      	bpl.n	8009dc2 <_printf_i+0xba>
 8009dca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	da03      	bge.n	8009dda <_printf_i+0xd2>
 8009dd2:	232d      	movs	r3, #45	; 0x2d
 8009dd4:	4276      	negs	r6, r6
 8009dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dda:	485a      	ldr	r0, [pc, #360]	; (8009f44 <_printf_i+0x23c>)
 8009ddc:	230a      	movs	r3, #10
 8009dde:	e012      	b.n	8009e06 <_printf_i+0xfe>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	6820      	ldr	r0, [r4, #0]
 8009de4:	1d19      	adds	r1, r3, #4
 8009de6:	6029      	str	r1, [r5, #0]
 8009de8:	0605      	lsls	r5, r0, #24
 8009dea:	d501      	bpl.n	8009df0 <_printf_i+0xe8>
 8009dec:	681e      	ldr	r6, [r3, #0]
 8009dee:	e002      	b.n	8009df6 <_printf_i+0xee>
 8009df0:	0641      	lsls	r1, r0, #25
 8009df2:	d5fb      	bpl.n	8009dec <_printf_i+0xe4>
 8009df4:	881e      	ldrh	r6, [r3, #0]
 8009df6:	4853      	ldr	r0, [pc, #332]	; (8009f44 <_printf_i+0x23c>)
 8009df8:	2f6f      	cmp	r7, #111	; 0x6f
 8009dfa:	bf0c      	ite	eq
 8009dfc:	2308      	moveq	r3, #8
 8009dfe:	230a      	movne	r3, #10
 8009e00:	2100      	movs	r1, #0
 8009e02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e06:	6865      	ldr	r5, [r4, #4]
 8009e08:	60a5      	str	r5, [r4, #8]
 8009e0a:	2d00      	cmp	r5, #0
 8009e0c:	bfa2      	ittt	ge
 8009e0e:	6821      	ldrge	r1, [r4, #0]
 8009e10:	f021 0104 	bicge.w	r1, r1, #4
 8009e14:	6021      	strge	r1, [r4, #0]
 8009e16:	b90e      	cbnz	r6, 8009e1c <_printf_i+0x114>
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	d04b      	beq.n	8009eb4 <_printf_i+0x1ac>
 8009e1c:	4615      	mov	r5, r2
 8009e1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e22:	fb03 6711 	mls	r7, r3, r1, r6
 8009e26:	5dc7      	ldrb	r7, [r0, r7]
 8009e28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e2c:	4637      	mov	r7, r6
 8009e2e:	42bb      	cmp	r3, r7
 8009e30:	460e      	mov	r6, r1
 8009e32:	d9f4      	bls.n	8009e1e <_printf_i+0x116>
 8009e34:	2b08      	cmp	r3, #8
 8009e36:	d10b      	bne.n	8009e50 <_printf_i+0x148>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	07de      	lsls	r6, r3, #31
 8009e3c:	d508      	bpl.n	8009e50 <_printf_i+0x148>
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	6861      	ldr	r1, [r4, #4]
 8009e42:	4299      	cmp	r1, r3
 8009e44:	bfde      	ittt	le
 8009e46:	2330      	movle	r3, #48	; 0x30
 8009e48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e50:	1b52      	subs	r2, r2, r5
 8009e52:	6122      	str	r2, [r4, #16]
 8009e54:	f8cd a000 	str.w	sl, [sp]
 8009e58:	464b      	mov	r3, r9
 8009e5a:	aa03      	add	r2, sp, #12
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f7ff fee4 	bl	8009c2c <_printf_common>
 8009e64:	3001      	adds	r0, #1
 8009e66:	d14a      	bne.n	8009efe <_printf_i+0x1f6>
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	b004      	add	sp, #16
 8009e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	f043 0320 	orr.w	r3, r3, #32
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	4833      	ldr	r0, [pc, #204]	; (8009f48 <_printf_i+0x240>)
 8009e7c:	2778      	movs	r7, #120	; 0x78
 8009e7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	6829      	ldr	r1, [r5, #0]
 8009e86:	061f      	lsls	r7, r3, #24
 8009e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e8c:	d402      	bmi.n	8009e94 <_printf_i+0x18c>
 8009e8e:	065f      	lsls	r7, r3, #25
 8009e90:	bf48      	it	mi
 8009e92:	b2b6      	uxthmi	r6, r6
 8009e94:	07df      	lsls	r7, r3, #31
 8009e96:	bf48      	it	mi
 8009e98:	f043 0320 	orrmi.w	r3, r3, #32
 8009e9c:	6029      	str	r1, [r5, #0]
 8009e9e:	bf48      	it	mi
 8009ea0:	6023      	strmi	r3, [r4, #0]
 8009ea2:	b91e      	cbnz	r6, 8009eac <_printf_i+0x1a4>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f023 0320 	bic.w	r3, r3, #32
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	2310      	movs	r3, #16
 8009eae:	e7a7      	b.n	8009e00 <_printf_i+0xf8>
 8009eb0:	4824      	ldr	r0, [pc, #144]	; (8009f44 <_printf_i+0x23c>)
 8009eb2:	e7e4      	b.n	8009e7e <_printf_i+0x176>
 8009eb4:	4615      	mov	r5, r2
 8009eb6:	e7bd      	b.n	8009e34 <_printf_i+0x12c>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	6826      	ldr	r6, [r4, #0]
 8009ebc:	6961      	ldr	r1, [r4, #20]
 8009ebe:	1d18      	adds	r0, r3, #4
 8009ec0:	6028      	str	r0, [r5, #0]
 8009ec2:	0635      	lsls	r5, r6, #24
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	d501      	bpl.n	8009ecc <_printf_i+0x1c4>
 8009ec8:	6019      	str	r1, [r3, #0]
 8009eca:	e002      	b.n	8009ed2 <_printf_i+0x1ca>
 8009ecc:	0670      	lsls	r0, r6, #25
 8009ece:	d5fb      	bpl.n	8009ec8 <_printf_i+0x1c0>
 8009ed0:	8019      	strh	r1, [r3, #0]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6123      	str	r3, [r4, #16]
 8009ed6:	4615      	mov	r5, r2
 8009ed8:	e7bc      	b.n	8009e54 <_printf_i+0x14c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	1d1a      	adds	r2, r3, #4
 8009ede:	602a      	str	r2, [r5, #0]
 8009ee0:	681d      	ldr	r5, [r3, #0]
 8009ee2:	6862      	ldr	r2, [r4, #4]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f7f6 f972 	bl	80001d0 <memchr>
 8009eec:	b108      	cbz	r0, 8009ef2 <_printf_i+0x1ea>
 8009eee:	1b40      	subs	r0, r0, r5
 8009ef0:	6060      	str	r0, [r4, #4]
 8009ef2:	6863      	ldr	r3, [r4, #4]
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009efc:	e7aa      	b.n	8009e54 <_printf_i+0x14c>
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	462a      	mov	r2, r5
 8009f02:	4649      	mov	r1, r9
 8009f04:	4640      	mov	r0, r8
 8009f06:	47d0      	blx	sl
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d0ad      	beq.n	8009e68 <_printf_i+0x160>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	079b      	lsls	r3, r3, #30
 8009f10:	d413      	bmi.n	8009f3a <_printf_i+0x232>
 8009f12:	68e0      	ldr	r0, [r4, #12]
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	4298      	cmp	r0, r3
 8009f18:	bfb8      	it	lt
 8009f1a:	4618      	movlt	r0, r3
 8009f1c:	e7a6      	b.n	8009e6c <_printf_i+0x164>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4632      	mov	r2, r6
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	47d0      	blx	sl
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d09d      	beq.n	8009e68 <_printf_i+0x160>
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	68e3      	ldr	r3, [r4, #12]
 8009f30:	9903      	ldr	r1, [sp, #12]
 8009f32:	1a5b      	subs	r3, r3, r1
 8009f34:	42ab      	cmp	r3, r5
 8009f36:	dcf2      	bgt.n	8009f1e <_printf_i+0x216>
 8009f38:	e7eb      	b.n	8009f12 <_printf_i+0x20a>
 8009f3a:	2500      	movs	r5, #0
 8009f3c:	f104 0619 	add.w	r6, r4, #25
 8009f40:	e7f5      	b.n	8009f2e <_printf_i+0x226>
 8009f42:	bf00      	nop
 8009f44:	08010ed6 	.word	0x08010ed6
 8009f48:	08010ee7 	.word	0x08010ee7

08009f4c <_scanf_float>:
 8009f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f50:	b087      	sub	sp, #28
 8009f52:	4617      	mov	r7, r2
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	688b      	ldr	r3, [r1, #8]
 8009f58:	1e5a      	subs	r2, r3, #1
 8009f5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f5e:	bf83      	ittte	hi
 8009f60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f64:	195b      	addhi	r3, r3, r5
 8009f66:	9302      	strhi	r3, [sp, #8]
 8009f68:	2300      	movls	r3, #0
 8009f6a:	bf86      	itte	hi
 8009f6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f70:	608b      	strhi	r3, [r1, #8]
 8009f72:	9302      	strls	r3, [sp, #8]
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	468b      	mov	fp, r1
 8009f78:	2500      	movs	r5, #0
 8009f7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009f82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009f86:	4680      	mov	r8, r0
 8009f88:	460c      	mov	r4, r1
 8009f8a:	465e      	mov	r6, fp
 8009f8c:	46aa      	mov	sl, r5
 8009f8e:	46a9      	mov	r9, r5
 8009f90:	9501      	str	r5, [sp, #4]
 8009f92:	68a2      	ldr	r2, [r4, #8]
 8009f94:	b152      	cbz	r2, 8009fac <_scanf_float+0x60>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8009f9c:	d864      	bhi.n	800a068 <_scanf_float+0x11c>
 8009f9e:	2b40      	cmp	r3, #64	; 0x40
 8009fa0:	d83c      	bhi.n	800a01c <_scanf_float+0xd0>
 8009fa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009fa6:	b2c8      	uxtb	r0, r1
 8009fa8:	280e      	cmp	r0, #14
 8009faa:	d93a      	bls.n	800a022 <_scanf_float+0xd6>
 8009fac:	f1b9 0f00 	cmp.w	r9, #0
 8009fb0:	d003      	beq.n	8009fba <_scanf_float+0x6e>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fbe:	f1ba 0f01 	cmp.w	sl, #1
 8009fc2:	f200 8113 	bhi.w	800a1ec <_scanf_float+0x2a0>
 8009fc6:	455e      	cmp	r6, fp
 8009fc8:	f200 8105 	bhi.w	800a1d6 <_scanf_float+0x28a>
 8009fcc:	2501      	movs	r5, #1
 8009fce:	4628      	mov	r0, r5
 8009fd0:	b007      	add	sp, #28
 8009fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009fda:	2a0d      	cmp	r2, #13
 8009fdc:	d8e6      	bhi.n	8009fac <_scanf_float+0x60>
 8009fde:	a101      	add	r1, pc, #4	; (adr r1, 8009fe4 <_scanf_float+0x98>)
 8009fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009fe4:	0800a123 	.word	0x0800a123
 8009fe8:	08009fad 	.word	0x08009fad
 8009fec:	08009fad 	.word	0x08009fad
 8009ff0:	08009fad 	.word	0x08009fad
 8009ff4:	0800a183 	.word	0x0800a183
 8009ff8:	0800a15b 	.word	0x0800a15b
 8009ffc:	08009fad 	.word	0x08009fad
 800a000:	08009fad 	.word	0x08009fad
 800a004:	0800a131 	.word	0x0800a131
 800a008:	08009fad 	.word	0x08009fad
 800a00c:	08009fad 	.word	0x08009fad
 800a010:	08009fad 	.word	0x08009fad
 800a014:	08009fad 	.word	0x08009fad
 800a018:	0800a0e9 	.word	0x0800a0e9
 800a01c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a020:	e7db      	b.n	8009fda <_scanf_float+0x8e>
 800a022:	290e      	cmp	r1, #14
 800a024:	d8c2      	bhi.n	8009fac <_scanf_float+0x60>
 800a026:	a001      	add	r0, pc, #4	; (adr r0, 800a02c <_scanf_float+0xe0>)
 800a028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a02c:	0800a0db 	.word	0x0800a0db
 800a030:	08009fad 	.word	0x08009fad
 800a034:	0800a0db 	.word	0x0800a0db
 800a038:	0800a16f 	.word	0x0800a16f
 800a03c:	08009fad 	.word	0x08009fad
 800a040:	0800a089 	.word	0x0800a089
 800a044:	0800a0c5 	.word	0x0800a0c5
 800a048:	0800a0c5 	.word	0x0800a0c5
 800a04c:	0800a0c5 	.word	0x0800a0c5
 800a050:	0800a0c5 	.word	0x0800a0c5
 800a054:	0800a0c5 	.word	0x0800a0c5
 800a058:	0800a0c5 	.word	0x0800a0c5
 800a05c:	0800a0c5 	.word	0x0800a0c5
 800a060:	0800a0c5 	.word	0x0800a0c5
 800a064:	0800a0c5 	.word	0x0800a0c5
 800a068:	2b6e      	cmp	r3, #110	; 0x6e
 800a06a:	d809      	bhi.n	800a080 <_scanf_float+0x134>
 800a06c:	2b60      	cmp	r3, #96	; 0x60
 800a06e:	d8b2      	bhi.n	8009fd6 <_scanf_float+0x8a>
 800a070:	2b54      	cmp	r3, #84	; 0x54
 800a072:	d077      	beq.n	800a164 <_scanf_float+0x218>
 800a074:	2b59      	cmp	r3, #89	; 0x59
 800a076:	d199      	bne.n	8009fac <_scanf_float+0x60>
 800a078:	2d07      	cmp	r5, #7
 800a07a:	d197      	bne.n	8009fac <_scanf_float+0x60>
 800a07c:	2508      	movs	r5, #8
 800a07e:	e029      	b.n	800a0d4 <_scanf_float+0x188>
 800a080:	2b74      	cmp	r3, #116	; 0x74
 800a082:	d06f      	beq.n	800a164 <_scanf_float+0x218>
 800a084:	2b79      	cmp	r3, #121	; 0x79
 800a086:	e7f6      	b.n	800a076 <_scanf_float+0x12a>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	05c8      	lsls	r0, r1, #23
 800a08c:	d51a      	bpl.n	800a0c4 <_scanf_float+0x178>
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a094:	6021      	str	r1, [r4, #0]
 800a096:	f109 0901 	add.w	r9, r9, #1
 800a09a:	b11b      	cbz	r3, 800a0a4 <_scanf_float+0x158>
 800a09c:	3b01      	subs	r3, #1
 800a09e:	3201      	adds	r2, #1
 800a0a0:	9302      	str	r3, [sp, #8]
 800a0a2:	60a2      	str	r2, [r4, #8]
 800a0a4:	68a3      	ldr	r3, [r4, #8]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	6123      	str	r3, [r4, #16]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	607b      	str	r3, [r7, #4]
 800a0b8:	f340 8084 	ble.w	800a1c4 <_scanf_float+0x278>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	603b      	str	r3, [r7, #0]
 800a0c2:	e766      	b.n	8009f92 <_scanf_float+0x46>
 800a0c4:	eb1a 0f05 	cmn.w	sl, r5
 800a0c8:	f47f af70 	bne.w	8009fac <_scanf_float+0x60>
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0d8:	e7e4      	b.n	800a0a4 <_scanf_float+0x158>
 800a0da:	6822      	ldr	r2, [r4, #0]
 800a0dc:	0610      	lsls	r0, r2, #24
 800a0de:	f57f af65 	bpl.w	8009fac <_scanf_float+0x60>
 800a0e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0e6:	e7f4      	b.n	800a0d2 <_scanf_float+0x186>
 800a0e8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ec:	d10e      	bne.n	800a10c <_scanf_float+0x1c0>
 800a0ee:	f1b9 0f00 	cmp.w	r9, #0
 800a0f2:	d10e      	bne.n	800a112 <_scanf_float+0x1c6>
 800a0f4:	6822      	ldr	r2, [r4, #0]
 800a0f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a0fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a0fe:	d108      	bne.n	800a112 <_scanf_float+0x1c6>
 800a100:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a104:	6022      	str	r2, [r4, #0]
 800a106:	f04f 0a01 	mov.w	sl, #1
 800a10a:	e7e3      	b.n	800a0d4 <_scanf_float+0x188>
 800a10c:	f1ba 0f02 	cmp.w	sl, #2
 800a110:	d055      	beq.n	800a1be <_scanf_float+0x272>
 800a112:	2d01      	cmp	r5, #1
 800a114:	d002      	beq.n	800a11c <_scanf_float+0x1d0>
 800a116:	2d04      	cmp	r5, #4
 800a118:	f47f af48 	bne.w	8009fac <_scanf_float+0x60>
 800a11c:	3501      	adds	r5, #1
 800a11e:	b2ed      	uxtb	r5, r5
 800a120:	e7d8      	b.n	800a0d4 <_scanf_float+0x188>
 800a122:	f1ba 0f01 	cmp.w	sl, #1
 800a126:	f47f af41 	bne.w	8009fac <_scanf_float+0x60>
 800a12a:	f04f 0a02 	mov.w	sl, #2
 800a12e:	e7d1      	b.n	800a0d4 <_scanf_float+0x188>
 800a130:	b97d      	cbnz	r5, 800a152 <_scanf_float+0x206>
 800a132:	f1b9 0f00 	cmp.w	r9, #0
 800a136:	f47f af3c 	bne.w	8009fb2 <_scanf_float+0x66>
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a140:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a144:	f47f af39 	bne.w	8009fba <_scanf_float+0x6e>
 800a148:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a14c:	6022      	str	r2, [r4, #0]
 800a14e:	2501      	movs	r5, #1
 800a150:	e7c0      	b.n	800a0d4 <_scanf_float+0x188>
 800a152:	2d03      	cmp	r5, #3
 800a154:	d0e2      	beq.n	800a11c <_scanf_float+0x1d0>
 800a156:	2d05      	cmp	r5, #5
 800a158:	e7de      	b.n	800a118 <_scanf_float+0x1cc>
 800a15a:	2d02      	cmp	r5, #2
 800a15c:	f47f af26 	bne.w	8009fac <_scanf_float+0x60>
 800a160:	2503      	movs	r5, #3
 800a162:	e7b7      	b.n	800a0d4 <_scanf_float+0x188>
 800a164:	2d06      	cmp	r5, #6
 800a166:	f47f af21 	bne.w	8009fac <_scanf_float+0x60>
 800a16a:	2507      	movs	r5, #7
 800a16c:	e7b2      	b.n	800a0d4 <_scanf_float+0x188>
 800a16e:	6822      	ldr	r2, [r4, #0]
 800a170:	0591      	lsls	r1, r2, #22
 800a172:	f57f af1b 	bpl.w	8009fac <_scanf_float+0x60>
 800a176:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a17a:	6022      	str	r2, [r4, #0]
 800a17c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a180:	e7a8      	b.n	800a0d4 <_scanf_float+0x188>
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a188:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a18c:	d006      	beq.n	800a19c <_scanf_float+0x250>
 800a18e:	0550      	lsls	r0, r2, #21
 800a190:	f57f af0c 	bpl.w	8009fac <_scanf_float+0x60>
 800a194:	f1b9 0f00 	cmp.w	r9, #0
 800a198:	f43f af0f 	beq.w	8009fba <_scanf_float+0x6e>
 800a19c:	0591      	lsls	r1, r2, #22
 800a19e:	bf58      	it	pl
 800a1a0:	9901      	ldrpl	r1, [sp, #4]
 800a1a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1a6:	bf58      	it	pl
 800a1a8:	eba9 0101 	subpl.w	r1, r9, r1
 800a1ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a1b0:	bf58      	it	pl
 800a1b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1b6:	6022      	str	r2, [r4, #0]
 800a1b8:	f04f 0900 	mov.w	r9, #0
 800a1bc:	e78a      	b.n	800a0d4 <_scanf_float+0x188>
 800a1be:	f04f 0a03 	mov.w	sl, #3
 800a1c2:	e787      	b.n	800a0d4 <_scanf_float+0x188>
 800a1c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4798      	blx	r3
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f aedf 	beq.w	8009f92 <_scanf_float+0x46>
 800a1d4:	e6ea      	b.n	8009fac <_scanf_float+0x60>
 800a1d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1de:	463a      	mov	r2, r7
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4798      	blx	r3
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	e6ec      	b.n	8009fc6 <_scanf_float+0x7a>
 800a1ec:	1e6b      	subs	r3, r5, #1
 800a1ee:	2b06      	cmp	r3, #6
 800a1f0:	d825      	bhi.n	800a23e <_scanf_float+0x2f2>
 800a1f2:	2d02      	cmp	r5, #2
 800a1f4:	d836      	bhi.n	800a264 <_scanf_float+0x318>
 800a1f6:	455e      	cmp	r6, fp
 800a1f8:	f67f aee8 	bls.w	8009fcc <_scanf_float+0x80>
 800a1fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a204:	463a      	mov	r2, r7
 800a206:	4640      	mov	r0, r8
 800a208:	4798      	blx	r3
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	e7f1      	b.n	800a1f6 <_scanf_float+0x2aa>
 800a212:	9802      	ldr	r0, [sp, #8]
 800a214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a218:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a21c:	9002      	str	r0, [sp, #8]
 800a21e:	463a      	mov	r2, r7
 800a220:	4640      	mov	r0, r8
 800a222:	4798      	blx	r3
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	3b01      	subs	r3, #1
 800a228:	6123      	str	r3, [r4, #16]
 800a22a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a22e:	fa5f fa8a 	uxtb.w	sl, sl
 800a232:	f1ba 0f02 	cmp.w	sl, #2
 800a236:	d1ec      	bne.n	800a212 <_scanf_float+0x2c6>
 800a238:	3d03      	subs	r5, #3
 800a23a:	b2ed      	uxtb	r5, r5
 800a23c:	1b76      	subs	r6, r6, r5
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	05da      	lsls	r2, r3, #23
 800a242:	d52f      	bpl.n	800a2a4 <_scanf_float+0x358>
 800a244:	055b      	lsls	r3, r3, #21
 800a246:	d510      	bpl.n	800a26a <_scanf_float+0x31e>
 800a248:	455e      	cmp	r6, fp
 800a24a:	f67f aebf 	bls.w	8009fcc <_scanf_float+0x80>
 800a24e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a256:	463a      	mov	r2, r7
 800a258:	4640      	mov	r0, r8
 800a25a:	4798      	blx	r3
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	3b01      	subs	r3, #1
 800a260:	6123      	str	r3, [r4, #16]
 800a262:	e7f1      	b.n	800a248 <_scanf_float+0x2fc>
 800a264:	46aa      	mov	sl, r5
 800a266:	9602      	str	r6, [sp, #8]
 800a268:	e7df      	b.n	800a22a <_scanf_float+0x2de>
 800a26a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	2965      	cmp	r1, #101	; 0x65
 800a272:	f103 33ff 	add.w	r3, r3, #4294967295
 800a276:	f106 35ff 	add.w	r5, r6, #4294967295
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	d00c      	beq.n	800a298 <_scanf_float+0x34c>
 800a27e:	2945      	cmp	r1, #69	; 0x45
 800a280:	d00a      	beq.n	800a298 <_scanf_float+0x34c>
 800a282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a286:	463a      	mov	r2, r7
 800a288:	4640      	mov	r0, r8
 800a28a:	4798      	blx	r3
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a292:	3b01      	subs	r3, #1
 800a294:	1eb5      	subs	r5, r6, #2
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a29c:	463a      	mov	r2, r7
 800a29e:	4640      	mov	r0, r8
 800a2a0:	4798      	blx	r3
 800a2a2:	462e      	mov	r6, r5
 800a2a4:	6825      	ldr	r5, [r4, #0]
 800a2a6:	f015 0510 	ands.w	r5, r5, #16
 800a2aa:	d158      	bne.n	800a35e <_scanf_float+0x412>
 800a2ac:	7035      	strb	r5, [r6, #0]
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2b8:	d11c      	bne.n	800a2f4 <_scanf_float+0x3a8>
 800a2ba:	9b01      	ldr	r3, [sp, #4]
 800a2bc:	454b      	cmp	r3, r9
 800a2be:	eba3 0209 	sub.w	r2, r3, r9
 800a2c2:	d124      	bne.n	800a30e <_scanf_float+0x3c2>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4659      	mov	r1, fp
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	f002 fc31 	bl	800cb30 <_strtod_r>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	6821      	ldr	r1, [r4, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f011 0f02 	tst.w	r1, #2
 800a2d8:	ec57 6b10 	vmov	r6, r7, d0
 800a2dc:	f103 0204 	add.w	r2, r3, #4
 800a2e0:	d020      	beq.n	800a324 <_scanf_float+0x3d8>
 800a2e2:	9903      	ldr	r1, [sp, #12]
 800a2e4:	600a      	str	r2, [r1, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	e9c3 6700 	strd	r6, r7, [r3]
 800a2ec:	68e3      	ldr	r3, [r4, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60e3      	str	r3, [r4, #12]
 800a2f2:	e66c      	b.n	8009fce <_scanf_float+0x82>
 800a2f4:	9b04      	ldr	r3, [sp, #16]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0e4      	beq.n	800a2c4 <_scanf_float+0x378>
 800a2fa:	9905      	ldr	r1, [sp, #20]
 800a2fc:	230a      	movs	r3, #10
 800a2fe:	462a      	mov	r2, r5
 800a300:	3101      	adds	r1, #1
 800a302:	4640      	mov	r0, r8
 800a304:	f002 fc9c 	bl	800cc40 <_strtol_r>
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	9e05      	ldr	r6, [sp, #20]
 800a30c:	1ac2      	subs	r2, r0, r3
 800a30e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a312:	429e      	cmp	r6, r3
 800a314:	bf28      	it	cs
 800a316:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a31a:	4912      	ldr	r1, [pc, #72]	; (800a364 <_scanf_float+0x418>)
 800a31c:	4630      	mov	r0, r6
 800a31e:	f000 f8e7 	bl	800a4f0 <siprintf>
 800a322:	e7cf      	b.n	800a2c4 <_scanf_float+0x378>
 800a324:	f011 0f04 	tst.w	r1, #4
 800a328:	9903      	ldr	r1, [sp, #12]
 800a32a:	600a      	str	r2, [r1, #0]
 800a32c:	d1db      	bne.n	800a2e6 <_scanf_float+0x39a>
 800a32e:	f8d3 8000 	ldr.w	r8, [r3]
 800a332:	ee10 2a10 	vmov	r2, s0
 800a336:	ee10 0a10 	vmov	r0, s0
 800a33a:	463b      	mov	r3, r7
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 fbf5 	bl	8000b2c <__aeabi_dcmpun>
 800a342:	b128      	cbz	r0, 800a350 <_scanf_float+0x404>
 800a344:	4808      	ldr	r0, [pc, #32]	; (800a368 <_scanf_float+0x41c>)
 800a346:	f000 f9b7 	bl	800a6b8 <nanf>
 800a34a:	ed88 0a00 	vstr	s0, [r8]
 800a34e:	e7cd      	b.n	800a2ec <_scanf_float+0x3a0>
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 fc48 	bl	8000be8 <__aeabi_d2f>
 800a358:	f8c8 0000 	str.w	r0, [r8]
 800a35c:	e7c6      	b.n	800a2ec <_scanf_float+0x3a0>
 800a35e:	2500      	movs	r5, #0
 800a360:	e635      	b.n	8009fce <_scanf_float+0x82>
 800a362:	bf00      	nop
 800a364:	08010ef8 	.word	0x08010ef8
 800a368:	0801128d 	.word	0x0801128d

0800a36c <std>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	e9c0 3300 	strd	r3, r3, [r0]
 800a376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	8181      	strh	r1, [r0, #12]
 800a37e:	6643      	str	r3, [r0, #100]	; 0x64
 800a380:	81c2      	strh	r2, [r0, #14]
 800a382:	6183      	str	r3, [r0, #24]
 800a384:	4619      	mov	r1, r3
 800a386:	2208      	movs	r2, #8
 800a388:	305c      	adds	r0, #92	; 0x5c
 800a38a:	f000 f914 	bl	800a5b6 <memset>
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <std+0x58>)
 800a390:	6263      	str	r3, [r4, #36]	; 0x24
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <std+0x5c>)
 800a394:	62a3      	str	r3, [r4, #40]	; 0x28
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <std+0x60>)
 800a398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <std+0x64>)
 800a39c:	6323      	str	r3, [r4, #48]	; 0x30
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <std+0x68>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d006      	beq.n	800a3b4 <std+0x48>
 800a3a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3aa:	4294      	cmp	r4, r2
 800a3ac:	d002      	beq.n	800a3b4 <std+0x48>
 800a3ae:	33d0      	adds	r3, #208	; 0xd0
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d105      	bne.n	800a3c0 <std+0x54>
 800a3b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f000 b978 	b.w	800a6b0 <__retarget_lock_init_recursive>
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a531 	.word	0x0800a531
 800a3c8:	0800a553 	.word	0x0800a553
 800a3cc:	0800a58b 	.word	0x0800a58b
 800a3d0:	0800a5af 	.word	0x0800a5af
 800a3d4:	20000580 	.word	0x20000580

0800a3d8 <stdio_exit_handler>:
 800a3d8:	4a02      	ldr	r2, [pc, #8]	; (800a3e4 <stdio_exit_handler+0xc>)
 800a3da:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <stdio_exit_handler+0x10>)
 800a3dc:	4803      	ldr	r0, [pc, #12]	; (800a3ec <stdio_exit_handler+0x14>)
 800a3de:	f000 b869 	b.w	800a4b4 <_fwalk_sglue>
 800a3e2:	bf00      	nop
 800a3e4:	20000014 	.word	0x20000014
 800a3e8:	0800d001 	.word	0x0800d001
 800a3ec:	20000020 	.word	0x20000020

0800a3f0 <cleanup_stdio>:
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <cleanup_stdio+0x34>)
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	d001      	beq.n	800a400 <cleanup_stdio+0x10>
 800a3fc:	f002 fe00 	bl	800d000 <_fflush_r>
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <cleanup_stdio+0x38>)
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <cleanup_stdio+0x1e>
 800a408:	4620      	mov	r0, r4
 800a40a:	f002 fdf9 	bl	800d000 <_fflush_r>
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <cleanup_stdio+0x3c>)
 800a412:	4299      	cmp	r1, r3
 800a414:	d004      	beq.n	800a420 <cleanup_stdio+0x30>
 800a416:	4620      	mov	r0, r4
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f002 bdf0 	b.w	800d000 <_fflush_r>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	20000580 	.word	0x20000580
 800a428:	200005e8 	.word	0x200005e8
 800a42c:	20000650 	.word	0x20000650

0800a430 <global_stdio_init.part.0>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <global_stdio_init.part.0+0x30>)
 800a434:	4c0b      	ldr	r4, [pc, #44]	; (800a464 <global_stdio_init.part.0+0x34>)
 800a436:	4a0c      	ldr	r2, [pc, #48]	; (800a468 <global_stdio_init.part.0+0x38>)
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	4620      	mov	r0, r4
 800a43c:	2200      	movs	r2, #0
 800a43e:	2104      	movs	r1, #4
 800a440:	f7ff ff94 	bl	800a36c <std>
 800a444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a448:	2201      	movs	r2, #1
 800a44a:	2109      	movs	r1, #9
 800a44c:	f7ff ff8e 	bl	800a36c <std>
 800a450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a454:	2202      	movs	r2, #2
 800a456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45a:	2112      	movs	r1, #18
 800a45c:	f7ff bf86 	b.w	800a36c <std>
 800a460:	200006b8 	.word	0x200006b8
 800a464:	20000580 	.word	0x20000580
 800a468:	0800a3d9 	.word	0x0800a3d9

0800a46c <__sfp_lock_acquire>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sfp_lock_acquire+0x8>)
 800a46e:	f000 b920 	b.w	800a6b2 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	200006c1 	.word	0x200006c1

0800a478 <__sfp_lock_release>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sfp_lock_release+0x8>)
 800a47a:	f000 b91b 	b.w	800a6b4 <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	200006c1 	.word	0x200006c1

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff fff0 	bl	800a46c <__sfp_lock_acquire>
 800a48c:	6a23      	ldr	r3, [r4, #32]
 800a48e:	b11b      	cbz	r3, 800a498 <__sinit+0x14>
 800a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a494:	f7ff bff0 	b.w	800a478 <__sfp_lock_release>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__sinit+0x28>)
 800a49a:	6223      	str	r3, [r4, #32]
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <__sinit+0x2c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f5      	bne.n	800a490 <__sinit+0xc>
 800a4a4:	f7ff ffc4 	bl	800a430 <global_stdio_init.part.0>
 800a4a8:	e7f2      	b.n	800a490 <__sinit+0xc>
 800a4aa:	bf00      	nop
 800a4ac:	0800a3f1 	.word	0x0800a3f1
 800a4b0:	200006b8 	.word	0x200006b8

0800a4b4 <_fwalk_sglue>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4688      	mov	r8, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	2600      	movs	r6, #0
 800a4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c8:	d505      	bpl.n	800a4d6 <_fwalk_sglue+0x22>
 800a4ca:	6824      	ldr	r4, [r4, #0]
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d1f7      	bne.n	800a4c0 <_fwalk_sglue+0xc>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d907      	bls.n	800a4ec <_fwalk_sglue+0x38>
 800a4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	d003      	beq.n	800a4ec <_fwalk_sglue+0x38>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	47c0      	blx	r8
 800a4ea:	4306      	orrs	r6, r0
 800a4ec:	3568      	adds	r5, #104	; 0x68
 800a4ee:	e7e9      	b.n	800a4c4 <_fwalk_sglue+0x10>

0800a4f0 <siprintf>:
 800a4f0:	b40e      	push	{r1, r2, r3}
 800a4f2:	b500      	push	{lr}
 800a4f4:	b09c      	sub	sp, #112	; 0x70
 800a4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4f8:	9002      	str	r0, [sp, #8]
 800a4fa:	9006      	str	r0, [sp, #24]
 800a4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <siprintf+0x38>)
 800a502:	9107      	str	r1, [sp, #28]
 800a504:	9104      	str	r1, [sp, #16]
 800a506:	4909      	ldr	r1, [pc, #36]	; (800a52c <siprintf+0x3c>)
 800a508:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	6800      	ldr	r0, [r0, #0]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	a902      	add	r1, sp, #8
 800a514:	f002 fbf0 	bl	800ccf8 <_svfiprintf_r>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	b01c      	add	sp, #112	; 0x70
 800a520:	f85d eb04 	ldr.w	lr, [sp], #4
 800a524:	b003      	add	sp, #12
 800a526:	4770      	bx	lr
 800a528:	2000006c 	.word	0x2000006c
 800a52c:	ffff0208 	.word	0xffff0208

0800a530 <__sread>:
 800a530:	b510      	push	{r4, lr}
 800a532:	460c      	mov	r4, r1
 800a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a538:	f000 f86c 	bl	800a614 <_read_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	bfab      	itete	ge
 800a540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a542:	89a3      	ldrhlt	r3, [r4, #12]
 800a544:	181b      	addge	r3, r3, r0
 800a546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a54a:	bfac      	ite	ge
 800a54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54e:	81a3      	strhlt	r3, [r4, #12]
 800a550:	bd10      	pop	{r4, pc}

0800a552 <__swrite>:
 800a552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	461f      	mov	r7, r3
 800a558:	898b      	ldrh	r3, [r1, #12]
 800a55a:	05db      	lsls	r3, r3, #23
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	4616      	mov	r6, r2
 800a562:	d505      	bpl.n	800a570 <__swrite+0x1e>
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	2302      	movs	r3, #2
 800a56a:	2200      	movs	r2, #0
 800a56c:	f000 f840 	bl	800a5f0 <_lseek_r>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	4632      	mov	r2, r6
 800a57e:	463b      	mov	r3, r7
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a586:	f000 b857 	b.w	800a638 <_write_r>

0800a58a <__sseek>:
 800a58a:	b510      	push	{r4, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a592:	f000 f82d 	bl	800a5f0 <_lseek_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	bf15      	itete	ne
 800a59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a6:	81a3      	strheq	r3, [r4, #12]
 800a5a8:	bf18      	it	ne
 800a5aa:	81a3      	strhne	r3, [r4, #12]
 800a5ac:	bd10      	pop	{r4, pc}

0800a5ae <__sclose>:
 800a5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b2:	f000 b80d 	b.w	800a5d0 <_close_r>

0800a5b6 <memset>:
 800a5b6:	4402      	add	r2, r0
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d100      	bne.n	800a5c0 <memset+0xa>
 800a5be:	4770      	bx	lr
 800a5c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a5c4:	e7f9      	b.n	800a5ba <memset+0x4>
	...

0800a5c8 <_localeconv_r>:
 800a5c8:	4800      	ldr	r0, [pc, #0]	; (800a5cc <_localeconv_r+0x4>)
 800a5ca:	4770      	bx	lr
 800a5cc:	20000160 	.word	0x20000160

0800a5d0 <_close_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d06      	ldr	r5, [pc, #24]	; (800a5ec <_close_r+0x1c>)
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4608      	mov	r0, r1
 800a5da:	602b      	str	r3, [r5, #0]
 800a5dc:	f7f8 fe0f 	bl	80031fe <_close>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_close_r+0x1a>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_close_r+0x1a>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	200006bc 	.word	0x200006bc

0800a5f0 <_lseek_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4d07      	ldr	r5, [pc, #28]	; (800a610 <_lseek_r+0x20>)
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	4608      	mov	r0, r1
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	602a      	str	r2, [r5, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	f7f8 fe24 	bl	800324c <_lseek>
 800a604:	1c43      	adds	r3, r0, #1
 800a606:	d102      	bne.n	800a60e <_lseek_r+0x1e>
 800a608:	682b      	ldr	r3, [r5, #0]
 800a60a:	b103      	cbz	r3, 800a60e <_lseek_r+0x1e>
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	200006bc 	.word	0x200006bc

0800a614 <_read_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d07      	ldr	r5, [pc, #28]	; (800a634 <_read_r+0x20>)
 800a618:	4604      	mov	r4, r0
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	602a      	str	r2, [r5, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	f7f8 fdb2 	bl	800318c <_read>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_read_r+0x1e>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_read_r+0x1e>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200006bc 	.word	0x200006bc

0800a638 <_write_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_write_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f8 fdbd 	bl	80031c6 <_write>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_write_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_write_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	200006bc 	.word	0x200006bc

0800a65c <__errno>:
 800a65c:	4b01      	ldr	r3, [pc, #4]	; (800a664 <__errno+0x8>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	2000006c 	.word	0x2000006c

0800a668 <__libc_init_array>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	4d0d      	ldr	r5, [pc, #52]	; (800a6a0 <__libc_init_array+0x38>)
 800a66c:	4c0d      	ldr	r4, [pc, #52]	; (800a6a4 <__libc_init_array+0x3c>)
 800a66e:	1b64      	subs	r4, r4, r5
 800a670:	10a4      	asrs	r4, r4, #2
 800a672:	2600      	movs	r6, #0
 800a674:	42a6      	cmp	r6, r4
 800a676:	d109      	bne.n	800a68c <__libc_init_array+0x24>
 800a678:	4d0b      	ldr	r5, [pc, #44]	; (800a6a8 <__libc_init_array+0x40>)
 800a67a:	4c0c      	ldr	r4, [pc, #48]	; (800a6ac <__libc_init_array+0x44>)
 800a67c:	f003 fbd8 	bl	800de30 <_init>
 800a680:	1b64      	subs	r4, r4, r5
 800a682:	10a4      	asrs	r4, r4, #2
 800a684:	2600      	movs	r6, #0
 800a686:	42a6      	cmp	r6, r4
 800a688:	d105      	bne.n	800a696 <__libc_init_array+0x2e>
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a690:	4798      	blx	r3
 800a692:	3601      	adds	r6, #1
 800a694:	e7ee      	b.n	800a674 <__libc_init_array+0xc>
 800a696:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69a:	4798      	blx	r3
 800a69c:	3601      	adds	r6, #1
 800a69e:	e7f2      	b.n	800a686 <__libc_init_array+0x1e>
 800a6a0:	080112f8 	.word	0x080112f8
 800a6a4:	080112f8 	.word	0x080112f8
 800a6a8:	080112f8 	.word	0x080112f8
 800a6ac:	080112fc 	.word	0x080112fc

0800a6b0 <__retarget_lock_init_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <__retarget_lock_acquire_recursive>:
 800a6b2:	4770      	bx	lr

0800a6b4 <__retarget_lock_release_recursive>:
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <nanf>:
 800a6b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a6c0 <nanf+0x8>
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	7fc00000 	.word	0x7fc00000

0800a6c4 <quorem>:
 800a6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	6903      	ldr	r3, [r0, #16]
 800a6ca:	690c      	ldr	r4, [r1, #16]
 800a6cc:	42a3      	cmp	r3, r4
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	db7e      	blt.n	800a7d0 <quorem+0x10c>
 800a6d2:	3c01      	subs	r4, #1
 800a6d4:	f101 0814 	add.w	r8, r1, #20
 800a6d8:	f100 0514 	add.w	r5, r0, #20
 800a6dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6fa:	d331      	bcc.n	800a760 <quorem+0x9c>
 800a6fc:	f04f 0e00 	mov.w	lr, #0
 800a700:	4640      	mov	r0, r8
 800a702:	46ac      	mov	ip, r5
 800a704:	46f2      	mov	sl, lr
 800a706:	f850 2b04 	ldr.w	r2, [r0], #4
 800a70a:	b293      	uxth	r3, r2
 800a70c:	fb06 e303 	mla	r3, r6, r3, lr
 800a710:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a714:	0c1a      	lsrs	r2, r3, #16
 800a716:	b29b      	uxth	r3, r3
 800a718:	ebaa 0303 	sub.w	r3, sl, r3
 800a71c:	f8dc a000 	ldr.w	sl, [ip]
 800a720:	fa13 f38a 	uxtah	r3, r3, sl
 800a724:	fb06 220e 	mla	r2, r6, lr, r2
 800a728:	9300      	str	r3, [sp, #0]
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a730:	b292      	uxth	r2, r2
 800a732:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a736:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a73a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a73e:	4581      	cmp	r9, r0
 800a740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a744:	f84c 3b04 	str.w	r3, [ip], #4
 800a748:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a74c:	d2db      	bcs.n	800a706 <quorem+0x42>
 800a74e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a752:	b92b      	cbnz	r3, 800a760 <quorem+0x9c>
 800a754:	9b01      	ldr	r3, [sp, #4]
 800a756:	3b04      	subs	r3, #4
 800a758:	429d      	cmp	r5, r3
 800a75a:	461a      	mov	r2, r3
 800a75c:	d32c      	bcc.n	800a7b8 <quorem+0xf4>
 800a75e:	613c      	str	r4, [r7, #16]
 800a760:	4638      	mov	r0, r7
 800a762:	f001 f9f1 	bl	800bb48 <__mcmp>
 800a766:	2800      	cmp	r0, #0
 800a768:	db22      	blt.n	800a7b0 <quorem+0xec>
 800a76a:	3601      	adds	r6, #1
 800a76c:	4629      	mov	r1, r5
 800a76e:	2000      	movs	r0, #0
 800a770:	f858 2b04 	ldr.w	r2, [r8], #4
 800a774:	f8d1 c000 	ldr.w	ip, [r1]
 800a778:	b293      	uxth	r3, r2
 800a77a:	1ac3      	subs	r3, r0, r3
 800a77c:	0c12      	lsrs	r2, r2, #16
 800a77e:	fa13 f38c 	uxtah	r3, r3, ip
 800a782:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a786:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a790:	45c1      	cmp	r9, r8
 800a792:	f841 3b04 	str.w	r3, [r1], #4
 800a796:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a79a:	d2e9      	bcs.n	800a770 <quorem+0xac>
 800a79c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7a4:	b922      	cbnz	r2, 800a7b0 <quorem+0xec>
 800a7a6:	3b04      	subs	r3, #4
 800a7a8:	429d      	cmp	r5, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	d30a      	bcc.n	800a7c4 <quorem+0x100>
 800a7ae:	613c      	str	r4, [r7, #16]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	b003      	add	sp, #12
 800a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	3b04      	subs	r3, #4
 800a7bc:	2a00      	cmp	r2, #0
 800a7be:	d1ce      	bne.n	800a75e <quorem+0x9a>
 800a7c0:	3c01      	subs	r4, #1
 800a7c2:	e7c9      	b.n	800a758 <quorem+0x94>
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	3b04      	subs	r3, #4
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d1f0      	bne.n	800a7ae <quorem+0xea>
 800a7cc:	3c01      	subs	r4, #1
 800a7ce:	e7eb      	b.n	800a7a8 <quorem+0xe4>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7ee      	b.n	800a7b2 <quorem+0xee>
 800a7d4:	0000      	movs	r0, r0
	...

0800a7d8 <_dtoa_r>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	ed2d 8b04 	vpush	{d8-d9}
 800a7e0:	69c5      	ldr	r5, [r0, #28]
 800a7e2:	b093      	sub	sp, #76	; 0x4c
 800a7e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7e8:	ec57 6b10 	vmov	r6, r7, d0
 800a7ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7f0:	9107      	str	r1, [sp, #28]
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f6:	930d      	str	r3, [sp, #52]	; 0x34
 800a7f8:	b975      	cbnz	r5, 800a818 <_dtoa_r+0x40>
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	f000 fe2a 	bl	800b454 <malloc>
 800a800:	4602      	mov	r2, r0
 800a802:	61e0      	str	r0, [r4, #28]
 800a804:	b920      	cbnz	r0, 800a810 <_dtoa_r+0x38>
 800a806:	4bae      	ldr	r3, [pc, #696]	; (800aac0 <_dtoa_r+0x2e8>)
 800a808:	21ef      	movs	r1, #239	; 0xef
 800a80a:	48ae      	ldr	r0, [pc, #696]	; (800aac4 <_dtoa_r+0x2ec>)
 800a80c:	f002 fc74 	bl	800d0f8 <__assert_func>
 800a810:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a814:	6005      	str	r5, [r0, #0]
 800a816:	60c5      	str	r5, [r0, #12]
 800a818:	69e3      	ldr	r3, [r4, #28]
 800a81a:	6819      	ldr	r1, [r3, #0]
 800a81c:	b151      	cbz	r1, 800a834 <_dtoa_r+0x5c>
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	604a      	str	r2, [r1, #4]
 800a822:	2301      	movs	r3, #1
 800a824:	4093      	lsls	r3, r2
 800a826:	608b      	str	r3, [r1, #8]
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 ff07 	bl	800b63c <_Bfree>
 800a82e:	69e3      	ldr	r3, [r4, #28]
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	1e3b      	subs	r3, r7, #0
 800a836:	bfbb      	ittet	lt
 800a838:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a83c:	9303      	strlt	r3, [sp, #12]
 800a83e:	2300      	movge	r3, #0
 800a840:	2201      	movlt	r2, #1
 800a842:	bfac      	ite	ge
 800a844:	f8c8 3000 	strge.w	r3, [r8]
 800a848:	f8c8 2000 	strlt.w	r2, [r8]
 800a84c:	4b9e      	ldr	r3, [pc, #632]	; (800aac8 <_dtoa_r+0x2f0>)
 800a84e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a852:	ea33 0308 	bics.w	r3, r3, r8
 800a856:	d11b      	bne.n	800a890 <_dtoa_r+0xb8>
 800a858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a85a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a864:	4333      	orrs	r3, r6
 800a866:	f000 8593 	beq.w	800b390 <_dtoa_r+0xbb8>
 800a86a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a86c:	b963      	cbnz	r3, 800a888 <_dtoa_r+0xb0>
 800a86e:	4b97      	ldr	r3, [pc, #604]	; (800aacc <_dtoa_r+0x2f4>)
 800a870:	e027      	b.n	800a8c2 <_dtoa_r+0xea>
 800a872:	4b97      	ldr	r3, [pc, #604]	; (800aad0 <_dtoa_r+0x2f8>)
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	9800      	ldr	r0, [sp, #0]
 800a87e:	b013      	add	sp, #76	; 0x4c
 800a880:	ecbd 8b04 	vpop	{d8-d9}
 800a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a888:	4b90      	ldr	r3, [pc, #576]	; (800aacc <_dtoa_r+0x2f4>)
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	3303      	adds	r3, #3
 800a88e:	e7f3      	b.n	800a878 <_dtoa_r+0xa0>
 800a890:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a894:	2200      	movs	r2, #0
 800a896:	ec51 0b17 	vmov	r0, r1, d7
 800a89a:	eeb0 8a47 	vmov.f32	s16, s14
 800a89e:	eef0 8a67 	vmov.f32	s17, s15
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f7f6 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	b160      	cbz	r0, 800a8c6 <_dtoa_r+0xee>
 800a8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8568 	beq.w	800b38a <_dtoa_r+0xbb2>
 800a8ba:	4b86      	ldr	r3, [pc, #536]	; (800aad4 <_dtoa_r+0x2fc>)
 800a8bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	e7da      	b.n	800a87c <_dtoa_r+0xa4>
 800a8c6:	aa10      	add	r2, sp, #64	; 0x40
 800a8c8:	a911      	add	r1, sp, #68	; 0x44
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a8d0:	eef0 0a68 	vmov.f32	s1, s17
 800a8d4:	f001 fa4e 	bl	800bd74 <__d2b>
 800a8d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a8dc:	4682      	mov	sl, r0
 800a8de:	2d00      	cmp	r5, #0
 800a8e0:	d07f      	beq.n	800a9e2 <_dtoa_r+0x20a>
 800a8e2:	ee18 3a90 	vmov	r3, s17
 800a8e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a8ee:	ec51 0b18 	vmov	r0, r1, d8
 800a8f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a8fe:	4619      	mov	r1, r3
 800a900:	2200      	movs	r2, #0
 800a902:	4b75      	ldr	r3, [pc, #468]	; (800aad8 <_dtoa_r+0x300>)
 800a904:	f7f5 fcc0 	bl	8000288 <__aeabi_dsub>
 800a908:	a367      	add	r3, pc, #412	; (adr r3, 800aaa8 <_dtoa_r+0x2d0>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	a367      	add	r3, pc, #412	; (adr r3, 800aab0 <_dtoa_r+0x2d8>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f7f5 fcb8 	bl	800028c <__adddf3>
 800a91c:	4606      	mov	r6, r0
 800a91e:	4628      	mov	r0, r5
 800a920:	460f      	mov	r7, r1
 800a922:	f7f5 fdff 	bl	8000524 <__aeabi_i2d>
 800a926:	a364      	add	r3, pc, #400	; (adr r3, 800aab8 <_dtoa_r+0x2e0>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fe64 	bl	80005f8 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fca8 	bl	800028c <__adddf3>
 800a93c:	4606      	mov	r6, r0
 800a93e:	460f      	mov	r7, r1
 800a940:	f7f6 f90a 	bl	8000b58 <__aeabi_d2iz>
 800a944:	2200      	movs	r2, #0
 800a946:	4683      	mov	fp, r0
 800a948:	2300      	movs	r3, #0
 800a94a:	4630      	mov	r0, r6
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f6 f8c5 	bl	8000adc <__aeabi_dcmplt>
 800a952:	b148      	cbz	r0, 800a968 <_dtoa_r+0x190>
 800a954:	4658      	mov	r0, fp
 800a956:	f7f5 fde5 	bl	8000524 <__aeabi_i2d>
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	f7f6 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a962:	b908      	cbnz	r0, 800a968 <_dtoa_r+0x190>
 800a964:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a968:	f1bb 0f16 	cmp.w	fp, #22
 800a96c:	d857      	bhi.n	800aa1e <_dtoa_r+0x246>
 800a96e:	4b5b      	ldr	r3, [pc, #364]	; (800aadc <_dtoa_r+0x304>)
 800a970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	ec51 0b18 	vmov	r0, r1, d8
 800a97c:	f7f6 f8ae 	bl	8000adc <__aeabi_dcmplt>
 800a980:	2800      	cmp	r0, #0
 800a982:	d04e      	beq.n	800aa22 <_dtoa_r+0x24a>
 800a984:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a988:	2300      	movs	r3, #0
 800a98a:	930c      	str	r3, [sp, #48]	; 0x30
 800a98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a98e:	1b5b      	subs	r3, r3, r5
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	bf45      	ittet	mi
 800a994:	f1c3 0301 	rsbmi	r3, r3, #1
 800a998:	9305      	strmi	r3, [sp, #20]
 800a99a:	2300      	movpl	r3, #0
 800a99c:	2300      	movmi	r3, #0
 800a99e:	9206      	str	r2, [sp, #24]
 800a9a0:	bf54      	ite	pl
 800a9a2:	9305      	strpl	r3, [sp, #20]
 800a9a4:	9306      	strmi	r3, [sp, #24]
 800a9a6:	f1bb 0f00 	cmp.w	fp, #0
 800a9aa:	db3c      	blt.n	800aa26 <_dtoa_r+0x24e>
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a9b2:	445b      	add	r3, fp
 800a9b4:	9306      	str	r3, [sp, #24]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9308      	str	r3, [sp, #32]
 800a9ba:	9b07      	ldr	r3, [sp, #28]
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d868      	bhi.n	800aa92 <_dtoa_r+0x2ba>
 800a9c0:	2b05      	cmp	r3, #5
 800a9c2:	bfc4      	itt	gt
 800a9c4:	3b04      	subgt	r3, #4
 800a9c6:	9307      	strgt	r3, [sp, #28]
 800a9c8:	9b07      	ldr	r3, [sp, #28]
 800a9ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a9ce:	bfcc      	ite	gt
 800a9d0:	2500      	movgt	r5, #0
 800a9d2:	2501      	movle	r5, #1
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	f200 8085 	bhi.w	800aae4 <_dtoa_r+0x30c>
 800a9da:	e8df f003 	tbb	[pc, r3]
 800a9de:	3b2e      	.short	0x3b2e
 800a9e0:	5839      	.short	0x5839
 800a9e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9e6:	441d      	add	r5, r3
 800a9e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9ec:	2b20      	cmp	r3, #32
 800a9ee:	bfc1      	itttt	gt
 800a9f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a9fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa00:	bfd6      	itet	le
 800aa02:	f1c3 0320 	rsble	r3, r3, #32
 800aa06:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa0a:	fa06 f003 	lslle.w	r0, r6, r3
 800aa0e:	f7f5 fd79 	bl	8000504 <__aeabi_ui2d>
 800aa12:	2201      	movs	r2, #1
 800aa14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa18:	3d01      	subs	r5, #1
 800aa1a:	920e      	str	r2, [sp, #56]	; 0x38
 800aa1c:	e76f      	b.n	800a8fe <_dtoa_r+0x126>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e7b3      	b.n	800a98a <_dtoa_r+0x1b2>
 800aa22:	900c      	str	r0, [sp, #48]	; 0x30
 800aa24:	e7b2      	b.n	800a98c <_dtoa_r+0x1b4>
 800aa26:	9b05      	ldr	r3, [sp, #20]
 800aa28:	eba3 030b 	sub.w	r3, r3, fp
 800aa2c:	9305      	str	r3, [sp, #20]
 800aa2e:	f1cb 0300 	rsb	r3, fp, #0
 800aa32:	9308      	str	r3, [sp, #32]
 800aa34:	2300      	movs	r3, #0
 800aa36:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa38:	e7bf      	b.n	800a9ba <_dtoa_r+0x1e2>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	dc52      	bgt.n	800aaea <_dtoa_r+0x312>
 800aa44:	2301      	movs	r3, #1
 800aa46:	9301      	str	r3, [sp, #4]
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	920a      	str	r2, [sp, #40]	; 0x28
 800aa4e:	e00b      	b.n	800aa68 <_dtoa_r+0x290>
 800aa50:	2301      	movs	r3, #1
 800aa52:	e7f3      	b.n	800aa3c <_dtoa_r+0x264>
 800aa54:	2300      	movs	r3, #0
 800aa56:	9309      	str	r3, [sp, #36]	; 0x24
 800aa58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5a:	445b      	add	r3, fp
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	bfb8      	it	lt
 800aa66:	2301      	movlt	r3, #1
 800aa68:	69e0      	ldr	r0, [r4, #28]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	f102 0614 	add.w	r6, r2, #20
 800aa72:	429e      	cmp	r6, r3
 800aa74:	d93d      	bls.n	800aaf2 <_dtoa_r+0x31a>
 800aa76:	6041      	str	r1, [r0, #4]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 fd9f 	bl	800b5bc <_Balloc>
 800aa7e:	9000      	str	r0, [sp, #0]
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d139      	bne.n	800aaf8 <_dtoa_r+0x320>
 800aa84:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <_dtoa_r+0x308>)
 800aa86:	4602      	mov	r2, r0
 800aa88:	f240 11af 	movw	r1, #431	; 0x1af
 800aa8c:	e6bd      	b.n	800a80a <_dtoa_r+0x32>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e7e1      	b.n	800aa56 <_dtoa_r+0x27e>
 800aa92:	2501      	movs	r5, #1
 800aa94:	2300      	movs	r3, #0
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	9509      	str	r5, [sp, #36]	; 0x24
 800aa9a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	2312      	movs	r3, #18
 800aaa6:	e7d1      	b.n	800aa4c <_dtoa_r+0x274>
 800aaa8:	636f4361 	.word	0x636f4361
 800aaac:	3fd287a7 	.word	0x3fd287a7
 800aab0:	8b60c8b3 	.word	0x8b60c8b3
 800aab4:	3fc68a28 	.word	0x3fc68a28
 800aab8:	509f79fb 	.word	0x509f79fb
 800aabc:	3fd34413 	.word	0x3fd34413
 800aac0:	08010f0a 	.word	0x08010f0a
 800aac4:	08010f21 	.word	0x08010f21
 800aac8:	7ff00000 	.word	0x7ff00000
 800aacc:	08010f06 	.word	0x08010f06
 800aad0:	08010efd 	.word	0x08010efd
 800aad4:	08010ed5 	.word	0x08010ed5
 800aad8:	3ff80000 	.word	0x3ff80000
 800aadc:	08011010 	.word	0x08011010
 800aae0:	08010f79 	.word	0x08010f79
 800aae4:	2301      	movs	r3, #1
 800aae6:	9309      	str	r3, [sp, #36]	; 0x24
 800aae8:	e7d7      	b.n	800aa9a <_dtoa_r+0x2c2>
 800aaea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	e7ba      	b.n	800aa68 <_dtoa_r+0x290>
 800aaf2:	3101      	adds	r1, #1
 800aaf4:	0052      	lsls	r2, r2, #1
 800aaf6:	e7ba      	b.n	800aa6e <_dtoa_r+0x296>
 800aaf8:	69e3      	ldr	r3, [r4, #28]
 800aafa:	9a00      	ldr	r2, [sp, #0]
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	2b0e      	cmp	r3, #14
 800ab02:	f200 80a8 	bhi.w	800ac56 <_dtoa_r+0x47e>
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	f000 80a5 	beq.w	800ac56 <_dtoa_r+0x47e>
 800ab0c:	f1bb 0f00 	cmp.w	fp, #0
 800ab10:	dd38      	ble.n	800ab84 <_dtoa_r+0x3ac>
 800ab12:	4bc0      	ldr	r3, [pc, #768]	; (800ae14 <_dtoa_r+0x63c>)
 800ab14:	f00b 020f 	and.w	r2, fp, #15
 800ab18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab20:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab24:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ab28:	d019      	beq.n	800ab5e <_dtoa_r+0x386>
 800ab2a:	4bbb      	ldr	r3, [pc, #748]	; (800ae18 <_dtoa_r+0x640>)
 800ab2c:	ec51 0b18 	vmov	r0, r1, d8
 800ab30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab34:	f7f5 fe8a 	bl	800084c <__aeabi_ddiv>
 800ab38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab3c:	f008 080f 	and.w	r8, r8, #15
 800ab40:	2503      	movs	r5, #3
 800ab42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae18 <_dtoa_r+0x640>
 800ab46:	f1b8 0f00 	cmp.w	r8, #0
 800ab4a:	d10a      	bne.n	800ab62 <_dtoa_r+0x38a>
 800ab4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab50:	4632      	mov	r2, r6
 800ab52:	463b      	mov	r3, r7
 800ab54:	f7f5 fe7a 	bl	800084c <__aeabi_ddiv>
 800ab58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab5c:	e02b      	b.n	800abb6 <_dtoa_r+0x3de>
 800ab5e:	2502      	movs	r5, #2
 800ab60:	e7ef      	b.n	800ab42 <_dtoa_r+0x36a>
 800ab62:	f018 0f01 	tst.w	r8, #1
 800ab66:	d008      	beq.n	800ab7a <_dtoa_r+0x3a2>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab70:	f7f5 fd42 	bl	80005f8 <__aeabi_dmul>
 800ab74:	3501      	adds	r5, #1
 800ab76:	4606      	mov	r6, r0
 800ab78:	460f      	mov	r7, r1
 800ab7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab7e:	f109 0908 	add.w	r9, r9, #8
 800ab82:	e7e0      	b.n	800ab46 <_dtoa_r+0x36e>
 800ab84:	f000 809f 	beq.w	800acc6 <_dtoa_r+0x4ee>
 800ab88:	f1cb 0600 	rsb	r6, fp, #0
 800ab8c:	4ba1      	ldr	r3, [pc, #644]	; (800ae14 <_dtoa_r+0x63c>)
 800ab8e:	4fa2      	ldr	r7, [pc, #648]	; (800ae18 <_dtoa_r+0x640>)
 800ab90:	f006 020f 	and.w	r2, r6, #15
 800ab94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	ec51 0b18 	vmov	r0, r1, d8
 800aba0:	f7f5 fd2a 	bl	80005f8 <__aeabi_dmul>
 800aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba8:	1136      	asrs	r6, r6, #4
 800abaa:	2300      	movs	r3, #0
 800abac:	2502      	movs	r5, #2
 800abae:	2e00      	cmp	r6, #0
 800abb0:	d17e      	bne.n	800acb0 <_dtoa_r+0x4d8>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1d0      	bne.n	800ab58 <_dtoa_r+0x380>
 800abb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 8084 	beq.w	800acca <_dtoa_r+0x4f2>
 800abc2:	4b96      	ldr	r3, [pc, #600]	; (800ae1c <_dtoa_r+0x644>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	4640      	mov	r0, r8
 800abc8:	4649      	mov	r1, r9
 800abca:	f7f5 ff87 	bl	8000adc <__aeabi_dcmplt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d07b      	beq.n	800acca <_dtoa_r+0x4f2>
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d078      	beq.n	800acca <_dtoa_r+0x4f2>
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	dd39      	ble.n	800ac52 <_dtoa_r+0x47a>
 800abde:	4b90      	ldr	r3, [pc, #576]	; (800ae20 <_dtoa_r+0x648>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fd07 	bl	80005f8 <__aeabi_dmul>
 800abea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abee:	9e01      	ldr	r6, [sp, #4]
 800abf0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800abf4:	3501      	adds	r5, #1
 800abf6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abfa:	4628      	mov	r0, r5
 800abfc:	f7f5 fc92 	bl	8000524 <__aeabi_i2d>
 800ac00:	4642      	mov	r2, r8
 800ac02:	464b      	mov	r3, r9
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	4b86      	ldr	r3, [pc, #536]	; (800ae24 <_dtoa_r+0x64c>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f7f5 fb3e 	bl	800028c <__adddf3>
 800ac10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	2e00      	cmp	r6, #0
 800ac1c:	d158      	bne.n	800acd0 <_dtoa_r+0x4f8>
 800ac1e:	4b82      	ldr	r3, [pc, #520]	; (800ae28 <_dtoa_r+0x650>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	4640      	mov	r0, r8
 800ac24:	4649      	mov	r1, r9
 800ac26:	f7f5 fb2f 	bl	8000288 <__aeabi_dsub>
 800ac2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac2e:	4680      	mov	r8, r0
 800ac30:	4689      	mov	r9, r1
 800ac32:	f7f5 ff71 	bl	8000b18 <__aeabi_dcmpgt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	f040 8296 	bne.w	800b168 <_dtoa_r+0x990>
 800ac3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac40:	4640      	mov	r0, r8
 800ac42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac46:	4649      	mov	r1, r9
 800ac48:	f7f5 ff48 	bl	8000adc <__aeabi_dcmplt>
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	f040 8289 	bne.w	800b164 <_dtoa_r+0x98c>
 800ac52:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f2c0 814e 	blt.w	800aefa <_dtoa_r+0x722>
 800ac5e:	f1bb 0f0e 	cmp.w	fp, #14
 800ac62:	f300 814a 	bgt.w	800aefa <_dtoa_r+0x722>
 800ac66:	4b6b      	ldr	r3, [pc, #428]	; (800ae14 <_dtoa_r+0x63c>)
 800ac68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f280 80dc 	bge.w	800ae30 <_dtoa_r+0x658>
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f300 80d8 	bgt.w	800ae30 <_dtoa_r+0x658>
 800ac80:	f040 826f 	bne.w	800b162 <_dtoa_r+0x98a>
 800ac84:	4b68      	ldr	r3, [pc, #416]	; (800ae28 <_dtoa_r+0x650>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	4640      	mov	r0, r8
 800ac8a:	4649      	mov	r1, r9
 800ac8c:	f7f5 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ac90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac94:	f7f5 ff36 	bl	8000b04 <__aeabi_dcmpge>
 800ac98:	9e04      	ldr	r6, [sp, #16]
 800ac9a:	4637      	mov	r7, r6
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f040 8245 	bne.w	800b12c <_dtoa_r+0x954>
 800aca2:	9d00      	ldr	r5, [sp, #0]
 800aca4:	2331      	movs	r3, #49	; 0x31
 800aca6:	f805 3b01 	strb.w	r3, [r5], #1
 800acaa:	f10b 0b01 	add.w	fp, fp, #1
 800acae:	e241      	b.n	800b134 <_dtoa_r+0x95c>
 800acb0:	07f2      	lsls	r2, r6, #31
 800acb2:	d505      	bpl.n	800acc0 <_dtoa_r+0x4e8>
 800acb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb8:	f7f5 fc9e 	bl	80005f8 <__aeabi_dmul>
 800acbc:	3501      	adds	r5, #1
 800acbe:	2301      	movs	r3, #1
 800acc0:	1076      	asrs	r6, r6, #1
 800acc2:	3708      	adds	r7, #8
 800acc4:	e773      	b.n	800abae <_dtoa_r+0x3d6>
 800acc6:	2502      	movs	r5, #2
 800acc8:	e775      	b.n	800abb6 <_dtoa_r+0x3de>
 800acca:	9e04      	ldr	r6, [sp, #16]
 800accc:	465f      	mov	r7, fp
 800acce:	e792      	b.n	800abf6 <_dtoa_r+0x41e>
 800acd0:	9900      	ldr	r1, [sp, #0]
 800acd2:	4b50      	ldr	r3, [pc, #320]	; (800ae14 <_dtoa_r+0x63c>)
 800acd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800acd8:	4431      	add	r1, r6
 800acda:	9102      	str	r1, [sp, #8]
 800acdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acde:	eeb0 9a47 	vmov.f32	s18, s14
 800ace2:	eef0 9a67 	vmov.f32	s19, s15
 800ace6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800acea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acee:	2900      	cmp	r1, #0
 800acf0:	d044      	beq.n	800ad7c <_dtoa_r+0x5a4>
 800acf2:	494e      	ldr	r1, [pc, #312]	; (800ae2c <_dtoa_r+0x654>)
 800acf4:	2000      	movs	r0, #0
 800acf6:	f7f5 fda9 	bl	800084c <__aeabi_ddiv>
 800acfa:	ec53 2b19 	vmov	r2, r3, d9
 800acfe:	f7f5 fac3 	bl	8000288 <__aeabi_dsub>
 800ad02:	9d00      	ldr	r5, [sp, #0]
 800ad04:	ec41 0b19 	vmov	d9, r0, r1
 800ad08:	4649      	mov	r1, r9
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	f7f5 ff24 	bl	8000b58 <__aeabi_d2iz>
 800ad10:	4606      	mov	r6, r0
 800ad12:	f7f5 fc07 	bl	8000524 <__aeabi_i2d>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f7f5 fab3 	bl	8000288 <__aeabi_dsub>
 800ad22:	3630      	adds	r6, #48	; 0x30
 800ad24:	f805 6b01 	strb.w	r6, [r5], #1
 800ad28:	ec53 2b19 	vmov	r2, r3, d9
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	f7f5 fed4 	bl	8000adc <__aeabi_dcmplt>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d164      	bne.n	800ae02 <_dtoa_r+0x62a>
 800ad38:	4642      	mov	r2, r8
 800ad3a:	464b      	mov	r3, r9
 800ad3c:	4937      	ldr	r1, [pc, #220]	; (800ae1c <_dtoa_r+0x644>)
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f7f5 faa2 	bl	8000288 <__aeabi_dsub>
 800ad44:	ec53 2b19 	vmov	r2, r3, d9
 800ad48:	f7f5 fec8 	bl	8000adc <__aeabi_dcmplt>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f040 80b6 	bne.w	800aebe <_dtoa_r+0x6e6>
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	429d      	cmp	r5, r3
 800ad56:	f43f af7c 	beq.w	800ac52 <_dtoa_r+0x47a>
 800ad5a:	4b31      	ldr	r3, [pc, #196]	; (800ae20 <_dtoa_r+0x648>)
 800ad5c:	ec51 0b19 	vmov	r0, r1, d9
 800ad60:	2200      	movs	r2, #0
 800ad62:	f7f5 fc49 	bl	80005f8 <__aeabi_dmul>
 800ad66:	4b2e      	ldr	r3, [pc, #184]	; (800ae20 <_dtoa_r+0x648>)
 800ad68:	ec41 0b19 	vmov	d9, r0, r1
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fc41 	bl	80005f8 <__aeabi_dmul>
 800ad76:	4680      	mov	r8, r0
 800ad78:	4689      	mov	r9, r1
 800ad7a:	e7c5      	b.n	800ad08 <_dtoa_r+0x530>
 800ad7c:	ec51 0b17 	vmov	r0, r1, d7
 800ad80:	f7f5 fc3a 	bl	80005f8 <__aeabi_dmul>
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	9d00      	ldr	r5, [sp, #0]
 800ad88:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad8a:	ec41 0b19 	vmov	d9, r0, r1
 800ad8e:	4649      	mov	r1, r9
 800ad90:	4640      	mov	r0, r8
 800ad92:	f7f5 fee1 	bl	8000b58 <__aeabi_d2iz>
 800ad96:	4606      	mov	r6, r0
 800ad98:	f7f5 fbc4 	bl	8000524 <__aeabi_i2d>
 800ad9c:	3630      	adds	r6, #48	; 0x30
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4640      	mov	r0, r8
 800ada4:	4649      	mov	r1, r9
 800ada6:	f7f5 fa6f 	bl	8000288 <__aeabi_dsub>
 800adaa:	f805 6b01 	strb.w	r6, [r5], #1
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	429d      	cmp	r5, r3
 800adb2:	4680      	mov	r8, r0
 800adb4:	4689      	mov	r9, r1
 800adb6:	f04f 0200 	mov.w	r2, #0
 800adba:	d124      	bne.n	800ae06 <_dtoa_r+0x62e>
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <_dtoa_r+0x654>)
 800adbe:	ec51 0b19 	vmov	r0, r1, d9
 800adc2:	f7f5 fa63 	bl	800028c <__adddf3>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fea3 	bl	8000b18 <__aeabi_dcmpgt>
 800add2:	2800      	cmp	r0, #0
 800add4:	d173      	bne.n	800aebe <_dtoa_r+0x6e6>
 800add6:	ec53 2b19 	vmov	r2, r3, d9
 800adda:	4914      	ldr	r1, [pc, #80]	; (800ae2c <_dtoa_r+0x654>)
 800addc:	2000      	movs	r0, #0
 800adde:	f7f5 fa53 	bl	8000288 <__aeabi_dsub>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4640      	mov	r0, r8
 800ade8:	4649      	mov	r1, r9
 800adea:	f7f5 fe77 	bl	8000adc <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f af2f 	beq.w	800ac52 <_dtoa_r+0x47a>
 800adf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adf6:	1e6b      	subs	r3, r5, #1
 800adf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adfe:	2b30      	cmp	r3, #48	; 0x30
 800ae00:	d0f8      	beq.n	800adf4 <_dtoa_r+0x61c>
 800ae02:	46bb      	mov	fp, r7
 800ae04:	e04a      	b.n	800ae9c <_dtoa_r+0x6c4>
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <_dtoa_r+0x648>)
 800ae08:	f7f5 fbf6 	bl	80005f8 <__aeabi_dmul>
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	4689      	mov	r9, r1
 800ae10:	e7bd      	b.n	800ad8e <_dtoa_r+0x5b6>
 800ae12:	bf00      	nop
 800ae14:	08011010 	.word	0x08011010
 800ae18:	08010fe8 	.word	0x08010fe8
 800ae1c:	3ff00000 	.word	0x3ff00000
 800ae20:	40240000 	.word	0x40240000
 800ae24:	401c0000 	.word	0x401c0000
 800ae28:	40140000 	.word	0x40140000
 800ae2c:	3fe00000 	.word	0x3fe00000
 800ae30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae34:	9d00      	ldr	r5, [sp, #0]
 800ae36:	4642      	mov	r2, r8
 800ae38:	464b      	mov	r3, r9
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	f7f5 fd05 	bl	800084c <__aeabi_ddiv>
 800ae42:	f7f5 fe89 	bl	8000b58 <__aeabi_d2iz>
 800ae46:	9001      	str	r0, [sp, #4]
 800ae48:	f7f5 fb6c 	bl	8000524 <__aeabi_i2d>
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	f7f5 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fa14 	bl	8000288 <__aeabi_dsub>
 800ae60:	9e01      	ldr	r6, [sp, #4]
 800ae62:	9f04      	ldr	r7, [sp, #16]
 800ae64:	3630      	adds	r6, #48	; 0x30
 800ae66:	f805 6b01 	strb.w	r6, [r5], #1
 800ae6a:	9e00      	ldr	r6, [sp, #0]
 800ae6c:	1bae      	subs	r6, r5, r6
 800ae6e:	42b7      	cmp	r7, r6
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	d134      	bne.n	800aee0 <_dtoa_r+0x708>
 800ae76:	f7f5 fa09 	bl	800028c <__adddf3>
 800ae7a:	4642      	mov	r2, r8
 800ae7c:	464b      	mov	r3, r9
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 fe49 	bl	8000b18 <__aeabi_dcmpgt>
 800ae86:	b9c8      	cbnz	r0, 800aebc <_dtoa_r+0x6e4>
 800ae88:	4642      	mov	r2, r8
 800ae8a:	464b      	mov	r3, r9
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	4639      	mov	r1, r7
 800ae90:	f7f5 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae94:	b110      	cbz	r0, 800ae9c <_dtoa_r+0x6c4>
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	07db      	lsls	r3, r3, #31
 800ae9a:	d40f      	bmi.n	800aebc <_dtoa_r+0x6e4>
 800ae9c:	4651      	mov	r1, sl
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 fbcc 	bl	800b63c <_Bfree>
 800aea4:	2300      	movs	r3, #0
 800aea6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aea8:	702b      	strb	r3, [r5, #0]
 800aeaa:	f10b 0301 	add.w	r3, fp, #1
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f43f ace2 	beq.w	800a87c <_dtoa_r+0xa4>
 800aeb8:	601d      	str	r5, [r3, #0]
 800aeba:	e4df      	b.n	800a87c <_dtoa_r+0xa4>
 800aebc:	465f      	mov	r7, fp
 800aebe:	462b      	mov	r3, r5
 800aec0:	461d      	mov	r5, r3
 800aec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aec6:	2a39      	cmp	r2, #57	; 0x39
 800aec8:	d106      	bne.n	800aed8 <_dtoa_r+0x700>
 800aeca:	9a00      	ldr	r2, [sp, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d1f7      	bne.n	800aec0 <_dtoa_r+0x6e8>
 800aed0:	9900      	ldr	r1, [sp, #0]
 800aed2:	2230      	movs	r2, #48	; 0x30
 800aed4:	3701      	adds	r7, #1
 800aed6:	700a      	strb	r2, [r1, #0]
 800aed8:	781a      	ldrb	r2, [r3, #0]
 800aeda:	3201      	adds	r2, #1
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e790      	b.n	800ae02 <_dtoa_r+0x62a>
 800aee0:	4ba3      	ldr	r3, [pc, #652]	; (800b170 <_dtoa_r+0x998>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f7f5 fb88 	bl	80005f8 <__aeabi_dmul>
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	f7f5 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d09e      	beq.n	800ae36 <_dtoa_r+0x65e>
 800aef8:	e7d0      	b.n	800ae9c <_dtoa_r+0x6c4>
 800aefa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	f000 80ca 	beq.w	800b096 <_dtoa_r+0x8be>
 800af02:	9a07      	ldr	r2, [sp, #28]
 800af04:	2a01      	cmp	r2, #1
 800af06:	f300 80ad 	bgt.w	800b064 <_dtoa_r+0x88c>
 800af0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	f000 80a5 	beq.w	800b05c <_dtoa_r+0x884>
 800af12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af16:	9e08      	ldr	r6, [sp, #32]
 800af18:	9d05      	ldr	r5, [sp, #20]
 800af1a:	9a05      	ldr	r2, [sp, #20]
 800af1c:	441a      	add	r2, r3
 800af1e:	9205      	str	r2, [sp, #20]
 800af20:	9a06      	ldr	r2, [sp, #24]
 800af22:	2101      	movs	r1, #1
 800af24:	441a      	add	r2, r3
 800af26:	4620      	mov	r0, r4
 800af28:	9206      	str	r2, [sp, #24]
 800af2a:	f000 fc87 	bl	800b83c <__i2b>
 800af2e:	4607      	mov	r7, r0
 800af30:	b165      	cbz	r5, 800af4c <_dtoa_r+0x774>
 800af32:	9b06      	ldr	r3, [sp, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd09      	ble.n	800af4c <_dtoa_r+0x774>
 800af38:	42ab      	cmp	r3, r5
 800af3a:	9a05      	ldr	r2, [sp, #20]
 800af3c:	bfa8      	it	ge
 800af3e:	462b      	movge	r3, r5
 800af40:	1ad2      	subs	r2, r2, r3
 800af42:	9205      	str	r2, [sp, #20]
 800af44:	9a06      	ldr	r2, [sp, #24]
 800af46:	1aed      	subs	r5, r5, r3
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	9b08      	ldr	r3, [sp, #32]
 800af4e:	b1f3      	cbz	r3, 800af8e <_dtoa_r+0x7b6>
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 80a3 	beq.w	800b09e <_dtoa_r+0x8c6>
 800af58:	2e00      	cmp	r6, #0
 800af5a:	dd10      	ble.n	800af7e <_dtoa_r+0x7a6>
 800af5c:	4639      	mov	r1, r7
 800af5e:	4632      	mov	r2, r6
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fd2b 	bl	800b9bc <__pow5mult>
 800af66:	4652      	mov	r2, sl
 800af68:	4601      	mov	r1, r0
 800af6a:	4607      	mov	r7, r0
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 fc7b 	bl	800b868 <__multiply>
 800af72:	4651      	mov	r1, sl
 800af74:	4680      	mov	r8, r0
 800af76:	4620      	mov	r0, r4
 800af78:	f000 fb60 	bl	800b63c <_Bfree>
 800af7c:	46c2      	mov	sl, r8
 800af7e:	9b08      	ldr	r3, [sp, #32]
 800af80:	1b9a      	subs	r2, r3, r6
 800af82:	d004      	beq.n	800af8e <_dtoa_r+0x7b6>
 800af84:	4651      	mov	r1, sl
 800af86:	4620      	mov	r0, r4
 800af88:	f000 fd18 	bl	800b9bc <__pow5mult>
 800af8c:	4682      	mov	sl, r0
 800af8e:	2101      	movs	r1, #1
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fc53 	bl	800b83c <__i2b>
 800af96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af98:	2b00      	cmp	r3, #0
 800af9a:	4606      	mov	r6, r0
 800af9c:	f340 8081 	ble.w	800b0a2 <_dtoa_r+0x8ca>
 800afa0:	461a      	mov	r2, r3
 800afa2:	4601      	mov	r1, r0
 800afa4:	4620      	mov	r0, r4
 800afa6:	f000 fd09 	bl	800b9bc <__pow5mult>
 800afaa:	9b07      	ldr	r3, [sp, #28]
 800afac:	2b01      	cmp	r3, #1
 800afae:	4606      	mov	r6, r0
 800afb0:	dd7a      	ble.n	800b0a8 <_dtoa_r+0x8d0>
 800afb2:	f04f 0800 	mov.w	r8, #0
 800afb6:	6933      	ldr	r3, [r6, #16]
 800afb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800afbc:	6918      	ldr	r0, [r3, #16]
 800afbe:	f000 fbef 	bl	800b7a0 <__hi0bits>
 800afc2:	f1c0 0020 	rsb	r0, r0, #32
 800afc6:	9b06      	ldr	r3, [sp, #24]
 800afc8:	4418      	add	r0, r3
 800afca:	f010 001f 	ands.w	r0, r0, #31
 800afce:	f000 8094 	beq.w	800b0fa <_dtoa_r+0x922>
 800afd2:	f1c0 0320 	rsb	r3, r0, #32
 800afd6:	2b04      	cmp	r3, #4
 800afd8:	f340 8085 	ble.w	800b0e6 <_dtoa_r+0x90e>
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	f1c0 001c 	rsb	r0, r0, #28
 800afe2:	4403      	add	r3, r0
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	4403      	add	r3, r0
 800afea:	4405      	add	r5, r0
 800afec:	9306      	str	r3, [sp, #24]
 800afee:	9b05      	ldr	r3, [sp, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dd05      	ble.n	800b000 <_dtoa_r+0x828>
 800aff4:	4651      	mov	r1, sl
 800aff6:	461a      	mov	r2, r3
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fd39 	bl	800ba70 <__lshift>
 800affe:	4682      	mov	sl, r0
 800b000:	9b06      	ldr	r3, [sp, #24]
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd05      	ble.n	800b012 <_dtoa_r+0x83a>
 800b006:	4631      	mov	r1, r6
 800b008:	461a      	mov	r2, r3
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 fd30 	bl	800ba70 <__lshift>
 800b010:	4606      	mov	r6, r0
 800b012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b014:	2b00      	cmp	r3, #0
 800b016:	d072      	beq.n	800b0fe <_dtoa_r+0x926>
 800b018:	4631      	mov	r1, r6
 800b01a:	4650      	mov	r0, sl
 800b01c:	f000 fd94 	bl	800bb48 <__mcmp>
 800b020:	2800      	cmp	r0, #0
 800b022:	da6c      	bge.n	800b0fe <_dtoa_r+0x926>
 800b024:	2300      	movs	r3, #0
 800b026:	4651      	mov	r1, sl
 800b028:	220a      	movs	r2, #10
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 fb28 	bl	800b680 <__multadd>
 800b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b032:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b036:	4682      	mov	sl, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 81b0 	beq.w	800b39e <_dtoa_r+0xbc6>
 800b03e:	2300      	movs	r3, #0
 800b040:	4639      	mov	r1, r7
 800b042:	220a      	movs	r2, #10
 800b044:	4620      	mov	r0, r4
 800b046:	f000 fb1b 	bl	800b680 <__multadd>
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	4607      	mov	r7, r0
 800b050:	f300 8096 	bgt.w	800b180 <_dtoa_r+0x9a8>
 800b054:	9b07      	ldr	r3, [sp, #28]
 800b056:	2b02      	cmp	r3, #2
 800b058:	dc59      	bgt.n	800b10e <_dtoa_r+0x936>
 800b05a:	e091      	b.n	800b180 <_dtoa_r+0x9a8>
 800b05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b05e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b062:	e758      	b.n	800af16 <_dtoa_r+0x73e>
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	1e5e      	subs	r6, r3, #1
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	42b3      	cmp	r3, r6
 800b06c:	bfbf      	itttt	lt
 800b06e:	9b08      	ldrlt	r3, [sp, #32]
 800b070:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b072:	9608      	strlt	r6, [sp, #32]
 800b074:	1af3      	sublt	r3, r6, r3
 800b076:	bfb4      	ite	lt
 800b078:	18d2      	addlt	r2, r2, r3
 800b07a:	1b9e      	subge	r6, r3, r6
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	bfbc      	itt	lt
 800b080:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b082:	2600      	movlt	r6, #0
 800b084:	2b00      	cmp	r3, #0
 800b086:	bfb7      	itett	lt
 800b088:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b08c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b090:	1a9d      	sublt	r5, r3, r2
 800b092:	2300      	movlt	r3, #0
 800b094:	e741      	b.n	800af1a <_dtoa_r+0x742>
 800b096:	9e08      	ldr	r6, [sp, #32]
 800b098:	9d05      	ldr	r5, [sp, #20]
 800b09a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b09c:	e748      	b.n	800af30 <_dtoa_r+0x758>
 800b09e:	9a08      	ldr	r2, [sp, #32]
 800b0a0:	e770      	b.n	800af84 <_dtoa_r+0x7ac>
 800b0a2:	9b07      	ldr	r3, [sp, #28]
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	dc19      	bgt.n	800b0dc <_dtoa_r+0x904>
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	b9bb      	cbnz	r3, 800b0dc <_dtoa_r+0x904>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0b2:	b99b      	cbnz	r3, 800b0dc <_dtoa_r+0x904>
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0ba:	0d1b      	lsrs	r3, r3, #20
 800b0bc:	051b      	lsls	r3, r3, #20
 800b0be:	b183      	cbz	r3, 800b0e2 <_dtoa_r+0x90a>
 800b0c0:	9b05      	ldr	r3, [sp, #20]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	9b06      	ldr	r3, [sp, #24]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	9306      	str	r3, [sp, #24]
 800b0cc:	f04f 0801 	mov.w	r8, #1
 800b0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f47f af6f 	bne.w	800afb6 <_dtoa_r+0x7de>
 800b0d8:	2001      	movs	r0, #1
 800b0da:	e774      	b.n	800afc6 <_dtoa_r+0x7ee>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	e7f6      	b.n	800b0d0 <_dtoa_r+0x8f8>
 800b0e2:	4698      	mov	r8, r3
 800b0e4:	e7f4      	b.n	800b0d0 <_dtoa_r+0x8f8>
 800b0e6:	d082      	beq.n	800afee <_dtoa_r+0x816>
 800b0e8:	9a05      	ldr	r2, [sp, #20]
 800b0ea:	331c      	adds	r3, #28
 800b0ec:	441a      	add	r2, r3
 800b0ee:	9205      	str	r2, [sp, #20]
 800b0f0:	9a06      	ldr	r2, [sp, #24]
 800b0f2:	441a      	add	r2, r3
 800b0f4:	441d      	add	r5, r3
 800b0f6:	9206      	str	r2, [sp, #24]
 800b0f8:	e779      	b.n	800afee <_dtoa_r+0x816>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	e7f4      	b.n	800b0e8 <_dtoa_r+0x910>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	dc37      	bgt.n	800b174 <_dtoa_r+0x99c>
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	2b02      	cmp	r3, #2
 800b108:	dd34      	ble.n	800b174 <_dtoa_r+0x99c>
 800b10a:	9b04      	ldr	r3, [sp, #16]
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	b963      	cbnz	r3, 800b12c <_dtoa_r+0x954>
 800b112:	4631      	mov	r1, r6
 800b114:	2205      	movs	r2, #5
 800b116:	4620      	mov	r0, r4
 800b118:	f000 fab2 	bl	800b680 <__multadd>
 800b11c:	4601      	mov	r1, r0
 800b11e:	4606      	mov	r6, r0
 800b120:	4650      	mov	r0, sl
 800b122:	f000 fd11 	bl	800bb48 <__mcmp>
 800b126:	2800      	cmp	r0, #0
 800b128:	f73f adbb 	bgt.w	800aca2 <_dtoa_r+0x4ca>
 800b12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b12e:	9d00      	ldr	r5, [sp, #0]
 800b130:	ea6f 0b03 	mvn.w	fp, r3
 800b134:	f04f 0800 	mov.w	r8, #0
 800b138:	4631      	mov	r1, r6
 800b13a:	4620      	mov	r0, r4
 800b13c:	f000 fa7e 	bl	800b63c <_Bfree>
 800b140:	2f00      	cmp	r7, #0
 800b142:	f43f aeab 	beq.w	800ae9c <_dtoa_r+0x6c4>
 800b146:	f1b8 0f00 	cmp.w	r8, #0
 800b14a:	d005      	beq.n	800b158 <_dtoa_r+0x980>
 800b14c:	45b8      	cmp	r8, r7
 800b14e:	d003      	beq.n	800b158 <_dtoa_r+0x980>
 800b150:	4641      	mov	r1, r8
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fa72 	bl	800b63c <_Bfree>
 800b158:	4639      	mov	r1, r7
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fa6e 	bl	800b63c <_Bfree>
 800b160:	e69c      	b.n	800ae9c <_dtoa_r+0x6c4>
 800b162:	2600      	movs	r6, #0
 800b164:	4637      	mov	r7, r6
 800b166:	e7e1      	b.n	800b12c <_dtoa_r+0x954>
 800b168:	46bb      	mov	fp, r7
 800b16a:	4637      	mov	r7, r6
 800b16c:	e599      	b.n	800aca2 <_dtoa_r+0x4ca>
 800b16e:	bf00      	nop
 800b170:	40240000 	.word	0x40240000
 800b174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 80c8 	beq.w	800b30c <_dtoa_r+0xb34>
 800b17c:	9b04      	ldr	r3, [sp, #16]
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	2d00      	cmp	r5, #0
 800b182:	dd05      	ble.n	800b190 <_dtoa_r+0x9b8>
 800b184:	4639      	mov	r1, r7
 800b186:	462a      	mov	r2, r5
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 fc71 	bl	800ba70 <__lshift>
 800b18e:	4607      	mov	r7, r0
 800b190:	f1b8 0f00 	cmp.w	r8, #0
 800b194:	d05b      	beq.n	800b24e <_dtoa_r+0xa76>
 800b196:	6879      	ldr	r1, [r7, #4]
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fa0f 	bl	800b5bc <_Balloc>
 800b19e:	4605      	mov	r5, r0
 800b1a0:	b928      	cbnz	r0, 800b1ae <_dtoa_r+0x9d6>
 800b1a2:	4b83      	ldr	r3, [pc, #524]	; (800b3b0 <_dtoa_r+0xbd8>)
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b1aa:	f7ff bb2e 	b.w	800a80a <_dtoa_r+0x32>
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	3202      	adds	r2, #2
 800b1b2:	0092      	lsls	r2, r2, #2
 800b1b4:	f107 010c 	add.w	r1, r7, #12
 800b1b8:	300c      	adds	r0, #12
 800b1ba:	f001 ff85 	bl	800d0c8 <memcpy>
 800b1be:	2201      	movs	r2, #1
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 fc54 	bl	800ba70 <__lshift>
 800b1c8:	9b00      	ldr	r3, [sp, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	9308      	str	r3, [sp, #32]
 800b1d6:	9b02      	ldr	r3, [sp, #8]
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	46b8      	mov	r8, r7
 800b1de:	9306      	str	r3, [sp, #24]
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	9301      	str	r3, [sp, #4]
 800b1ec:	f7ff fa6a 	bl	800a6c4 <quorem>
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	9002      	str	r0, [sp, #8]
 800b1f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1f8:	4650      	mov	r0, sl
 800b1fa:	f000 fca5 	bl	800bb48 <__mcmp>
 800b1fe:	463a      	mov	r2, r7
 800b200:	9005      	str	r0, [sp, #20]
 800b202:	4631      	mov	r1, r6
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fcbb 	bl	800bb80 <__mdiff>
 800b20a:	68c2      	ldr	r2, [r0, #12]
 800b20c:	4605      	mov	r5, r0
 800b20e:	bb02      	cbnz	r2, 800b252 <_dtoa_r+0xa7a>
 800b210:	4601      	mov	r1, r0
 800b212:	4650      	mov	r0, sl
 800b214:	f000 fc98 	bl	800bb48 <__mcmp>
 800b218:	4602      	mov	r2, r0
 800b21a:	4629      	mov	r1, r5
 800b21c:	4620      	mov	r0, r4
 800b21e:	9209      	str	r2, [sp, #36]	; 0x24
 800b220:	f000 fa0c 	bl	800b63c <_Bfree>
 800b224:	9b07      	ldr	r3, [sp, #28]
 800b226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b228:	9d04      	ldr	r5, [sp, #16]
 800b22a:	ea43 0102 	orr.w	r1, r3, r2
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	4319      	orrs	r1, r3
 800b232:	d110      	bne.n	800b256 <_dtoa_r+0xa7e>
 800b234:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b238:	d029      	beq.n	800b28e <_dtoa_r+0xab6>
 800b23a:	9b05      	ldr	r3, [sp, #20]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	dd02      	ble.n	800b246 <_dtoa_r+0xa6e>
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	f883 9000 	strb.w	r9, [r3]
 800b24c:	e774      	b.n	800b138 <_dtoa_r+0x960>
 800b24e:	4638      	mov	r0, r7
 800b250:	e7ba      	b.n	800b1c8 <_dtoa_r+0x9f0>
 800b252:	2201      	movs	r2, #1
 800b254:	e7e1      	b.n	800b21a <_dtoa_r+0xa42>
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	db04      	blt.n	800b266 <_dtoa_r+0xa8e>
 800b25c:	9907      	ldr	r1, [sp, #28]
 800b25e:	430b      	orrs	r3, r1
 800b260:	9906      	ldr	r1, [sp, #24]
 800b262:	430b      	orrs	r3, r1
 800b264:	d120      	bne.n	800b2a8 <_dtoa_r+0xad0>
 800b266:	2a00      	cmp	r2, #0
 800b268:	dded      	ble.n	800b246 <_dtoa_r+0xa6e>
 800b26a:	4651      	mov	r1, sl
 800b26c:	2201      	movs	r2, #1
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fbfe 	bl	800ba70 <__lshift>
 800b274:	4631      	mov	r1, r6
 800b276:	4682      	mov	sl, r0
 800b278:	f000 fc66 	bl	800bb48 <__mcmp>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	dc03      	bgt.n	800b288 <_dtoa_r+0xab0>
 800b280:	d1e1      	bne.n	800b246 <_dtoa_r+0xa6e>
 800b282:	f019 0f01 	tst.w	r9, #1
 800b286:	d0de      	beq.n	800b246 <_dtoa_r+0xa6e>
 800b288:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b28c:	d1d8      	bne.n	800b240 <_dtoa_r+0xa68>
 800b28e:	9a01      	ldr	r2, [sp, #4]
 800b290:	2339      	movs	r3, #57	; 0x39
 800b292:	7013      	strb	r3, [r2, #0]
 800b294:	462b      	mov	r3, r5
 800b296:	461d      	mov	r5, r3
 800b298:	3b01      	subs	r3, #1
 800b29a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b29e:	2a39      	cmp	r2, #57	; 0x39
 800b2a0:	d06c      	beq.n	800b37c <_dtoa_r+0xba4>
 800b2a2:	3201      	adds	r2, #1
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	e747      	b.n	800b138 <_dtoa_r+0x960>
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	dd07      	ble.n	800b2bc <_dtoa_r+0xae4>
 800b2ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2b0:	d0ed      	beq.n	800b28e <_dtoa_r+0xab6>
 800b2b2:	9a01      	ldr	r2, [sp, #4]
 800b2b4:	f109 0301 	add.w	r3, r9, #1
 800b2b8:	7013      	strb	r3, [r2, #0]
 800b2ba:	e73d      	b.n	800b138 <_dtoa_r+0x960>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	9a08      	ldr	r2, [sp, #32]
 800b2c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d043      	beq.n	800b350 <_dtoa_r+0xb78>
 800b2c8:	4651      	mov	r1, sl
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	220a      	movs	r2, #10
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f000 f9d6 	bl	800b680 <__multadd>
 800b2d4:	45b8      	cmp	r8, r7
 800b2d6:	4682      	mov	sl, r0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	f04f 020a 	mov.w	r2, #10
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	d107      	bne.n	800b2f6 <_dtoa_r+0xb1e>
 800b2e6:	f000 f9cb 	bl	800b680 <__multadd>
 800b2ea:	4680      	mov	r8, r0
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	9304      	str	r3, [sp, #16]
 800b2f4:	e775      	b.n	800b1e2 <_dtoa_r+0xa0a>
 800b2f6:	f000 f9c3 	bl	800b680 <__multadd>
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	2300      	movs	r3, #0
 800b300:	220a      	movs	r2, #10
 800b302:	4620      	mov	r0, r4
 800b304:	f000 f9bc 	bl	800b680 <__multadd>
 800b308:	4607      	mov	r7, r0
 800b30a:	e7f0      	b.n	800b2ee <_dtoa_r+0xb16>
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	9d00      	ldr	r5, [sp, #0]
 800b312:	4631      	mov	r1, r6
 800b314:	4650      	mov	r0, sl
 800b316:	f7ff f9d5 	bl	800a6c4 <quorem>
 800b31a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	f805 9b01 	strb.w	r9, [r5], #1
 800b324:	1aea      	subs	r2, r5, r3
 800b326:	9b01      	ldr	r3, [sp, #4]
 800b328:	4293      	cmp	r3, r2
 800b32a:	dd07      	ble.n	800b33c <_dtoa_r+0xb64>
 800b32c:	4651      	mov	r1, sl
 800b32e:	2300      	movs	r3, #0
 800b330:	220a      	movs	r2, #10
 800b332:	4620      	mov	r0, r4
 800b334:	f000 f9a4 	bl	800b680 <__multadd>
 800b338:	4682      	mov	sl, r0
 800b33a:	e7ea      	b.n	800b312 <_dtoa_r+0xb3a>
 800b33c:	9b01      	ldr	r3, [sp, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfc8      	it	gt
 800b342:	461d      	movgt	r5, r3
 800b344:	9b00      	ldr	r3, [sp, #0]
 800b346:	bfd8      	it	le
 800b348:	2501      	movle	r5, #1
 800b34a:	441d      	add	r5, r3
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	4651      	mov	r1, sl
 800b352:	2201      	movs	r2, #1
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fb8b 	bl	800ba70 <__lshift>
 800b35a:	4631      	mov	r1, r6
 800b35c:	4682      	mov	sl, r0
 800b35e:	f000 fbf3 	bl	800bb48 <__mcmp>
 800b362:	2800      	cmp	r0, #0
 800b364:	dc96      	bgt.n	800b294 <_dtoa_r+0xabc>
 800b366:	d102      	bne.n	800b36e <_dtoa_r+0xb96>
 800b368:	f019 0f01 	tst.w	r9, #1
 800b36c:	d192      	bne.n	800b294 <_dtoa_r+0xabc>
 800b36e:	462b      	mov	r3, r5
 800b370:	461d      	mov	r5, r3
 800b372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b376:	2a30      	cmp	r2, #48	; 0x30
 800b378:	d0fa      	beq.n	800b370 <_dtoa_r+0xb98>
 800b37a:	e6dd      	b.n	800b138 <_dtoa_r+0x960>
 800b37c:	9a00      	ldr	r2, [sp, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d189      	bne.n	800b296 <_dtoa_r+0xabe>
 800b382:	f10b 0b01 	add.w	fp, fp, #1
 800b386:	2331      	movs	r3, #49	; 0x31
 800b388:	e796      	b.n	800b2b8 <_dtoa_r+0xae0>
 800b38a:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <_dtoa_r+0xbdc>)
 800b38c:	f7ff ba99 	b.w	800a8c2 <_dtoa_r+0xea>
 800b390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b392:	2b00      	cmp	r3, #0
 800b394:	f47f aa6d 	bne.w	800a872 <_dtoa_r+0x9a>
 800b398:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <_dtoa_r+0xbe0>)
 800b39a:	f7ff ba92 	b.w	800a8c2 <_dtoa_r+0xea>
 800b39e:	9b01      	ldr	r3, [sp, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	dcb5      	bgt.n	800b310 <_dtoa_r+0xb38>
 800b3a4:	9b07      	ldr	r3, [sp, #28]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	f73f aeb1 	bgt.w	800b10e <_dtoa_r+0x936>
 800b3ac:	e7b0      	b.n	800b310 <_dtoa_r+0xb38>
 800b3ae:	bf00      	nop
 800b3b0:	08010f79 	.word	0x08010f79
 800b3b4:	08010ed4 	.word	0x08010ed4
 800b3b8:	08010efd 	.word	0x08010efd

0800b3bc <_free_r>:
 800b3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3be:	2900      	cmp	r1, #0
 800b3c0:	d044      	beq.n	800b44c <_free_r+0x90>
 800b3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c6:	9001      	str	r0, [sp, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b3ce:	bfb8      	it	lt
 800b3d0:	18e4      	addlt	r4, r4, r3
 800b3d2:	f000 f8e7 	bl	800b5a4 <__malloc_lock>
 800b3d6:	4a1e      	ldr	r2, [pc, #120]	; (800b450 <_free_r+0x94>)
 800b3d8:	9801      	ldr	r0, [sp, #4]
 800b3da:	6813      	ldr	r3, [r2, #0]
 800b3dc:	b933      	cbnz	r3, 800b3ec <_free_r+0x30>
 800b3de:	6063      	str	r3, [r4, #4]
 800b3e0:	6014      	str	r4, [r2, #0]
 800b3e2:	b003      	add	sp, #12
 800b3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3e8:	f000 b8e2 	b.w	800b5b0 <__malloc_unlock>
 800b3ec:	42a3      	cmp	r3, r4
 800b3ee:	d908      	bls.n	800b402 <_free_r+0x46>
 800b3f0:	6825      	ldr	r5, [r4, #0]
 800b3f2:	1961      	adds	r1, r4, r5
 800b3f4:	428b      	cmp	r3, r1
 800b3f6:	bf01      	itttt	eq
 800b3f8:	6819      	ldreq	r1, [r3, #0]
 800b3fa:	685b      	ldreq	r3, [r3, #4]
 800b3fc:	1949      	addeq	r1, r1, r5
 800b3fe:	6021      	streq	r1, [r4, #0]
 800b400:	e7ed      	b.n	800b3de <_free_r+0x22>
 800b402:	461a      	mov	r2, r3
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	b10b      	cbz	r3, 800b40c <_free_r+0x50>
 800b408:	42a3      	cmp	r3, r4
 800b40a:	d9fa      	bls.n	800b402 <_free_r+0x46>
 800b40c:	6811      	ldr	r1, [r2, #0]
 800b40e:	1855      	adds	r5, r2, r1
 800b410:	42a5      	cmp	r5, r4
 800b412:	d10b      	bne.n	800b42c <_free_r+0x70>
 800b414:	6824      	ldr	r4, [r4, #0]
 800b416:	4421      	add	r1, r4
 800b418:	1854      	adds	r4, r2, r1
 800b41a:	42a3      	cmp	r3, r4
 800b41c:	6011      	str	r1, [r2, #0]
 800b41e:	d1e0      	bne.n	800b3e2 <_free_r+0x26>
 800b420:	681c      	ldr	r4, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	6053      	str	r3, [r2, #4]
 800b426:	440c      	add	r4, r1
 800b428:	6014      	str	r4, [r2, #0]
 800b42a:	e7da      	b.n	800b3e2 <_free_r+0x26>
 800b42c:	d902      	bls.n	800b434 <_free_r+0x78>
 800b42e:	230c      	movs	r3, #12
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	e7d6      	b.n	800b3e2 <_free_r+0x26>
 800b434:	6825      	ldr	r5, [r4, #0]
 800b436:	1961      	adds	r1, r4, r5
 800b438:	428b      	cmp	r3, r1
 800b43a:	bf04      	itt	eq
 800b43c:	6819      	ldreq	r1, [r3, #0]
 800b43e:	685b      	ldreq	r3, [r3, #4]
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	bf04      	itt	eq
 800b444:	1949      	addeq	r1, r1, r5
 800b446:	6021      	streq	r1, [r4, #0]
 800b448:	6054      	str	r4, [r2, #4]
 800b44a:	e7ca      	b.n	800b3e2 <_free_r+0x26>
 800b44c:	b003      	add	sp, #12
 800b44e:	bd30      	pop	{r4, r5, pc}
 800b450:	200006c4 	.word	0x200006c4

0800b454 <malloc>:
 800b454:	4b02      	ldr	r3, [pc, #8]	; (800b460 <malloc+0xc>)
 800b456:	4601      	mov	r1, r0
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	f000 b823 	b.w	800b4a4 <_malloc_r>
 800b45e:	bf00      	nop
 800b460:	2000006c 	.word	0x2000006c

0800b464 <sbrk_aligned>:
 800b464:	b570      	push	{r4, r5, r6, lr}
 800b466:	4e0e      	ldr	r6, [pc, #56]	; (800b4a0 <sbrk_aligned+0x3c>)
 800b468:	460c      	mov	r4, r1
 800b46a:	6831      	ldr	r1, [r6, #0]
 800b46c:	4605      	mov	r5, r0
 800b46e:	b911      	cbnz	r1, 800b476 <sbrk_aligned+0x12>
 800b470:	f001 fe1a 	bl	800d0a8 <_sbrk_r>
 800b474:	6030      	str	r0, [r6, #0]
 800b476:	4621      	mov	r1, r4
 800b478:	4628      	mov	r0, r5
 800b47a:	f001 fe15 	bl	800d0a8 <_sbrk_r>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	d00a      	beq.n	800b498 <sbrk_aligned+0x34>
 800b482:	1cc4      	adds	r4, r0, #3
 800b484:	f024 0403 	bic.w	r4, r4, #3
 800b488:	42a0      	cmp	r0, r4
 800b48a:	d007      	beq.n	800b49c <sbrk_aligned+0x38>
 800b48c:	1a21      	subs	r1, r4, r0
 800b48e:	4628      	mov	r0, r5
 800b490:	f001 fe0a 	bl	800d0a8 <_sbrk_r>
 800b494:	3001      	adds	r0, #1
 800b496:	d101      	bne.n	800b49c <sbrk_aligned+0x38>
 800b498:	f04f 34ff 	mov.w	r4, #4294967295
 800b49c:	4620      	mov	r0, r4
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	200006c8 	.word	0x200006c8

0800b4a4 <_malloc_r>:
 800b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	1ccd      	adds	r5, r1, #3
 800b4aa:	f025 0503 	bic.w	r5, r5, #3
 800b4ae:	3508      	adds	r5, #8
 800b4b0:	2d0c      	cmp	r5, #12
 800b4b2:	bf38      	it	cc
 800b4b4:	250c      	movcc	r5, #12
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	db01      	blt.n	800b4c0 <_malloc_r+0x1c>
 800b4bc:	42a9      	cmp	r1, r5
 800b4be:	d905      	bls.n	800b4cc <_malloc_r+0x28>
 800b4c0:	230c      	movs	r3, #12
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	2600      	movs	r6, #0
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b5a0 <_malloc_r+0xfc>
 800b4d0:	f000 f868 	bl	800b5a4 <__malloc_lock>
 800b4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4d8:	461c      	mov	r4, r3
 800b4da:	bb5c      	cbnz	r4, 800b534 <_malloc_r+0x90>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f7ff ffc0 	bl	800b464 <sbrk_aligned>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	d155      	bne.n	800b596 <_malloc_r+0xf2>
 800b4ea:	f8d8 4000 	ldr.w	r4, [r8]
 800b4ee:	4626      	mov	r6, r4
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	d145      	bne.n	800b580 <_malloc_r+0xdc>
 800b4f4:	2c00      	cmp	r4, #0
 800b4f6:	d048      	beq.n	800b58a <_malloc_r+0xe6>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	eb04 0903 	add.w	r9, r4, r3
 800b502:	f001 fdd1 	bl	800d0a8 <_sbrk_r>
 800b506:	4581      	cmp	r9, r0
 800b508:	d13f      	bne.n	800b58a <_malloc_r+0xe6>
 800b50a:	6821      	ldr	r1, [r4, #0]
 800b50c:	1a6d      	subs	r5, r5, r1
 800b50e:	4629      	mov	r1, r5
 800b510:	4638      	mov	r0, r7
 800b512:	f7ff ffa7 	bl	800b464 <sbrk_aligned>
 800b516:	3001      	adds	r0, #1
 800b518:	d037      	beq.n	800b58a <_malloc_r+0xe6>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	442b      	add	r3, r5
 800b51e:	6023      	str	r3, [r4, #0]
 800b520:	f8d8 3000 	ldr.w	r3, [r8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d038      	beq.n	800b59a <_malloc_r+0xf6>
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	42a2      	cmp	r2, r4
 800b52c:	d12b      	bne.n	800b586 <_malloc_r+0xe2>
 800b52e:	2200      	movs	r2, #0
 800b530:	605a      	str	r2, [r3, #4]
 800b532:	e00f      	b.n	800b554 <_malloc_r+0xb0>
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	1b52      	subs	r2, r2, r5
 800b538:	d41f      	bmi.n	800b57a <_malloc_r+0xd6>
 800b53a:	2a0b      	cmp	r2, #11
 800b53c:	d917      	bls.n	800b56e <_malloc_r+0xca>
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	42a3      	cmp	r3, r4
 800b542:	6025      	str	r5, [r4, #0]
 800b544:	bf18      	it	ne
 800b546:	6059      	strne	r1, [r3, #4]
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	bf08      	it	eq
 800b54c:	f8c8 1000 	streq.w	r1, [r8]
 800b550:	5162      	str	r2, [r4, r5]
 800b552:	604b      	str	r3, [r1, #4]
 800b554:	4638      	mov	r0, r7
 800b556:	f104 060b 	add.w	r6, r4, #11
 800b55a:	f000 f829 	bl	800b5b0 <__malloc_unlock>
 800b55e:	f026 0607 	bic.w	r6, r6, #7
 800b562:	1d23      	adds	r3, r4, #4
 800b564:	1af2      	subs	r2, r6, r3
 800b566:	d0ae      	beq.n	800b4c6 <_malloc_r+0x22>
 800b568:	1b9b      	subs	r3, r3, r6
 800b56a:	50a3      	str	r3, [r4, r2]
 800b56c:	e7ab      	b.n	800b4c6 <_malloc_r+0x22>
 800b56e:	42a3      	cmp	r3, r4
 800b570:	6862      	ldr	r2, [r4, #4]
 800b572:	d1dd      	bne.n	800b530 <_malloc_r+0x8c>
 800b574:	f8c8 2000 	str.w	r2, [r8]
 800b578:	e7ec      	b.n	800b554 <_malloc_r+0xb0>
 800b57a:	4623      	mov	r3, r4
 800b57c:	6864      	ldr	r4, [r4, #4]
 800b57e:	e7ac      	b.n	800b4da <_malloc_r+0x36>
 800b580:	4634      	mov	r4, r6
 800b582:	6876      	ldr	r6, [r6, #4]
 800b584:	e7b4      	b.n	800b4f0 <_malloc_r+0x4c>
 800b586:	4613      	mov	r3, r2
 800b588:	e7cc      	b.n	800b524 <_malloc_r+0x80>
 800b58a:	230c      	movs	r3, #12
 800b58c:	603b      	str	r3, [r7, #0]
 800b58e:	4638      	mov	r0, r7
 800b590:	f000 f80e 	bl	800b5b0 <__malloc_unlock>
 800b594:	e797      	b.n	800b4c6 <_malloc_r+0x22>
 800b596:	6025      	str	r5, [r4, #0]
 800b598:	e7dc      	b.n	800b554 <_malloc_r+0xb0>
 800b59a:	605b      	str	r3, [r3, #4]
 800b59c:	deff      	udf	#255	; 0xff
 800b59e:	bf00      	nop
 800b5a0:	200006c4 	.word	0x200006c4

0800b5a4 <__malloc_lock>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__malloc_lock+0x8>)
 800b5a6:	f7ff b884 	b.w	800a6b2 <__retarget_lock_acquire_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	200006c0 	.word	0x200006c0

0800b5b0 <__malloc_unlock>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	; (800b5b8 <__malloc_unlock+0x8>)
 800b5b2:	f7ff b87f 	b.w	800a6b4 <__retarget_lock_release_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	200006c0 	.word	0x200006c0

0800b5bc <_Balloc>:
 800b5bc:	b570      	push	{r4, r5, r6, lr}
 800b5be:	69c6      	ldr	r6, [r0, #28]
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	b976      	cbnz	r6, 800b5e4 <_Balloc+0x28>
 800b5c6:	2010      	movs	r0, #16
 800b5c8:	f7ff ff44 	bl	800b454 <malloc>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	61e0      	str	r0, [r4, #28]
 800b5d0:	b920      	cbnz	r0, 800b5dc <_Balloc+0x20>
 800b5d2:	4b18      	ldr	r3, [pc, #96]	; (800b634 <_Balloc+0x78>)
 800b5d4:	4818      	ldr	r0, [pc, #96]	; (800b638 <_Balloc+0x7c>)
 800b5d6:	216b      	movs	r1, #107	; 0x6b
 800b5d8:	f001 fd8e 	bl	800d0f8 <__assert_func>
 800b5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5e0:	6006      	str	r6, [r0, #0]
 800b5e2:	60c6      	str	r6, [r0, #12]
 800b5e4:	69e6      	ldr	r6, [r4, #28]
 800b5e6:	68f3      	ldr	r3, [r6, #12]
 800b5e8:	b183      	cbz	r3, 800b60c <_Balloc+0x50>
 800b5ea:	69e3      	ldr	r3, [r4, #28]
 800b5ec:	68db      	ldr	r3, [r3, #12]
 800b5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5f2:	b9b8      	cbnz	r0, 800b624 <_Balloc+0x68>
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	fa01 f605 	lsl.w	r6, r1, r5
 800b5fa:	1d72      	adds	r2, r6, #5
 800b5fc:	0092      	lsls	r2, r2, #2
 800b5fe:	4620      	mov	r0, r4
 800b600:	f001 fd98 	bl	800d134 <_calloc_r>
 800b604:	b160      	cbz	r0, 800b620 <_Balloc+0x64>
 800b606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b60a:	e00e      	b.n	800b62a <_Balloc+0x6e>
 800b60c:	2221      	movs	r2, #33	; 0x21
 800b60e:	2104      	movs	r1, #4
 800b610:	4620      	mov	r0, r4
 800b612:	f001 fd8f 	bl	800d134 <_calloc_r>
 800b616:	69e3      	ldr	r3, [r4, #28]
 800b618:	60f0      	str	r0, [r6, #12]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e4      	bne.n	800b5ea <_Balloc+0x2e>
 800b620:	2000      	movs	r0, #0
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	6802      	ldr	r2, [r0, #0]
 800b626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b62a:	2300      	movs	r3, #0
 800b62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b630:	e7f7      	b.n	800b622 <_Balloc+0x66>
 800b632:	bf00      	nop
 800b634:	08010f0a 	.word	0x08010f0a
 800b638:	08010f8a 	.word	0x08010f8a

0800b63c <_Bfree>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	69c6      	ldr	r6, [r0, #28]
 800b640:	4605      	mov	r5, r0
 800b642:	460c      	mov	r4, r1
 800b644:	b976      	cbnz	r6, 800b664 <_Bfree+0x28>
 800b646:	2010      	movs	r0, #16
 800b648:	f7ff ff04 	bl	800b454 <malloc>
 800b64c:	4602      	mov	r2, r0
 800b64e:	61e8      	str	r0, [r5, #28]
 800b650:	b920      	cbnz	r0, 800b65c <_Bfree+0x20>
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <_Bfree+0x3c>)
 800b654:	4809      	ldr	r0, [pc, #36]	; (800b67c <_Bfree+0x40>)
 800b656:	218f      	movs	r1, #143	; 0x8f
 800b658:	f001 fd4e 	bl	800d0f8 <__assert_func>
 800b65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b660:	6006      	str	r6, [r0, #0]
 800b662:	60c6      	str	r6, [r0, #12]
 800b664:	b13c      	cbz	r4, 800b676 <_Bfree+0x3a>
 800b666:	69eb      	ldr	r3, [r5, #28]
 800b668:	6862      	ldr	r2, [r4, #4]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b670:	6021      	str	r1, [r4, #0]
 800b672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b676:	bd70      	pop	{r4, r5, r6, pc}
 800b678:	08010f0a 	.word	0x08010f0a
 800b67c:	08010f8a 	.word	0x08010f8a

0800b680 <__multadd>:
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	690d      	ldr	r5, [r1, #16]
 800b686:	4607      	mov	r7, r0
 800b688:	460c      	mov	r4, r1
 800b68a:	461e      	mov	r6, r3
 800b68c:	f101 0c14 	add.w	ip, r1, #20
 800b690:	2000      	movs	r0, #0
 800b692:	f8dc 3000 	ldr.w	r3, [ip]
 800b696:	b299      	uxth	r1, r3
 800b698:	fb02 6101 	mla	r1, r2, r1, r6
 800b69c:	0c1e      	lsrs	r6, r3, #16
 800b69e:	0c0b      	lsrs	r3, r1, #16
 800b6a0:	fb02 3306 	mla	r3, r2, r6, r3
 800b6a4:	b289      	uxth	r1, r1
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6ac:	4285      	cmp	r5, r0
 800b6ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b6b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6b6:	dcec      	bgt.n	800b692 <__multadd+0x12>
 800b6b8:	b30e      	cbz	r6, 800b6fe <__multadd+0x7e>
 800b6ba:	68a3      	ldr	r3, [r4, #8]
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	dc19      	bgt.n	800b6f4 <__multadd+0x74>
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	3101      	adds	r1, #1
 800b6c6:	f7ff ff79 	bl	800b5bc <_Balloc>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	b928      	cbnz	r0, 800b6da <__multadd+0x5a>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <__multadd+0x84>)
 800b6d2:	480d      	ldr	r0, [pc, #52]	; (800b708 <__multadd+0x88>)
 800b6d4:	21ba      	movs	r1, #186	; 0xba
 800b6d6:	f001 fd0f 	bl	800d0f8 <__assert_func>
 800b6da:	6922      	ldr	r2, [r4, #16]
 800b6dc:	3202      	adds	r2, #2
 800b6de:	f104 010c 	add.w	r1, r4, #12
 800b6e2:	0092      	lsls	r2, r2, #2
 800b6e4:	300c      	adds	r0, #12
 800b6e6:	f001 fcef 	bl	800d0c8 <memcpy>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff ffa5 	bl	800b63c <_Bfree>
 800b6f2:	4644      	mov	r4, r8
 800b6f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	615e      	str	r6, [r3, #20]
 800b6fc:	6125      	str	r5, [r4, #16]
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	08010f79 	.word	0x08010f79
 800b708:	08010f8a 	.word	0x08010f8a

0800b70c <__s2b>:
 800b70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	4615      	mov	r5, r2
 800b714:	461f      	mov	r7, r3
 800b716:	2209      	movs	r2, #9
 800b718:	3308      	adds	r3, #8
 800b71a:	4606      	mov	r6, r0
 800b71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b720:	2100      	movs	r1, #0
 800b722:	2201      	movs	r2, #1
 800b724:	429a      	cmp	r2, r3
 800b726:	db09      	blt.n	800b73c <__s2b+0x30>
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff ff47 	bl	800b5bc <_Balloc>
 800b72e:	b940      	cbnz	r0, 800b742 <__s2b+0x36>
 800b730:	4602      	mov	r2, r0
 800b732:	4b19      	ldr	r3, [pc, #100]	; (800b798 <__s2b+0x8c>)
 800b734:	4819      	ldr	r0, [pc, #100]	; (800b79c <__s2b+0x90>)
 800b736:	21d3      	movs	r1, #211	; 0xd3
 800b738:	f001 fcde 	bl	800d0f8 <__assert_func>
 800b73c:	0052      	lsls	r2, r2, #1
 800b73e:	3101      	adds	r1, #1
 800b740:	e7f0      	b.n	800b724 <__s2b+0x18>
 800b742:	9b08      	ldr	r3, [sp, #32]
 800b744:	6143      	str	r3, [r0, #20]
 800b746:	2d09      	cmp	r5, #9
 800b748:	f04f 0301 	mov.w	r3, #1
 800b74c:	6103      	str	r3, [r0, #16]
 800b74e:	dd16      	ble.n	800b77e <__s2b+0x72>
 800b750:	f104 0909 	add.w	r9, r4, #9
 800b754:	46c8      	mov	r8, r9
 800b756:	442c      	add	r4, r5
 800b758:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b75c:	4601      	mov	r1, r0
 800b75e:	3b30      	subs	r3, #48	; 0x30
 800b760:	220a      	movs	r2, #10
 800b762:	4630      	mov	r0, r6
 800b764:	f7ff ff8c 	bl	800b680 <__multadd>
 800b768:	45a0      	cmp	r8, r4
 800b76a:	d1f5      	bne.n	800b758 <__s2b+0x4c>
 800b76c:	f1a5 0408 	sub.w	r4, r5, #8
 800b770:	444c      	add	r4, r9
 800b772:	1b2d      	subs	r5, r5, r4
 800b774:	1963      	adds	r3, r4, r5
 800b776:	42bb      	cmp	r3, r7
 800b778:	db04      	blt.n	800b784 <__s2b+0x78>
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	340a      	adds	r4, #10
 800b780:	2509      	movs	r5, #9
 800b782:	e7f6      	b.n	800b772 <__s2b+0x66>
 800b784:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b788:	4601      	mov	r1, r0
 800b78a:	3b30      	subs	r3, #48	; 0x30
 800b78c:	220a      	movs	r2, #10
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ff76 	bl	800b680 <__multadd>
 800b794:	e7ee      	b.n	800b774 <__s2b+0x68>
 800b796:	bf00      	nop
 800b798:	08010f79 	.word	0x08010f79
 800b79c:	08010f8a 	.word	0x08010f8a

0800b7a0 <__hi0bits>:
 800b7a0:	0c03      	lsrs	r3, r0, #16
 800b7a2:	041b      	lsls	r3, r3, #16
 800b7a4:	b9d3      	cbnz	r3, 800b7dc <__hi0bits+0x3c>
 800b7a6:	0400      	lsls	r0, r0, #16
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7ae:	bf04      	itt	eq
 800b7b0:	0200      	lsleq	r0, r0, #8
 800b7b2:	3308      	addeq	r3, #8
 800b7b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7b8:	bf04      	itt	eq
 800b7ba:	0100      	lsleq	r0, r0, #4
 800b7bc:	3304      	addeq	r3, #4
 800b7be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7c2:	bf04      	itt	eq
 800b7c4:	0080      	lsleq	r0, r0, #2
 800b7c6:	3302      	addeq	r3, #2
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	db05      	blt.n	800b7d8 <__hi0bits+0x38>
 800b7cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7d0:	f103 0301 	add.w	r3, r3, #1
 800b7d4:	bf08      	it	eq
 800b7d6:	2320      	moveq	r3, #32
 800b7d8:	4618      	mov	r0, r3
 800b7da:	4770      	bx	lr
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e7e4      	b.n	800b7aa <__hi0bits+0xa>

0800b7e0 <__lo0bits>:
 800b7e0:	6803      	ldr	r3, [r0, #0]
 800b7e2:	f013 0207 	ands.w	r2, r3, #7
 800b7e6:	d00c      	beq.n	800b802 <__lo0bits+0x22>
 800b7e8:	07d9      	lsls	r1, r3, #31
 800b7ea:	d422      	bmi.n	800b832 <__lo0bits+0x52>
 800b7ec:	079a      	lsls	r2, r3, #30
 800b7ee:	bf49      	itett	mi
 800b7f0:	085b      	lsrmi	r3, r3, #1
 800b7f2:	089b      	lsrpl	r3, r3, #2
 800b7f4:	6003      	strmi	r3, [r0, #0]
 800b7f6:	2201      	movmi	r2, #1
 800b7f8:	bf5c      	itt	pl
 800b7fa:	6003      	strpl	r3, [r0, #0]
 800b7fc:	2202      	movpl	r2, #2
 800b7fe:	4610      	mov	r0, r2
 800b800:	4770      	bx	lr
 800b802:	b299      	uxth	r1, r3
 800b804:	b909      	cbnz	r1, 800b80a <__lo0bits+0x2a>
 800b806:	0c1b      	lsrs	r3, r3, #16
 800b808:	2210      	movs	r2, #16
 800b80a:	b2d9      	uxtb	r1, r3
 800b80c:	b909      	cbnz	r1, 800b812 <__lo0bits+0x32>
 800b80e:	3208      	adds	r2, #8
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	0719      	lsls	r1, r3, #28
 800b814:	bf04      	itt	eq
 800b816:	091b      	lsreq	r3, r3, #4
 800b818:	3204      	addeq	r2, #4
 800b81a:	0799      	lsls	r1, r3, #30
 800b81c:	bf04      	itt	eq
 800b81e:	089b      	lsreq	r3, r3, #2
 800b820:	3202      	addeq	r2, #2
 800b822:	07d9      	lsls	r1, r3, #31
 800b824:	d403      	bmi.n	800b82e <__lo0bits+0x4e>
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	f102 0201 	add.w	r2, r2, #1
 800b82c:	d003      	beq.n	800b836 <__lo0bits+0x56>
 800b82e:	6003      	str	r3, [r0, #0]
 800b830:	e7e5      	b.n	800b7fe <__lo0bits+0x1e>
 800b832:	2200      	movs	r2, #0
 800b834:	e7e3      	b.n	800b7fe <__lo0bits+0x1e>
 800b836:	2220      	movs	r2, #32
 800b838:	e7e1      	b.n	800b7fe <__lo0bits+0x1e>
	...

0800b83c <__i2b>:
 800b83c:	b510      	push	{r4, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	2101      	movs	r1, #1
 800b842:	f7ff febb 	bl	800b5bc <_Balloc>
 800b846:	4602      	mov	r2, r0
 800b848:	b928      	cbnz	r0, 800b856 <__i2b+0x1a>
 800b84a:	4b05      	ldr	r3, [pc, #20]	; (800b860 <__i2b+0x24>)
 800b84c:	4805      	ldr	r0, [pc, #20]	; (800b864 <__i2b+0x28>)
 800b84e:	f240 1145 	movw	r1, #325	; 0x145
 800b852:	f001 fc51 	bl	800d0f8 <__assert_func>
 800b856:	2301      	movs	r3, #1
 800b858:	6144      	str	r4, [r0, #20]
 800b85a:	6103      	str	r3, [r0, #16]
 800b85c:	bd10      	pop	{r4, pc}
 800b85e:	bf00      	nop
 800b860:	08010f79 	.word	0x08010f79
 800b864:	08010f8a 	.word	0x08010f8a

0800b868 <__multiply>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	4691      	mov	r9, r2
 800b86e:	690a      	ldr	r2, [r1, #16]
 800b870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b874:	429a      	cmp	r2, r3
 800b876:	bfb8      	it	lt
 800b878:	460b      	movlt	r3, r1
 800b87a:	460c      	mov	r4, r1
 800b87c:	bfbc      	itt	lt
 800b87e:	464c      	movlt	r4, r9
 800b880:	4699      	movlt	r9, r3
 800b882:	6927      	ldr	r7, [r4, #16]
 800b884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b888:	68a3      	ldr	r3, [r4, #8]
 800b88a:	6861      	ldr	r1, [r4, #4]
 800b88c:	eb07 060a 	add.w	r6, r7, sl
 800b890:	42b3      	cmp	r3, r6
 800b892:	b085      	sub	sp, #20
 800b894:	bfb8      	it	lt
 800b896:	3101      	addlt	r1, #1
 800b898:	f7ff fe90 	bl	800b5bc <_Balloc>
 800b89c:	b930      	cbnz	r0, 800b8ac <__multiply+0x44>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	4b44      	ldr	r3, [pc, #272]	; (800b9b4 <__multiply+0x14c>)
 800b8a2:	4845      	ldr	r0, [pc, #276]	; (800b9b8 <__multiply+0x150>)
 800b8a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b8a8:	f001 fc26 	bl	800d0f8 <__assert_func>
 800b8ac:	f100 0514 	add.w	r5, r0, #20
 800b8b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4543      	cmp	r3, r8
 800b8ba:	d321      	bcc.n	800b900 <__multiply+0x98>
 800b8bc:	f104 0314 	add.w	r3, r4, #20
 800b8c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8c4:	f109 0314 	add.w	r3, r9, #20
 800b8c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8cc:	9202      	str	r2, [sp, #8]
 800b8ce:	1b3a      	subs	r2, r7, r4
 800b8d0:	3a15      	subs	r2, #21
 800b8d2:	f022 0203 	bic.w	r2, r2, #3
 800b8d6:	3204      	adds	r2, #4
 800b8d8:	f104 0115 	add.w	r1, r4, #21
 800b8dc:	428f      	cmp	r7, r1
 800b8de:	bf38      	it	cc
 800b8e0:	2204      	movcc	r2, #4
 800b8e2:	9201      	str	r2, [sp, #4]
 800b8e4:	9a02      	ldr	r2, [sp, #8]
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d80c      	bhi.n	800b906 <__multiply+0x9e>
 800b8ec:	2e00      	cmp	r6, #0
 800b8ee:	dd03      	ble.n	800b8f8 <__multiply+0x90>
 800b8f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d05b      	beq.n	800b9b0 <__multiply+0x148>
 800b8f8:	6106      	str	r6, [r0, #16]
 800b8fa:	b005      	add	sp, #20
 800b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b900:	f843 2b04 	str.w	r2, [r3], #4
 800b904:	e7d8      	b.n	800b8b8 <__multiply+0x50>
 800b906:	f8b3 a000 	ldrh.w	sl, [r3]
 800b90a:	f1ba 0f00 	cmp.w	sl, #0
 800b90e:	d024      	beq.n	800b95a <__multiply+0xf2>
 800b910:	f104 0e14 	add.w	lr, r4, #20
 800b914:	46a9      	mov	r9, r5
 800b916:	f04f 0c00 	mov.w	ip, #0
 800b91a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b91e:	f8d9 1000 	ldr.w	r1, [r9]
 800b922:	fa1f fb82 	uxth.w	fp, r2
 800b926:	b289      	uxth	r1, r1
 800b928:	fb0a 110b 	mla	r1, sl, fp, r1
 800b92c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b930:	f8d9 2000 	ldr.w	r2, [r9]
 800b934:	4461      	add	r1, ip
 800b936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b93a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b93e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b942:	b289      	uxth	r1, r1
 800b944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b948:	4577      	cmp	r7, lr
 800b94a:	f849 1b04 	str.w	r1, [r9], #4
 800b94e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b952:	d8e2      	bhi.n	800b91a <__multiply+0xb2>
 800b954:	9a01      	ldr	r2, [sp, #4]
 800b956:	f845 c002 	str.w	ip, [r5, r2]
 800b95a:	9a03      	ldr	r2, [sp, #12]
 800b95c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b960:	3304      	adds	r3, #4
 800b962:	f1b9 0f00 	cmp.w	r9, #0
 800b966:	d021      	beq.n	800b9ac <__multiply+0x144>
 800b968:	6829      	ldr	r1, [r5, #0]
 800b96a:	f104 0c14 	add.w	ip, r4, #20
 800b96e:	46ae      	mov	lr, r5
 800b970:	f04f 0a00 	mov.w	sl, #0
 800b974:	f8bc b000 	ldrh.w	fp, [ip]
 800b978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b97c:	fb09 220b 	mla	r2, r9, fp, r2
 800b980:	4452      	add	r2, sl
 800b982:	b289      	uxth	r1, r1
 800b984:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b988:	f84e 1b04 	str.w	r1, [lr], #4
 800b98c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b990:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b994:	f8be 1000 	ldrh.w	r1, [lr]
 800b998:	fb09 110a 	mla	r1, r9, sl, r1
 800b99c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b9a0:	4567      	cmp	r7, ip
 800b9a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9a6:	d8e5      	bhi.n	800b974 <__multiply+0x10c>
 800b9a8:	9a01      	ldr	r2, [sp, #4]
 800b9aa:	50a9      	str	r1, [r5, r2]
 800b9ac:	3504      	adds	r5, #4
 800b9ae:	e799      	b.n	800b8e4 <__multiply+0x7c>
 800b9b0:	3e01      	subs	r6, #1
 800b9b2:	e79b      	b.n	800b8ec <__multiply+0x84>
 800b9b4:	08010f79 	.word	0x08010f79
 800b9b8:	08010f8a 	.word	0x08010f8a

0800b9bc <__pow5mult>:
 800b9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c0:	4615      	mov	r5, r2
 800b9c2:	f012 0203 	ands.w	r2, r2, #3
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	d007      	beq.n	800b9dc <__pow5mult+0x20>
 800b9cc:	4c25      	ldr	r4, [pc, #148]	; (800ba64 <__pow5mult+0xa8>)
 800b9ce:	3a01      	subs	r2, #1
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9d6:	f7ff fe53 	bl	800b680 <__multadd>
 800b9da:	4607      	mov	r7, r0
 800b9dc:	10ad      	asrs	r5, r5, #2
 800b9de:	d03d      	beq.n	800ba5c <__pow5mult+0xa0>
 800b9e0:	69f4      	ldr	r4, [r6, #28]
 800b9e2:	b97c      	cbnz	r4, 800ba04 <__pow5mult+0x48>
 800b9e4:	2010      	movs	r0, #16
 800b9e6:	f7ff fd35 	bl	800b454 <malloc>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	61f0      	str	r0, [r6, #28]
 800b9ee:	b928      	cbnz	r0, 800b9fc <__pow5mult+0x40>
 800b9f0:	4b1d      	ldr	r3, [pc, #116]	; (800ba68 <__pow5mult+0xac>)
 800b9f2:	481e      	ldr	r0, [pc, #120]	; (800ba6c <__pow5mult+0xb0>)
 800b9f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b9f8:	f001 fb7e 	bl	800d0f8 <__assert_func>
 800b9fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba00:	6004      	str	r4, [r0, #0]
 800ba02:	60c4      	str	r4, [r0, #12]
 800ba04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ba08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba0c:	b94c      	cbnz	r4, 800ba22 <__pow5mult+0x66>
 800ba0e:	f240 2171 	movw	r1, #625	; 0x271
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ff12 	bl	800b83c <__i2b>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba1e:	4604      	mov	r4, r0
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	f04f 0900 	mov.w	r9, #0
 800ba26:	07eb      	lsls	r3, r5, #31
 800ba28:	d50a      	bpl.n	800ba40 <__pow5mult+0x84>
 800ba2a:	4639      	mov	r1, r7
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ff1a 	bl	800b868 <__multiply>
 800ba34:	4639      	mov	r1, r7
 800ba36:	4680      	mov	r8, r0
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7ff fdff 	bl	800b63c <_Bfree>
 800ba3e:	4647      	mov	r7, r8
 800ba40:	106d      	asrs	r5, r5, #1
 800ba42:	d00b      	beq.n	800ba5c <__pow5mult+0xa0>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	b938      	cbnz	r0, 800ba58 <__pow5mult+0x9c>
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff ff0b 	bl	800b868 <__multiply>
 800ba52:	6020      	str	r0, [r4, #0]
 800ba54:	f8c0 9000 	str.w	r9, [r0]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	e7e4      	b.n	800ba26 <__pow5mult+0x6a>
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba62:	bf00      	nop
 800ba64:	080110d8 	.word	0x080110d8
 800ba68:	08010f0a 	.word	0x08010f0a
 800ba6c:	08010f8a 	.word	0x08010f8a

0800ba70 <__lshift>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	460c      	mov	r4, r1
 800ba76:	6849      	ldr	r1, [r1, #4]
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba7e:	68a3      	ldr	r3, [r4, #8]
 800ba80:	4607      	mov	r7, r0
 800ba82:	4691      	mov	r9, r2
 800ba84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba88:	f108 0601 	add.w	r6, r8, #1
 800ba8c:	42b3      	cmp	r3, r6
 800ba8e:	db0b      	blt.n	800baa8 <__lshift+0x38>
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff fd93 	bl	800b5bc <_Balloc>
 800ba96:	4605      	mov	r5, r0
 800ba98:	b948      	cbnz	r0, 800baae <__lshift+0x3e>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	4b28      	ldr	r3, [pc, #160]	; (800bb40 <__lshift+0xd0>)
 800ba9e:	4829      	ldr	r0, [pc, #164]	; (800bb44 <__lshift+0xd4>)
 800baa0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800baa4:	f001 fb28 	bl	800d0f8 <__assert_func>
 800baa8:	3101      	adds	r1, #1
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	e7ee      	b.n	800ba8c <__lshift+0x1c>
 800baae:	2300      	movs	r3, #0
 800bab0:	f100 0114 	add.w	r1, r0, #20
 800bab4:	f100 0210 	add.w	r2, r0, #16
 800bab8:	4618      	mov	r0, r3
 800baba:	4553      	cmp	r3, sl
 800babc:	db33      	blt.n	800bb26 <__lshift+0xb6>
 800babe:	6920      	ldr	r0, [r4, #16]
 800bac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bac4:	f104 0314 	add.w	r3, r4, #20
 800bac8:	f019 091f 	ands.w	r9, r9, #31
 800bacc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bad0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bad4:	d02b      	beq.n	800bb2e <__lshift+0xbe>
 800bad6:	f1c9 0e20 	rsb	lr, r9, #32
 800bada:	468a      	mov	sl, r1
 800badc:	2200      	movs	r2, #0
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	fa00 f009 	lsl.w	r0, r0, r9
 800bae4:	4310      	orrs	r0, r2
 800bae6:	f84a 0b04 	str.w	r0, [sl], #4
 800baea:	f853 2b04 	ldr.w	r2, [r3], #4
 800baee:	459c      	cmp	ip, r3
 800baf0:	fa22 f20e 	lsr.w	r2, r2, lr
 800baf4:	d8f3      	bhi.n	800bade <__lshift+0x6e>
 800baf6:	ebac 0304 	sub.w	r3, ip, r4
 800bafa:	3b15      	subs	r3, #21
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	3304      	adds	r3, #4
 800bb02:	f104 0015 	add.w	r0, r4, #21
 800bb06:	4584      	cmp	ip, r0
 800bb08:	bf38      	it	cc
 800bb0a:	2304      	movcc	r3, #4
 800bb0c:	50ca      	str	r2, [r1, r3]
 800bb0e:	b10a      	cbz	r2, 800bb14 <__lshift+0xa4>
 800bb10:	f108 0602 	add.w	r6, r8, #2
 800bb14:	3e01      	subs	r6, #1
 800bb16:	4638      	mov	r0, r7
 800bb18:	612e      	str	r6, [r5, #16]
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	f7ff fd8e 	bl	800b63c <_Bfree>
 800bb20:	4628      	mov	r0, r5
 800bb22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb26:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	e7c5      	b.n	800baba <__lshift+0x4a>
 800bb2e:	3904      	subs	r1, #4
 800bb30:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb34:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb38:	459c      	cmp	ip, r3
 800bb3a:	d8f9      	bhi.n	800bb30 <__lshift+0xc0>
 800bb3c:	e7ea      	b.n	800bb14 <__lshift+0xa4>
 800bb3e:	bf00      	nop
 800bb40:	08010f79 	.word	0x08010f79
 800bb44:	08010f8a 	.word	0x08010f8a

0800bb48 <__mcmp>:
 800bb48:	b530      	push	{r4, r5, lr}
 800bb4a:	6902      	ldr	r2, [r0, #16]
 800bb4c:	690c      	ldr	r4, [r1, #16]
 800bb4e:	1b12      	subs	r2, r2, r4
 800bb50:	d10e      	bne.n	800bb70 <__mcmp+0x28>
 800bb52:	f100 0314 	add.w	r3, r0, #20
 800bb56:	3114      	adds	r1, #20
 800bb58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb68:	42a5      	cmp	r5, r4
 800bb6a:	d003      	beq.n	800bb74 <__mcmp+0x2c>
 800bb6c:	d305      	bcc.n	800bb7a <__mcmp+0x32>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4610      	mov	r0, r2
 800bb72:	bd30      	pop	{r4, r5, pc}
 800bb74:	4283      	cmp	r3, r0
 800bb76:	d3f3      	bcc.n	800bb60 <__mcmp+0x18>
 800bb78:	e7fa      	b.n	800bb70 <__mcmp+0x28>
 800bb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7e:	e7f7      	b.n	800bb70 <__mcmp+0x28>

0800bb80 <__mdiff>:
 800bb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	460c      	mov	r4, r1
 800bb86:	4606      	mov	r6, r0
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4690      	mov	r8, r2
 800bb8e:	f7ff ffdb 	bl	800bb48 <__mcmp>
 800bb92:	1e05      	subs	r5, r0, #0
 800bb94:	d110      	bne.n	800bbb8 <__mdiff+0x38>
 800bb96:	4629      	mov	r1, r5
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7ff fd0f 	bl	800b5bc <_Balloc>
 800bb9e:	b930      	cbnz	r0, 800bbae <__mdiff+0x2e>
 800bba0:	4b3a      	ldr	r3, [pc, #232]	; (800bc8c <__mdiff+0x10c>)
 800bba2:	4602      	mov	r2, r0
 800bba4:	f240 2137 	movw	r1, #567	; 0x237
 800bba8:	4839      	ldr	r0, [pc, #228]	; (800bc90 <__mdiff+0x110>)
 800bbaa:	f001 faa5 	bl	800d0f8 <__assert_func>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb8:	bfa4      	itt	ge
 800bbba:	4643      	movge	r3, r8
 800bbbc:	46a0      	movge	r8, r4
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbc4:	bfa6      	itte	ge
 800bbc6:	461c      	movge	r4, r3
 800bbc8:	2500      	movge	r5, #0
 800bbca:	2501      	movlt	r5, #1
 800bbcc:	f7ff fcf6 	bl	800b5bc <_Balloc>
 800bbd0:	b920      	cbnz	r0, 800bbdc <__mdiff+0x5c>
 800bbd2:	4b2e      	ldr	r3, [pc, #184]	; (800bc8c <__mdiff+0x10c>)
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	f240 2145 	movw	r1, #581	; 0x245
 800bbda:	e7e5      	b.n	800bba8 <__mdiff+0x28>
 800bbdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbe0:	6926      	ldr	r6, [r4, #16]
 800bbe2:	60c5      	str	r5, [r0, #12]
 800bbe4:	f104 0914 	add.w	r9, r4, #20
 800bbe8:	f108 0514 	add.w	r5, r8, #20
 800bbec:	f100 0e14 	add.w	lr, r0, #20
 800bbf0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbf8:	f108 0210 	add.w	r2, r8, #16
 800bbfc:	46f2      	mov	sl, lr
 800bbfe:	2100      	movs	r1, #0
 800bc00:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc08:	fa11 f88b 	uxtah	r8, r1, fp
 800bc0c:	b299      	uxth	r1, r3
 800bc0e:	0c1b      	lsrs	r3, r3, #16
 800bc10:	eba8 0801 	sub.w	r8, r8, r1
 800bc14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc18:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc1c:	fa1f f888 	uxth.w	r8, r8
 800bc20:	1419      	asrs	r1, r3, #16
 800bc22:	454e      	cmp	r6, r9
 800bc24:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc28:	f84a 3b04 	str.w	r3, [sl], #4
 800bc2c:	d8e8      	bhi.n	800bc00 <__mdiff+0x80>
 800bc2e:	1b33      	subs	r3, r6, r4
 800bc30:	3b15      	subs	r3, #21
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	3304      	adds	r3, #4
 800bc38:	3415      	adds	r4, #21
 800bc3a:	42a6      	cmp	r6, r4
 800bc3c:	bf38      	it	cc
 800bc3e:	2304      	movcc	r3, #4
 800bc40:	441d      	add	r5, r3
 800bc42:	4473      	add	r3, lr
 800bc44:	469e      	mov	lr, r3
 800bc46:	462e      	mov	r6, r5
 800bc48:	4566      	cmp	r6, ip
 800bc4a:	d30e      	bcc.n	800bc6a <__mdiff+0xea>
 800bc4c:	f10c 0203 	add.w	r2, ip, #3
 800bc50:	1b52      	subs	r2, r2, r5
 800bc52:	f022 0203 	bic.w	r2, r2, #3
 800bc56:	3d03      	subs	r5, #3
 800bc58:	45ac      	cmp	ip, r5
 800bc5a:	bf38      	it	cc
 800bc5c:	2200      	movcc	r2, #0
 800bc5e:	4413      	add	r3, r2
 800bc60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc64:	b17a      	cbz	r2, 800bc86 <__mdiff+0x106>
 800bc66:	6107      	str	r7, [r0, #16]
 800bc68:	e7a4      	b.n	800bbb4 <__mdiff+0x34>
 800bc6a:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc6e:	fa11 f288 	uxtah	r2, r1, r8
 800bc72:	1414      	asrs	r4, r2, #16
 800bc74:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc78:	b292      	uxth	r2, r2
 800bc7a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc7e:	f84e 2b04 	str.w	r2, [lr], #4
 800bc82:	1421      	asrs	r1, r4, #16
 800bc84:	e7e0      	b.n	800bc48 <__mdiff+0xc8>
 800bc86:	3f01      	subs	r7, #1
 800bc88:	e7ea      	b.n	800bc60 <__mdiff+0xe0>
 800bc8a:	bf00      	nop
 800bc8c:	08010f79 	.word	0x08010f79
 800bc90:	08010f8a 	.word	0x08010f8a

0800bc94 <__ulp>:
 800bc94:	b082      	sub	sp, #8
 800bc96:	ed8d 0b00 	vstr	d0, [sp]
 800bc9a:	9a01      	ldr	r2, [sp, #4]
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <__ulp+0x48>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dc08      	bgt.n	800bcba <__ulp+0x26>
 800bca8:	425b      	negs	r3, r3
 800bcaa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bcae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bcb2:	da04      	bge.n	800bcbe <__ulp+0x2a>
 800bcb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bcb8:	4113      	asrs	r3, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	e008      	b.n	800bcd0 <__ulp+0x3c>
 800bcbe:	f1a2 0314 	sub.w	r3, r2, #20
 800bcc2:	2b1e      	cmp	r3, #30
 800bcc4:	bfda      	itte	le
 800bcc6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bcca:	40da      	lsrle	r2, r3
 800bccc:	2201      	movgt	r2, #1
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	4610      	mov	r0, r2
 800bcd4:	ec41 0b10 	vmov	d0, r0, r1
 800bcd8:	b002      	add	sp, #8
 800bcda:	4770      	bx	lr
 800bcdc:	7ff00000 	.word	0x7ff00000

0800bce0 <__b2d>:
 800bce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce4:	6906      	ldr	r6, [r0, #16]
 800bce6:	f100 0814 	add.w	r8, r0, #20
 800bcea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcee:	1f37      	subs	r7, r6, #4
 800bcf0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcf4:	4610      	mov	r0, r2
 800bcf6:	f7ff fd53 	bl	800b7a0 <__hi0bits>
 800bcfa:	f1c0 0320 	rsb	r3, r0, #32
 800bcfe:	280a      	cmp	r0, #10
 800bd00:	600b      	str	r3, [r1, #0]
 800bd02:	491b      	ldr	r1, [pc, #108]	; (800bd70 <__b2d+0x90>)
 800bd04:	dc15      	bgt.n	800bd32 <__b2d+0x52>
 800bd06:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd0a:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd0e:	45b8      	cmp	r8, r7
 800bd10:	ea43 0501 	orr.w	r5, r3, r1
 800bd14:	bf34      	ite	cc
 800bd16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd1a:	2300      	movcs	r3, #0
 800bd1c:	3015      	adds	r0, #21
 800bd1e:	fa02 f000 	lsl.w	r0, r2, r0
 800bd22:	fa23 f30c 	lsr.w	r3, r3, ip
 800bd26:	4303      	orrs	r3, r0
 800bd28:	461c      	mov	r4, r3
 800bd2a:	ec45 4b10 	vmov	d0, r4, r5
 800bd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd32:	45b8      	cmp	r8, r7
 800bd34:	bf3a      	itte	cc
 800bd36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd3a:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd3e:	2300      	movcs	r3, #0
 800bd40:	380b      	subs	r0, #11
 800bd42:	d012      	beq.n	800bd6a <__b2d+0x8a>
 800bd44:	f1c0 0120 	rsb	r1, r0, #32
 800bd48:	fa23 f401 	lsr.w	r4, r3, r1
 800bd4c:	4082      	lsls	r2, r0
 800bd4e:	4322      	orrs	r2, r4
 800bd50:	4547      	cmp	r7, r8
 800bd52:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bd56:	bf8c      	ite	hi
 800bd58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd5c:	2200      	movls	r2, #0
 800bd5e:	4083      	lsls	r3, r0
 800bd60:	40ca      	lsrs	r2, r1
 800bd62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd66:	4313      	orrs	r3, r2
 800bd68:	e7de      	b.n	800bd28 <__b2d+0x48>
 800bd6a:	ea42 0501 	orr.w	r5, r2, r1
 800bd6e:	e7db      	b.n	800bd28 <__b2d+0x48>
 800bd70:	3ff00000 	.word	0x3ff00000

0800bd74 <__d2b>:
 800bd74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd78:	460f      	mov	r7, r1
 800bd7a:	2101      	movs	r1, #1
 800bd7c:	ec59 8b10 	vmov	r8, r9, d0
 800bd80:	4616      	mov	r6, r2
 800bd82:	f7ff fc1b 	bl	800b5bc <_Balloc>
 800bd86:	4604      	mov	r4, r0
 800bd88:	b930      	cbnz	r0, 800bd98 <__d2b+0x24>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4b24      	ldr	r3, [pc, #144]	; (800be20 <__d2b+0xac>)
 800bd8e:	4825      	ldr	r0, [pc, #148]	; (800be24 <__d2b+0xb0>)
 800bd90:	f240 310f 	movw	r1, #783	; 0x30f
 800bd94:	f001 f9b0 	bl	800d0f8 <__assert_func>
 800bd98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bda0:	bb2d      	cbnz	r5, 800bdee <__d2b+0x7a>
 800bda2:	9301      	str	r3, [sp, #4]
 800bda4:	f1b8 0300 	subs.w	r3, r8, #0
 800bda8:	d026      	beq.n	800bdf8 <__d2b+0x84>
 800bdaa:	4668      	mov	r0, sp
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	f7ff fd17 	bl	800b7e0 <__lo0bits>
 800bdb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdb6:	b1e8      	cbz	r0, 800bdf4 <__d2b+0x80>
 800bdb8:	f1c0 0320 	rsb	r3, r0, #32
 800bdbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc0:	430b      	orrs	r3, r1
 800bdc2:	40c2      	lsrs	r2, r0
 800bdc4:	6163      	str	r3, [r4, #20]
 800bdc6:	9201      	str	r2, [sp, #4]
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	61a3      	str	r3, [r4, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	bf14      	ite	ne
 800bdd0:	2202      	movne	r2, #2
 800bdd2:	2201      	moveq	r2, #1
 800bdd4:	6122      	str	r2, [r4, #16]
 800bdd6:	b1bd      	cbz	r5, 800be08 <__d2b+0x94>
 800bdd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bddc:	4405      	add	r5, r0
 800bdde:	603d      	str	r5, [r7, #0]
 800bde0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bde4:	6030      	str	r0, [r6, #0]
 800bde6:	4620      	mov	r0, r4
 800bde8:	b003      	add	sp, #12
 800bdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf2:	e7d6      	b.n	800bda2 <__d2b+0x2e>
 800bdf4:	6161      	str	r1, [r4, #20]
 800bdf6:	e7e7      	b.n	800bdc8 <__d2b+0x54>
 800bdf8:	a801      	add	r0, sp, #4
 800bdfa:	f7ff fcf1 	bl	800b7e0 <__lo0bits>
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	6163      	str	r3, [r4, #20]
 800be02:	3020      	adds	r0, #32
 800be04:	2201      	movs	r2, #1
 800be06:	e7e5      	b.n	800bdd4 <__d2b+0x60>
 800be08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be10:	6038      	str	r0, [r7, #0]
 800be12:	6918      	ldr	r0, [r3, #16]
 800be14:	f7ff fcc4 	bl	800b7a0 <__hi0bits>
 800be18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be1c:	e7e2      	b.n	800bde4 <__d2b+0x70>
 800be1e:	bf00      	nop
 800be20:	08010f79 	.word	0x08010f79
 800be24:	08010f8a 	.word	0x08010f8a

0800be28 <__ratio>:
 800be28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	4688      	mov	r8, r1
 800be2e:	4669      	mov	r1, sp
 800be30:	4681      	mov	r9, r0
 800be32:	f7ff ff55 	bl	800bce0 <__b2d>
 800be36:	a901      	add	r1, sp, #4
 800be38:	4640      	mov	r0, r8
 800be3a:	ec55 4b10 	vmov	r4, r5, d0
 800be3e:	f7ff ff4f 	bl	800bce0 <__b2d>
 800be42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be4a:	eba3 0c02 	sub.w	ip, r3, r2
 800be4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be58:	ec51 0b10 	vmov	r0, r1, d0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfd6      	itet	le
 800be60:	460a      	movle	r2, r1
 800be62:	462a      	movgt	r2, r5
 800be64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be68:	468b      	mov	fp, r1
 800be6a:	462f      	mov	r7, r5
 800be6c:	bfd4      	ite	le
 800be6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be76:	4620      	mov	r0, r4
 800be78:	ee10 2a10 	vmov	r2, s0
 800be7c:	465b      	mov	r3, fp
 800be7e:	4639      	mov	r1, r7
 800be80:	f7f4 fce4 	bl	800084c <__aeabi_ddiv>
 800be84:	ec41 0b10 	vmov	d0, r0, r1
 800be88:	b003      	add	sp, #12
 800be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be8e <__copybits>:
 800be8e:	3901      	subs	r1, #1
 800be90:	b570      	push	{r4, r5, r6, lr}
 800be92:	1149      	asrs	r1, r1, #5
 800be94:	6914      	ldr	r4, [r2, #16]
 800be96:	3101      	adds	r1, #1
 800be98:	f102 0314 	add.w	r3, r2, #20
 800be9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bea4:	1f05      	subs	r5, r0, #4
 800bea6:	42a3      	cmp	r3, r4
 800bea8:	d30c      	bcc.n	800bec4 <__copybits+0x36>
 800beaa:	1aa3      	subs	r3, r4, r2
 800beac:	3b11      	subs	r3, #17
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	3211      	adds	r2, #17
 800beb4:	42a2      	cmp	r2, r4
 800beb6:	bf88      	it	hi
 800beb8:	2300      	movhi	r3, #0
 800beba:	4418      	add	r0, r3
 800bebc:	2300      	movs	r3, #0
 800bebe:	4288      	cmp	r0, r1
 800bec0:	d305      	bcc.n	800bece <__copybits+0x40>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f853 6b04 	ldr.w	r6, [r3], #4
 800bec8:	f845 6f04 	str.w	r6, [r5, #4]!
 800becc:	e7eb      	b.n	800bea6 <__copybits+0x18>
 800bece:	f840 3b04 	str.w	r3, [r0], #4
 800bed2:	e7f4      	b.n	800bebe <__copybits+0x30>

0800bed4 <__any_on>:
 800bed4:	f100 0214 	add.w	r2, r0, #20
 800bed8:	6900      	ldr	r0, [r0, #16]
 800beda:	114b      	asrs	r3, r1, #5
 800bedc:	4298      	cmp	r0, r3
 800bede:	b510      	push	{r4, lr}
 800bee0:	db11      	blt.n	800bf06 <__any_on+0x32>
 800bee2:	dd0a      	ble.n	800befa <__any_on+0x26>
 800bee4:	f011 011f 	ands.w	r1, r1, #31
 800bee8:	d007      	beq.n	800befa <__any_on+0x26>
 800beea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800beee:	fa24 f001 	lsr.w	r0, r4, r1
 800bef2:	fa00 f101 	lsl.w	r1, r0, r1
 800bef6:	428c      	cmp	r4, r1
 800bef8:	d10b      	bne.n	800bf12 <__any_on+0x3e>
 800befa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800befe:	4293      	cmp	r3, r2
 800bf00:	d803      	bhi.n	800bf0a <__any_on+0x36>
 800bf02:	2000      	movs	r0, #0
 800bf04:	bd10      	pop	{r4, pc}
 800bf06:	4603      	mov	r3, r0
 800bf08:	e7f7      	b.n	800befa <__any_on+0x26>
 800bf0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	d0f5      	beq.n	800befe <__any_on+0x2a>
 800bf12:	2001      	movs	r0, #1
 800bf14:	e7f6      	b.n	800bf04 <__any_on+0x30>

0800bf16 <sulp>:
 800bf16:	b570      	push	{r4, r5, r6, lr}
 800bf18:	4604      	mov	r4, r0
 800bf1a:	460d      	mov	r5, r1
 800bf1c:	ec45 4b10 	vmov	d0, r4, r5
 800bf20:	4616      	mov	r6, r2
 800bf22:	f7ff feb7 	bl	800bc94 <__ulp>
 800bf26:	ec51 0b10 	vmov	r0, r1, d0
 800bf2a:	b17e      	cbz	r6, 800bf4c <sulp+0x36>
 800bf2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd09      	ble.n	800bf4c <sulp+0x36>
 800bf38:	051b      	lsls	r3, r3, #20
 800bf3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf3e:	2400      	movs	r4, #0
 800bf40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	f7f4 fb56 	bl	80005f8 <__aeabi_dmul>
 800bf4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf50 <_strtod_l>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	ed2d 8b02 	vpush	{d8}
 800bf58:	b09b      	sub	sp, #108	; 0x6c
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf5e:	2200      	movs	r2, #0
 800bf60:	9216      	str	r2, [sp, #88]	; 0x58
 800bf62:	460d      	mov	r5, r1
 800bf64:	f04f 0800 	mov.w	r8, #0
 800bf68:	f04f 0900 	mov.w	r9, #0
 800bf6c:	460a      	mov	r2, r1
 800bf6e:	9215      	str	r2, [sp, #84]	; 0x54
 800bf70:	7811      	ldrb	r1, [r2, #0]
 800bf72:	292b      	cmp	r1, #43	; 0x2b
 800bf74:	d04c      	beq.n	800c010 <_strtod_l+0xc0>
 800bf76:	d83a      	bhi.n	800bfee <_strtod_l+0x9e>
 800bf78:	290d      	cmp	r1, #13
 800bf7a:	d834      	bhi.n	800bfe6 <_strtod_l+0x96>
 800bf7c:	2908      	cmp	r1, #8
 800bf7e:	d834      	bhi.n	800bfea <_strtod_l+0x9a>
 800bf80:	2900      	cmp	r1, #0
 800bf82:	d03d      	beq.n	800c000 <_strtod_l+0xb0>
 800bf84:	2200      	movs	r2, #0
 800bf86:	920a      	str	r2, [sp, #40]	; 0x28
 800bf88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bf8a:	7832      	ldrb	r2, [r6, #0]
 800bf8c:	2a30      	cmp	r2, #48	; 0x30
 800bf8e:	f040 80b4 	bne.w	800c0fa <_strtod_l+0x1aa>
 800bf92:	7872      	ldrb	r2, [r6, #1]
 800bf94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bf98:	2a58      	cmp	r2, #88	; 0x58
 800bf9a:	d170      	bne.n	800c07e <_strtod_l+0x12e>
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	ab16      	add	r3, sp, #88	; 0x58
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	4a8e      	ldr	r2, [pc, #568]	; (800c1e0 <_strtod_l+0x290>)
 800bfa8:	ab17      	add	r3, sp, #92	; 0x5c
 800bfaa:	a915      	add	r1, sp, #84	; 0x54
 800bfac:	4620      	mov	r0, r4
 800bfae:	f001 f93f 	bl	800d230 <__gethex>
 800bfb2:	f010 070f 	ands.w	r7, r0, #15
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	d005      	beq.n	800bfc6 <_strtod_l+0x76>
 800bfba:	2f06      	cmp	r7, #6
 800bfbc:	d12a      	bne.n	800c014 <_strtod_l+0xc4>
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9615      	str	r6, [sp, #84]	; 0x54
 800bfc4:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 857f 	bne.w	800cacc <_strtod_l+0xb7c>
 800bfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfd0:	b1db      	cbz	r3, 800c00a <_strtod_l+0xba>
 800bfd2:	4642      	mov	r2, r8
 800bfd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bfd8:	ec43 2b10 	vmov	d0, r2, r3
 800bfdc:	b01b      	add	sp, #108	; 0x6c
 800bfde:	ecbd 8b02 	vpop	{d8}
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	2920      	cmp	r1, #32
 800bfe8:	d1cc      	bne.n	800bf84 <_strtod_l+0x34>
 800bfea:	3201      	adds	r2, #1
 800bfec:	e7bf      	b.n	800bf6e <_strtod_l+0x1e>
 800bfee:	292d      	cmp	r1, #45	; 0x2d
 800bff0:	d1c8      	bne.n	800bf84 <_strtod_l+0x34>
 800bff2:	2101      	movs	r1, #1
 800bff4:	910a      	str	r1, [sp, #40]	; 0x28
 800bff6:	1c51      	adds	r1, r2, #1
 800bff8:	9115      	str	r1, [sp, #84]	; 0x54
 800bffa:	7852      	ldrb	r2, [r2, #1]
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	d1c3      	bne.n	800bf88 <_strtod_l+0x38>
 800c000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c002:	9515      	str	r5, [sp, #84]	; 0x54
 800c004:	2b00      	cmp	r3, #0
 800c006:	f040 855f 	bne.w	800cac8 <_strtod_l+0xb78>
 800c00a:	4642      	mov	r2, r8
 800c00c:	464b      	mov	r3, r9
 800c00e:	e7e3      	b.n	800bfd8 <_strtod_l+0x88>
 800c010:	2100      	movs	r1, #0
 800c012:	e7ef      	b.n	800bff4 <_strtod_l+0xa4>
 800c014:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c016:	b13a      	cbz	r2, 800c028 <_strtod_l+0xd8>
 800c018:	2135      	movs	r1, #53	; 0x35
 800c01a:	a818      	add	r0, sp, #96	; 0x60
 800c01c:	f7ff ff37 	bl	800be8e <__copybits>
 800c020:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c022:	4620      	mov	r0, r4
 800c024:	f7ff fb0a 	bl	800b63c <_Bfree>
 800c028:	3f01      	subs	r7, #1
 800c02a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c02c:	2f04      	cmp	r7, #4
 800c02e:	d806      	bhi.n	800c03e <_strtod_l+0xee>
 800c030:	e8df f007 	tbb	[pc, r7]
 800c034:	201d0314 	.word	0x201d0314
 800c038:	14          	.byte	0x14
 800c039:	00          	.byte	0x00
 800c03a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c03e:	05e9      	lsls	r1, r5, #23
 800c040:	bf48      	it	mi
 800c042:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c046:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c04a:	0d1b      	lsrs	r3, r3, #20
 800c04c:	051b      	lsls	r3, r3, #20
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1b9      	bne.n	800bfc6 <_strtod_l+0x76>
 800c052:	f7fe fb03 	bl	800a65c <__errno>
 800c056:	2322      	movs	r3, #34	; 0x22
 800c058:	6003      	str	r3, [r0, #0]
 800c05a:	e7b4      	b.n	800bfc6 <_strtod_l+0x76>
 800c05c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c060:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c064:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c068:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c06c:	e7e7      	b.n	800c03e <_strtod_l+0xee>
 800c06e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c1e8 <_strtod_l+0x298>
 800c072:	e7e4      	b.n	800c03e <_strtod_l+0xee>
 800c074:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c078:	f04f 38ff 	mov.w	r8, #4294967295
 800c07c:	e7df      	b.n	800c03e <_strtod_l+0xee>
 800c07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	9215      	str	r2, [sp, #84]	; 0x54
 800c084:	785b      	ldrb	r3, [r3, #1]
 800c086:	2b30      	cmp	r3, #48	; 0x30
 800c088:	d0f9      	beq.n	800c07e <_strtod_l+0x12e>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d09b      	beq.n	800bfc6 <_strtod_l+0x76>
 800c08e:	2301      	movs	r3, #1
 800c090:	f04f 0a00 	mov.w	sl, #0
 800c094:	9304      	str	r3, [sp, #16]
 800c096:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c098:	930b      	str	r3, [sp, #44]	; 0x2c
 800c09a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c09e:	46d3      	mov	fp, sl
 800c0a0:	220a      	movs	r2, #10
 800c0a2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c0a4:	7806      	ldrb	r6, [r0, #0]
 800c0a6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c0aa:	b2d9      	uxtb	r1, r3
 800c0ac:	2909      	cmp	r1, #9
 800c0ae:	d926      	bls.n	800c0fe <_strtod_l+0x1ae>
 800c0b0:	494c      	ldr	r1, [pc, #304]	; (800c1e4 <_strtod_l+0x294>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f000 ffe6 	bl	800d084 <strncmp>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	d030      	beq.n	800c11e <_strtod_l+0x1ce>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	4632      	mov	r2, r6
 800c0c0:	9005      	str	r0, [sp, #20]
 800c0c2:	465e      	mov	r6, fp
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2a65      	cmp	r2, #101	; 0x65
 800c0c8:	d001      	beq.n	800c0ce <_strtod_l+0x17e>
 800c0ca:	2a45      	cmp	r2, #69	; 0x45
 800c0cc:	d113      	bne.n	800c0f6 <_strtod_l+0x1a6>
 800c0ce:	b91e      	cbnz	r6, 800c0d8 <_strtod_l+0x188>
 800c0d0:	9a04      	ldr	r2, [sp, #16]
 800c0d2:	4302      	orrs	r2, r0
 800c0d4:	d094      	beq.n	800c000 <_strtod_l+0xb0>
 800c0d6:	2600      	movs	r6, #0
 800c0d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c0da:	1c6a      	adds	r2, r5, #1
 800c0dc:	9215      	str	r2, [sp, #84]	; 0x54
 800c0de:	786a      	ldrb	r2, [r5, #1]
 800c0e0:	2a2b      	cmp	r2, #43	; 0x2b
 800c0e2:	d074      	beq.n	800c1ce <_strtod_l+0x27e>
 800c0e4:	2a2d      	cmp	r2, #45	; 0x2d
 800c0e6:	d078      	beq.n	800c1da <_strtod_l+0x28a>
 800c0e8:	f04f 0c00 	mov.w	ip, #0
 800c0ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0f0:	2909      	cmp	r1, #9
 800c0f2:	d97f      	bls.n	800c1f4 <_strtod_l+0x2a4>
 800c0f4:	9515      	str	r5, [sp, #84]	; 0x54
 800c0f6:	2700      	movs	r7, #0
 800c0f8:	e09e      	b.n	800c238 <_strtod_l+0x2e8>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e7c8      	b.n	800c090 <_strtod_l+0x140>
 800c0fe:	f1bb 0f08 	cmp.w	fp, #8
 800c102:	bfd8      	it	le
 800c104:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c106:	f100 0001 	add.w	r0, r0, #1
 800c10a:	bfda      	itte	le
 800c10c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c110:	9309      	strle	r3, [sp, #36]	; 0x24
 800c112:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c116:	f10b 0b01 	add.w	fp, fp, #1
 800c11a:	9015      	str	r0, [sp, #84]	; 0x54
 800c11c:	e7c1      	b.n	800c0a2 <_strtod_l+0x152>
 800c11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	9215      	str	r2, [sp, #84]	; 0x54
 800c124:	785a      	ldrb	r2, [r3, #1]
 800c126:	f1bb 0f00 	cmp.w	fp, #0
 800c12a:	d037      	beq.n	800c19c <_strtod_l+0x24c>
 800c12c:	9005      	str	r0, [sp, #20]
 800c12e:	465e      	mov	r6, fp
 800c130:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c134:	2b09      	cmp	r3, #9
 800c136:	d912      	bls.n	800c15e <_strtod_l+0x20e>
 800c138:	2301      	movs	r3, #1
 800c13a:	e7c4      	b.n	800c0c6 <_strtod_l+0x176>
 800c13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	9215      	str	r2, [sp, #84]	; 0x54
 800c142:	785a      	ldrb	r2, [r3, #1]
 800c144:	3001      	adds	r0, #1
 800c146:	2a30      	cmp	r2, #48	; 0x30
 800c148:	d0f8      	beq.n	800c13c <_strtod_l+0x1ec>
 800c14a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c14e:	2b08      	cmp	r3, #8
 800c150:	f200 84c1 	bhi.w	800cad6 <_strtod_l+0xb86>
 800c154:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c156:	9005      	str	r0, [sp, #20]
 800c158:	2000      	movs	r0, #0
 800c15a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c15c:	4606      	mov	r6, r0
 800c15e:	3a30      	subs	r2, #48	; 0x30
 800c160:	f100 0301 	add.w	r3, r0, #1
 800c164:	d014      	beq.n	800c190 <_strtod_l+0x240>
 800c166:	9905      	ldr	r1, [sp, #20]
 800c168:	4419      	add	r1, r3
 800c16a:	9105      	str	r1, [sp, #20]
 800c16c:	4633      	mov	r3, r6
 800c16e:	eb00 0c06 	add.w	ip, r0, r6
 800c172:	210a      	movs	r1, #10
 800c174:	4563      	cmp	r3, ip
 800c176:	d113      	bne.n	800c1a0 <_strtod_l+0x250>
 800c178:	1833      	adds	r3, r6, r0
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	f106 0601 	add.w	r6, r6, #1
 800c180:	4406      	add	r6, r0
 800c182:	dc1a      	bgt.n	800c1ba <_strtod_l+0x26a>
 800c184:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c186:	230a      	movs	r3, #10
 800c188:	fb03 2301 	mla	r3, r3, r1, r2
 800c18c:	9309      	str	r3, [sp, #36]	; 0x24
 800c18e:	2300      	movs	r3, #0
 800c190:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c192:	1c51      	adds	r1, r2, #1
 800c194:	9115      	str	r1, [sp, #84]	; 0x54
 800c196:	7852      	ldrb	r2, [r2, #1]
 800c198:	4618      	mov	r0, r3
 800c19a:	e7c9      	b.n	800c130 <_strtod_l+0x1e0>
 800c19c:	4658      	mov	r0, fp
 800c19e:	e7d2      	b.n	800c146 <_strtod_l+0x1f6>
 800c1a0:	2b08      	cmp	r3, #8
 800c1a2:	f103 0301 	add.w	r3, r3, #1
 800c1a6:	dc03      	bgt.n	800c1b0 <_strtod_l+0x260>
 800c1a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1aa:	434f      	muls	r7, r1
 800c1ac:	9709      	str	r7, [sp, #36]	; 0x24
 800c1ae:	e7e1      	b.n	800c174 <_strtod_l+0x224>
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	bfd8      	it	le
 800c1b4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c1b8:	e7dc      	b.n	800c174 <_strtod_l+0x224>
 800c1ba:	2e10      	cmp	r6, #16
 800c1bc:	bfdc      	itt	le
 800c1be:	230a      	movle	r3, #10
 800c1c0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c1c4:	e7e3      	b.n	800c18e <_strtod_l+0x23e>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e780      	b.n	800c0d0 <_strtod_l+0x180>
 800c1ce:	f04f 0c00 	mov.w	ip, #0
 800c1d2:	1caa      	adds	r2, r5, #2
 800c1d4:	9215      	str	r2, [sp, #84]	; 0x54
 800c1d6:	78aa      	ldrb	r2, [r5, #2]
 800c1d8:	e788      	b.n	800c0ec <_strtod_l+0x19c>
 800c1da:	f04f 0c01 	mov.w	ip, #1
 800c1de:	e7f8      	b.n	800c1d2 <_strtod_l+0x282>
 800c1e0:	080110e8 	.word	0x080110e8
 800c1e4:	080110e4 	.word	0x080110e4
 800c1e8:	7ff00000 	.word	0x7ff00000
 800c1ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1ee:	1c51      	adds	r1, r2, #1
 800c1f0:	9115      	str	r1, [sp, #84]	; 0x54
 800c1f2:	7852      	ldrb	r2, [r2, #1]
 800c1f4:	2a30      	cmp	r2, #48	; 0x30
 800c1f6:	d0f9      	beq.n	800c1ec <_strtod_l+0x29c>
 800c1f8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1fc:	2908      	cmp	r1, #8
 800c1fe:	f63f af7a 	bhi.w	800c0f6 <_strtod_l+0x1a6>
 800c202:	3a30      	subs	r2, #48	; 0x30
 800c204:	9208      	str	r2, [sp, #32]
 800c206:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c208:	920c      	str	r2, [sp, #48]	; 0x30
 800c20a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c20c:	1c57      	adds	r7, r2, #1
 800c20e:	9715      	str	r7, [sp, #84]	; 0x54
 800c210:	7852      	ldrb	r2, [r2, #1]
 800c212:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c216:	f1be 0f09 	cmp.w	lr, #9
 800c21a:	d938      	bls.n	800c28e <_strtod_l+0x33e>
 800c21c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c21e:	1a7f      	subs	r7, r7, r1
 800c220:	2f08      	cmp	r7, #8
 800c222:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c226:	dc03      	bgt.n	800c230 <_strtod_l+0x2e0>
 800c228:	9908      	ldr	r1, [sp, #32]
 800c22a:	428f      	cmp	r7, r1
 800c22c:	bfa8      	it	ge
 800c22e:	460f      	movge	r7, r1
 800c230:	f1bc 0f00 	cmp.w	ip, #0
 800c234:	d000      	beq.n	800c238 <_strtod_l+0x2e8>
 800c236:	427f      	negs	r7, r7
 800c238:	2e00      	cmp	r6, #0
 800c23a:	d14f      	bne.n	800c2dc <_strtod_l+0x38c>
 800c23c:	9904      	ldr	r1, [sp, #16]
 800c23e:	4301      	orrs	r1, r0
 800c240:	f47f aec1 	bne.w	800bfc6 <_strtod_l+0x76>
 800c244:	2b00      	cmp	r3, #0
 800c246:	f47f aedb 	bne.w	800c000 <_strtod_l+0xb0>
 800c24a:	2a69      	cmp	r2, #105	; 0x69
 800c24c:	d029      	beq.n	800c2a2 <_strtod_l+0x352>
 800c24e:	dc26      	bgt.n	800c29e <_strtod_l+0x34e>
 800c250:	2a49      	cmp	r2, #73	; 0x49
 800c252:	d026      	beq.n	800c2a2 <_strtod_l+0x352>
 800c254:	2a4e      	cmp	r2, #78	; 0x4e
 800c256:	f47f aed3 	bne.w	800c000 <_strtod_l+0xb0>
 800c25a:	499b      	ldr	r1, [pc, #620]	; (800c4c8 <_strtod_l+0x578>)
 800c25c:	a815      	add	r0, sp, #84	; 0x54
 800c25e:	f001 fa27 	bl	800d6b0 <__match>
 800c262:	2800      	cmp	r0, #0
 800c264:	f43f aecc 	beq.w	800c000 <_strtod_l+0xb0>
 800c268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b28      	cmp	r3, #40	; 0x28
 800c26e:	d12f      	bne.n	800c2d0 <_strtod_l+0x380>
 800c270:	4996      	ldr	r1, [pc, #600]	; (800c4cc <_strtod_l+0x57c>)
 800c272:	aa18      	add	r2, sp, #96	; 0x60
 800c274:	a815      	add	r0, sp, #84	; 0x54
 800c276:	f001 fa2f 	bl	800d6d8 <__hexnan>
 800c27a:	2805      	cmp	r0, #5
 800c27c:	d128      	bne.n	800c2d0 <_strtod_l+0x380>
 800c27e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c280:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c284:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c288:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c28c:	e69b      	b.n	800bfc6 <_strtod_l+0x76>
 800c28e:	9f08      	ldr	r7, [sp, #32]
 800c290:	210a      	movs	r1, #10
 800c292:	fb01 2107 	mla	r1, r1, r7, r2
 800c296:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c29a:	9208      	str	r2, [sp, #32]
 800c29c:	e7b5      	b.n	800c20a <_strtod_l+0x2ba>
 800c29e:	2a6e      	cmp	r2, #110	; 0x6e
 800c2a0:	e7d9      	b.n	800c256 <_strtod_l+0x306>
 800c2a2:	498b      	ldr	r1, [pc, #556]	; (800c4d0 <_strtod_l+0x580>)
 800c2a4:	a815      	add	r0, sp, #84	; 0x54
 800c2a6:	f001 fa03 	bl	800d6b0 <__match>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	f43f aea8 	beq.w	800c000 <_strtod_l+0xb0>
 800c2b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2b2:	4988      	ldr	r1, [pc, #544]	; (800c4d4 <_strtod_l+0x584>)
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	a815      	add	r0, sp, #84	; 0x54
 800c2b8:	9315      	str	r3, [sp, #84]	; 0x54
 800c2ba:	f001 f9f9 	bl	800d6b0 <__match>
 800c2be:	b910      	cbnz	r0, 800c2c6 <_strtod_l+0x376>
 800c2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	9315      	str	r3, [sp, #84]	; 0x54
 800c2c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c4e4 <_strtod_l+0x594>
 800c2ca:	f04f 0800 	mov.w	r8, #0
 800c2ce:	e67a      	b.n	800bfc6 <_strtod_l+0x76>
 800c2d0:	4881      	ldr	r0, [pc, #516]	; (800c4d8 <_strtod_l+0x588>)
 800c2d2:	f000 ff09 	bl	800d0e8 <nan>
 800c2d6:	ec59 8b10 	vmov	r8, r9, d0
 800c2da:	e674      	b.n	800bfc6 <_strtod_l+0x76>
 800c2dc:	9b05      	ldr	r3, [sp, #20]
 800c2de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2e0:	1afb      	subs	r3, r7, r3
 800c2e2:	f1bb 0f00 	cmp.w	fp, #0
 800c2e6:	bf08      	it	eq
 800c2e8:	46b3      	moveq	fp, r6
 800c2ea:	2e10      	cmp	r6, #16
 800c2ec:	9308      	str	r3, [sp, #32]
 800c2ee:	4635      	mov	r5, r6
 800c2f0:	bfa8      	it	ge
 800c2f2:	2510      	movge	r5, #16
 800c2f4:	f7f4 f906 	bl	8000504 <__aeabi_ui2d>
 800c2f8:	2e09      	cmp	r6, #9
 800c2fa:	4680      	mov	r8, r0
 800c2fc:	4689      	mov	r9, r1
 800c2fe:	dd13      	ble.n	800c328 <_strtod_l+0x3d8>
 800c300:	4b76      	ldr	r3, [pc, #472]	; (800c4dc <_strtod_l+0x58c>)
 800c302:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c306:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c30a:	f7f4 f975 	bl	80005f8 <__aeabi_dmul>
 800c30e:	4680      	mov	r8, r0
 800c310:	4650      	mov	r0, sl
 800c312:	4689      	mov	r9, r1
 800c314:	f7f4 f8f6 	bl	8000504 <__aeabi_ui2d>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4640      	mov	r0, r8
 800c31e:	4649      	mov	r1, r9
 800c320:	f7f3 ffb4 	bl	800028c <__adddf3>
 800c324:	4680      	mov	r8, r0
 800c326:	4689      	mov	r9, r1
 800c328:	2e0f      	cmp	r6, #15
 800c32a:	dc38      	bgt.n	800c39e <_strtod_l+0x44e>
 800c32c:	9b08      	ldr	r3, [sp, #32]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f43f ae49 	beq.w	800bfc6 <_strtod_l+0x76>
 800c334:	dd24      	ble.n	800c380 <_strtod_l+0x430>
 800c336:	2b16      	cmp	r3, #22
 800c338:	dc0b      	bgt.n	800c352 <_strtod_l+0x402>
 800c33a:	4968      	ldr	r1, [pc, #416]	; (800c4dc <_strtod_l+0x58c>)
 800c33c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c344:	4642      	mov	r2, r8
 800c346:	464b      	mov	r3, r9
 800c348:	f7f4 f956 	bl	80005f8 <__aeabi_dmul>
 800c34c:	4680      	mov	r8, r0
 800c34e:	4689      	mov	r9, r1
 800c350:	e639      	b.n	800bfc6 <_strtod_l+0x76>
 800c352:	9a08      	ldr	r2, [sp, #32]
 800c354:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c358:	4293      	cmp	r3, r2
 800c35a:	db20      	blt.n	800c39e <_strtod_l+0x44e>
 800c35c:	4c5f      	ldr	r4, [pc, #380]	; (800c4dc <_strtod_l+0x58c>)
 800c35e:	f1c6 060f 	rsb	r6, r6, #15
 800c362:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c366:	4642      	mov	r2, r8
 800c368:	464b      	mov	r3, r9
 800c36a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c36e:	f7f4 f943 	bl	80005f8 <__aeabi_dmul>
 800c372:	9b08      	ldr	r3, [sp, #32]
 800c374:	1b9e      	subs	r6, r3, r6
 800c376:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c37a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c37e:	e7e3      	b.n	800c348 <_strtod_l+0x3f8>
 800c380:	9b08      	ldr	r3, [sp, #32]
 800c382:	3316      	adds	r3, #22
 800c384:	db0b      	blt.n	800c39e <_strtod_l+0x44e>
 800c386:	9b05      	ldr	r3, [sp, #20]
 800c388:	1bdf      	subs	r7, r3, r7
 800c38a:	4b54      	ldr	r3, [pc, #336]	; (800c4dc <_strtod_l+0x58c>)
 800c38c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c394:	4640      	mov	r0, r8
 800c396:	4649      	mov	r1, r9
 800c398:	f7f4 fa58 	bl	800084c <__aeabi_ddiv>
 800c39c:	e7d6      	b.n	800c34c <_strtod_l+0x3fc>
 800c39e:	9b08      	ldr	r3, [sp, #32]
 800c3a0:	1b75      	subs	r5, r6, r5
 800c3a2:	441d      	add	r5, r3
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	dd70      	ble.n	800c48a <_strtod_l+0x53a>
 800c3a8:	f015 030f 	ands.w	r3, r5, #15
 800c3ac:	d00a      	beq.n	800c3c4 <_strtod_l+0x474>
 800c3ae:	494b      	ldr	r1, [pc, #300]	; (800c4dc <_strtod_l+0x58c>)
 800c3b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3b4:	4642      	mov	r2, r8
 800c3b6:	464b      	mov	r3, r9
 800c3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3bc:	f7f4 f91c 	bl	80005f8 <__aeabi_dmul>
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4689      	mov	r9, r1
 800c3c4:	f035 050f 	bics.w	r5, r5, #15
 800c3c8:	d04d      	beq.n	800c466 <_strtod_l+0x516>
 800c3ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c3ce:	dd22      	ble.n	800c416 <_strtod_l+0x4c6>
 800c3d0:	2500      	movs	r5, #0
 800c3d2:	46ab      	mov	fp, r5
 800c3d4:	9509      	str	r5, [sp, #36]	; 0x24
 800c3d6:	9505      	str	r5, [sp, #20]
 800c3d8:	2322      	movs	r3, #34	; 0x22
 800c3da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c4e4 <_strtod_l+0x594>
 800c3de:	6023      	str	r3, [r4, #0]
 800c3e0:	f04f 0800 	mov.w	r8, #0
 800c3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f43f aded 	beq.w	800bfc6 <_strtod_l+0x76>
 800c3ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7ff f924 	bl	800b63c <_Bfree>
 800c3f4:	9905      	ldr	r1, [sp, #20]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f7ff f920 	bl	800b63c <_Bfree>
 800c3fc:	4659      	mov	r1, fp
 800c3fe:	4620      	mov	r0, r4
 800c400:	f7ff f91c 	bl	800b63c <_Bfree>
 800c404:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c406:	4620      	mov	r0, r4
 800c408:	f7ff f918 	bl	800b63c <_Bfree>
 800c40c:	4629      	mov	r1, r5
 800c40e:	4620      	mov	r0, r4
 800c410:	f7ff f914 	bl	800b63c <_Bfree>
 800c414:	e5d7      	b.n	800bfc6 <_strtod_l+0x76>
 800c416:	4b32      	ldr	r3, [pc, #200]	; (800c4e0 <_strtod_l+0x590>)
 800c418:	9304      	str	r3, [sp, #16]
 800c41a:	2300      	movs	r3, #0
 800c41c:	112d      	asrs	r5, r5, #4
 800c41e:	4640      	mov	r0, r8
 800c420:	4649      	mov	r1, r9
 800c422:	469a      	mov	sl, r3
 800c424:	2d01      	cmp	r5, #1
 800c426:	dc21      	bgt.n	800c46c <_strtod_l+0x51c>
 800c428:	b10b      	cbz	r3, 800c42e <_strtod_l+0x4de>
 800c42a:	4680      	mov	r8, r0
 800c42c:	4689      	mov	r9, r1
 800c42e:	492c      	ldr	r1, [pc, #176]	; (800c4e0 <_strtod_l+0x590>)
 800c430:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c434:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c438:	4642      	mov	r2, r8
 800c43a:	464b      	mov	r3, r9
 800c43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c440:	f7f4 f8da 	bl	80005f8 <__aeabi_dmul>
 800c444:	4b27      	ldr	r3, [pc, #156]	; (800c4e4 <_strtod_l+0x594>)
 800c446:	460a      	mov	r2, r1
 800c448:	400b      	ands	r3, r1
 800c44a:	4927      	ldr	r1, [pc, #156]	; (800c4e8 <_strtod_l+0x598>)
 800c44c:	428b      	cmp	r3, r1
 800c44e:	4680      	mov	r8, r0
 800c450:	d8be      	bhi.n	800c3d0 <_strtod_l+0x480>
 800c452:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c456:	428b      	cmp	r3, r1
 800c458:	bf86      	itte	hi
 800c45a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c4ec <_strtod_l+0x59c>
 800c45e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c462:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c466:	2300      	movs	r3, #0
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	e07b      	b.n	800c564 <_strtod_l+0x614>
 800c46c:	07ea      	lsls	r2, r5, #31
 800c46e:	d505      	bpl.n	800c47c <_strtod_l+0x52c>
 800c470:	9b04      	ldr	r3, [sp, #16]
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f4 f8bf 	bl	80005f8 <__aeabi_dmul>
 800c47a:	2301      	movs	r3, #1
 800c47c:	9a04      	ldr	r2, [sp, #16]
 800c47e:	3208      	adds	r2, #8
 800c480:	f10a 0a01 	add.w	sl, sl, #1
 800c484:	106d      	asrs	r5, r5, #1
 800c486:	9204      	str	r2, [sp, #16]
 800c488:	e7cc      	b.n	800c424 <_strtod_l+0x4d4>
 800c48a:	d0ec      	beq.n	800c466 <_strtod_l+0x516>
 800c48c:	426d      	negs	r5, r5
 800c48e:	f015 020f 	ands.w	r2, r5, #15
 800c492:	d00a      	beq.n	800c4aa <_strtod_l+0x55a>
 800c494:	4b11      	ldr	r3, [pc, #68]	; (800c4dc <_strtod_l+0x58c>)
 800c496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f4 f9d3 	bl	800084c <__aeabi_ddiv>
 800c4a6:	4680      	mov	r8, r0
 800c4a8:	4689      	mov	r9, r1
 800c4aa:	112d      	asrs	r5, r5, #4
 800c4ac:	d0db      	beq.n	800c466 <_strtod_l+0x516>
 800c4ae:	2d1f      	cmp	r5, #31
 800c4b0:	dd1e      	ble.n	800c4f0 <_strtod_l+0x5a0>
 800c4b2:	2500      	movs	r5, #0
 800c4b4:	46ab      	mov	fp, r5
 800c4b6:	9509      	str	r5, [sp, #36]	; 0x24
 800c4b8:	9505      	str	r5, [sp, #20]
 800c4ba:	2322      	movs	r3, #34	; 0x22
 800c4bc:	f04f 0800 	mov.w	r8, #0
 800c4c0:	f04f 0900 	mov.w	r9, #0
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	e78d      	b.n	800c3e4 <_strtod_l+0x494>
 800c4c8:	08010ed1 	.word	0x08010ed1
 800c4cc:	080110fc 	.word	0x080110fc
 800c4d0:	08010ec9 	.word	0x08010ec9
 800c4d4:	08010f00 	.word	0x08010f00
 800c4d8:	0801128d 	.word	0x0801128d
 800c4dc:	08011010 	.word	0x08011010
 800c4e0:	08010fe8 	.word	0x08010fe8
 800c4e4:	7ff00000 	.word	0x7ff00000
 800c4e8:	7ca00000 	.word	0x7ca00000
 800c4ec:	7fefffff 	.word	0x7fefffff
 800c4f0:	f015 0310 	ands.w	r3, r5, #16
 800c4f4:	bf18      	it	ne
 800c4f6:	236a      	movne	r3, #106	; 0x6a
 800c4f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c89c <_strtod_l+0x94c>
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	4640      	mov	r0, r8
 800c500:	4649      	mov	r1, r9
 800c502:	2300      	movs	r3, #0
 800c504:	07ea      	lsls	r2, r5, #31
 800c506:	d504      	bpl.n	800c512 <_strtod_l+0x5c2>
 800c508:	e9da 2300 	ldrd	r2, r3, [sl]
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	2301      	movs	r3, #1
 800c512:	106d      	asrs	r5, r5, #1
 800c514:	f10a 0a08 	add.w	sl, sl, #8
 800c518:	d1f4      	bne.n	800c504 <_strtod_l+0x5b4>
 800c51a:	b10b      	cbz	r3, 800c520 <_strtod_l+0x5d0>
 800c51c:	4680      	mov	r8, r0
 800c51e:	4689      	mov	r9, r1
 800c520:	9b04      	ldr	r3, [sp, #16]
 800c522:	b1bb      	cbz	r3, 800c554 <_strtod_l+0x604>
 800c524:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c528:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	4649      	mov	r1, r9
 800c530:	dd10      	ble.n	800c554 <_strtod_l+0x604>
 800c532:	2b1f      	cmp	r3, #31
 800c534:	f340 811e 	ble.w	800c774 <_strtod_l+0x824>
 800c538:	2b34      	cmp	r3, #52	; 0x34
 800c53a:	bfde      	ittt	le
 800c53c:	f04f 33ff 	movle.w	r3, #4294967295
 800c540:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c544:	4093      	lslle	r3, r2
 800c546:	f04f 0800 	mov.w	r8, #0
 800c54a:	bfcc      	ite	gt
 800c54c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c550:	ea03 0901 	andle.w	r9, r3, r1
 800c554:	2200      	movs	r2, #0
 800c556:	2300      	movs	r3, #0
 800c558:	4640      	mov	r0, r8
 800c55a:	4649      	mov	r1, r9
 800c55c:	f7f4 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c560:	2800      	cmp	r0, #0
 800c562:	d1a6      	bne.n	800c4b2 <_strtod_l+0x562>
 800c564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c56a:	4633      	mov	r3, r6
 800c56c:	465a      	mov	r2, fp
 800c56e:	4620      	mov	r0, r4
 800c570:	f7ff f8cc 	bl	800b70c <__s2b>
 800c574:	9009      	str	r0, [sp, #36]	; 0x24
 800c576:	2800      	cmp	r0, #0
 800c578:	f43f af2a 	beq.w	800c3d0 <_strtod_l+0x480>
 800c57c:	9a08      	ldr	r2, [sp, #32]
 800c57e:	9b05      	ldr	r3, [sp, #20]
 800c580:	2a00      	cmp	r2, #0
 800c582:	eba3 0307 	sub.w	r3, r3, r7
 800c586:	bfa8      	it	ge
 800c588:	2300      	movge	r3, #0
 800c58a:	930c      	str	r3, [sp, #48]	; 0x30
 800c58c:	2500      	movs	r5, #0
 800c58e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c592:	9312      	str	r3, [sp, #72]	; 0x48
 800c594:	46ab      	mov	fp, r5
 800c596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c598:	4620      	mov	r0, r4
 800c59a:	6859      	ldr	r1, [r3, #4]
 800c59c:	f7ff f80e 	bl	800b5bc <_Balloc>
 800c5a0:	9005      	str	r0, [sp, #20]
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f43f af18 	beq.w	800c3d8 <_strtod_l+0x488>
 800c5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5aa:	691a      	ldr	r2, [r3, #16]
 800c5ac:	3202      	adds	r2, #2
 800c5ae:	f103 010c 	add.w	r1, r3, #12
 800c5b2:	0092      	lsls	r2, r2, #2
 800c5b4:	300c      	adds	r0, #12
 800c5b6:	f000 fd87 	bl	800d0c8 <memcpy>
 800c5ba:	ec49 8b10 	vmov	d0, r8, r9
 800c5be:	aa18      	add	r2, sp, #96	; 0x60
 800c5c0:	a917      	add	r1, sp, #92	; 0x5c
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7ff fbd6 	bl	800bd74 <__d2b>
 800c5c8:	ec49 8b18 	vmov	d8, r8, r9
 800c5cc:	9016      	str	r0, [sp, #88]	; 0x58
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	f43f af02 	beq.w	800c3d8 <_strtod_l+0x488>
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff f930 	bl	800b83c <__i2b>
 800c5dc:	4683      	mov	fp, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	f43f aefa 	beq.w	800c3d8 <_strtod_l+0x488>
 800c5e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c5e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5e8:	2e00      	cmp	r6, #0
 800c5ea:	bfab      	itete	ge
 800c5ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c5ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c5f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c5f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c5f6:	bfac      	ite	ge
 800c5f8:	eb06 0a03 	addge.w	sl, r6, r3
 800c5fc:	1b9f      	sublt	r7, r3, r6
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	1af6      	subs	r6, r6, r3
 800c602:	4416      	add	r6, r2
 800c604:	4ba0      	ldr	r3, [pc, #640]	; (800c888 <_strtod_l+0x938>)
 800c606:	3e01      	subs	r6, #1
 800c608:	429e      	cmp	r6, r3
 800c60a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c60e:	f280 80c4 	bge.w	800c79a <_strtod_l+0x84a>
 800c612:	1b9b      	subs	r3, r3, r6
 800c614:	2b1f      	cmp	r3, #31
 800c616:	eba2 0203 	sub.w	r2, r2, r3
 800c61a:	f04f 0101 	mov.w	r1, #1
 800c61e:	f300 80b0 	bgt.w	800c782 <_strtod_l+0x832>
 800c622:	fa01 f303 	lsl.w	r3, r1, r3
 800c626:	930e      	str	r3, [sp, #56]	; 0x38
 800c628:	2300      	movs	r3, #0
 800c62a:	930d      	str	r3, [sp, #52]	; 0x34
 800c62c:	eb0a 0602 	add.w	r6, sl, r2
 800c630:	9b04      	ldr	r3, [sp, #16]
 800c632:	45b2      	cmp	sl, r6
 800c634:	4417      	add	r7, r2
 800c636:	441f      	add	r7, r3
 800c638:	4653      	mov	r3, sl
 800c63a:	bfa8      	it	ge
 800c63c:	4633      	movge	r3, r6
 800c63e:	42bb      	cmp	r3, r7
 800c640:	bfa8      	it	ge
 800c642:	463b      	movge	r3, r7
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfc2      	ittt	gt
 800c648:	1af6      	subgt	r6, r6, r3
 800c64a:	1aff      	subgt	r7, r7, r3
 800c64c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c652:	2b00      	cmp	r3, #0
 800c654:	dd17      	ble.n	800c686 <_strtod_l+0x736>
 800c656:	4659      	mov	r1, fp
 800c658:	461a      	mov	r2, r3
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff f9ae 	bl	800b9bc <__pow5mult>
 800c660:	4683      	mov	fp, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	f43f aeb8 	beq.w	800c3d8 <_strtod_l+0x488>
 800c668:	4601      	mov	r1, r0
 800c66a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c66c:	4620      	mov	r0, r4
 800c66e:	f7ff f8fb 	bl	800b868 <__multiply>
 800c672:	900b      	str	r0, [sp, #44]	; 0x2c
 800c674:	2800      	cmp	r0, #0
 800c676:	f43f aeaf 	beq.w	800c3d8 <_strtod_l+0x488>
 800c67a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c67c:	4620      	mov	r0, r4
 800c67e:	f7fe ffdd 	bl	800b63c <_Bfree>
 800c682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c684:	9316      	str	r3, [sp, #88]	; 0x58
 800c686:	2e00      	cmp	r6, #0
 800c688:	f300 808c 	bgt.w	800c7a4 <_strtod_l+0x854>
 800c68c:	9b08      	ldr	r3, [sp, #32]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	dd08      	ble.n	800c6a4 <_strtod_l+0x754>
 800c692:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c694:	9905      	ldr	r1, [sp, #20]
 800c696:	4620      	mov	r0, r4
 800c698:	f7ff f990 	bl	800b9bc <__pow5mult>
 800c69c:	9005      	str	r0, [sp, #20]
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f ae9a 	beq.w	800c3d8 <_strtod_l+0x488>
 800c6a4:	2f00      	cmp	r7, #0
 800c6a6:	dd08      	ble.n	800c6ba <_strtod_l+0x76a>
 800c6a8:	9905      	ldr	r1, [sp, #20]
 800c6aa:	463a      	mov	r2, r7
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f7ff f9df 	bl	800ba70 <__lshift>
 800c6b2:	9005      	str	r0, [sp, #20]
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	f43f ae8f 	beq.w	800c3d8 <_strtod_l+0x488>
 800c6ba:	f1ba 0f00 	cmp.w	sl, #0
 800c6be:	dd08      	ble.n	800c6d2 <_strtod_l+0x782>
 800c6c0:	4659      	mov	r1, fp
 800c6c2:	4652      	mov	r2, sl
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f7ff f9d3 	bl	800ba70 <__lshift>
 800c6ca:	4683      	mov	fp, r0
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f43f ae83 	beq.w	800c3d8 <_strtod_l+0x488>
 800c6d2:	9a05      	ldr	r2, [sp, #20]
 800c6d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f7ff fa52 	bl	800bb80 <__mdiff>
 800c6dc:	4605      	mov	r5, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	f43f ae7a 	beq.w	800c3d8 <_strtod_l+0x488>
 800c6e4:	68c3      	ldr	r3, [r0, #12]
 800c6e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60c3      	str	r3, [r0, #12]
 800c6ec:	4659      	mov	r1, fp
 800c6ee:	f7ff fa2b 	bl	800bb48 <__mcmp>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	da60      	bge.n	800c7b8 <_strtod_l+0x868>
 800c6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f8:	ea53 0308 	orrs.w	r3, r3, r8
 800c6fc:	f040 8084 	bne.w	800c808 <_strtod_l+0x8b8>
 800c700:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c704:	2b00      	cmp	r3, #0
 800c706:	d17f      	bne.n	800c808 <_strtod_l+0x8b8>
 800c708:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c70c:	0d1b      	lsrs	r3, r3, #20
 800c70e:	051b      	lsls	r3, r3, #20
 800c710:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c714:	d978      	bls.n	800c808 <_strtod_l+0x8b8>
 800c716:	696b      	ldr	r3, [r5, #20]
 800c718:	b913      	cbnz	r3, 800c720 <_strtod_l+0x7d0>
 800c71a:	692b      	ldr	r3, [r5, #16]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	dd73      	ble.n	800c808 <_strtod_l+0x8b8>
 800c720:	4629      	mov	r1, r5
 800c722:	2201      	movs	r2, #1
 800c724:	4620      	mov	r0, r4
 800c726:	f7ff f9a3 	bl	800ba70 <__lshift>
 800c72a:	4659      	mov	r1, fp
 800c72c:	4605      	mov	r5, r0
 800c72e:	f7ff fa0b 	bl	800bb48 <__mcmp>
 800c732:	2800      	cmp	r0, #0
 800c734:	dd68      	ble.n	800c808 <_strtod_l+0x8b8>
 800c736:	9904      	ldr	r1, [sp, #16]
 800c738:	4a54      	ldr	r2, [pc, #336]	; (800c88c <_strtod_l+0x93c>)
 800c73a:	464b      	mov	r3, r9
 800c73c:	2900      	cmp	r1, #0
 800c73e:	f000 8084 	beq.w	800c84a <_strtod_l+0x8fa>
 800c742:	ea02 0109 	and.w	r1, r2, r9
 800c746:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c74a:	dc7e      	bgt.n	800c84a <_strtod_l+0x8fa>
 800c74c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c750:	f77f aeb3 	ble.w	800c4ba <_strtod_l+0x56a>
 800c754:	4b4e      	ldr	r3, [pc, #312]	; (800c890 <_strtod_l+0x940>)
 800c756:	4640      	mov	r0, r8
 800c758:	4649      	mov	r1, r9
 800c75a:	2200      	movs	r2, #0
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	4b4a      	ldr	r3, [pc, #296]	; (800c88c <_strtod_l+0x93c>)
 800c762:	400b      	ands	r3, r1
 800c764:	4680      	mov	r8, r0
 800c766:	4689      	mov	r9, r1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f47f ae3f 	bne.w	800c3ec <_strtod_l+0x49c>
 800c76e:	2322      	movs	r3, #34	; 0x22
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	e63b      	b.n	800c3ec <_strtod_l+0x49c>
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	fa02 f303 	lsl.w	r3, r2, r3
 800c77c:	ea03 0808 	and.w	r8, r3, r8
 800c780:	e6e8      	b.n	800c554 <_strtod_l+0x604>
 800c782:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c786:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c78a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c78e:	36e2      	adds	r6, #226	; 0xe2
 800c790:	fa01 f306 	lsl.w	r3, r1, r6
 800c794:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c798:	e748      	b.n	800c62c <_strtod_l+0x6dc>
 800c79a:	2100      	movs	r1, #0
 800c79c:	2301      	movs	r3, #1
 800c79e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c7a2:	e743      	b.n	800c62c <_strtod_l+0x6dc>
 800c7a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c7a6:	4632      	mov	r2, r6
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f7ff f961 	bl	800ba70 <__lshift>
 800c7ae:	9016      	str	r0, [sp, #88]	; 0x58
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	f47f af6b 	bne.w	800c68c <_strtod_l+0x73c>
 800c7b6:	e60f      	b.n	800c3d8 <_strtod_l+0x488>
 800c7b8:	46ca      	mov	sl, r9
 800c7ba:	d171      	bne.n	800c8a0 <_strtod_l+0x950>
 800c7bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7c2:	b352      	cbz	r2, 800c81a <_strtod_l+0x8ca>
 800c7c4:	4a33      	ldr	r2, [pc, #204]	; (800c894 <_strtod_l+0x944>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d12a      	bne.n	800c820 <_strtod_l+0x8d0>
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	4641      	mov	r1, r8
 800c7ce:	b1fb      	cbz	r3, 800c810 <_strtod_l+0x8c0>
 800c7d0:	4b2e      	ldr	r3, [pc, #184]	; (800c88c <_strtod_l+0x93c>)
 800c7d2:	ea09 0303 	and.w	r3, r9, r3
 800c7d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295
 800c7de:	d81a      	bhi.n	800c816 <_strtod_l+0x8c6>
 800c7e0:	0d1b      	lsrs	r3, r3, #20
 800c7e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ea:	4299      	cmp	r1, r3
 800c7ec:	d118      	bne.n	800c820 <_strtod_l+0x8d0>
 800c7ee:	4b2a      	ldr	r3, [pc, #168]	; (800c898 <_strtod_l+0x948>)
 800c7f0:	459a      	cmp	sl, r3
 800c7f2:	d102      	bne.n	800c7fa <_strtod_l+0x8aa>
 800c7f4:	3101      	adds	r1, #1
 800c7f6:	f43f adef 	beq.w	800c3d8 <_strtod_l+0x488>
 800c7fa:	4b24      	ldr	r3, [pc, #144]	; (800c88c <_strtod_l+0x93c>)
 800c7fc:	ea0a 0303 	and.w	r3, sl, r3
 800c800:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c804:	f04f 0800 	mov.w	r8, #0
 800c808:	9b04      	ldr	r3, [sp, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1a2      	bne.n	800c754 <_strtod_l+0x804>
 800c80e:	e5ed      	b.n	800c3ec <_strtod_l+0x49c>
 800c810:	f04f 33ff 	mov.w	r3, #4294967295
 800c814:	e7e9      	b.n	800c7ea <_strtod_l+0x89a>
 800c816:	4613      	mov	r3, r2
 800c818:	e7e7      	b.n	800c7ea <_strtod_l+0x89a>
 800c81a:	ea53 0308 	orrs.w	r3, r3, r8
 800c81e:	d08a      	beq.n	800c736 <_strtod_l+0x7e6>
 800c820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c822:	b1e3      	cbz	r3, 800c85e <_strtod_l+0x90e>
 800c824:	ea13 0f0a 	tst.w	r3, sl
 800c828:	d0ee      	beq.n	800c808 <_strtod_l+0x8b8>
 800c82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c82c:	9a04      	ldr	r2, [sp, #16]
 800c82e:	4640      	mov	r0, r8
 800c830:	4649      	mov	r1, r9
 800c832:	b1c3      	cbz	r3, 800c866 <_strtod_l+0x916>
 800c834:	f7ff fb6f 	bl	800bf16 <sulp>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	ec51 0b18 	vmov	r0, r1, d8
 800c840:	f7f3 fd24 	bl	800028c <__adddf3>
 800c844:	4680      	mov	r8, r0
 800c846:	4689      	mov	r9, r1
 800c848:	e7de      	b.n	800c808 <_strtod_l+0x8b8>
 800c84a:	4013      	ands	r3, r2
 800c84c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c850:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c854:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c858:	f04f 38ff 	mov.w	r8, #4294967295
 800c85c:	e7d4      	b.n	800c808 <_strtod_l+0x8b8>
 800c85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c860:	ea13 0f08 	tst.w	r3, r8
 800c864:	e7e0      	b.n	800c828 <_strtod_l+0x8d8>
 800c866:	f7ff fb56 	bl	800bf16 <sulp>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	ec51 0b18 	vmov	r0, r1, d8
 800c872:	f7f3 fd09 	bl	8000288 <__aeabi_dsub>
 800c876:	2200      	movs	r2, #0
 800c878:	2300      	movs	r3, #0
 800c87a:	4680      	mov	r8, r0
 800c87c:	4689      	mov	r9, r1
 800c87e:	f7f4 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 800c882:	2800      	cmp	r0, #0
 800c884:	d0c0      	beq.n	800c808 <_strtod_l+0x8b8>
 800c886:	e618      	b.n	800c4ba <_strtod_l+0x56a>
 800c888:	fffffc02 	.word	0xfffffc02
 800c88c:	7ff00000 	.word	0x7ff00000
 800c890:	39500000 	.word	0x39500000
 800c894:	000fffff 	.word	0x000fffff
 800c898:	7fefffff 	.word	0x7fefffff
 800c89c:	08011110 	.word	0x08011110
 800c8a0:	4659      	mov	r1, fp
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	f7ff fac0 	bl	800be28 <__ratio>
 800c8a8:	ec57 6b10 	vmov	r6, r7, d0
 800c8ac:	ee10 0a10 	vmov	r0, s0
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f4 f91a 	bl	8000af0 <__aeabi_dcmple>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d071      	beq.n	800c9a4 <_strtod_l+0xa54>
 800c8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d17c      	bne.n	800c9c0 <_strtod_l+0xa70>
 800c8c6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ca:	d15a      	bne.n	800c982 <_strtod_l+0xa32>
 800c8cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d15d      	bne.n	800c990 <_strtod_l+0xa40>
 800c8d4:	4b90      	ldr	r3, [pc, #576]	; (800cb18 <_strtod_l+0xbc8>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f4 f8fe 	bl	8000adc <__aeabi_dcmplt>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d15c      	bne.n	800c99e <_strtod_l+0xa4e>
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	4639      	mov	r1, r7
 800c8e8:	4b8c      	ldr	r3, [pc, #560]	; (800cb1c <_strtod_l+0xbcc>)
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f7f3 fe84 	bl	80005f8 <__aeabi_dmul>
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	460f      	mov	r7, r1
 800c8f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c8f8:	9606      	str	r6, [sp, #24]
 800c8fa:	9307      	str	r3, [sp, #28]
 800c8fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c900:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c904:	4b86      	ldr	r3, [pc, #536]	; (800cb20 <_strtod_l+0xbd0>)
 800c906:	ea0a 0303 	and.w	r3, sl, r3
 800c90a:	930d      	str	r3, [sp, #52]	; 0x34
 800c90c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c90e:	4b85      	ldr	r3, [pc, #532]	; (800cb24 <_strtod_l+0xbd4>)
 800c910:	429a      	cmp	r2, r3
 800c912:	f040 8090 	bne.w	800ca36 <_strtod_l+0xae6>
 800c916:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c91a:	ec49 8b10 	vmov	d0, r8, r9
 800c91e:	f7ff f9b9 	bl	800bc94 <__ulp>
 800c922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c926:	ec51 0b10 	vmov	r0, r1, d0
 800c92a:	f7f3 fe65 	bl	80005f8 <__aeabi_dmul>
 800c92e:	4642      	mov	r2, r8
 800c930:	464b      	mov	r3, r9
 800c932:	f7f3 fcab 	bl	800028c <__adddf3>
 800c936:	460b      	mov	r3, r1
 800c938:	4979      	ldr	r1, [pc, #484]	; (800cb20 <_strtod_l+0xbd0>)
 800c93a:	4a7b      	ldr	r2, [pc, #492]	; (800cb28 <_strtod_l+0xbd8>)
 800c93c:	4019      	ands	r1, r3
 800c93e:	4291      	cmp	r1, r2
 800c940:	4680      	mov	r8, r0
 800c942:	d944      	bls.n	800c9ce <_strtod_l+0xa7e>
 800c944:	ee18 2a90 	vmov	r2, s17
 800c948:	4b78      	ldr	r3, [pc, #480]	; (800cb2c <_strtod_l+0xbdc>)
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d104      	bne.n	800c958 <_strtod_l+0xa08>
 800c94e:	ee18 3a10 	vmov	r3, s16
 800c952:	3301      	adds	r3, #1
 800c954:	f43f ad40 	beq.w	800c3d8 <_strtod_l+0x488>
 800c958:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800cb2c <_strtod_l+0xbdc>
 800c95c:	f04f 38ff 	mov.w	r8, #4294967295
 800c960:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c962:	4620      	mov	r0, r4
 800c964:	f7fe fe6a 	bl	800b63c <_Bfree>
 800c968:	9905      	ldr	r1, [sp, #20]
 800c96a:	4620      	mov	r0, r4
 800c96c:	f7fe fe66 	bl	800b63c <_Bfree>
 800c970:	4659      	mov	r1, fp
 800c972:	4620      	mov	r0, r4
 800c974:	f7fe fe62 	bl	800b63c <_Bfree>
 800c978:	4629      	mov	r1, r5
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7fe fe5e 	bl	800b63c <_Bfree>
 800c980:	e609      	b.n	800c596 <_strtod_l+0x646>
 800c982:	f1b8 0f01 	cmp.w	r8, #1
 800c986:	d103      	bne.n	800c990 <_strtod_l+0xa40>
 800c988:	f1b9 0f00 	cmp.w	r9, #0
 800c98c:	f43f ad95 	beq.w	800c4ba <_strtod_l+0x56a>
 800c990:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cae8 <_strtod_l+0xb98>
 800c994:	4f60      	ldr	r7, [pc, #384]	; (800cb18 <_strtod_l+0xbc8>)
 800c996:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c99a:	2600      	movs	r6, #0
 800c99c:	e7ae      	b.n	800c8fc <_strtod_l+0x9ac>
 800c99e:	4f5f      	ldr	r7, [pc, #380]	; (800cb1c <_strtod_l+0xbcc>)
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	e7a7      	b.n	800c8f4 <_strtod_l+0x9a4>
 800c9a4:	4b5d      	ldr	r3, [pc, #372]	; (800cb1c <_strtod_l+0xbcc>)
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f7f3 fe24 	bl	80005f8 <__aeabi_dmul>
 800c9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d09c      	beq.n	800c8f4 <_strtod_l+0x9a4>
 800c9ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c9be:	e79d      	b.n	800c8fc <_strtod_l+0x9ac>
 800c9c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800caf0 <_strtod_l+0xba0>
 800c9c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9c8:	ec57 6b17 	vmov	r6, r7, d7
 800c9cc:	e796      	b.n	800c8fc <_strtod_l+0x9ac>
 800c9ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	46ca      	mov	sl, r9
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1c2      	bne.n	800c960 <_strtod_l+0xa10>
 800c9da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9e0:	0d1b      	lsrs	r3, r3, #20
 800c9e2:	051b      	lsls	r3, r3, #20
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d1bb      	bne.n	800c960 <_strtod_l+0xa10>
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	f7f4 f964 	bl	8000cb8 <__aeabi_d2lz>
 800c9f0:	f7f3 fdd4 	bl	800059c <__aeabi_l2d>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f3 fc44 	bl	8000288 <__aeabi_dsub>
 800ca00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca06:	ea43 0308 	orr.w	r3, r3, r8
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	d054      	beq.n	800cabc <_strtod_l+0xb6c>
 800ca12:	a339      	add	r3, pc, #228	; (adr r3, 800caf8 <_strtod_l+0xba8>)
 800ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca18:	f7f4 f860 	bl	8000adc <__aeabi_dcmplt>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	f47f ace5 	bne.w	800c3ec <_strtod_l+0x49c>
 800ca22:	a337      	add	r3, pc, #220	; (adr r3, 800cb00 <_strtod_l+0xbb0>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	4630      	mov	r0, r6
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f7f4 f874 	bl	8000b18 <__aeabi_dcmpgt>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d095      	beq.n	800c960 <_strtod_l+0xa10>
 800ca34:	e4da      	b.n	800c3ec <_strtod_l+0x49c>
 800ca36:	9b04      	ldr	r3, [sp, #16]
 800ca38:	b333      	cbz	r3, 800ca88 <_strtod_l+0xb38>
 800ca3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca40:	d822      	bhi.n	800ca88 <_strtod_l+0xb38>
 800ca42:	a331      	add	r3, pc, #196	; (adr r3, 800cb08 <_strtod_l+0xbb8>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	4630      	mov	r0, r6
 800ca4a:	4639      	mov	r1, r7
 800ca4c:	f7f4 f850 	bl	8000af0 <__aeabi_dcmple>
 800ca50:	b1a0      	cbz	r0, 800ca7c <_strtod_l+0xb2c>
 800ca52:	4639      	mov	r1, r7
 800ca54:	4630      	mov	r0, r6
 800ca56:	f7f4 f8a7 	bl	8000ba8 <__aeabi_d2uiz>
 800ca5a:	2801      	cmp	r0, #1
 800ca5c:	bf38      	it	cc
 800ca5e:	2001      	movcc	r0, #1
 800ca60:	f7f3 fd50 	bl	8000504 <__aeabi_ui2d>
 800ca64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca66:	4606      	mov	r6, r0
 800ca68:	460f      	mov	r7, r1
 800ca6a:	bb23      	cbnz	r3, 800cab6 <_strtod_l+0xb66>
 800ca6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca70:	9010      	str	r0, [sp, #64]	; 0x40
 800ca72:	9311      	str	r3, [sp, #68]	; 0x44
 800ca74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ca7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca80:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca84:	1a9b      	subs	r3, r3, r2
 800ca86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca90:	eef0 0a68 	vmov.f32	s1, s17
 800ca94:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ca98:	f7ff f8fc 	bl	800bc94 <__ulp>
 800ca9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800caa0:	ec53 2b10 	vmov	r2, r3, d0
 800caa4:	f7f3 fda8 	bl	80005f8 <__aeabi_dmul>
 800caa8:	ec53 2b18 	vmov	r2, r3, d8
 800caac:	f7f3 fbee 	bl	800028c <__adddf3>
 800cab0:	4680      	mov	r8, r0
 800cab2:	4689      	mov	r9, r1
 800cab4:	e78d      	b.n	800c9d2 <_strtod_l+0xa82>
 800cab6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800caba:	e7db      	b.n	800ca74 <_strtod_l+0xb24>
 800cabc:	a314      	add	r3, pc, #80	; (adr r3, 800cb10 <_strtod_l+0xbc0>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	f7f4 f80b 	bl	8000adc <__aeabi_dcmplt>
 800cac6:	e7b3      	b.n	800ca30 <_strtod_l+0xae0>
 800cac8:	2300      	movs	r3, #0
 800caca:	930a      	str	r3, [sp, #40]	; 0x28
 800cacc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cad0:	6013      	str	r3, [r2, #0]
 800cad2:	f7ff ba7c 	b.w	800bfce <_strtod_l+0x7e>
 800cad6:	2a65      	cmp	r2, #101	; 0x65
 800cad8:	f43f ab75 	beq.w	800c1c6 <_strtod_l+0x276>
 800cadc:	2a45      	cmp	r2, #69	; 0x45
 800cade:	f43f ab72 	beq.w	800c1c6 <_strtod_l+0x276>
 800cae2:	2301      	movs	r3, #1
 800cae4:	f7ff bbaa 	b.w	800c23c <_strtod_l+0x2ec>
 800cae8:	00000000 	.word	0x00000000
 800caec:	bff00000 	.word	0xbff00000
 800caf0:	00000000 	.word	0x00000000
 800caf4:	3ff00000 	.word	0x3ff00000
 800caf8:	94a03595 	.word	0x94a03595
 800cafc:	3fdfffff 	.word	0x3fdfffff
 800cb00:	35afe535 	.word	0x35afe535
 800cb04:	3fe00000 	.word	0x3fe00000
 800cb08:	ffc00000 	.word	0xffc00000
 800cb0c:	41dfffff 	.word	0x41dfffff
 800cb10:	94a03595 	.word	0x94a03595
 800cb14:	3fcfffff 	.word	0x3fcfffff
 800cb18:	3ff00000 	.word	0x3ff00000
 800cb1c:	3fe00000 	.word	0x3fe00000
 800cb20:	7ff00000 	.word	0x7ff00000
 800cb24:	7fe00000 	.word	0x7fe00000
 800cb28:	7c9fffff 	.word	0x7c9fffff
 800cb2c:	7fefffff 	.word	0x7fefffff

0800cb30 <_strtod_r>:
 800cb30:	4b01      	ldr	r3, [pc, #4]	; (800cb38 <_strtod_r+0x8>)
 800cb32:	f7ff ba0d 	b.w	800bf50 <_strtod_l>
 800cb36:	bf00      	nop
 800cb38:	20000070 	.word	0x20000070

0800cb3c <_strtol_l.constprop.0>:
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb42:	d001      	beq.n	800cb48 <_strtol_l.constprop.0+0xc>
 800cb44:	2b24      	cmp	r3, #36	; 0x24
 800cb46:	d906      	bls.n	800cb56 <_strtol_l.constprop.0+0x1a>
 800cb48:	f7fd fd88 	bl	800a65c <__errno>
 800cb4c:	2316      	movs	r3, #22
 800cb4e:	6003      	str	r3, [r0, #0]
 800cb50:	2000      	movs	r0, #0
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cc3c <_strtol_l.constprop.0+0x100>
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	462e      	mov	r6, r5
 800cb5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb62:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cb66:	f017 0708 	ands.w	r7, r7, #8
 800cb6a:	d1f7      	bne.n	800cb5c <_strtol_l.constprop.0+0x20>
 800cb6c:	2c2d      	cmp	r4, #45	; 0x2d
 800cb6e:	d132      	bne.n	800cbd6 <_strtol_l.constprop.0+0x9a>
 800cb70:	782c      	ldrb	r4, [r5, #0]
 800cb72:	2701      	movs	r7, #1
 800cb74:	1cb5      	adds	r5, r6, #2
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d05b      	beq.n	800cc32 <_strtol_l.constprop.0+0xf6>
 800cb7a:	2b10      	cmp	r3, #16
 800cb7c:	d109      	bne.n	800cb92 <_strtol_l.constprop.0+0x56>
 800cb7e:	2c30      	cmp	r4, #48	; 0x30
 800cb80:	d107      	bne.n	800cb92 <_strtol_l.constprop.0+0x56>
 800cb82:	782c      	ldrb	r4, [r5, #0]
 800cb84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb88:	2c58      	cmp	r4, #88	; 0x58
 800cb8a:	d14d      	bne.n	800cc28 <_strtol_l.constprop.0+0xec>
 800cb8c:	786c      	ldrb	r4, [r5, #1]
 800cb8e:	2310      	movs	r3, #16
 800cb90:	3502      	adds	r5, #2
 800cb92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb96:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb9a:	f04f 0e00 	mov.w	lr, #0
 800cb9e:	fbb8 f9f3 	udiv	r9, r8, r3
 800cba2:	4676      	mov	r6, lr
 800cba4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cba8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cbac:	f1bc 0f09 	cmp.w	ip, #9
 800cbb0:	d816      	bhi.n	800cbe0 <_strtol_l.constprop.0+0xa4>
 800cbb2:	4664      	mov	r4, ip
 800cbb4:	42a3      	cmp	r3, r4
 800cbb6:	dd24      	ble.n	800cc02 <_strtol_l.constprop.0+0xc6>
 800cbb8:	f1be 3fff 	cmp.w	lr, #4294967295
 800cbbc:	d008      	beq.n	800cbd0 <_strtol_l.constprop.0+0x94>
 800cbbe:	45b1      	cmp	r9, r6
 800cbc0:	d31c      	bcc.n	800cbfc <_strtol_l.constprop.0+0xc0>
 800cbc2:	d101      	bne.n	800cbc8 <_strtol_l.constprop.0+0x8c>
 800cbc4:	45a2      	cmp	sl, r4
 800cbc6:	db19      	blt.n	800cbfc <_strtol_l.constprop.0+0xc0>
 800cbc8:	fb06 4603 	mla	r6, r6, r3, r4
 800cbcc:	f04f 0e01 	mov.w	lr, #1
 800cbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbd4:	e7e8      	b.n	800cba8 <_strtol_l.constprop.0+0x6c>
 800cbd6:	2c2b      	cmp	r4, #43	; 0x2b
 800cbd8:	bf04      	itt	eq
 800cbda:	782c      	ldrbeq	r4, [r5, #0]
 800cbdc:	1cb5      	addeq	r5, r6, #2
 800cbde:	e7ca      	b.n	800cb76 <_strtol_l.constprop.0+0x3a>
 800cbe0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cbe4:	f1bc 0f19 	cmp.w	ip, #25
 800cbe8:	d801      	bhi.n	800cbee <_strtol_l.constprop.0+0xb2>
 800cbea:	3c37      	subs	r4, #55	; 0x37
 800cbec:	e7e2      	b.n	800cbb4 <_strtol_l.constprop.0+0x78>
 800cbee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cbf2:	f1bc 0f19 	cmp.w	ip, #25
 800cbf6:	d804      	bhi.n	800cc02 <_strtol_l.constprop.0+0xc6>
 800cbf8:	3c57      	subs	r4, #87	; 0x57
 800cbfa:	e7db      	b.n	800cbb4 <_strtol_l.constprop.0+0x78>
 800cbfc:	f04f 3eff 	mov.w	lr, #4294967295
 800cc00:	e7e6      	b.n	800cbd0 <_strtol_l.constprop.0+0x94>
 800cc02:	f1be 3fff 	cmp.w	lr, #4294967295
 800cc06:	d105      	bne.n	800cc14 <_strtol_l.constprop.0+0xd8>
 800cc08:	2322      	movs	r3, #34	; 0x22
 800cc0a:	6003      	str	r3, [r0, #0]
 800cc0c:	4646      	mov	r6, r8
 800cc0e:	b942      	cbnz	r2, 800cc22 <_strtol_l.constprop.0+0xe6>
 800cc10:	4630      	mov	r0, r6
 800cc12:	e79e      	b.n	800cb52 <_strtol_l.constprop.0+0x16>
 800cc14:	b107      	cbz	r7, 800cc18 <_strtol_l.constprop.0+0xdc>
 800cc16:	4276      	negs	r6, r6
 800cc18:	2a00      	cmp	r2, #0
 800cc1a:	d0f9      	beq.n	800cc10 <_strtol_l.constprop.0+0xd4>
 800cc1c:	f1be 0f00 	cmp.w	lr, #0
 800cc20:	d000      	beq.n	800cc24 <_strtol_l.constprop.0+0xe8>
 800cc22:	1e69      	subs	r1, r5, #1
 800cc24:	6011      	str	r1, [r2, #0]
 800cc26:	e7f3      	b.n	800cc10 <_strtol_l.constprop.0+0xd4>
 800cc28:	2430      	movs	r4, #48	; 0x30
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1b1      	bne.n	800cb92 <_strtol_l.constprop.0+0x56>
 800cc2e:	2308      	movs	r3, #8
 800cc30:	e7af      	b.n	800cb92 <_strtol_l.constprop.0+0x56>
 800cc32:	2c30      	cmp	r4, #48	; 0x30
 800cc34:	d0a5      	beq.n	800cb82 <_strtol_l.constprop.0+0x46>
 800cc36:	230a      	movs	r3, #10
 800cc38:	e7ab      	b.n	800cb92 <_strtol_l.constprop.0+0x56>
 800cc3a:	bf00      	nop
 800cc3c:	08011139 	.word	0x08011139

0800cc40 <_strtol_r>:
 800cc40:	f7ff bf7c 	b.w	800cb3c <_strtol_l.constprop.0>

0800cc44 <__ssputs_r>:
 800cc44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc48:	688e      	ldr	r6, [r1, #8]
 800cc4a:	461f      	mov	r7, r3
 800cc4c:	42be      	cmp	r6, r7
 800cc4e:	680b      	ldr	r3, [r1, #0]
 800cc50:	4682      	mov	sl, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	4690      	mov	r8, r2
 800cc56:	d82c      	bhi.n	800ccb2 <__ssputs_r+0x6e>
 800cc58:	898a      	ldrh	r2, [r1, #12]
 800cc5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc5e:	d026      	beq.n	800ccae <__ssputs_r+0x6a>
 800cc60:	6965      	ldr	r5, [r4, #20]
 800cc62:	6909      	ldr	r1, [r1, #16]
 800cc64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc68:	eba3 0901 	sub.w	r9, r3, r1
 800cc6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc70:	1c7b      	adds	r3, r7, #1
 800cc72:	444b      	add	r3, r9
 800cc74:	106d      	asrs	r5, r5, #1
 800cc76:	429d      	cmp	r5, r3
 800cc78:	bf38      	it	cc
 800cc7a:	461d      	movcc	r5, r3
 800cc7c:	0553      	lsls	r3, r2, #21
 800cc7e:	d527      	bpl.n	800ccd0 <__ssputs_r+0x8c>
 800cc80:	4629      	mov	r1, r5
 800cc82:	f7fe fc0f 	bl	800b4a4 <_malloc_r>
 800cc86:	4606      	mov	r6, r0
 800cc88:	b360      	cbz	r0, 800cce4 <__ssputs_r+0xa0>
 800cc8a:	6921      	ldr	r1, [r4, #16]
 800cc8c:	464a      	mov	r2, r9
 800cc8e:	f000 fa1b 	bl	800d0c8 <memcpy>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	6126      	str	r6, [r4, #16]
 800cca0:	6165      	str	r5, [r4, #20]
 800cca2:	444e      	add	r6, r9
 800cca4:	eba5 0509 	sub.w	r5, r5, r9
 800cca8:	6026      	str	r6, [r4, #0]
 800ccaa:	60a5      	str	r5, [r4, #8]
 800ccac:	463e      	mov	r6, r7
 800ccae:	42be      	cmp	r6, r7
 800ccb0:	d900      	bls.n	800ccb4 <__ssputs_r+0x70>
 800ccb2:	463e      	mov	r6, r7
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	4632      	mov	r2, r6
 800ccb8:	4641      	mov	r1, r8
 800ccba:	f000 f9c9 	bl	800d050 <memmove>
 800ccbe:	68a3      	ldr	r3, [r4, #8]
 800ccc0:	1b9b      	subs	r3, r3, r6
 800ccc2:	60a3      	str	r3, [r4, #8]
 800ccc4:	6823      	ldr	r3, [r4, #0]
 800ccc6:	4433      	add	r3, r6
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	2000      	movs	r0, #0
 800cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd0:	462a      	mov	r2, r5
 800ccd2:	f000 fdae 	bl	800d832 <_realloc_r>
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d1e0      	bne.n	800cc9e <__ssputs_r+0x5a>
 800ccdc:	6921      	ldr	r1, [r4, #16]
 800ccde:	4650      	mov	r0, sl
 800cce0:	f7fe fb6c 	bl	800b3bc <_free_r>
 800cce4:	230c      	movs	r3, #12
 800cce6:	f8ca 3000 	str.w	r3, [sl]
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf6:	e7e9      	b.n	800cccc <__ssputs_r+0x88>

0800ccf8 <_svfiprintf_r>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	4698      	mov	r8, r3
 800ccfe:	898b      	ldrh	r3, [r1, #12]
 800cd00:	061b      	lsls	r3, r3, #24
 800cd02:	b09d      	sub	sp, #116	; 0x74
 800cd04:	4607      	mov	r7, r0
 800cd06:	460d      	mov	r5, r1
 800cd08:	4614      	mov	r4, r2
 800cd0a:	d50e      	bpl.n	800cd2a <_svfiprintf_r+0x32>
 800cd0c:	690b      	ldr	r3, [r1, #16]
 800cd0e:	b963      	cbnz	r3, 800cd2a <_svfiprintf_r+0x32>
 800cd10:	2140      	movs	r1, #64	; 0x40
 800cd12:	f7fe fbc7 	bl	800b4a4 <_malloc_r>
 800cd16:	6028      	str	r0, [r5, #0]
 800cd18:	6128      	str	r0, [r5, #16]
 800cd1a:	b920      	cbnz	r0, 800cd26 <_svfiprintf_r+0x2e>
 800cd1c:	230c      	movs	r3, #12
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	e0d0      	b.n	800cec8 <_svfiprintf_r+0x1d0>
 800cd26:	2340      	movs	r3, #64	; 0x40
 800cd28:	616b      	str	r3, [r5, #20]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd2e:	2320      	movs	r3, #32
 800cd30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd34:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd38:	2330      	movs	r3, #48	; 0x30
 800cd3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cee0 <_svfiprintf_r+0x1e8>
 800cd3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd42:	f04f 0901 	mov.w	r9, #1
 800cd46:	4623      	mov	r3, r4
 800cd48:	469a      	mov	sl, r3
 800cd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd4e:	b10a      	cbz	r2, 800cd54 <_svfiprintf_r+0x5c>
 800cd50:	2a25      	cmp	r2, #37	; 0x25
 800cd52:	d1f9      	bne.n	800cd48 <_svfiprintf_r+0x50>
 800cd54:	ebba 0b04 	subs.w	fp, sl, r4
 800cd58:	d00b      	beq.n	800cd72 <_svfiprintf_r+0x7a>
 800cd5a:	465b      	mov	r3, fp
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4638      	mov	r0, r7
 800cd62:	f7ff ff6f 	bl	800cc44 <__ssputs_r>
 800cd66:	3001      	adds	r0, #1
 800cd68:	f000 80a9 	beq.w	800cebe <_svfiprintf_r+0x1c6>
 800cd6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd6e:	445a      	add	r2, fp
 800cd70:	9209      	str	r2, [sp, #36]	; 0x24
 800cd72:	f89a 3000 	ldrb.w	r3, [sl]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 80a1 	beq.w	800cebe <_svfiprintf_r+0x1c6>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd86:	f10a 0a01 	add.w	sl, sl, #1
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	9307      	str	r3, [sp, #28]
 800cd8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd92:	931a      	str	r3, [sp, #104]	; 0x68
 800cd94:	4654      	mov	r4, sl
 800cd96:	2205      	movs	r2, #5
 800cd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9c:	4850      	ldr	r0, [pc, #320]	; (800cee0 <_svfiprintf_r+0x1e8>)
 800cd9e:	f7f3 fa17 	bl	80001d0 <memchr>
 800cda2:	9a04      	ldr	r2, [sp, #16]
 800cda4:	b9d8      	cbnz	r0, 800cdde <_svfiprintf_r+0xe6>
 800cda6:	06d0      	lsls	r0, r2, #27
 800cda8:	bf44      	itt	mi
 800cdaa:	2320      	movmi	r3, #32
 800cdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb0:	0711      	lsls	r1, r2, #28
 800cdb2:	bf44      	itt	mi
 800cdb4:	232b      	movmi	r3, #43	; 0x2b
 800cdb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdba:	f89a 3000 	ldrb.w	r3, [sl]
 800cdbe:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc0:	d015      	beq.n	800cdee <_svfiprintf_r+0xf6>
 800cdc2:	9a07      	ldr	r2, [sp, #28]
 800cdc4:	4654      	mov	r4, sl
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f04f 0c0a 	mov.w	ip, #10
 800cdcc:	4621      	mov	r1, r4
 800cdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd2:	3b30      	subs	r3, #48	; 0x30
 800cdd4:	2b09      	cmp	r3, #9
 800cdd6:	d94d      	bls.n	800ce74 <_svfiprintf_r+0x17c>
 800cdd8:	b1b0      	cbz	r0, 800ce08 <_svfiprintf_r+0x110>
 800cdda:	9207      	str	r2, [sp, #28]
 800cddc:	e014      	b.n	800ce08 <_svfiprintf_r+0x110>
 800cdde:	eba0 0308 	sub.w	r3, r0, r8
 800cde2:	fa09 f303 	lsl.w	r3, r9, r3
 800cde6:	4313      	orrs	r3, r2
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	46a2      	mov	sl, r4
 800cdec:	e7d2      	b.n	800cd94 <_svfiprintf_r+0x9c>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	1d19      	adds	r1, r3, #4
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	9103      	str	r1, [sp, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bfbb      	ittet	lt
 800cdfa:	425b      	neglt	r3, r3
 800cdfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ce00:	9307      	strge	r3, [sp, #28]
 800ce02:	9307      	strlt	r3, [sp, #28]
 800ce04:	bfb8      	it	lt
 800ce06:	9204      	strlt	r2, [sp, #16]
 800ce08:	7823      	ldrb	r3, [r4, #0]
 800ce0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce0c:	d10c      	bne.n	800ce28 <_svfiprintf_r+0x130>
 800ce0e:	7863      	ldrb	r3, [r4, #1]
 800ce10:	2b2a      	cmp	r3, #42	; 0x2a
 800ce12:	d134      	bne.n	800ce7e <_svfiprintf_r+0x186>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	1d1a      	adds	r2, r3, #4
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	9203      	str	r2, [sp, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfb8      	it	lt
 800ce20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce24:	3402      	adds	r4, #2
 800ce26:	9305      	str	r3, [sp, #20]
 800ce28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cef0 <_svfiprintf_r+0x1f8>
 800ce2c:	7821      	ldrb	r1, [r4, #0]
 800ce2e:	2203      	movs	r2, #3
 800ce30:	4650      	mov	r0, sl
 800ce32:	f7f3 f9cd 	bl	80001d0 <memchr>
 800ce36:	b138      	cbz	r0, 800ce48 <_svfiprintf_r+0x150>
 800ce38:	9b04      	ldr	r3, [sp, #16]
 800ce3a:	eba0 000a 	sub.w	r0, r0, sl
 800ce3e:	2240      	movs	r2, #64	; 0x40
 800ce40:	4082      	lsls	r2, r0
 800ce42:	4313      	orrs	r3, r2
 800ce44:	3401      	adds	r4, #1
 800ce46:	9304      	str	r3, [sp, #16]
 800ce48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4c:	4825      	ldr	r0, [pc, #148]	; (800cee4 <_svfiprintf_r+0x1ec>)
 800ce4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce52:	2206      	movs	r2, #6
 800ce54:	f7f3 f9bc 	bl	80001d0 <memchr>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d038      	beq.n	800cece <_svfiprintf_r+0x1d6>
 800ce5c:	4b22      	ldr	r3, [pc, #136]	; (800cee8 <_svfiprintf_r+0x1f0>)
 800ce5e:	bb1b      	cbnz	r3, 800cea8 <_svfiprintf_r+0x1b0>
 800ce60:	9b03      	ldr	r3, [sp, #12]
 800ce62:	3307      	adds	r3, #7
 800ce64:	f023 0307 	bic.w	r3, r3, #7
 800ce68:	3308      	adds	r3, #8
 800ce6a:	9303      	str	r3, [sp, #12]
 800ce6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce6e:	4433      	add	r3, r6
 800ce70:	9309      	str	r3, [sp, #36]	; 0x24
 800ce72:	e768      	b.n	800cd46 <_svfiprintf_r+0x4e>
 800ce74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce78:	460c      	mov	r4, r1
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	e7a6      	b.n	800cdcc <_svfiprintf_r+0xd4>
 800ce7e:	2300      	movs	r3, #0
 800ce80:	3401      	adds	r4, #1
 800ce82:	9305      	str	r3, [sp, #20]
 800ce84:	4619      	mov	r1, r3
 800ce86:	f04f 0c0a 	mov.w	ip, #10
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce90:	3a30      	subs	r2, #48	; 0x30
 800ce92:	2a09      	cmp	r2, #9
 800ce94:	d903      	bls.n	800ce9e <_svfiprintf_r+0x1a6>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0c6      	beq.n	800ce28 <_svfiprintf_r+0x130>
 800ce9a:	9105      	str	r1, [sp, #20]
 800ce9c:	e7c4      	b.n	800ce28 <_svfiprintf_r+0x130>
 800ce9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea2:	4604      	mov	r4, r0
 800cea4:	2301      	movs	r3, #1
 800cea6:	e7f0      	b.n	800ce8a <_svfiprintf_r+0x192>
 800cea8:	ab03      	add	r3, sp, #12
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	462a      	mov	r2, r5
 800ceae:	4b0f      	ldr	r3, [pc, #60]	; (800ceec <_svfiprintf_r+0x1f4>)
 800ceb0:	a904      	add	r1, sp, #16
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	f7fc fc84 	bl	80097c0 <_printf_float>
 800ceb8:	1c42      	adds	r2, r0, #1
 800ceba:	4606      	mov	r6, r0
 800cebc:	d1d6      	bne.n	800ce6c <_svfiprintf_r+0x174>
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	065b      	lsls	r3, r3, #25
 800cec2:	f53f af2d 	bmi.w	800cd20 <_svfiprintf_r+0x28>
 800cec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cec8:	b01d      	add	sp, #116	; 0x74
 800ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	462a      	mov	r2, r5
 800ced4:	4b05      	ldr	r3, [pc, #20]	; (800ceec <_svfiprintf_r+0x1f4>)
 800ced6:	a904      	add	r1, sp, #16
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7fc ff15 	bl	8009d08 <_printf_i>
 800cede:	e7eb      	b.n	800ceb8 <_svfiprintf_r+0x1c0>
 800cee0:	08011239 	.word	0x08011239
 800cee4:	08011243 	.word	0x08011243
 800cee8:	080097c1 	.word	0x080097c1
 800ceec:	0800cc45 	.word	0x0800cc45
 800cef0:	0801123f 	.word	0x0801123f

0800cef4 <__sflush_r>:
 800cef4:	898a      	ldrh	r2, [r1, #12]
 800cef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	4605      	mov	r5, r0
 800cefc:	0710      	lsls	r0, r2, #28
 800cefe:	460c      	mov	r4, r1
 800cf00:	d458      	bmi.n	800cfb4 <__sflush_r+0xc0>
 800cf02:	684b      	ldr	r3, [r1, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dc05      	bgt.n	800cf14 <__sflush_r+0x20>
 800cf08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	dc02      	bgt.n	800cf14 <__sflush_r+0x20>
 800cf0e:	2000      	movs	r0, #0
 800cf10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf16:	2e00      	cmp	r6, #0
 800cf18:	d0f9      	beq.n	800cf0e <__sflush_r+0x1a>
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf20:	682f      	ldr	r7, [r5, #0]
 800cf22:	6a21      	ldr	r1, [r4, #32]
 800cf24:	602b      	str	r3, [r5, #0]
 800cf26:	d032      	beq.n	800cf8e <__sflush_r+0x9a>
 800cf28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	075a      	lsls	r2, r3, #29
 800cf2e:	d505      	bpl.n	800cf3c <__sflush_r+0x48>
 800cf30:	6863      	ldr	r3, [r4, #4]
 800cf32:	1ac0      	subs	r0, r0, r3
 800cf34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf36:	b10b      	cbz	r3, 800cf3c <__sflush_r+0x48>
 800cf38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf3a:	1ac0      	subs	r0, r0, r3
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	4602      	mov	r2, r0
 800cf40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf42:	6a21      	ldr	r1, [r4, #32]
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b0      	blx	r6
 800cf48:	1c43      	adds	r3, r0, #1
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	d106      	bne.n	800cf5c <__sflush_r+0x68>
 800cf4e:	6829      	ldr	r1, [r5, #0]
 800cf50:	291d      	cmp	r1, #29
 800cf52:	d82b      	bhi.n	800cfac <__sflush_r+0xb8>
 800cf54:	4a29      	ldr	r2, [pc, #164]	; (800cffc <__sflush_r+0x108>)
 800cf56:	410a      	asrs	r2, r1
 800cf58:	07d6      	lsls	r6, r2, #31
 800cf5a:	d427      	bmi.n	800cfac <__sflush_r+0xb8>
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	6062      	str	r2, [r4, #4]
 800cf60:	04d9      	lsls	r1, r3, #19
 800cf62:	6922      	ldr	r2, [r4, #16]
 800cf64:	6022      	str	r2, [r4, #0]
 800cf66:	d504      	bpl.n	800cf72 <__sflush_r+0x7e>
 800cf68:	1c42      	adds	r2, r0, #1
 800cf6a:	d101      	bne.n	800cf70 <__sflush_r+0x7c>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b903      	cbnz	r3, 800cf72 <__sflush_r+0x7e>
 800cf70:	6560      	str	r0, [r4, #84]	; 0x54
 800cf72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf74:	602f      	str	r7, [r5, #0]
 800cf76:	2900      	cmp	r1, #0
 800cf78:	d0c9      	beq.n	800cf0e <__sflush_r+0x1a>
 800cf7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf7e:	4299      	cmp	r1, r3
 800cf80:	d002      	beq.n	800cf88 <__sflush_r+0x94>
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7fe fa1a 	bl	800b3bc <_free_r>
 800cf88:	2000      	movs	r0, #0
 800cf8a:	6360      	str	r0, [r4, #52]	; 0x34
 800cf8c:	e7c0      	b.n	800cf10 <__sflush_r+0x1c>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b0      	blx	r6
 800cf94:	1c41      	adds	r1, r0, #1
 800cf96:	d1c8      	bne.n	800cf2a <__sflush_r+0x36>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d0c5      	beq.n	800cf2a <__sflush_r+0x36>
 800cf9e:	2b1d      	cmp	r3, #29
 800cfa0:	d001      	beq.n	800cfa6 <__sflush_r+0xb2>
 800cfa2:	2b16      	cmp	r3, #22
 800cfa4:	d101      	bne.n	800cfaa <__sflush_r+0xb6>
 800cfa6:	602f      	str	r7, [r5, #0]
 800cfa8:	e7b1      	b.n	800cf0e <__sflush_r+0x1a>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfb0:	81a3      	strh	r3, [r4, #12]
 800cfb2:	e7ad      	b.n	800cf10 <__sflush_r+0x1c>
 800cfb4:	690f      	ldr	r7, [r1, #16]
 800cfb6:	2f00      	cmp	r7, #0
 800cfb8:	d0a9      	beq.n	800cf0e <__sflush_r+0x1a>
 800cfba:	0793      	lsls	r3, r2, #30
 800cfbc:	680e      	ldr	r6, [r1, #0]
 800cfbe:	bf08      	it	eq
 800cfc0:	694b      	ldreq	r3, [r1, #20]
 800cfc2:	600f      	str	r7, [r1, #0]
 800cfc4:	bf18      	it	ne
 800cfc6:	2300      	movne	r3, #0
 800cfc8:	eba6 0807 	sub.w	r8, r6, r7
 800cfcc:	608b      	str	r3, [r1, #8]
 800cfce:	f1b8 0f00 	cmp.w	r8, #0
 800cfd2:	dd9c      	ble.n	800cf0e <__sflush_r+0x1a>
 800cfd4:	6a21      	ldr	r1, [r4, #32]
 800cfd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfd8:	4643      	mov	r3, r8
 800cfda:	463a      	mov	r2, r7
 800cfdc:	4628      	mov	r0, r5
 800cfde:	47b0      	blx	r6
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	dc06      	bgt.n	800cff2 <__sflush_r+0xfe>
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfea:	81a3      	strh	r3, [r4, #12]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	e78e      	b.n	800cf10 <__sflush_r+0x1c>
 800cff2:	4407      	add	r7, r0
 800cff4:	eba8 0800 	sub.w	r8, r8, r0
 800cff8:	e7e9      	b.n	800cfce <__sflush_r+0xda>
 800cffa:	bf00      	nop
 800cffc:	dfbffffe 	.word	0xdfbffffe

0800d000 <_fflush_r>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	690b      	ldr	r3, [r1, #16]
 800d004:	4605      	mov	r5, r0
 800d006:	460c      	mov	r4, r1
 800d008:	b913      	cbnz	r3, 800d010 <_fflush_r+0x10>
 800d00a:	2500      	movs	r5, #0
 800d00c:	4628      	mov	r0, r5
 800d00e:	bd38      	pop	{r3, r4, r5, pc}
 800d010:	b118      	cbz	r0, 800d01a <_fflush_r+0x1a>
 800d012:	6a03      	ldr	r3, [r0, #32]
 800d014:	b90b      	cbnz	r3, 800d01a <_fflush_r+0x1a>
 800d016:	f7fd fa35 	bl	800a484 <__sinit>
 800d01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d0f3      	beq.n	800d00a <_fflush_r+0xa>
 800d022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d024:	07d0      	lsls	r0, r2, #31
 800d026:	d404      	bmi.n	800d032 <_fflush_r+0x32>
 800d028:	0599      	lsls	r1, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_fflush_r+0x32>
 800d02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d02e:	f7fd fb40 	bl	800a6b2 <__retarget_lock_acquire_recursive>
 800d032:	4628      	mov	r0, r5
 800d034:	4621      	mov	r1, r4
 800d036:	f7ff ff5d 	bl	800cef4 <__sflush_r>
 800d03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d03c:	07da      	lsls	r2, r3, #31
 800d03e:	4605      	mov	r5, r0
 800d040:	d4e4      	bmi.n	800d00c <_fflush_r+0xc>
 800d042:	89a3      	ldrh	r3, [r4, #12]
 800d044:	059b      	lsls	r3, r3, #22
 800d046:	d4e1      	bmi.n	800d00c <_fflush_r+0xc>
 800d048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d04a:	f7fd fb33 	bl	800a6b4 <__retarget_lock_release_recursive>
 800d04e:	e7dd      	b.n	800d00c <_fflush_r+0xc>

0800d050 <memmove>:
 800d050:	4288      	cmp	r0, r1
 800d052:	b510      	push	{r4, lr}
 800d054:	eb01 0402 	add.w	r4, r1, r2
 800d058:	d902      	bls.n	800d060 <memmove+0x10>
 800d05a:	4284      	cmp	r4, r0
 800d05c:	4623      	mov	r3, r4
 800d05e:	d807      	bhi.n	800d070 <memmove+0x20>
 800d060:	1e43      	subs	r3, r0, #1
 800d062:	42a1      	cmp	r1, r4
 800d064:	d008      	beq.n	800d078 <memmove+0x28>
 800d066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d06e:	e7f8      	b.n	800d062 <memmove+0x12>
 800d070:	4402      	add	r2, r0
 800d072:	4601      	mov	r1, r0
 800d074:	428a      	cmp	r2, r1
 800d076:	d100      	bne.n	800d07a <memmove+0x2a>
 800d078:	bd10      	pop	{r4, pc}
 800d07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d082:	e7f7      	b.n	800d074 <memmove+0x24>

0800d084 <strncmp>:
 800d084:	b510      	push	{r4, lr}
 800d086:	b16a      	cbz	r2, 800d0a4 <strncmp+0x20>
 800d088:	3901      	subs	r1, #1
 800d08a:	1884      	adds	r4, r0, r2
 800d08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d090:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d094:	429a      	cmp	r2, r3
 800d096:	d103      	bne.n	800d0a0 <strncmp+0x1c>
 800d098:	42a0      	cmp	r0, r4
 800d09a:	d001      	beq.n	800d0a0 <strncmp+0x1c>
 800d09c:	2a00      	cmp	r2, #0
 800d09e:	d1f5      	bne.n	800d08c <strncmp+0x8>
 800d0a0:	1ad0      	subs	r0, r2, r3
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	e7fc      	b.n	800d0a2 <strncmp+0x1e>

0800d0a8 <_sbrk_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	; (800d0c4 <_sbrk_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f6 f8d8 	bl	8003268 <_sbrk>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_sbrk_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_sbrk_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	200006bc 	.word	0x200006bc

0800d0c8 <memcpy>:
 800d0c8:	440a      	add	r2, r1
 800d0ca:	4291      	cmp	r1, r2
 800d0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0d0:	d100      	bne.n	800d0d4 <memcpy+0xc>
 800d0d2:	4770      	bx	lr
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0de:	4291      	cmp	r1, r2
 800d0e0:	d1f9      	bne.n	800d0d6 <memcpy+0xe>
 800d0e2:	bd10      	pop	{r4, pc}
 800d0e4:	0000      	movs	r0, r0
	...

0800d0e8 <nan>:
 800d0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d0f0 <nan+0x8>
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	00000000 	.word	0x00000000
 800d0f4:	7ff80000 	.word	0x7ff80000

0800d0f8 <__assert_func>:
 800d0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0fa:	4614      	mov	r4, r2
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	4b09      	ldr	r3, [pc, #36]	; (800d124 <__assert_func+0x2c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	4605      	mov	r5, r0
 800d104:	68d8      	ldr	r0, [r3, #12]
 800d106:	b14c      	cbz	r4, 800d11c <__assert_func+0x24>
 800d108:	4b07      	ldr	r3, [pc, #28]	; (800d128 <__assert_func+0x30>)
 800d10a:	9100      	str	r1, [sp, #0]
 800d10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d110:	4906      	ldr	r1, [pc, #24]	; (800d12c <__assert_func+0x34>)
 800d112:	462b      	mov	r3, r5
 800d114:	f000 fbca 	bl	800d8ac <fiprintf>
 800d118:	f000 fbda 	bl	800d8d0 <abort>
 800d11c:	4b04      	ldr	r3, [pc, #16]	; (800d130 <__assert_func+0x38>)
 800d11e:	461c      	mov	r4, r3
 800d120:	e7f3      	b.n	800d10a <__assert_func+0x12>
 800d122:	bf00      	nop
 800d124:	2000006c 	.word	0x2000006c
 800d128:	08011252 	.word	0x08011252
 800d12c:	0801125f 	.word	0x0801125f
 800d130:	0801128d 	.word	0x0801128d

0800d134 <_calloc_r>:
 800d134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d136:	fba1 2402 	umull	r2, r4, r1, r2
 800d13a:	b94c      	cbnz	r4, 800d150 <_calloc_r+0x1c>
 800d13c:	4611      	mov	r1, r2
 800d13e:	9201      	str	r2, [sp, #4]
 800d140:	f7fe f9b0 	bl	800b4a4 <_malloc_r>
 800d144:	9a01      	ldr	r2, [sp, #4]
 800d146:	4605      	mov	r5, r0
 800d148:	b930      	cbnz	r0, 800d158 <_calloc_r+0x24>
 800d14a:	4628      	mov	r0, r5
 800d14c:	b003      	add	sp, #12
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	220c      	movs	r2, #12
 800d152:	6002      	str	r2, [r0, #0]
 800d154:	2500      	movs	r5, #0
 800d156:	e7f8      	b.n	800d14a <_calloc_r+0x16>
 800d158:	4621      	mov	r1, r4
 800d15a:	f7fd fa2c 	bl	800a5b6 <memset>
 800d15e:	e7f4      	b.n	800d14a <_calloc_r+0x16>

0800d160 <rshift>:
 800d160:	6903      	ldr	r3, [r0, #16]
 800d162:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d16e:	f100 0414 	add.w	r4, r0, #20
 800d172:	dd45      	ble.n	800d200 <rshift+0xa0>
 800d174:	f011 011f 	ands.w	r1, r1, #31
 800d178:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d17c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d180:	d10c      	bne.n	800d19c <rshift+0x3c>
 800d182:	f100 0710 	add.w	r7, r0, #16
 800d186:	4629      	mov	r1, r5
 800d188:	42b1      	cmp	r1, r6
 800d18a:	d334      	bcc.n	800d1f6 <rshift+0x96>
 800d18c:	1a9b      	subs	r3, r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	1eea      	subs	r2, r5, #3
 800d192:	4296      	cmp	r6, r2
 800d194:	bf38      	it	cc
 800d196:	2300      	movcc	r3, #0
 800d198:	4423      	add	r3, r4
 800d19a:	e015      	b.n	800d1c8 <rshift+0x68>
 800d19c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1a0:	f1c1 0820 	rsb	r8, r1, #32
 800d1a4:	40cf      	lsrs	r7, r1
 800d1a6:	f105 0e04 	add.w	lr, r5, #4
 800d1aa:	46a1      	mov	r9, r4
 800d1ac:	4576      	cmp	r6, lr
 800d1ae:	46f4      	mov	ip, lr
 800d1b0:	d815      	bhi.n	800d1de <rshift+0x7e>
 800d1b2:	1a9a      	subs	r2, r3, r2
 800d1b4:	0092      	lsls	r2, r2, #2
 800d1b6:	3a04      	subs	r2, #4
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	42ae      	cmp	r6, r5
 800d1bc:	bf38      	it	cc
 800d1be:	2200      	movcc	r2, #0
 800d1c0:	18a3      	adds	r3, r4, r2
 800d1c2:	50a7      	str	r7, [r4, r2]
 800d1c4:	b107      	cbz	r7, 800d1c8 <rshift+0x68>
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	1b1a      	subs	r2, r3, r4
 800d1ca:	42a3      	cmp	r3, r4
 800d1cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1d0:	bf08      	it	eq
 800d1d2:	2300      	moveq	r3, #0
 800d1d4:	6102      	str	r2, [r0, #16]
 800d1d6:	bf08      	it	eq
 800d1d8:	6143      	streq	r3, [r0, #20]
 800d1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1de:	f8dc c000 	ldr.w	ip, [ip]
 800d1e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1e6:	ea4c 0707 	orr.w	r7, ip, r7
 800d1ea:	f849 7b04 	str.w	r7, [r9], #4
 800d1ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1f2:	40cf      	lsrs	r7, r1
 800d1f4:	e7da      	b.n	800d1ac <rshift+0x4c>
 800d1f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d1fe:	e7c3      	b.n	800d188 <rshift+0x28>
 800d200:	4623      	mov	r3, r4
 800d202:	e7e1      	b.n	800d1c8 <rshift+0x68>

0800d204 <__hexdig_fun>:
 800d204:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d208:	2b09      	cmp	r3, #9
 800d20a:	d802      	bhi.n	800d212 <__hexdig_fun+0xe>
 800d20c:	3820      	subs	r0, #32
 800d20e:	b2c0      	uxtb	r0, r0
 800d210:	4770      	bx	lr
 800d212:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d216:	2b05      	cmp	r3, #5
 800d218:	d801      	bhi.n	800d21e <__hexdig_fun+0x1a>
 800d21a:	3847      	subs	r0, #71	; 0x47
 800d21c:	e7f7      	b.n	800d20e <__hexdig_fun+0xa>
 800d21e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d222:	2b05      	cmp	r3, #5
 800d224:	d801      	bhi.n	800d22a <__hexdig_fun+0x26>
 800d226:	3827      	subs	r0, #39	; 0x27
 800d228:	e7f1      	b.n	800d20e <__hexdig_fun+0xa>
 800d22a:	2000      	movs	r0, #0
 800d22c:	4770      	bx	lr
	...

0800d230 <__gethex>:
 800d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	4617      	mov	r7, r2
 800d236:	680a      	ldr	r2, [r1, #0]
 800d238:	b085      	sub	sp, #20
 800d23a:	f102 0b02 	add.w	fp, r2, #2
 800d23e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d242:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d246:	4681      	mov	r9, r0
 800d248:	468a      	mov	sl, r1
 800d24a:	9302      	str	r3, [sp, #8]
 800d24c:	32fe      	adds	r2, #254	; 0xfe
 800d24e:	eb02 030b 	add.w	r3, r2, fp
 800d252:	46d8      	mov	r8, fp
 800d254:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	2830      	cmp	r0, #48	; 0x30
 800d25c:	d0f7      	beq.n	800d24e <__gethex+0x1e>
 800d25e:	f7ff ffd1 	bl	800d204 <__hexdig_fun>
 800d262:	4604      	mov	r4, r0
 800d264:	2800      	cmp	r0, #0
 800d266:	d138      	bne.n	800d2da <__gethex+0xaa>
 800d268:	49a7      	ldr	r1, [pc, #668]	; (800d508 <__gethex+0x2d8>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	4640      	mov	r0, r8
 800d26e:	f7ff ff09 	bl	800d084 <strncmp>
 800d272:	4606      	mov	r6, r0
 800d274:	2800      	cmp	r0, #0
 800d276:	d169      	bne.n	800d34c <__gethex+0x11c>
 800d278:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d27c:	465d      	mov	r5, fp
 800d27e:	f7ff ffc1 	bl	800d204 <__hexdig_fun>
 800d282:	2800      	cmp	r0, #0
 800d284:	d064      	beq.n	800d350 <__gethex+0x120>
 800d286:	465a      	mov	r2, fp
 800d288:	7810      	ldrb	r0, [r2, #0]
 800d28a:	2830      	cmp	r0, #48	; 0x30
 800d28c:	4690      	mov	r8, r2
 800d28e:	f102 0201 	add.w	r2, r2, #1
 800d292:	d0f9      	beq.n	800d288 <__gethex+0x58>
 800d294:	f7ff ffb6 	bl	800d204 <__hexdig_fun>
 800d298:	2301      	movs	r3, #1
 800d29a:	fab0 f480 	clz	r4, r0
 800d29e:	0964      	lsrs	r4, r4, #5
 800d2a0:	465e      	mov	r6, fp
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	4615      	mov	r5, r2
 800d2a8:	3201      	adds	r2, #1
 800d2aa:	7828      	ldrb	r0, [r5, #0]
 800d2ac:	f7ff ffaa 	bl	800d204 <__hexdig_fun>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d1f8      	bne.n	800d2a6 <__gethex+0x76>
 800d2b4:	4994      	ldr	r1, [pc, #592]	; (800d508 <__gethex+0x2d8>)
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f7ff fee3 	bl	800d084 <strncmp>
 800d2be:	b978      	cbnz	r0, 800d2e0 <__gethex+0xb0>
 800d2c0:	b946      	cbnz	r6, 800d2d4 <__gethex+0xa4>
 800d2c2:	1c6e      	adds	r6, r5, #1
 800d2c4:	4632      	mov	r2, r6
 800d2c6:	4615      	mov	r5, r2
 800d2c8:	3201      	adds	r2, #1
 800d2ca:	7828      	ldrb	r0, [r5, #0]
 800d2cc:	f7ff ff9a 	bl	800d204 <__hexdig_fun>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d1f8      	bne.n	800d2c6 <__gethex+0x96>
 800d2d4:	1b73      	subs	r3, r6, r5
 800d2d6:	009e      	lsls	r6, r3, #2
 800d2d8:	e004      	b.n	800d2e4 <__gethex+0xb4>
 800d2da:	2400      	movs	r4, #0
 800d2dc:	4626      	mov	r6, r4
 800d2de:	e7e1      	b.n	800d2a4 <__gethex+0x74>
 800d2e0:	2e00      	cmp	r6, #0
 800d2e2:	d1f7      	bne.n	800d2d4 <__gethex+0xa4>
 800d2e4:	782b      	ldrb	r3, [r5, #0]
 800d2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d2ea:	2b50      	cmp	r3, #80	; 0x50
 800d2ec:	d13d      	bne.n	800d36a <__gethex+0x13a>
 800d2ee:	786b      	ldrb	r3, [r5, #1]
 800d2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800d2f2:	d02f      	beq.n	800d354 <__gethex+0x124>
 800d2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800d2f6:	d031      	beq.n	800d35c <__gethex+0x12c>
 800d2f8:	1c69      	adds	r1, r5, #1
 800d2fa:	f04f 0b00 	mov.w	fp, #0
 800d2fe:	7808      	ldrb	r0, [r1, #0]
 800d300:	f7ff ff80 	bl	800d204 <__hexdig_fun>
 800d304:	1e42      	subs	r2, r0, #1
 800d306:	b2d2      	uxtb	r2, r2
 800d308:	2a18      	cmp	r2, #24
 800d30a:	d82e      	bhi.n	800d36a <__gethex+0x13a>
 800d30c:	f1a0 0210 	sub.w	r2, r0, #16
 800d310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d314:	f7ff ff76 	bl	800d204 <__hexdig_fun>
 800d318:	f100 3cff 	add.w	ip, r0, #4294967295
 800d31c:	fa5f fc8c 	uxtb.w	ip, ip
 800d320:	f1bc 0f18 	cmp.w	ip, #24
 800d324:	d91d      	bls.n	800d362 <__gethex+0x132>
 800d326:	f1bb 0f00 	cmp.w	fp, #0
 800d32a:	d000      	beq.n	800d32e <__gethex+0xfe>
 800d32c:	4252      	negs	r2, r2
 800d32e:	4416      	add	r6, r2
 800d330:	f8ca 1000 	str.w	r1, [sl]
 800d334:	b1dc      	cbz	r4, 800d36e <__gethex+0x13e>
 800d336:	9b01      	ldr	r3, [sp, #4]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bf14      	ite	ne
 800d33c:	f04f 0800 	movne.w	r8, #0
 800d340:	f04f 0806 	moveq.w	r8, #6
 800d344:	4640      	mov	r0, r8
 800d346:	b005      	add	sp, #20
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34c:	4645      	mov	r5, r8
 800d34e:	4626      	mov	r6, r4
 800d350:	2401      	movs	r4, #1
 800d352:	e7c7      	b.n	800d2e4 <__gethex+0xb4>
 800d354:	f04f 0b00 	mov.w	fp, #0
 800d358:	1ca9      	adds	r1, r5, #2
 800d35a:	e7d0      	b.n	800d2fe <__gethex+0xce>
 800d35c:	f04f 0b01 	mov.w	fp, #1
 800d360:	e7fa      	b.n	800d358 <__gethex+0x128>
 800d362:	230a      	movs	r3, #10
 800d364:	fb03 0002 	mla	r0, r3, r2, r0
 800d368:	e7d0      	b.n	800d30c <__gethex+0xdc>
 800d36a:	4629      	mov	r1, r5
 800d36c:	e7e0      	b.n	800d330 <__gethex+0x100>
 800d36e:	eba5 0308 	sub.w	r3, r5, r8
 800d372:	3b01      	subs	r3, #1
 800d374:	4621      	mov	r1, r4
 800d376:	2b07      	cmp	r3, #7
 800d378:	dc0a      	bgt.n	800d390 <__gethex+0x160>
 800d37a:	4648      	mov	r0, r9
 800d37c:	f7fe f91e 	bl	800b5bc <_Balloc>
 800d380:	4604      	mov	r4, r0
 800d382:	b940      	cbnz	r0, 800d396 <__gethex+0x166>
 800d384:	4b61      	ldr	r3, [pc, #388]	; (800d50c <__gethex+0x2dc>)
 800d386:	4602      	mov	r2, r0
 800d388:	21e4      	movs	r1, #228	; 0xe4
 800d38a:	4861      	ldr	r0, [pc, #388]	; (800d510 <__gethex+0x2e0>)
 800d38c:	f7ff feb4 	bl	800d0f8 <__assert_func>
 800d390:	3101      	adds	r1, #1
 800d392:	105b      	asrs	r3, r3, #1
 800d394:	e7ef      	b.n	800d376 <__gethex+0x146>
 800d396:	f100 0a14 	add.w	sl, r0, #20
 800d39a:	2300      	movs	r3, #0
 800d39c:	495a      	ldr	r1, [pc, #360]	; (800d508 <__gethex+0x2d8>)
 800d39e:	f8cd a004 	str.w	sl, [sp, #4]
 800d3a2:	469b      	mov	fp, r3
 800d3a4:	45a8      	cmp	r8, r5
 800d3a6:	d342      	bcc.n	800d42e <__gethex+0x1fe>
 800d3a8:	9801      	ldr	r0, [sp, #4]
 800d3aa:	f840 bb04 	str.w	fp, [r0], #4
 800d3ae:	eba0 000a 	sub.w	r0, r0, sl
 800d3b2:	1080      	asrs	r0, r0, #2
 800d3b4:	6120      	str	r0, [r4, #16]
 800d3b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d3ba:	4658      	mov	r0, fp
 800d3bc:	f7fe f9f0 	bl	800b7a0 <__hi0bits>
 800d3c0:	683d      	ldr	r5, [r7, #0]
 800d3c2:	eba8 0000 	sub.w	r0, r8, r0
 800d3c6:	42a8      	cmp	r0, r5
 800d3c8:	dd59      	ble.n	800d47e <__gethex+0x24e>
 800d3ca:	eba0 0805 	sub.w	r8, r0, r5
 800d3ce:	4641      	mov	r1, r8
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f7fe fd7f 	bl	800bed4 <__any_on>
 800d3d6:	4683      	mov	fp, r0
 800d3d8:	b1b8      	cbz	r0, 800d40a <__gethex+0x1da>
 800d3da:	f108 33ff 	add.w	r3, r8, #4294967295
 800d3de:	1159      	asrs	r1, r3, #5
 800d3e0:	f003 021f 	and.w	r2, r3, #31
 800d3e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3e8:	f04f 0b01 	mov.w	fp, #1
 800d3ec:	fa0b f202 	lsl.w	r2, fp, r2
 800d3f0:	420a      	tst	r2, r1
 800d3f2:	d00a      	beq.n	800d40a <__gethex+0x1da>
 800d3f4:	455b      	cmp	r3, fp
 800d3f6:	dd06      	ble.n	800d406 <__gethex+0x1d6>
 800d3f8:	f1a8 0102 	sub.w	r1, r8, #2
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f7fe fd69 	bl	800bed4 <__any_on>
 800d402:	2800      	cmp	r0, #0
 800d404:	d138      	bne.n	800d478 <__gethex+0x248>
 800d406:	f04f 0b02 	mov.w	fp, #2
 800d40a:	4641      	mov	r1, r8
 800d40c:	4620      	mov	r0, r4
 800d40e:	f7ff fea7 	bl	800d160 <rshift>
 800d412:	4446      	add	r6, r8
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	42b3      	cmp	r3, r6
 800d418:	da41      	bge.n	800d49e <__gethex+0x26e>
 800d41a:	4621      	mov	r1, r4
 800d41c:	4648      	mov	r0, r9
 800d41e:	f7fe f90d 	bl	800b63c <_Bfree>
 800d422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d424:	2300      	movs	r3, #0
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d42c:	e78a      	b.n	800d344 <__gethex+0x114>
 800d42e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d432:	2a2e      	cmp	r2, #46	; 0x2e
 800d434:	d014      	beq.n	800d460 <__gethex+0x230>
 800d436:	2b20      	cmp	r3, #32
 800d438:	d106      	bne.n	800d448 <__gethex+0x218>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	f843 bb04 	str.w	fp, [r3], #4
 800d440:	f04f 0b00 	mov.w	fp, #0
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	465b      	mov	r3, fp
 800d448:	7828      	ldrb	r0, [r5, #0]
 800d44a:	9303      	str	r3, [sp, #12]
 800d44c:	f7ff feda 	bl	800d204 <__hexdig_fun>
 800d450:	9b03      	ldr	r3, [sp, #12]
 800d452:	f000 000f 	and.w	r0, r0, #15
 800d456:	4098      	lsls	r0, r3
 800d458:	ea4b 0b00 	orr.w	fp, fp, r0
 800d45c:	3304      	adds	r3, #4
 800d45e:	e7a1      	b.n	800d3a4 <__gethex+0x174>
 800d460:	45a8      	cmp	r8, r5
 800d462:	d8e8      	bhi.n	800d436 <__gethex+0x206>
 800d464:	2201      	movs	r2, #1
 800d466:	4628      	mov	r0, r5
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	f7ff fe0b 	bl	800d084 <strncmp>
 800d46e:	4926      	ldr	r1, [pc, #152]	; (800d508 <__gethex+0x2d8>)
 800d470:	9b03      	ldr	r3, [sp, #12]
 800d472:	2800      	cmp	r0, #0
 800d474:	d1df      	bne.n	800d436 <__gethex+0x206>
 800d476:	e795      	b.n	800d3a4 <__gethex+0x174>
 800d478:	f04f 0b03 	mov.w	fp, #3
 800d47c:	e7c5      	b.n	800d40a <__gethex+0x1da>
 800d47e:	da0b      	bge.n	800d498 <__gethex+0x268>
 800d480:	eba5 0800 	sub.w	r8, r5, r0
 800d484:	4621      	mov	r1, r4
 800d486:	4642      	mov	r2, r8
 800d488:	4648      	mov	r0, r9
 800d48a:	f7fe faf1 	bl	800ba70 <__lshift>
 800d48e:	eba6 0608 	sub.w	r6, r6, r8
 800d492:	4604      	mov	r4, r0
 800d494:	f100 0a14 	add.w	sl, r0, #20
 800d498:	f04f 0b00 	mov.w	fp, #0
 800d49c:	e7ba      	b.n	800d414 <__gethex+0x1e4>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	42b3      	cmp	r3, r6
 800d4a2:	dd73      	ble.n	800d58c <__gethex+0x35c>
 800d4a4:	1b9e      	subs	r6, r3, r6
 800d4a6:	42b5      	cmp	r5, r6
 800d4a8:	dc34      	bgt.n	800d514 <__gethex+0x2e4>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d023      	beq.n	800d4f8 <__gethex+0x2c8>
 800d4b0:	2b03      	cmp	r3, #3
 800d4b2:	d025      	beq.n	800d500 <__gethex+0x2d0>
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d115      	bne.n	800d4e4 <__gethex+0x2b4>
 800d4b8:	42b5      	cmp	r5, r6
 800d4ba:	d113      	bne.n	800d4e4 <__gethex+0x2b4>
 800d4bc:	2d01      	cmp	r5, #1
 800d4be:	d10b      	bne.n	800d4d8 <__gethex+0x2a8>
 800d4c0:	9a02      	ldr	r2, [sp, #8]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6013      	str	r3, [r2, #0]
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	6123      	str	r3, [r4, #16]
 800d4ca:	f8ca 3000 	str.w	r3, [sl]
 800d4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d4d4:	601c      	str	r4, [r3, #0]
 800d4d6:	e735      	b.n	800d344 <__gethex+0x114>
 800d4d8:	1e69      	subs	r1, r5, #1
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7fe fcfa 	bl	800bed4 <__any_on>
 800d4e0:	2800      	cmp	r0, #0
 800d4e2:	d1ed      	bne.n	800d4c0 <__gethex+0x290>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4648      	mov	r0, r9
 800d4e8:	f7fe f8a8 	bl	800b63c <_Bfree>
 800d4ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d4f6:	e725      	b.n	800d344 <__gethex+0x114>
 800d4f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1f2      	bne.n	800d4e4 <__gethex+0x2b4>
 800d4fe:	e7df      	b.n	800d4c0 <__gethex+0x290>
 800d500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1dc      	bne.n	800d4c0 <__gethex+0x290>
 800d506:	e7ed      	b.n	800d4e4 <__gethex+0x2b4>
 800d508:	080110e4 	.word	0x080110e4
 800d50c:	08010f79 	.word	0x08010f79
 800d510:	0801128e 	.word	0x0801128e
 800d514:	f106 38ff 	add.w	r8, r6, #4294967295
 800d518:	f1bb 0f00 	cmp.w	fp, #0
 800d51c:	d133      	bne.n	800d586 <__gethex+0x356>
 800d51e:	f1b8 0f00 	cmp.w	r8, #0
 800d522:	d004      	beq.n	800d52e <__gethex+0x2fe>
 800d524:	4641      	mov	r1, r8
 800d526:	4620      	mov	r0, r4
 800d528:	f7fe fcd4 	bl	800bed4 <__any_on>
 800d52c:	4683      	mov	fp, r0
 800d52e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d532:	2301      	movs	r3, #1
 800d534:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d538:	f008 081f 	and.w	r8, r8, #31
 800d53c:	fa03 f308 	lsl.w	r3, r3, r8
 800d540:	4213      	tst	r3, r2
 800d542:	4631      	mov	r1, r6
 800d544:	4620      	mov	r0, r4
 800d546:	bf18      	it	ne
 800d548:	f04b 0b02 	orrne.w	fp, fp, #2
 800d54c:	1bad      	subs	r5, r5, r6
 800d54e:	f7ff fe07 	bl	800d160 <rshift>
 800d552:	687e      	ldr	r6, [r7, #4]
 800d554:	f04f 0802 	mov.w	r8, #2
 800d558:	f1bb 0f00 	cmp.w	fp, #0
 800d55c:	d04a      	beq.n	800d5f4 <__gethex+0x3c4>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b02      	cmp	r3, #2
 800d562:	d016      	beq.n	800d592 <__gethex+0x362>
 800d564:	2b03      	cmp	r3, #3
 800d566:	d018      	beq.n	800d59a <__gethex+0x36a>
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d109      	bne.n	800d580 <__gethex+0x350>
 800d56c:	f01b 0f02 	tst.w	fp, #2
 800d570:	d006      	beq.n	800d580 <__gethex+0x350>
 800d572:	f8da 3000 	ldr.w	r3, [sl]
 800d576:	ea4b 0b03 	orr.w	fp, fp, r3
 800d57a:	f01b 0f01 	tst.w	fp, #1
 800d57e:	d10f      	bne.n	800d5a0 <__gethex+0x370>
 800d580:	f048 0810 	orr.w	r8, r8, #16
 800d584:	e036      	b.n	800d5f4 <__gethex+0x3c4>
 800d586:	f04f 0b01 	mov.w	fp, #1
 800d58a:	e7d0      	b.n	800d52e <__gethex+0x2fe>
 800d58c:	f04f 0801 	mov.w	r8, #1
 800d590:	e7e2      	b.n	800d558 <__gethex+0x328>
 800d592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d594:	f1c3 0301 	rsb	r3, r3, #1
 800d598:	930f      	str	r3, [sp, #60]	; 0x3c
 800d59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d0ef      	beq.n	800d580 <__gethex+0x350>
 800d5a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5a4:	f104 0214 	add.w	r2, r4, #20
 800d5a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	4694      	mov	ip, r2
 800d5b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800d5ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d5be:	d01e      	beq.n	800d5fe <__gethex+0x3ce>
 800d5c0:	3101      	adds	r1, #1
 800d5c2:	f8cc 1000 	str.w	r1, [ip]
 800d5c6:	f1b8 0f02 	cmp.w	r8, #2
 800d5ca:	f104 0214 	add.w	r2, r4, #20
 800d5ce:	d13d      	bne.n	800d64c <__gethex+0x41c>
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	42ab      	cmp	r3, r5
 800d5d6:	d10b      	bne.n	800d5f0 <__gethex+0x3c0>
 800d5d8:	1169      	asrs	r1, r5, #5
 800d5da:	2301      	movs	r3, #1
 800d5dc:	f005 051f 	and.w	r5, r5, #31
 800d5e0:	fa03 f505 	lsl.w	r5, r3, r5
 800d5e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5e8:	421d      	tst	r5, r3
 800d5ea:	bf18      	it	ne
 800d5ec:	f04f 0801 	movne.w	r8, #1
 800d5f0:	f048 0820 	orr.w	r8, r8, #32
 800d5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5f6:	601c      	str	r4, [r3, #0]
 800d5f8:	9b02      	ldr	r3, [sp, #8]
 800d5fa:	601e      	str	r6, [r3, #0]
 800d5fc:	e6a2      	b.n	800d344 <__gethex+0x114>
 800d5fe:	4290      	cmp	r0, r2
 800d600:	f842 3c04 	str.w	r3, [r2, #-4]
 800d604:	d8d6      	bhi.n	800d5b4 <__gethex+0x384>
 800d606:	68a2      	ldr	r2, [r4, #8]
 800d608:	4593      	cmp	fp, r2
 800d60a:	db17      	blt.n	800d63c <__gethex+0x40c>
 800d60c:	6861      	ldr	r1, [r4, #4]
 800d60e:	4648      	mov	r0, r9
 800d610:	3101      	adds	r1, #1
 800d612:	f7fd ffd3 	bl	800b5bc <_Balloc>
 800d616:	4682      	mov	sl, r0
 800d618:	b918      	cbnz	r0, 800d622 <__gethex+0x3f2>
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <__gethex+0x458>)
 800d61c:	4602      	mov	r2, r0
 800d61e:	2184      	movs	r1, #132	; 0x84
 800d620:	e6b3      	b.n	800d38a <__gethex+0x15a>
 800d622:	6922      	ldr	r2, [r4, #16]
 800d624:	3202      	adds	r2, #2
 800d626:	f104 010c 	add.w	r1, r4, #12
 800d62a:	0092      	lsls	r2, r2, #2
 800d62c:	300c      	adds	r0, #12
 800d62e:	f7ff fd4b 	bl	800d0c8 <memcpy>
 800d632:	4621      	mov	r1, r4
 800d634:	4648      	mov	r0, r9
 800d636:	f7fe f801 	bl	800b63c <_Bfree>
 800d63a:	4654      	mov	r4, sl
 800d63c:	6922      	ldr	r2, [r4, #16]
 800d63e:	1c51      	adds	r1, r2, #1
 800d640:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d644:	6121      	str	r1, [r4, #16]
 800d646:	2101      	movs	r1, #1
 800d648:	6151      	str	r1, [r2, #20]
 800d64a:	e7bc      	b.n	800d5c6 <__gethex+0x396>
 800d64c:	6921      	ldr	r1, [r4, #16]
 800d64e:	4559      	cmp	r1, fp
 800d650:	dd0b      	ble.n	800d66a <__gethex+0x43a>
 800d652:	2101      	movs	r1, #1
 800d654:	4620      	mov	r0, r4
 800d656:	f7ff fd83 	bl	800d160 <rshift>
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	3601      	adds	r6, #1
 800d65e:	42b3      	cmp	r3, r6
 800d660:	f6ff aedb 	blt.w	800d41a <__gethex+0x1ea>
 800d664:	f04f 0801 	mov.w	r8, #1
 800d668:	e7c2      	b.n	800d5f0 <__gethex+0x3c0>
 800d66a:	f015 051f 	ands.w	r5, r5, #31
 800d66e:	d0f9      	beq.n	800d664 <__gethex+0x434>
 800d670:	9b01      	ldr	r3, [sp, #4]
 800d672:	441a      	add	r2, r3
 800d674:	f1c5 0520 	rsb	r5, r5, #32
 800d678:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d67c:	f7fe f890 	bl	800b7a0 <__hi0bits>
 800d680:	42a8      	cmp	r0, r5
 800d682:	dbe6      	blt.n	800d652 <__gethex+0x422>
 800d684:	e7ee      	b.n	800d664 <__gethex+0x434>
 800d686:	bf00      	nop
 800d688:	08010f79 	.word	0x08010f79

0800d68c <L_shift>:
 800d68c:	f1c2 0208 	rsb	r2, r2, #8
 800d690:	0092      	lsls	r2, r2, #2
 800d692:	b570      	push	{r4, r5, r6, lr}
 800d694:	f1c2 0620 	rsb	r6, r2, #32
 800d698:	6843      	ldr	r3, [r0, #4]
 800d69a:	6804      	ldr	r4, [r0, #0]
 800d69c:	fa03 f506 	lsl.w	r5, r3, r6
 800d6a0:	432c      	orrs	r4, r5
 800d6a2:	40d3      	lsrs	r3, r2
 800d6a4:	6004      	str	r4, [r0, #0]
 800d6a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6aa:	4288      	cmp	r0, r1
 800d6ac:	d3f4      	bcc.n	800d698 <L_shift+0xc>
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}

0800d6b0 <__match>:
 800d6b0:	b530      	push	{r4, r5, lr}
 800d6b2:	6803      	ldr	r3, [r0, #0]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6ba:	b914      	cbnz	r4, 800d6c2 <__match+0x12>
 800d6bc:	6003      	str	r3, [r0, #0]
 800d6be:	2001      	movs	r0, #1
 800d6c0:	bd30      	pop	{r4, r5, pc}
 800d6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d6ca:	2d19      	cmp	r5, #25
 800d6cc:	bf98      	it	ls
 800d6ce:	3220      	addls	r2, #32
 800d6d0:	42a2      	cmp	r2, r4
 800d6d2:	d0f0      	beq.n	800d6b6 <__match+0x6>
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	e7f3      	b.n	800d6c0 <__match+0x10>

0800d6d8 <__hexnan>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	680b      	ldr	r3, [r1, #0]
 800d6de:	6801      	ldr	r1, [r0, #0]
 800d6e0:	115e      	asrs	r6, r3, #5
 800d6e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6e6:	f013 031f 	ands.w	r3, r3, #31
 800d6ea:	b087      	sub	sp, #28
 800d6ec:	bf18      	it	ne
 800d6ee:	3604      	addne	r6, #4
 800d6f0:	2500      	movs	r5, #0
 800d6f2:	1f37      	subs	r7, r6, #4
 800d6f4:	4682      	mov	sl, r0
 800d6f6:	4690      	mov	r8, r2
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6fe:	46b9      	mov	r9, r7
 800d700:	463c      	mov	r4, r7
 800d702:	9502      	str	r5, [sp, #8]
 800d704:	46ab      	mov	fp, r5
 800d706:	784a      	ldrb	r2, [r1, #1]
 800d708:	1c4b      	adds	r3, r1, #1
 800d70a:	9303      	str	r3, [sp, #12]
 800d70c:	b342      	cbz	r2, 800d760 <__hexnan+0x88>
 800d70e:	4610      	mov	r0, r2
 800d710:	9105      	str	r1, [sp, #20]
 800d712:	9204      	str	r2, [sp, #16]
 800d714:	f7ff fd76 	bl	800d204 <__hexdig_fun>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d14f      	bne.n	800d7bc <__hexnan+0xe4>
 800d71c:	9a04      	ldr	r2, [sp, #16]
 800d71e:	9905      	ldr	r1, [sp, #20]
 800d720:	2a20      	cmp	r2, #32
 800d722:	d818      	bhi.n	800d756 <__hexnan+0x7e>
 800d724:	9b02      	ldr	r3, [sp, #8]
 800d726:	459b      	cmp	fp, r3
 800d728:	dd13      	ble.n	800d752 <__hexnan+0x7a>
 800d72a:	454c      	cmp	r4, r9
 800d72c:	d206      	bcs.n	800d73c <__hexnan+0x64>
 800d72e:	2d07      	cmp	r5, #7
 800d730:	dc04      	bgt.n	800d73c <__hexnan+0x64>
 800d732:	462a      	mov	r2, r5
 800d734:	4649      	mov	r1, r9
 800d736:	4620      	mov	r0, r4
 800d738:	f7ff ffa8 	bl	800d68c <L_shift>
 800d73c:	4544      	cmp	r4, r8
 800d73e:	d950      	bls.n	800d7e2 <__hexnan+0x10a>
 800d740:	2300      	movs	r3, #0
 800d742:	f1a4 0904 	sub.w	r9, r4, #4
 800d746:	f844 3c04 	str.w	r3, [r4, #-4]
 800d74a:	f8cd b008 	str.w	fp, [sp, #8]
 800d74e:	464c      	mov	r4, r9
 800d750:	461d      	mov	r5, r3
 800d752:	9903      	ldr	r1, [sp, #12]
 800d754:	e7d7      	b.n	800d706 <__hexnan+0x2e>
 800d756:	2a29      	cmp	r2, #41	; 0x29
 800d758:	d155      	bne.n	800d806 <__hexnan+0x12e>
 800d75a:	3102      	adds	r1, #2
 800d75c:	f8ca 1000 	str.w	r1, [sl]
 800d760:	f1bb 0f00 	cmp.w	fp, #0
 800d764:	d04f      	beq.n	800d806 <__hexnan+0x12e>
 800d766:	454c      	cmp	r4, r9
 800d768:	d206      	bcs.n	800d778 <__hexnan+0xa0>
 800d76a:	2d07      	cmp	r5, #7
 800d76c:	dc04      	bgt.n	800d778 <__hexnan+0xa0>
 800d76e:	462a      	mov	r2, r5
 800d770:	4649      	mov	r1, r9
 800d772:	4620      	mov	r0, r4
 800d774:	f7ff ff8a 	bl	800d68c <L_shift>
 800d778:	4544      	cmp	r4, r8
 800d77a:	d934      	bls.n	800d7e6 <__hexnan+0x10e>
 800d77c:	f1a8 0204 	sub.w	r2, r8, #4
 800d780:	4623      	mov	r3, r4
 800d782:	f853 1b04 	ldr.w	r1, [r3], #4
 800d786:	f842 1f04 	str.w	r1, [r2, #4]!
 800d78a:	429f      	cmp	r7, r3
 800d78c:	d2f9      	bcs.n	800d782 <__hexnan+0xaa>
 800d78e:	1b3b      	subs	r3, r7, r4
 800d790:	f023 0303 	bic.w	r3, r3, #3
 800d794:	3304      	adds	r3, #4
 800d796:	3e03      	subs	r6, #3
 800d798:	3401      	adds	r4, #1
 800d79a:	42a6      	cmp	r6, r4
 800d79c:	bf38      	it	cc
 800d79e:	2304      	movcc	r3, #4
 800d7a0:	4443      	add	r3, r8
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f843 2b04 	str.w	r2, [r3], #4
 800d7a8:	429f      	cmp	r7, r3
 800d7aa:	d2fb      	bcs.n	800d7a4 <__hexnan+0xcc>
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	b91b      	cbnz	r3, 800d7b8 <__hexnan+0xe0>
 800d7b0:	4547      	cmp	r7, r8
 800d7b2:	d126      	bne.n	800d802 <__hexnan+0x12a>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	2005      	movs	r0, #5
 800d7ba:	e025      	b.n	800d808 <__hexnan+0x130>
 800d7bc:	3501      	adds	r5, #1
 800d7be:	2d08      	cmp	r5, #8
 800d7c0:	f10b 0b01 	add.w	fp, fp, #1
 800d7c4:	dd06      	ble.n	800d7d4 <__hexnan+0xfc>
 800d7c6:	4544      	cmp	r4, r8
 800d7c8:	d9c3      	bls.n	800d752 <__hexnan+0x7a>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7d0:	2501      	movs	r5, #1
 800d7d2:	3c04      	subs	r4, #4
 800d7d4:	6822      	ldr	r2, [r4, #0]
 800d7d6:	f000 000f 	and.w	r0, r0, #15
 800d7da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7de:	6020      	str	r0, [r4, #0]
 800d7e0:	e7b7      	b.n	800d752 <__hexnan+0x7a>
 800d7e2:	2508      	movs	r5, #8
 800d7e4:	e7b5      	b.n	800d752 <__hexnan+0x7a>
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0df      	beq.n	800d7ac <__hexnan+0xd4>
 800d7ec:	f1c3 0320 	rsb	r3, r3, #32
 800d7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f4:	40da      	lsrs	r2, r3
 800d7f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800d800:	e7d4      	b.n	800d7ac <__hexnan+0xd4>
 800d802:	3f04      	subs	r7, #4
 800d804:	e7d2      	b.n	800d7ac <__hexnan+0xd4>
 800d806:	2004      	movs	r0, #4
 800d808:	b007      	add	sp, #28
 800d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d80e <__ascii_mbtowc>:
 800d80e:	b082      	sub	sp, #8
 800d810:	b901      	cbnz	r1, 800d814 <__ascii_mbtowc+0x6>
 800d812:	a901      	add	r1, sp, #4
 800d814:	b142      	cbz	r2, 800d828 <__ascii_mbtowc+0x1a>
 800d816:	b14b      	cbz	r3, 800d82c <__ascii_mbtowc+0x1e>
 800d818:	7813      	ldrb	r3, [r2, #0]
 800d81a:	600b      	str	r3, [r1, #0]
 800d81c:	7812      	ldrb	r2, [r2, #0]
 800d81e:	1e10      	subs	r0, r2, #0
 800d820:	bf18      	it	ne
 800d822:	2001      	movne	r0, #1
 800d824:	b002      	add	sp, #8
 800d826:	4770      	bx	lr
 800d828:	4610      	mov	r0, r2
 800d82a:	e7fb      	b.n	800d824 <__ascii_mbtowc+0x16>
 800d82c:	f06f 0001 	mvn.w	r0, #1
 800d830:	e7f8      	b.n	800d824 <__ascii_mbtowc+0x16>

0800d832 <_realloc_r>:
 800d832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d836:	4680      	mov	r8, r0
 800d838:	4614      	mov	r4, r2
 800d83a:	460e      	mov	r6, r1
 800d83c:	b921      	cbnz	r1, 800d848 <_realloc_r+0x16>
 800d83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d842:	4611      	mov	r1, r2
 800d844:	f7fd be2e 	b.w	800b4a4 <_malloc_r>
 800d848:	b92a      	cbnz	r2, 800d856 <_realloc_r+0x24>
 800d84a:	f7fd fdb7 	bl	800b3bc <_free_r>
 800d84e:	4625      	mov	r5, r4
 800d850:	4628      	mov	r0, r5
 800d852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d856:	f000 f842 	bl	800d8de <_malloc_usable_size_r>
 800d85a:	4284      	cmp	r4, r0
 800d85c:	4607      	mov	r7, r0
 800d85e:	d802      	bhi.n	800d866 <_realloc_r+0x34>
 800d860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d864:	d812      	bhi.n	800d88c <_realloc_r+0x5a>
 800d866:	4621      	mov	r1, r4
 800d868:	4640      	mov	r0, r8
 800d86a:	f7fd fe1b 	bl	800b4a4 <_malloc_r>
 800d86e:	4605      	mov	r5, r0
 800d870:	2800      	cmp	r0, #0
 800d872:	d0ed      	beq.n	800d850 <_realloc_r+0x1e>
 800d874:	42bc      	cmp	r4, r7
 800d876:	4622      	mov	r2, r4
 800d878:	4631      	mov	r1, r6
 800d87a:	bf28      	it	cs
 800d87c:	463a      	movcs	r2, r7
 800d87e:	f7ff fc23 	bl	800d0c8 <memcpy>
 800d882:	4631      	mov	r1, r6
 800d884:	4640      	mov	r0, r8
 800d886:	f7fd fd99 	bl	800b3bc <_free_r>
 800d88a:	e7e1      	b.n	800d850 <_realloc_r+0x1e>
 800d88c:	4635      	mov	r5, r6
 800d88e:	e7df      	b.n	800d850 <_realloc_r+0x1e>

0800d890 <__ascii_wctomb>:
 800d890:	b149      	cbz	r1, 800d8a6 <__ascii_wctomb+0x16>
 800d892:	2aff      	cmp	r2, #255	; 0xff
 800d894:	bf85      	ittet	hi
 800d896:	238a      	movhi	r3, #138	; 0x8a
 800d898:	6003      	strhi	r3, [r0, #0]
 800d89a:	700a      	strbls	r2, [r1, #0]
 800d89c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d8a0:	bf98      	it	ls
 800d8a2:	2001      	movls	r0, #1
 800d8a4:	4770      	bx	lr
 800d8a6:	4608      	mov	r0, r1
 800d8a8:	4770      	bx	lr
	...

0800d8ac <fiprintf>:
 800d8ac:	b40e      	push	{r1, r2, r3}
 800d8ae:	b503      	push	{r0, r1, lr}
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	ab03      	add	r3, sp, #12
 800d8b4:	4805      	ldr	r0, [pc, #20]	; (800d8cc <fiprintf+0x20>)
 800d8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8ba:	6800      	ldr	r0, [r0, #0]
 800d8bc:	9301      	str	r3, [sp, #4]
 800d8be:	f000 f83f 	bl	800d940 <_vfiprintf_r>
 800d8c2:	b002      	add	sp, #8
 800d8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8c8:	b003      	add	sp, #12
 800d8ca:	4770      	bx	lr
 800d8cc:	2000006c 	.word	0x2000006c

0800d8d0 <abort>:
 800d8d0:	b508      	push	{r3, lr}
 800d8d2:	2006      	movs	r0, #6
 800d8d4:	f000 fa0c 	bl	800dcf0 <raise>
 800d8d8:	2001      	movs	r0, #1
 800d8da:	f7f5 fc4d 	bl	8003178 <_exit>

0800d8de <_malloc_usable_size_r>:
 800d8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8e2:	1f18      	subs	r0, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bfbc      	itt	lt
 800d8e8:	580b      	ldrlt	r3, [r1, r0]
 800d8ea:	18c0      	addlt	r0, r0, r3
 800d8ec:	4770      	bx	lr

0800d8ee <__sfputc_r>:
 800d8ee:	6893      	ldr	r3, [r2, #8]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	b410      	push	{r4}
 800d8f6:	6093      	str	r3, [r2, #8]
 800d8f8:	da08      	bge.n	800d90c <__sfputc_r+0x1e>
 800d8fa:	6994      	ldr	r4, [r2, #24]
 800d8fc:	42a3      	cmp	r3, r4
 800d8fe:	db01      	blt.n	800d904 <__sfputc_r+0x16>
 800d900:	290a      	cmp	r1, #10
 800d902:	d103      	bne.n	800d90c <__sfputc_r+0x1e>
 800d904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d908:	f000 b934 	b.w	800db74 <__swbuf_r>
 800d90c:	6813      	ldr	r3, [r2, #0]
 800d90e:	1c58      	adds	r0, r3, #1
 800d910:	6010      	str	r0, [r2, #0]
 800d912:	7019      	strb	r1, [r3, #0]
 800d914:	4608      	mov	r0, r1
 800d916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <__sfputs_r>:
 800d91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91e:	4606      	mov	r6, r0
 800d920:	460f      	mov	r7, r1
 800d922:	4614      	mov	r4, r2
 800d924:	18d5      	adds	r5, r2, r3
 800d926:	42ac      	cmp	r4, r5
 800d928:	d101      	bne.n	800d92e <__sfputs_r+0x12>
 800d92a:	2000      	movs	r0, #0
 800d92c:	e007      	b.n	800d93e <__sfputs_r+0x22>
 800d92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d932:	463a      	mov	r2, r7
 800d934:	4630      	mov	r0, r6
 800d936:	f7ff ffda 	bl	800d8ee <__sfputc_r>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	d1f3      	bne.n	800d926 <__sfputs_r+0xa>
 800d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d940 <_vfiprintf_r>:
 800d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d944:	460d      	mov	r5, r1
 800d946:	b09d      	sub	sp, #116	; 0x74
 800d948:	4614      	mov	r4, r2
 800d94a:	4698      	mov	r8, r3
 800d94c:	4606      	mov	r6, r0
 800d94e:	b118      	cbz	r0, 800d958 <_vfiprintf_r+0x18>
 800d950:	6a03      	ldr	r3, [r0, #32]
 800d952:	b90b      	cbnz	r3, 800d958 <_vfiprintf_r+0x18>
 800d954:	f7fc fd96 	bl	800a484 <__sinit>
 800d958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d95a:	07d9      	lsls	r1, r3, #31
 800d95c:	d405      	bmi.n	800d96a <_vfiprintf_r+0x2a>
 800d95e:	89ab      	ldrh	r3, [r5, #12]
 800d960:	059a      	lsls	r2, r3, #22
 800d962:	d402      	bmi.n	800d96a <_vfiprintf_r+0x2a>
 800d964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d966:	f7fc fea4 	bl	800a6b2 <__retarget_lock_acquire_recursive>
 800d96a:	89ab      	ldrh	r3, [r5, #12]
 800d96c:	071b      	lsls	r3, r3, #28
 800d96e:	d501      	bpl.n	800d974 <_vfiprintf_r+0x34>
 800d970:	692b      	ldr	r3, [r5, #16]
 800d972:	b99b      	cbnz	r3, 800d99c <_vfiprintf_r+0x5c>
 800d974:	4629      	mov	r1, r5
 800d976:	4630      	mov	r0, r6
 800d978:	f000 f93a 	bl	800dbf0 <__swsetup_r>
 800d97c:	b170      	cbz	r0, 800d99c <_vfiprintf_r+0x5c>
 800d97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d980:	07dc      	lsls	r4, r3, #31
 800d982:	d504      	bpl.n	800d98e <_vfiprintf_r+0x4e>
 800d984:	f04f 30ff 	mov.w	r0, #4294967295
 800d988:	b01d      	add	sp, #116	; 0x74
 800d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98e:	89ab      	ldrh	r3, [r5, #12]
 800d990:	0598      	lsls	r0, r3, #22
 800d992:	d4f7      	bmi.n	800d984 <_vfiprintf_r+0x44>
 800d994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d996:	f7fc fe8d 	bl	800a6b4 <__retarget_lock_release_recursive>
 800d99a:	e7f3      	b.n	800d984 <_vfiprintf_r+0x44>
 800d99c:	2300      	movs	r3, #0
 800d99e:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a0:	2320      	movs	r3, #32
 800d9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9aa:	2330      	movs	r3, #48	; 0x30
 800d9ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800db60 <_vfiprintf_r+0x220>
 800d9b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9b4:	f04f 0901 	mov.w	r9, #1
 800d9b8:	4623      	mov	r3, r4
 800d9ba:	469a      	mov	sl, r3
 800d9bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9c0:	b10a      	cbz	r2, 800d9c6 <_vfiprintf_r+0x86>
 800d9c2:	2a25      	cmp	r2, #37	; 0x25
 800d9c4:	d1f9      	bne.n	800d9ba <_vfiprintf_r+0x7a>
 800d9c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ca:	d00b      	beq.n	800d9e4 <_vfiprintf_r+0xa4>
 800d9cc:	465b      	mov	r3, fp
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7ff ffa2 	bl	800d91c <__sfputs_r>
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f000 80a9 	beq.w	800db30 <_vfiprintf_r+0x1f0>
 800d9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9e0:	445a      	add	r2, fp
 800d9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 80a1 	beq.w	800db30 <_vfiprintf_r+0x1f0>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9f8:	f10a 0a01 	add.w	sl, sl, #1
 800d9fc:	9304      	str	r3, [sp, #16]
 800d9fe:	9307      	str	r3, [sp, #28]
 800da00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da04:	931a      	str	r3, [sp, #104]	; 0x68
 800da06:	4654      	mov	r4, sl
 800da08:	2205      	movs	r2, #5
 800da0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da0e:	4854      	ldr	r0, [pc, #336]	; (800db60 <_vfiprintf_r+0x220>)
 800da10:	f7f2 fbde 	bl	80001d0 <memchr>
 800da14:	9a04      	ldr	r2, [sp, #16]
 800da16:	b9d8      	cbnz	r0, 800da50 <_vfiprintf_r+0x110>
 800da18:	06d1      	lsls	r1, r2, #27
 800da1a:	bf44      	itt	mi
 800da1c:	2320      	movmi	r3, #32
 800da1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da22:	0713      	lsls	r3, r2, #28
 800da24:	bf44      	itt	mi
 800da26:	232b      	movmi	r3, #43	; 0x2b
 800da28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da2c:	f89a 3000 	ldrb.w	r3, [sl]
 800da30:	2b2a      	cmp	r3, #42	; 0x2a
 800da32:	d015      	beq.n	800da60 <_vfiprintf_r+0x120>
 800da34:	9a07      	ldr	r2, [sp, #28]
 800da36:	4654      	mov	r4, sl
 800da38:	2000      	movs	r0, #0
 800da3a:	f04f 0c0a 	mov.w	ip, #10
 800da3e:	4621      	mov	r1, r4
 800da40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da44:	3b30      	subs	r3, #48	; 0x30
 800da46:	2b09      	cmp	r3, #9
 800da48:	d94d      	bls.n	800dae6 <_vfiprintf_r+0x1a6>
 800da4a:	b1b0      	cbz	r0, 800da7a <_vfiprintf_r+0x13a>
 800da4c:	9207      	str	r2, [sp, #28]
 800da4e:	e014      	b.n	800da7a <_vfiprintf_r+0x13a>
 800da50:	eba0 0308 	sub.w	r3, r0, r8
 800da54:	fa09 f303 	lsl.w	r3, r9, r3
 800da58:	4313      	orrs	r3, r2
 800da5a:	9304      	str	r3, [sp, #16]
 800da5c:	46a2      	mov	sl, r4
 800da5e:	e7d2      	b.n	800da06 <_vfiprintf_r+0xc6>
 800da60:	9b03      	ldr	r3, [sp, #12]
 800da62:	1d19      	adds	r1, r3, #4
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	9103      	str	r1, [sp, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bfbb      	ittet	lt
 800da6c:	425b      	neglt	r3, r3
 800da6e:	f042 0202 	orrlt.w	r2, r2, #2
 800da72:	9307      	strge	r3, [sp, #28]
 800da74:	9307      	strlt	r3, [sp, #28]
 800da76:	bfb8      	it	lt
 800da78:	9204      	strlt	r2, [sp, #16]
 800da7a:	7823      	ldrb	r3, [r4, #0]
 800da7c:	2b2e      	cmp	r3, #46	; 0x2e
 800da7e:	d10c      	bne.n	800da9a <_vfiprintf_r+0x15a>
 800da80:	7863      	ldrb	r3, [r4, #1]
 800da82:	2b2a      	cmp	r3, #42	; 0x2a
 800da84:	d134      	bne.n	800daf0 <_vfiprintf_r+0x1b0>
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	1d1a      	adds	r2, r3, #4
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	9203      	str	r2, [sp, #12]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	bfb8      	it	lt
 800da92:	f04f 33ff 	movlt.w	r3, #4294967295
 800da96:	3402      	adds	r4, #2
 800da98:	9305      	str	r3, [sp, #20]
 800da9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db70 <_vfiprintf_r+0x230>
 800da9e:	7821      	ldrb	r1, [r4, #0]
 800daa0:	2203      	movs	r2, #3
 800daa2:	4650      	mov	r0, sl
 800daa4:	f7f2 fb94 	bl	80001d0 <memchr>
 800daa8:	b138      	cbz	r0, 800daba <_vfiprintf_r+0x17a>
 800daaa:	9b04      	ldr	r3, [sp, #16]
 800daac:	eba0 000a 	sub.w	r0, r0, sl
 800dab0:	2240      	movs	r2, #64	; 0x40
 800dab2:	4082      	lsls	r2, r0
 800dab4:	4313      	orrs	r3, r2
 800dab6:	3401      	adds	r4, #1
 800dab8:	9304      	str	r3, [sp, #16]
 800daba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dabe:	4829      	ldr	r0, [pc, #164]	; (800db64 <_vfiprintf_r+0x224>)
 800dac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dac4:	2206      	movs	r2, #6
 800dac6:	f7f2 fb83 	bl	80001d0 <memchr>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d03f      	beq.n	800db4e <_vfiprintf_r+0x20e>
 800dace:	4b26      	ldr	r3, [pc, #152]	; (800db68 <_vfiprintf_r+0x228>)
 800dad0:	bb1b      	cbnz	r3, 800db1a <_vfiprintf_r+0x1da>
 800dad2:	9b03      	ldr	r3, [sp, #12]
 800dad4:	3307      	adds	r3, #7
 800dad6:	f023 0307 	bic.w	r3, r3, #7
 800dada:	3308      	adds	r3, #8
 800dadc:	9303      	str	r3, [sp, #12]
 800dade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae0:	443b      	add	r3, r7
 800dae2:	9309      	str	r3, [sp, #36]	; 0x24
 800dae4:	e768      	b.n	800d9b8 <_vfiprintf_r+0x78>
 800dae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800daea:	460c      	mov	r4, r1
 800daec:	2001      	movs	r0, #1
 800daee:	e7a6      	b.n	800da3e <_vfiprintf_r+0xfe>
 800daf0:	2300      	movs	r3, #0
 800daf2:	3401      	adds	r4, #1
 800daf4:	9305      	str	r3, [sp, #20]
 800daf6:	4619      	mov	r1, r3
 800daf8:	f04f 0c0a 	mov.w	ip, #10
 800dafc:	4620      	mov	r0, r4
 800dafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db02:	3a30      	subs	r2, #48	; 0x30
 800db04:	2a09      	cmp	r2, #9
 800db06:	d903      	bls.n	800db10 <_vfiprintf_r+0x1d0>
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0c6      	beq.n	800da9a <_vfiprintf_r+0x15a>
 800db0c:	9105      	str	r1, [sp, #20]
 800db0e:	e7c4      	b.n	800da9a <_vfiprintf_r+0x15a>
 800db10:	fb0c 2101 	mla	r1, ip, r1, r2
 800db14:	4604      	mov	r4, r0
 800db16:	2301      	movs	r3, #1
 800db18:	e7f0      	b.n	800dafc <_vfiprintf_r+0x1bc>
 800db1a:	ab03      	add	r3, sp, #12
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	462a      	mov	r2, r5
 800db20:	4b12      	ldr	r3, [pc, #72]	; (800db6c <_vfiprintf_r+0x22c>)
 800db22:	a904      	add	r1, sp, #16
 800db24:	4630      	mov	r0, r6
 800db26:	f7fb fe4b 	bl	80097c0 <_printf_float>
 800db2a:	4607      	mov	r7, r0
 800db2c:	1c78      	adds	r0, r7, #1
 800db2e:	d1d6      	bne.n	800dade <_vfiprintf_r+0x19e>
 800db30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db32:	07d9      	lsls	r1, r3, #31
 800db34:	d405      	bmi.n	800db42 <_vfiprintf_r+0x202>
 800db36:	89ab      	ldrh	r3, [r5, #12]
 800db38:	059a      	lsls	r2, r3, #22
 800db3a:	d402      	bmi.n	800db42 <_vfiprintf_r+0x202>
 800db3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db3e:	f7fc fdb9 	bl	800a6b4 <__retarget_lock_release_recursive>
 800db42:	89ab      	ldrh	r3, [r5, #12]
 800db44:	065b      	lsls	r3, r3, #25
 800db46:	f53f af1d 	bmi.w	800d984 <_vfiprintf_r+0x44>
 800db4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db4c:	e71c      	b.n	800d988 <_vfiprintf_r+0x48>
 800db4e:	ab03      	add	r3, sp, #12
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	462a      	mov	r2, r5
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <_vfiprintf_r+0x22c>)
 800db56:	a904      	add	r1, sp, #16
 800db58:	4630      	mov	r0, r6
 800db5a:	f7fc f8d5 	bl	8009d08 <_printf_i>
 800db5e:	e7e4      	b.n	800db2a <_vfiprintf_r+0x1ea>
 800db60:	08011239 	.word	0x08011239
 800db64:	08011243 	.word	0x08011243
 800db68:	080097c1 	.word	0x080097c1
 800db6c:	0800d91d 	.word	0x0800d91d
 800db70:	0801123f 	.word	0x0801123f

0800db74 <__swbuf_r>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	460e      	mov	r6, r1
 800db78:	4614      	mov	r4, r2
 800db7a:	4605      	mov	r5, r0
 800db7c:	b118      	cbz	r0, 800db86 <__swbuf_r+0x12>
 800db7e:	6a03      	ldr	r3, [r0, #32]
 800db80:	b90b      	cbnz	r3, 800db86 <__swbuf_r+0x12>
 800db82:	f7fc fc7f 	bl	800a484 <__sinit>
 800db86:	69a3      	ldr	r3, [r4, #24]
 800db88:	60a3      	str	r3, [r4, #8]
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	071a      	lsls	r2, r3, #28
 800db8e:	d525      	bpl.n	800dbdc <__swbuf_r+0x68>
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	b31b      	cbz	r3, 800dbdc <__swbuf_r+0x68>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	6922      	ldr	r2, [r4, #16]
 800db98:	1a98      	subs	r0, r3, r2
 800db9a:	6963      	ldr	r3, [r4, #20]
 800db9c:	b2f6      	uxtb	r6, r6
 800db9e:	4283      	cmp	r3, r0
 800dba0:	4637      	mov	r7, r6
 800dba2:	dc04      	bgt.n	800dbae <__swbuf_r+0x3a>
 800dba4:	4621      	mov	r1, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7ff fa2a 	bl	800d000 <_fflush_r>
 800dbac:	b9e0      	cbnz	r0, 800dbe8 <__swbuf_r+0x74>
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	60a3      	str	r3, [r4, #8]
 800dbb4:	6823      	ldr	r3, [r4, #0]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	6022      	str	r2, [r4, #0]
 800dbba:	701e      	strb	r6, [r3, #0]
 800dbbc:	6962      	ldr	r2, [r4, #20]
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d004      	beq.n	800dbce <__swbuf_r+0x5a>
 800dbc4:	89a3      	ldrh	r3, [r4, #12]
 800dbc6:	07db      	lsls	r3, r3, #31
 800dbc8:	d506      	bpl.n	800dbd8 <__swbuf_r+0x64>
 800dbca:	2e0a      	cmp	r6, #10
 800dbcc:	d104      	bne.n	800dbd8 <__swbuf_r+0x64>
 800dbce:	4621      	mov	r1, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f7ff fa15 	bl	800d000 <_fflush_r>
 800dbd6:	b938      	cbnz	r0, 800dbe8 <__swbuf_r+0x74>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbdc:	4621      	mov	r1, r4
 800dbde:	4628      	mov	r0, r5
 800dbe0:	f000 f806 	bl	800dbf0 <__swsetup_r>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d0d5      	beq.n	800db94 <__swbuf_r+0x20>
 800dbe8:	f04f 37ff 	mov.w	r7, #4294967295
 800dbec:	e7f4      	b.n	800dbd8 <__swbuf_r+0x64>
	...

0800dbf0 <__swsetup_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4b2a      	ldr	r3, [pc, #168]	; (800dc9c <__swsetup_r+0xac>)
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	6818      	ldr	r0, [r3, #0]
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	b118      	cbz	r0, 800dc04 <__swsetup_r+0x14>
 800dbfc:	6a03      	ldr	r3, [r0, #32]
 800dbfe:	b90b      	cbnz	r3, 800dc04 <__swsetup_r+0x14>
 800dc00:	f7fc fc40 	bl	800a484 <__sinit>
 800dc04:	89a3      	ldrh	r3, [r4, #12]
 800dc06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc0a:	0718      	lsls	r0, r3, #28
 800dc0c:	d422      	bmi.n	800dc54 <__swsetup_r+0x64>
 800dc0e:	06d9      	lsls	r1, r3, #27
 800dc10:	d407      	bmi.n	800dc22 <__swsetup_r+0x32>
 800dc12:	2309      	movs	r3, #9
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc1a:	81a3      	strh	r3, [r4, #12]
 800dc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc20:	e034      	b.n	800dc8c <__swsetup_r+0x9c>
 800dc22:	0758      	lsls	r0, r3, #29
 800dc24:	d512      	bpl.n	800dc4c <__swsetup_r+0x5c>
 800dc26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc28:	b141      	cbz	r1, 800dc3c <__swsetup_r+0x4c>
 800dc2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2e:	4299      	cmp	r1, r3
 800dc30:	d002      	beq.n	800dc38 <__swsetup_r+0x48>
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7fd fbc2 	bl	800b3bc <_free_r>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	6363      	str	r3, [r4, #52]	; 0x34
 800dc3c:	89a3      	ldrh	r3, [r4, #12]
 800dc3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc42:	81a3      	strh	r3, [r4, #12]
 800dc44:	2300      	movs	r3, #0
 800dc46:	6063      	str	r3, [r4, #4]
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	6023      	str	r3, [r4, #0]
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f043 0308 	orr.w	r3, r3, #8
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	6923      	ldr	r3, [r4, #16]
 800dc56:	b94b      	cbnz	r3, 800dc6c <__swsetup_r+0x7c>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc62:	d003      	beq.n	800dc6c <__swsetup_r+0x7c>
 800dc64:	4621      	mov	r1, r4
 800dc66:	4628      	mov	r0, r5
 800dc68:	f000 f884 	bl	800dd74 <__smakebuf_r>
 800dc6c:	89a0      	ldrh	r0, [r4, #12]
 800dc6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc72:	f010 0301 	ands.w	r3, r0, #1
 800dc76:	d00a      	beq.n	800dc8e <__swsetup_r+0x9e>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60a3      	str	r3, [r4, #8]
 800dc7c:	6963      	ldr	r3, [r4, #20]
 800dc7e:	425b      	negs	r3, r3
 800dc80:	61a3      	str	r3, [r4, #24]
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	b943      	cbnz	r3, 800dc98 <__swsetup_r+0xa8>
 800dc86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc8a:	d1c4      	bne.n	800dc16 <__swsetup_r+0x26>
 800dc8c:	bd38      	pop	{r3, r4, r5, pc}
 800dc8e:	0781      	lsls	r1, r0, #30
 800dc90:	bf58      	it	pl
 800dc92:	6963      	ldrpl	r3, [r4, #20]
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	e7f4      	b.n	800dc82 <__swsetup_r+0x92>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	e7f7      	b.n	800dc8c <__swsetup_r+0x9c>
 800dc9c:	2000006c 	.word	0x2000006c

0800dca0 <_raise_r>:
 800dca0:	291f      	cmp	r1, #31
 800dca2:	b538      	push	{r3, r4, r5, lr}
 800dca4:	4604      	mov	r4, r0
 800dca6:	460d      	mov	r5, r1
 800dca8:	d904      	bls.n	800dcb4 <_raise_r+0x14>
 800dcaa:	2316      	movs	r3, #22
 800dcac:	6003      	str	r3, [r0, #0]
 800dcae:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb2:	bd38      	pop	{r3, r4, r5, pc}
 800dcb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dcb6:	b112      	cbz	r2, 800dcbe <_raise_r+0x1e>
 800dcb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcbc:	b94b      	cbnz	r3, 800dcd2 <_raise_r+0x32>
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 f830 	bl	800dd24 <_getpid_r>
 800dcc4:	462a      	mov	r2, r5
 800dcc6:	4601      	mov	r1, r0
 800dcc8:	4620      	mov	r0, r4
 800dcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcce:	f000 b817 	b.w	800dd00 <_kill_r>
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d00a      	beq.n	800dcec <_raise_r+0x4c>
 800dcd6:	1c59      	adds	r1, r3, #1
 800dcd8:	d103      	bne.n	800dce2 <_raise_r+0x42>
 800dcda:	2316      	movs	r3, #22
 800dcdc:	6003      	str	r3, [r0, #0]
 800dcde:	2001      	movs	r0, #1
 800dce0:	e7e7      	b.n	800dcb2 <_raise_r+0x12>
 800dce2:	2400      	movs	r4, #0
 800dce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dce8:	4628      	mov	r0, r5
 800dcea:	4798      	blx	r3
 800dcec:	2000      	movs	r0, #0
 800dcee:	e7e0      	b.n	800dcb2 <_raise_r+0x12>

0800dcf0 <raise>:
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <raise+0xc>)
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	6818      	ldr	r0, [r3, #0]
 800dcf6:	f7ff bfd3 	b.w	800dca0 <_raise_r>
 800dcfa:	bf00      	nop
 800dcfc:	2000006c 	.word	0x2000006c

0800dd00 <_kill_r>:
 800dd00:	b538      	push	{r3, r4, r5, lr}
 800dd02:	4d07      	ldr	r5, [pc, #28]	; (800dd20 <_kill_r+0x20>)
 800dd04:	2300      	movs	r3, #0
 800dd06:	4604      	mov	r4, r0
 800dd08:	4608      	mov	r0, r1
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	602b      	str	r3, [r5, #0]
 800dd0e:	f7f5 fa23 	bl	8003158 <_kill>
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	d102      	bne.n	800dd1c <_kill_r+0x1c>
 800dd16:	682b      	ldr	r3, [r5, #0]
 800dd18:	b103      	cbz	r3, 800dd1c <_kill_r+0x1c>
 800dd1a:	6023      	str	r3, [r4, #0]
 800dd1c:	bd38      	pop	{r3, r4, r5, pc}
 800dd1e:	bf00      	nop
 800dd20:	200006bc 	.word	0x200006bc

0800dd24 <_getpid_r>:
 800dd24:	f7f5 ba10 	b.w	8003148 <_getpid>

0800dd28 <__swhatbuf_r>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd30:	2900      	cmp	r1, #0
 800dd32:	b096      	sub	sp, #88	; 0x58
 800dd34:	4615      	mov	r5, r2
 800dd36:	461e      	mov	r6, r3
 800dd38:	da0d      	bge.n	800dd56 <__swhatbuf_r+0x2e>
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd40:	f04f 0100 	mov.w	r1, #0
 800dd44:	bf0c      	ite	eq
 800dd46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd4a:	2340      	movne	r3, #64	; 0x40
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	6031      	str	r1, [r6, #0]
 800dd50:	602b      	str	r3, [r5, #0]
 800dd52:	b016      	add	sp, #88	; 0x58
 800dd54:	bd70      	pop	{r4, r5, r6, pc}
 800dd56:	466a      	mov	r2, sp
 800dd58:	f000 f848 	bl	800ddec <_fstat_r>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	dbec      	blt.n	800dd3a <__swhatbuf_r+0x12>
 800dd60:	9901      	ldr	r1, [sp, #4]
 800dd62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd6a:	4259      	negs	r1, r3
 800dd6c:	4159      	adcs	r1, r3
 800dd6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd72:	e7eb      	b.n	800dd4c <__swhatbuf_r+0x24>

0800dd74 <__smakebuf_r>:
 800dd74:	898b      	ldrh	r3, [r1, #12]
 800dd76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd78:	079d      	lsls	r5, r3, #30
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	d507      	bpl.n	800dd90 <__smakebuf_r+0x1c>
 800dd80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	6123      	str	r3, [r4, #16]
 800dd88:	2301      	movs	r3, #1
 800dd8a:	6163      	str	r3, [r4, #20]
 800dd8c:	b002      	add	sp, #8
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	ab01      	add	r3, sp, #4
 800dd92:	466a      	mov	r2, sp
 800dd94:	f7ff ffc8 	bl	800dd28 <__swhatbuf_r>
 800dd98:	9900      	ldr	r1, [sp, #0]
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	f7fd fb81 	bl	800b4a4 <_malloc_r>
 800dda2:	b948      	cbnz	r0, 800ddb8 <__smakebuf_r+0x44>
 800dda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda8:	059a      	lsls	r2, r3, #22
 800ddaa:	d4ef      	bmi.n	800dd8c <__smakebuf_r+0x18>
 800ddac:	f023 0303 	bic.w	r3, r3, #3
 800ddb0:	f043 0302 	orr.w	r3, r3, #2
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	e7e3      	b.n	800dd80 <__smakebuf_r+0xc>
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	6020      	str	r0, [r4, #0]
 800ddbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc0:	81a3      	strh	r3, [r4, #12]
 800ddc2:	9b00      	ldr	r3, [sp, #0]
 800ddc4:	6163      	str	r3, [r4, #20]
 800ddc6:	9b01      	ldr	r3, [sp, #4]
 800ddc8:	6120      	str	r0, [r4, #16]
 800ddca:	b15b      	cbz	r3, 800dde4 <__smakebuf_r+0x70>
 800ddcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f000 f81d 	bl	800de10 <_isatty_r>
 800ddd6:	b128      	cbz	r0, 800dde4 <__smakebuf_r+0x70>
 800ddd8:	89a3      	ldrh	r3, [r4, #12]
 800ddda:	f023 0303 	bic.w	r3, r3, #3
 800ddde:	f043 0301 	orr.w	r3, r3, #1
 800dde2:	81a3      	strh	r3, [r4, #12]
 800dde4:	89a3      	ldrh	r3, [r4, #12]
 800dde6:	431d      	orrs	r5, r3
 800dde8:	81a5      	strh	r5, [r4, #12]
 800ddea:	e7cf      	b.n	800dd8c <__smakebuf_r+0x18>

0800ddec <_fstat_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4d07      	ldr	r5, [pc, #28]	; (800de0c <_fstat_r+0x20>)
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	602b      	str	r3, [r5, #0]
 800ddfa:	f7f5 fa0c 	bl	8003216 <_fstat>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d102      	bne.n	800de08 <_fstat_r+0x1c>
 800de02:	682b      	ldr	r3, [r5, #0]
 800de04:	b103      	cbz	r3, 800de08 <_fstat_r+0x1c>
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	bd38      	pop	{r3, r4, r5, pc}
 800de0a:	bf00      	nop
 800de0c:	200006bc 	.word	0x200006bc

0800de10 <_isatty_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d06      	ldr	r5, [pc, #24]	; (800de2c <_isatty_r+0x1c>)
 800de14:	2300      	movs	r3, #0
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	602b      	str	r3, [r5, #0]
 800de1c:	f7f5 fa0b 	bl	8003236 <_isatty>
 800de20:	1c43      	adds	r3, r0, #1
 800de22:	d102      	bne.n	800de2a <_isatty_r+0x1a>
 800de24:	682b      	ldr	r3, [r5, #0]
 800de26:	b103      	cbz	r3, 800de2a <_isatty_r+0x1a>
 800de28:	6023      	str	r3, [r4, #0]
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	200006bc 	.word	0x200006bc

0800de30 <_init>:
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	bf00      	nop
 800de34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de36:	bc08      	pop	{r3}
 800de38:	469e      	mov	lr, r3
 800de3a:	4770      	bx	lr

0800de3c <_fini>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	bf00      	nop
 800de40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de42:	bc08      	pop	{r3}
 800de44:	469e      	mov	lr, r3
 800de46:	4770      	bx	lr
