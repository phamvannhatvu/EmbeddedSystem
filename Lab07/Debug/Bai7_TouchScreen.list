
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a0  08009654  08009654  0000a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f4  0800c7f4  0000e0c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f4  0800c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7fc  0800c7fc  0000e0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7fc  0800c7fc  0000d7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c800  0800c800  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800c804  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0c0  2**0
                  CONTENTS
 10 .bss          00000558  200000c0  200000c0  0000e0c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  0000e0c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016246  00000000  00000000  0000e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042e3  00000000  00000000  00024336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  00028620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bc  00000000  00000000  00029be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027142  00000000  00000000  0002aca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed0a  00000000  00000000  00051de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9e0  00000000  00000000  00070af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001504d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006440  00000000  00000000  00150514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  00156954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800963c 	.word	0x0800963c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800963c 	.word	0x0800963c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <MX_ADC1_Init+0x10c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <MX_ADC1_Init+0x110>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed8:	f003 fae8 	bl	80044ac <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f001 ff61 	bl	8002da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ef8:	f003 fb1c 	bl	8004534 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f001 ff51 	bl	8002da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f06:	2309      	movs	r3, #9
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f14:	f003 fb0e 	bl	8004534 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1e:	f001 ff43 	bl	8002da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f30:	f003 fb00 	bl	8004534 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f3a:	f001 ff35 	bl	8002da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f4c:	f003 faf2 	bl	8004534 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f56:	f001 ff27 	bl	8002da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f68:	f003 fae4 	bl	8004534 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f72:	f001 ff19 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000dc 	.word	0x200000dc
 8000f84:	40012000 	.word	0x40012000
 8000f88:	0f000001 	.word	0x0f000001

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <HAL_ADC_MspInit+0x110>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d171      	bne.n	8001092 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001002:	2307      	movs	r3, #7
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <HAL_ADC_MspInit+0x118>)
 8001016:	f004 f8a7 	bl	8005168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ADC_MspInit+0x11c>)
 800102e:	f004 f89b 	bl	8005168 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_ADC_MspInit+0x124>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001078:	f003 fd8c 	bl	8004b94 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001082:	f001 fe91 	bl	8002da8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	20000124 	.word	0x20000124
 80010b0:	40026410 	.word	0x40026410

080010b4 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	at24c_Check();
 80010b8:	f000 f83c 	bl	8001134 <at24c_Check>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	230a      	movs	r3, #10
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030f 	add.w	r3, r7, #15
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2310      	movs	r3, #16
 80010e0:	21a0      	movs	r1, #160	@ 0xa0
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <at24c_ReadOneByte+0x34>)
 80010e4:	f004 fc66 	bl	80059b4 <HAL_I2C_Mem_Read>
	return temp;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000031c 	.word	0x2000031c

080010f8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	230a      	movs	r3, #10
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2310      	movs	r3, #16
 8001118:	21a0      	movs	r1, #160	@ 0xa0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <at24c_WriteOneByte+0x38>)
 800111c:	f004 fb50 	bl	80057c0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f003 f99f 	bl	8004464 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000031c 	.word	0x2000031c

08001134 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800113e:	f7ff ffbf 	bl	80010c0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	@ 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x1c>
 800114c:	2300      	movs	r3, #0
 800114e:	e010      	b.n	8001172 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001150:	2155      	movs	r1, #85	@ 0x55
 8001152:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001156:	f7ff ffcf 	bl	80010f8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800115a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800115e:	f7ff ffaf 	bl	80010c0 <at24c_ReadOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b55      	cmp	r3, #85	@ 0x55
 800116a:	d101      	bne.n	8001170 <at24c_Check+0x3c>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <at24c_Check+0x3e>
	}
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800118a:	e00d      	b.n	80011a8 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	80fa      	strh	r2, [r7, #6]
 8001192:	683c      	ldr	r4, [r7, #0]
 8001194:	1c62      	adds	r2, r4, #1
 8001196:	603a      	str	r2, [r7, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff91 	bl	80010c0 <at24c_ReadOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ee      	bne.n	800118c <at24c_Read+0x12>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011c8:	e00c      	b.n	80011e4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <at24c_WriteOneByte>
		WriteAddr++;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	80ba      	strh	r2, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ed      	bne.n	80011ca <at24c_Write+0x12>
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2108      	movs	r1, #8
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <button_init+0x14>)
 8001202:	f004 f965 	bl	80054d0 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020c00 	.word	0x40020c00

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <MX_DMA_Init+0x3c>)
 8001220:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_DMA_Init+0x3c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2038      	movs	r0, #56	@ 0x38
 8001238:	f003 fc75 	bl	8004b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800123c:	2038      	movs	r0, #56	@ 0x38
 800123e:	f003 fc8e 	bl	8004b5e <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08e      	sub	sp, #56	@ 0x38
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <MX_FSMC_Init+0xec>)
 800127e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001282:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001284:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_FSMC_Init+0xec>)
 8001286:	4a2e      	ldr	r2, [pc, #184]	@ (8001340 <MX_FSMC_Init+0xf0>)
 8001288:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <MX_FSMC_Init+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001290:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001296:	4b29      	ldr	r3, [pc, #164]	@ (800133c <MX_FSMC_Init+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_FSMC_Init+0xec>)
 800129e:	2210      	movs	r2, #16
 80012a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012a2:	4b26      	ldr	r3, [pc, #152]	@ (800133c <MX_FSMC_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ae:	4b23      	ldr	r3, [pc, #140]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_FSMC_Init+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <MX_FSMC_Init+0xec>)
 80012bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_FSMC_Init+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_FSMC_Init+0xec>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_FSMC_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_FSMC_Init+0xec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012e2:	230f      	movs	r3, #15
 80012e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012e6:	230f      	movs	r3, #15
 80012e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012ea:	233c      	movs	r3, #60	@ 0x3c
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80012f2:	2310      	movs	r3, #16
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80012f6:	2311      	movs	r3, #17
 80012f8:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012fe:	2308      	movs	r3, #8
 8001300:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001302:	230f      	movs	r3, #15
 8001304:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001306:	2309      	movs	r3, #9
 8001308:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800130e:	2310      	movs	r3, #16
 8001310:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001312:	2311      	movs	r3, #17
 8001314:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800131a:	463a      	mov	r2, r7
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4806      	ldr	r0, [pc, #24]	@ (800133c <MX_FSMC_Init+0xec>)
 8001324:	f005 ffdc 	bl	80072e0 <HAL_SRAM_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800132e:	f001 fd3b 	bl	8002da8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001332:	bf00      	nop
 8001334:	3738      	adds	r7, #56	@ 0x38
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000184 	.word	0x20000184
 8001340:	a0000104 	.word	0xa0000104

08001344 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001358:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d131      	bne.n	80013c4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <HAL_FSMC_MspInit+0x88>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6393      	str	r3, [r2, #56]	@ 0x38
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_FSMC_MspInit+0x8c>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001382:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001386:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <HAL_FSMC_MspInit+0x90>)
 800139e:	f003 fee3 	bl	8005168 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013a2:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80013a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b4:	230c      	movs	r3, #12
 80013b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <HAL_FSMC_MspInit+0x94>)
 80013be:	f003 fed3 	bl	8005168 <HAL_GPIO_Init>
 80013c2:	e000      	b.n	80013c6 <HAL_FSMC_MspInit+0x82>
    return;
 80013c4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200001d4 	.word	0x200001d4
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40020c00 	.word	0x40020c00

080013dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e4:	f7ff ffae 	bl	8001344 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <gameFSM>:
} ControlButton;

static ControlButton controlButtons[4];
static uint16_t score = 0;

void gameFSM(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	initializeButtons();
 80013f6:	f000 f935 	bl	8001664 <initializeButtons>
    switch (currentState) {
 80013fa:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <gameFSM+0x190>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	f000 80a3 	beq.w	800154a <gameFSM+0x15a>
 8001404:	2b02      	cmp	r3, #2
 8001406:	f300 80b7 	bgt.w	8001578 <gameFSM+0x188>
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <gameFSM+0x24>
 800140e:	2b01      	cmp	r3, #1
 8001410:	d017      	beq.n	8001442 <gameFSM+0x52>
                renderScreen();
                score = 0;
            }
            break;
    }
}
 8001412:	e0b1      	b.n	8001578 <gameFSM+0x188>
            displayStartScreen();
 8001414:	f000 fc2c 	bl	8001c70 <displayStartScreen>
            if (isStartScreenTouched()) {
 8001418:	f000 fa04 	bl	8001824 <isStartScreenTouched>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80a5 	beq.w	800156e <gameFSM+0x17e>
                currentState = GAME_PLAY;
 8001424:	4b56      	ldr	r3, [pc, #344]	@ (8001580 <gameFSM+0x190>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
                initializeGame();
 800142a:	f000 fae3 	bl	80019f4 <initializeGame>
                renderScreen();
 800142e:	f000 fa53 	bl	80018d8 <renderScreen>
                setTimer_button(5);
 8001432:	2005      	movs	r0, #5
 8001434:	f001 fce4 	bl	8002e00 <setTimer_button>
                setTimer_snake(500);
 8001438:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800143c:	f001 fcc8 	bl	8002dd0 <setTimer_snake>
            break;
 8001440:	e095      	b.n	800156e <gameFSM+0x17e>
            if (button_read_flag) {
 8001442:	4b50      	ldr	r3, [pc, #320]	@ (8001584 <gameFSM+0x194>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d004      	beq.n	8001454 <gameFSM+0x64>
                setTimer_button(5);
 800144a:	2005      	movs	r0, #5
 800144c:	f001 fcd8 	bl	8002e00 <setTimer_button>
                handleInput();
 8001450:	f000 fbc4 	bl	8001bdc <handleInput>
            if (snake_move_flag) {
 8001454:	4b4c      	ldr	r3, [pc, #304]	@ (8001588 <gameFSM+0x198>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 808a 	beq.w	8001572 <gameFSM+0x182>
            	HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800145e:	2110      	movs	r1, #16
 8001460:	484a      	ldr	r0, [pc, #296]	@ (800158c <gameFSM+0x19c>)
 8001462:	f004 f84e 	bl	8005502 <HAL_GPIO_TogglePin>
                int16_t nextX = snake.headX;
 8001466:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <gameFSM+0x1a0>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	80fb      	strh	r3, [r7, #6]
                int16_t nextY = snake.headY;
 800146c:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <gameFSM+0x1a0>)
 800146e:	885b      	ldrh	r3, [r3, #2]
 8001470:	80bb      	strh	r3, [r7, #4]
                switch (snakeDirection) {
 8001472:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <gameFSM+0x1a4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d826      	bhi.n	80014c8 <gameFSM+0xd8>
 800147a:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <gameFSM+0x90>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	0800149f 	.word	0x0800149f
 8001488:	080014ad 	.word	0x080014ad
 800148c:	080014bb 	.word	0x080014bb
                    case UP:    nextY--; break;
 8001490:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	80bb      	strh	r3, [r7, #4]
 800149c:	e015      	b.n	80014ca <gameFSM+0xda>
                    case DOWN:  nextY++; break;
 800149e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3301      	adds	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	80bb      	strh	r3, [r7, #4]
 80014aa:	e00e      	b.n	80014ca <gameFSM+0xda>
                    case LEFT:  nextX--; break;
 80014ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	80fb      	strh	r3, [r7, #6]
 80014b8:	e007      	b.n	80014ca <gameFSM+0xda>
                    case RIGHT: nextX++; break;
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	e000      	b.n	80014ca <gameFSM+0xda>
                    default:    break;
 80014c8:	bf00      	nop
                if (nextX < 0 || nextY < 0 || nextX >= GRID_ROWS || nextY >= GRID_COLS || gameGrid[nextX][nextY] == 1) {
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db16      	blt.n	8001500 <gameFSM+0x110>
 80014d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db12      	blt.n	8001500 <gameFSM+0x110>
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	2b0f      	cmp	r3, #15
 80014e0:	dc0e      	bgt.n	8001500 <gameFSM+0x110>
 80014e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	dc0a      	bgt.n	8001500 <gameFSM+0x110>
 80014ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014f2:	4929      	ldr	r1, [pc, #164]	@ (8001598 <gameFSM+0x1a8>)
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	440a      	add	r2, r1
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d103      	bne.n	8001508 <gameFSM+0x118>
                	currentState = GAME_OVER;
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <gameFSM+0x190>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e019      	b.n	800153c <gameFSM+0x14c>
                else if (gameGrid[nextX][nextY] == 2) {
 8001508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001510:	4921      	ldr	r1, [pc, #132]	@ (8001598 <gameFSM+0x1a8>)
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	440a      	add	r2, r1
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d10a      	bne.n	8001534 <gameFSM+0x144>
                    score++;
 800151e:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <gameFSM+0x1ac>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	4b1d      	ldr	r3, [pc, #116]	@ (800159c <gameFSM+0x1ac>)
 8001528:	801a      	strh	r2, [r3, #0]
                    advanceSnakeHead();
 800152a:	f000 fab5 	bl	8001a98 <advanceSnakeHead>
                    generateFruit();
 800152e:	f000 fa0f 	bl	8001950 <generateFruit>
 8001532:	e003      	b.n	800153c <gameFSM+0x14c>
                	advanceSnakeHead();
 8001534:	f000 fab0 	bl	8001a98 <advanceSnakeHead>
                	removeSnakeTail();
 8001538:	f000 faf4 	bl	8001b24 <removeSnakeTail>
                renderScreen();
 800153c:	f000 f9cc 	bl	80018d8 <renderScreen>
                setTimer_snake(500);
 8001540:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001544:	f001 fc44 	bl	8002dd0 <setTimer_snake>
            break;
 8001548:	e013      	b.n	8001572 <gameFSM+0x182>
        	displayStartScreen();
 800154a:	f000 fb91 	bl	8001c70 <displayStartScreen>
            if (isStartScreenTouched()) {
 800154e:	f000 f969 	bl	8001824 <isStartScreenTouched>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00e      	beq.n	8001576 <gameFSM+0x186>
                currentState = GAME_PLAY;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <gameFSM+0x190>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
                initializeGame();
 800155e:	f000 fa49 	bl	80019f4 <initializeGame>
                renderScreen();
 8001562:	f000 f9b9 	bl	80018d8 <renderScreen>
                score = 0;
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <gameFSM+0x1ac>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
            break;
 800156c:	e003      	b.n	8001576 <gameFSM+0x186>
            break;
 800156e:	bf00      	nop
 8001570:	e002      	b.n	8001578 <gameFSM+0x188>
            break;
 8001572:	bf00      	nop
 8001574:	e000      	b.n	8001578 <gameFSM+0x188>
            break;
 8001576:	bf00      	nop
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200001d8 	.word	0x200001d8
 8001584:	20000380 	.word	0x20000380
 8001588:	2000037c 	.word	0x2000037c
 800158c:	40021000 	.word	0x40021000
 8001590:	20000210 	.word	0x20000210
 8001594:	20000000 	.word	0x20000000
 8001598:	2000021c 	.word	0x2000021c
 800159c:	20000204 	.word	0x20000204

080015a0 <initializeControlButtons>:

void initializeControlButtons(void) {
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b090      	sub	sp, #64	@ 0x40
 80015a4:	af02      	add	r7, sp, #8
    controlButtons[0] = (ControlButton){.xStart = DIRECTION_BTN_X + DIRECTION_BTN_SIZE + 10, .yStart = DIRECTION_BTN_Y + 10 + DIRECTION_BTN_SIZE, .xEnd = DIRECTION_BTN_X + 2 * DIRECTION_BTN_SIZE + 10, .yEnd = DIRECTION_BTN_Y + DIRECTION_BTN_SIZE*2 + 10 , .isPressed = 0};
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <initializeControlButtons+0xb0>)
 80015a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <initializeControlButtons+0xb4>)
 80015aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ac:	c303      	stmia	r3!, {r0, r1}
 80015ae:	801a      	strh	r2, [r3, #0]
    controlButtons[1] = (ControlButton){.xStart = DIRECTION_BTN_X + DIRECTION_BTN_SIZE + 10, .yStart = DIRECTION_BTN_Y + 2 * DIRECTION_BTN_SIZE + 20, .xEnd = DIRECTION_BTN_X + 2 * DIRECTION_BTN_SIZE + 10, .yEnd = DIRECTION_BTN_Y + 3 * DIRECTION_BTN_SIZE + 20, .isPressed = 0};
 80015b0:	4b27      	ldr	r3, [pc, #156]	@ (8001650 <initializeControlButtons+0xb0>)
 80015b2:	4929      	ldr	r1, [pc, #164]	@ (8001658 <initializeControlButtons+0xb8>)
 80015b4:	f103 020a 	add.w	r2, r3, #10
 80015b8:	460b      	mov	r3, r1
 80015ba:	cb03      	ldmia	r3!, {r0, r1}
 80015bc:	6010      	str	r0, [r2, #0]
 80015be:	6051      	str	r1, [r2, #4]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	8113      	strh	r3, [r2, #8]
    controlButtons[2] = (ControlButton){.xStart = DIRECTION_BTN_X, .yStart = DIRECTION_BTN_Y + 2 * DIRECTION_BTN_SIZE + 20, .xEnd = DIRECTION_BTN_X + DIRECTION_BTN_SIZE,.yEnd = DIRECTION_BTN_Y + 3 * DIRECTION_BTN_SIZE + 20, .isPressed = 0};
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <initializeControlButtons+0xb0>)
 80015c6:	4a25      	ldr	r2, [pc, #148]	@ (800165c <initializeControlButtons+0xbc>)
 80015c8:	3314      	adds	r3, #20
 80015ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80015cc:	c303      	stmia	r3!, {r0, r1}
 80015ce:	801a      	strh	r2, [r3, #0]
    controlButtons[3] = (ControlButton){.xStart = DIRECTION_BTN_X + 2 * DIRECTION_BTN_SIZE + 20, .yStart = DIRECTION_BTN_Y + 2 * DIRECTION_BTN_SIZE + 20, .xEnd = DIRECTION_BTN_X + 3 * DIRECTION_BTN_SIZE + 20, .yEnd = DIRECTION_BTN_Y + 3 * DIRECTION_BTN_SIZE + 20, .isPressed = 0};
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <initializeControlButtons+0xb0>)
 80015d2:	4923      	ldr	r1, [pc, #140]	@ (8001660 <initializeControlButtons+0xc0>)
 80015d4:	f103 021e 	add.w	r2, r3, #30
 80015d8:	460b      	mov	r3, r1
 80015da:	cb03      	ldmia	r3!, {r0, r1}
 80015dc:	6010      	str	r0, [r2, #0]
 80015de:	6051      	str	r1, [r2, #4]
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	8113      	strh	r3, [r2, #8]

    for (int i = 0; i < 4; i++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015e8:	e02a      	b.n	8001640 <initializeControlButtons+0xa0>
        lcd_Fill(controlButtons[i].xStart, controlButtons[i].yStart, controlButtons[i].xEnd, controlButtons[i].yEnd, BLACK);
 80015ea:	4919      	ldr	r1, [pc, #100]	@ (8001650 <initializeControlButtons+0xb0>)
 80015ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	440b      	add	r3, r1
 80015f8:	8818      	ldrh	r0, [r3, #0]
 80015fa:	4915      	ldr	r1, [pc, #84]	@ (8001650 <initializeControlButtons+0xb0>)
 80015fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	3302      	adds	r3, #2
 800160a:	8819      	ldrh	r1, [r3, #0]
 800160c:	4c10      	ldr	r4, [pc, #64]	@ (8001650 <initializeControlButtons+0xb0>)
 800160e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4423      	add	r3, r4
 800161a:	3304      	adds	r3, #4
 800161c:	881c      	ldrh	r4, [r3, #0]
 800161e:	4d0c      	ldr	r5, [pc, #48]	@ (8001650 <initializeControlButtons+0xb0>)
 8001620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	442b      	add	r3, r5
 800162c:	3306      	adds	r3, #6
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	9200      	str	r2, [sp, #0]
 8001634:	4622      	mov	r2, r4
 8001636:	f000 fd75 	bl	8002124 <lcd_Fill>
    for (int i = 0; i < 4; i++) {
 800163a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163c:	3301      	adds	r3, #1
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	2b03      	cmp	r3, #3
 8001644:	ddd1      	ble.n	80015ea <initializeControlButtons+0x4a>
    }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3738      	adds	r7, #56	@ 0x38
 800164c:	46bd      	mov	sp, r7
 800164e:	bdb0      	pop	{r4, r5, r7, pc}
 8001650:	200001dc 	.word	0x200001dc
 8001654:	08009654 	.word	0x08009654
 8001658:	08009660 	.word	0x08009660
 800165c:	0800966c 	.word	0x0800966c
 8001660:	08009678 	.word	0x08009678

08001664 <initializeButtons>:

void initializeButtons(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af04      	add	r7, sp, #16
    initializeControlButtons();
 800166a:	f7ff ff99 	bl	80015a0 <initializeControlButtons>
    lcd_ShowStr(90, 10, "SCORE:", BLACK, WHITE, 16, 0);
 800166e:	2300      	movs	r3, #0
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2310      	movs	r3, #16
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2300      	movs	r3, #0
 800167e:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <initializeButtons+0x48>)
 8001680:	210a      	movs	r1, #10
 8001682:	205a      	movs	r0, #90	@ 0x5a
 8001684:	f001 fa06 	bl	8002a94 <lcd_ShowStr>
    lcd_ShowIntNum(135, 10, score, 3, BLACK, WHITE, 16);
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <initializeButtons+0x4c>)
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	2310      	movs	r3, #16
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2303      	movs	r3, #3
 800169c:	210a      	movs	r1, #10
 800169e:	2087      	movs	r0, #135	@ 0x87
 80016a0:	f000 fefe 	bl	80024a0 <lcd_ShowIntNum>
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08009684 	.word	0x08009684
 80016b0:	20000204 	.word	0x20000204

080016b4 <isButtonUp>:
uint8_t isButtonUp(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    if (touch_IsTouched() && touch_GetX() > controlButtons[0].xStart && touch_GetX() < controlButtons[0].xEnd && touch_GetY() > controlButtons[0].yStart && touch_GetY() < controlButtons[0].yEnd) {
 80016b8:	f002 fe0e 	bl	80042d8 <touch_IsTouched>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d021      	beq.n	8001706 <isButtonUp+0x52>
 80016c2:	f002 fe1b 	bl	80042fc <touch_GetX>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <isButtonUp+0x58>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d919      	bls.n	8001706 <isButtonUp+0x52>
 80016d2:	f002 fe13 	bl	80042fc <touch_GetX>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <isButtonUp+0x58>)
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d211      	bcs.n	8001706 <isButtonUp+0x52>
 80016e2:	f002 fe17 	bl	8004314 <touch_GetY>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <isButtonUp+0x58>)
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d909      	bls.n	8001706 <isButtonUp+0x52>
 80016f2:	f002 fe0f 	bl	8004314 <touch_GetY>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <isButtonUp+0x58>)
 80016fc:	88db      	ldrh	r3, [r3, #6]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d201      	bcs.n	8001706 <isButtonUp+0x52>
        return 1;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <isButtonUp+0x54>
    }
    return 0;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200001dc 	.word	0x200001dc

08001710 <isButtonDown>:

uint8_t isButtonDown(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    if (touch_IsTouched() && touch_GetX() > controlButtons[1].xStart && touch_GetX() < controlButtons[1].xEnd && touch_GetY() > controlButtons[1].yStart && touch_GetY() < controlButtons[1].yEnd) {
 8001714:	f002 fde0 	bl	80042d8 <touch_IsTouched>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d021      	beq.n	8001762 <isButtonDown+0x52>
 800171e:	f002 fded 	bl	80042fc <touch_GetX>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <isButtonDown+0x58>)
 8001728:	895b      	ldrh	r3, [r3, #10]
 800172a:	429a      	cmp	r2, r3
 800172c:	d919      	bls.n	8001762 <isButtonDown+0x52>
 800172e:	f002 fde5 	bl	80042fc <touch_GetX>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <isButtonDown+0x58>)
 8001738:	89db      	ldrh	r3, [r3, #14]
 800173a:	429a      	cmp	r2, r3
 800173c:	d211      	bcs.n	8001762 <isButtonDown+0x52>
 800173e:	f002 fde9 	bl	8004314 <touch_GetY>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <isButtonDown+0x58>)
 8001748:	899b      	ldrh	r3, [r3, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	d909      	bls.n	8001762 <isButtonDown+0x52>
 800174e:	f002 fde1 	bl	8004314 <touch_GetY>
 8001752:	4603      	mov	r3, r0
 8001754:	461a      	mov	r2, r3
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <isButtonDown+0x58>)
 8001758:	8a1b      	ldrh	r3, [r3, #16]
 800175a:	429a      	cmp	r2, r3
 800175c:	d201      	bcs.n	8001762 <isButtonDown+0x52>
        return 1;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <isButtonDown+0x54>
    }
    return 0;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001dc 	.word	0x200001dc

0800176c <isButtonLeft>:

uint8_t isButtonLeft(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    if (touch_IsTouched() && touch_GetX() > controlButtons[2].xStart && touch_GetX() < controlButtons[2].xEnd && touch_GetY() > controlButtons[2].yStart && touch_GetY() < controlButtons[2].yEnd) {
 8001770:	f002 fdb2 	bl	80042d8 <touch_IsTouched>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d021      	beq.n	80017be <isButtonLeft+0x52>
 800177a:	f002 fdbf 	bl	80042fc <touch_GetX>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <isButtonLeft+0x58>)
 8001784:	8a9b      	ldrh	r3, [r3, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	d919      	bls.n	80017be <isButtonLeft+0x52>
 800178a:	f002 fdb7 	bl	80042fc <touch_GetX>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <isButtonLeft+0x58>)
 8001794:	8b1b      	ldrh	r3, [r3, #24]
 8001796:	429a      	cmp	r2, r3
 8001798:	d211      	bcs.n	80017be <isButtonLeft+0x52>
 800179a:	f002 fdbb 	bl	8004314 <touch_GetY>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <isButtonLeft+0x58>)
 80017a4:	8adb      	ldrh	r3, [r3, #22]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d909      	bls.n	80017be <isButtonLeft+0x52>
 80017aa:	f002 fdb3 	bl	8004314 <touch_GetY>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <isButtonLeft+0x58>)
 80017b4:	8b5b      	ldrh	r3, [r3, #26]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d201      	bcs.n	80017be <isButtonLeft+0x52>
        return 1;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <isButtonLeft+0x54>
    }
    return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001dc 	.word	0x200001dc

080017c8 <isButtonRight>:

uint8_t isButtonRight(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    if (touch_IsTouched() && touch_GetX() > controlButtons[3].xStart && touch_GetX() < controlButtons[3].xEnd && touch_GetY() > controlButtons[3].yStart && touch_GetY() < controlButtons[3].yEnd) {
 80017cc:	f002 fd84 	bl	80042d8 <touch_IsTouched>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d021      	beq.n	800181a <isButtonRight+0x52>
 80017d6:	f002 fd91 	bl	80042fc <touch_GetX>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <isButtonRight+0x58>)
 80017e0:	8bdb      	ldrh	r3, [r3, #30]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d919      	bls.n	800181a <isButtonRight+0x52>
 80017e6:	f002 fd89 	bl	80042fc <touch_GetX>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <isButtonRight+0x58>)
 80017f0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d211      	bcs.n	800181a <isButtonRight+0x52>
 80017f6:	f002 fd8d 	bl	8004314 <touch_GetY>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <isButtonRight+0x58>)
 8001800:	8c1b      	ldrh	r3, [r3, #32]
 8001802:	429a      	cmp	r2, r3
 8001804:	d909      	bls.n	800181a <isButtonRight+0x52>
 8001806:	f002 fd85 	bl	8004314 <touch_GetY>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <isButtonRight+0x58>)
 8001810:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001812:	429a      	cmp	r2, r3
 8001814:	d201      	bcs.n	800181a <isButtonRight+0x52>
        return 1;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <isButtonRight+0x54>
    }
    return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001dc 	.word	0x200001dc

08001824 <isStartScreenTouched>:

uint8_t isStartScreenTouched(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
    if (!touch_IsTouched()) return 0;
 8001828:	f002 fd56 	bl	80042d8 <touch_IsTouched>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <isStartScreenTouched+0x12>
 8001832:	2300      	movs	r3, #0
 8001834:	e017      	b.n	8001866 <isStartScreenTouched+0x42>
    return touch_GetX() > SCREEN_X && touch_GetX() < SCREEN_X + SCREEN_SIZE && touch_GetY() > SCREEN_Y && touch_GetY() < SCREEN_Y + SCREEN_SIZE;
 8001836:	f002 fd61 	bl	80042fc <touch_GetX>
 800183a:	4603      	mov	r3, r0
 800183c:	2b28      	cmp	r3, #40	@ 0x28
 800183e:	d910      	bls.n	8001862 <isStartScreenTouched+0x3e>
 8001840:	f002 fd5c 	bl	80042fc <touch_GetX>
 8001844:	4603      	mov	r3, r0
 8001846:	2bc7      	cmp	r3, #199	@ 0xc7
 8001848:	d80b      	bhi.n	8001862 <isStartScreenTouched+0x3e>
 800184a:	f002 fd63 	bl	8004314 <touch_GetY>
 800184e:	4603      	mov	r3, r0
 8001850:	2b23      	cmp	r3, #35	@ 0x23
 8001852:	d906      	bls.n	8001862 <isStartScreenTouched+0x3e>
 8001854:	f002 fd5e 	bl	8004314 <touch_GetY>
 8001858:	4603      	mov	r3, r0
 800185a:	2bc2      	cmp	r3, #194	@ 0xc2
 800185c:	d801      	bhi.n	8001862 <isStartScreenTouched+0x3e>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <isStartScreenTouched+0x40>
 8001862:	2300      	movs	r3, #0
 8001864:	b2db      	uxtb	r3, r3
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}

0800186a <drawCell>:
struct Snake snake;
enum Direction snakeDirection = DOWN;

uint8_t gameGrid[GRID_ROWS][GRID_COLS];

void drawCell(uint8_t i, uint8_t j, uint16_t color) {
 800186a:	b590      	push	{r4, r7, lr}
 800186c:	b085      	sub	sp, #20
 800186e:	af02      	add	r7, sp, #8
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	460b      	mov	r3, r1
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	4613      	mov	r3, r2
 800187a:	80bb      	strh	r3, [r7, #4]
	lcd_Fill(SCREEN_X + i * CELL_SIZE, SCREEN_Y + j * CELL_SIZE, SCREEN_X + i * CELL_SIZE + CELL_SIZE, SCREEN_Y + j * CELL_SIZE + CELL_SIZE, color);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	b29b      	uxth	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	3328      	adds	r3, #40	@ 0x28
 800188c:	b298      	uxth	r0, r3
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	b29b      	uxth	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b29b      	uxth	r3, r3
 800189c:	3323      	adds	r3, #35	@ 0x23
 800189e:	b299      	uxth	r1, r3
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3332      	adds	r3, #50	@ 0x32
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461c      	mov	r4, r3
 80018b8:	00a4      	lsls	r4, r4, #2
 80018ba:	4423      	add	r3, r4
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	332d      	adds	r3, #45	@ 0x2d
 80018c2:	b29c      	uxth	r4, r3
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4623      	mov	r3, r4
 80018ca:	f000 fc2b 	bl	8002124 <lcd_Fill>
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd90      	pop	{r4, r7, pc}
	...

080018d8 <renderScreen>:

void renderScreen() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
    for (uint8_t row = 0; row < GRID_ROWS; row++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	e02b      	b.n	800193c <renderScreen+0x64>
        for (uint8_t col = 0; col < GRID_COLS; col++) {
 80018e4:	2300      	movs	r3, #0
 80018e6:	71bb      	strb	r3, [r7, #6]
 80018e8:	e022      	b.n	8001930 <renderScreen+0x58>
            uint16_t cellColor = BLACK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	80bb      	strh	r3, [r7, #4]
            if (gameGrid[row][col] == 1) {
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	4916      	ldr	r1, [pc, #88]	@ (800194c <renderScreen+0x74>)
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	440a      	add	r2, r1
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <renderScreen+0x2e>
                cellColor = BLUE;
 8001900:	231f      	movs	r3, #31
 8001902:	80bb      	strh	r3, [r7, #4]
 8001904:	e00b      	b.n	800191e <renderScreen+0x46>
            } else if (gameGrid[row][col] == 2) {
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	4910      	ldr	r1, [pc, #64]	@ (800194c <renderScreen+0x74>)
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	440a      	add	r2, r1
 8001910:	4413      	add	r3, r2
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d102      	bne.n	800191e <renderScreen+0x46>
                cellColor = RED;
 8001918:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800191c:	80bb      	strh	r3, [r7, #4]
            }
            drawCell(row, col, cellColor);
 800191e:	88ba      	ldrh	r2, [r7, #4]
 8001920:	79b9      	ldrb	r1, [r7, #6]
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ffa0 	bl	800186a <drawCell>
        for (uint8_t col = 0; col < GRID_COLS; col++) {
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	3301      	adds	r3, #1
 800192e:	71bb      	strb	r3, [r7, #6]
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	d9d9      	bls.n	80018ea <renderScreen+0x12>
    for (uint8_t row = 0; row < GRID_ROWS; row++) {
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	3301      	adds	r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d9d0      	bls.n	80018e4 <renderScreen+0xc>
        }
    }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000021c 	.word	0x2000021c

08001950 <generateFruit>:

void generateFruit() {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    do {
        fruit.x = rand() % GRID_ROWS;
 8001954:	f006 fd8e 	bl	8008474 <rand>
 8001958:	4601      	mov	r1, r0
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <generateFruit+0x98>)
 800195c:	fb83 2301 	smull	r2, r3, r3, r1
 8001960:	119a      	asrs	r2, r3, #6
 8001962:	17cb      	asrs	r3, r1, #31
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	015b      	lsls	r3, r3, #5
 800196e:	1aca      	subs	r2, r1, r3
 8001970:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <generateFruit+0x98>)
 8001972:	fb83 1302 	smull	r1, r3, r3, r2
 8001976:	1099      	asrs	r1, r3, #2
 8001978:	17d3      	asrs	r3, r2, #31
 800197a:	1acb      	subs	r3, r1, r3
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <generateFruit+0x9c>)
 8001980:	801a      	strh	r2, [r3, #0]
        fruit.y = rand() % GRID_COLS;
 8001982:	f006 fd77 	bl	8008474 <rand>
 8001986:	4601      	mov	r1, r0
 8001988:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <generateFruit+0x98>)
 800198a:	fb83 2301 	smull	r2, r3, r3, r1
 800198e:	119a      	asrs	r2, r3, #6
 8001990:	17cb      	asrs	r3, r1, #31
 8001992:	1ad2      	subs	r2, r2, r3
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	015b      	lsls	r3, r3, #5
 800199c:	1aca      	subs	r2, r1, r3
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <generateFruit+0x98>)
 80019a0:	fb83 1302 	smull	r1, r3, r3, r2
 80019a4:	1099      	asrs	r1, r3, #2
 80019a6:	17d3      	asrs	r3, r2, #31
 80019a8:	1acb      	subs	r3, r1, r3
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <generateFruit+0x9c>)
 80019ae:	805a      	strh	r2, [r3, #2]
    } while (gameGrid[fruit.x][fruit.y] != 0);
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <generateFruit+0x9c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <generateFruit+0x9c>)
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <generateFruit+0xa0>)
 80019be:	0103      	lsls	r3, r0, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1c4      	bne.n	8001954 <generateFruit+0x4>
    gameGrid[fruit.x][fruit.y] = 2;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <generateFruit+0x9c>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <generateFruit+0x9c>)
 80019d2:	885b      	ldrh	r3, [r3, #2]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4a06      	ldr	r2, [pc, #24]	@ (80019f0 <generateFruit+0xa0>)
 80019d8:	0103      	lsls	r3, r0, #4
 80019da:	4413      	add	r3, r2
 80019dc:	440b      	add	r3, r1
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	66666667 	.word	0x66666667
 80019ec:	20000208 	.word	0x20000208
 80019f0:	2000021c 	.word	0x2000021c

080019f4 <initializeGame>:
void initializeGame() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af02      	add	r7, sp, #8
    memset(gameGrid, 0, sizeof(gameGrid));
 80019fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019fe:	2100      	movs	r1, #0
 8001a00:	4821      	ldr	r0, [pc, #132]	@ (8001a88 <initializeGame+0x94>)
 8001a02:	f006 fe7a 	bl	80086fa <memset>
    lcd_Fill(SCREEN_X, SCREEN_Y, SCREEN_X + SCREEN_SIZE, SCREEN_Y + SCREEN_SIZE, WHITE);
 8001a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	23c3      	movs	r3, #195	@ 0xc3
 8001a0e:	22c8      	movs	r2, #200	@ 0xc8
 8001a10:	2123      	movs	r1, #35	@ 0x23
 8001a12:	2028      	movs	r0, #40	@ 0x28
 8001a14:	f000 fb86 	bl	8002124 <lcd_Fill>
    snake.color = GREEN;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <initializeGame+0x98>)
 8001a1a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a1e:	811a      	strh	r2, [r3, #8]
    snake.headX = GRID_ROWS / 2;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <initializeGame+0x98>)
 8001a22:	2208      	movs	r2, #8
 8001a24:	801a      	strh	r2, [r3, #0]
    snake.headY = GRID_COLS / 2;
 8001a26:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <initializeGame+0x98>)
 8001a28:	2208      	movs	r2, #8
 8001a2a:	805a      	strh	r2, [r3, #2]
    snake.tailX = GRID_ROWS / 2;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <initializeGame+0x98>)
 8001a2e:	2208      	movs	r2, #8
 8001a30:	809a      	strh	r2, [r3, #4]
    snake.tailY = GRID_COLS / 2 - 1;
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <initializeGame+0x98>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	80da      	strh	r2, [r3, #6]
    gameGrid[snake.headX][snake.headY] = 1;
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <initializeGame+0x98>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <initializeGame+0x98>)
 8001a40:	885b      	ldrh	r3, [r3, #2]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <initializeGame+0x94>)
 8001a46:	0103      	lsls	r3, r0, #4
 8001a48:	4413      	add	r3, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
    gameGrid[snake.tailX][snake.tailY] = 1;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <initializeGame+0x98>)
 8001a52:	889b      	ldrh	r3, [r3, #4]
 8001a54:	4618      	mov	r0, r3
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <initializeGame+0x98>)
 8001a58:	88db      	ldrh	r3, [r3, #6]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <initializeGame+0x94>)
 8001a5e:	0103      	lsls	r3, r0, #4
 8001a60:	4413      	add	r3, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
    snake.color = GREEN;
 8001a68:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <initializeGame+0x98>)
 8001a6a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001a6e:	811a      	strh	r2, [r3, #8]
    fruit.color = RED;
 8001a70:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <initializeGame+0x9c>)
 8001a72:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001a76:	809a      	strh	r2, [r3, #4]
    generateFruit();
 8001a78:	f7ff ff6a 	bl	8001950 <generateFruit>
    snakeDirection = DOWN;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <initializeGame+0xa0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	2000021c 	.word	0x2000021c
 8001a8c:	20000210 	.word	0x20000210
 8001a90:	20000208 	.word	0x20000208
 8001a94:	20000000 	.word	0x20000000

08001a98 <advanceSnakeHead>:
void advanceSnakeHead() {
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
    switch (snakeDirection) {
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <advanceSnakeHead+0x80>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d827      	bhi.n	8001af4 <advanceSnakeHead+0x5c>
 8001aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8001aac <advanceSnakeHead+0x14>)
 8001aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aaa:	bf00      	nop
 8001aac:	08001abd 	.word	0x08001abd
 8001ab0:	08001acb 	.word	0x08001acb
 8001ab4:	08001ad9 	.word	0x08001ad9
 8001ab8:	08001ae7 	.word	0x08001ae7
        case UP:    snake.headY--; break;
 8001abc:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001abe:	885b      	ldrh	r3, [r3, #2]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001ac6:	805a      	strh	r2, [r3, #2]
 8001ac8:	e015      	b.n	8001af6 <advanceSnakeHead+0x5e>
        case DOWN:  snake.headY++; break;
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001ad4:	805a      	strh	r2, [r3, #2]
 8001ad6:	e00e      	b.n	8001af6 <advanceSnakeHead+0x5e>
        case LEFT:  snake.headX--; break;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001ae2:	801a      	strh	r2, [r3, #0]
 8001ae4:	e007      	b.n	8001af6 <advanceSnakeHead+0x5e>
        case RIGHT: snake.headX++; break;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	e000      	b.n	8001af6 <advanceSnakeHead+0x5e>
        default:    break;
 8001af4:	bf00      	nop
    }
    gameGrid[snake.headX][snake.headY] = 1;
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <advanceSnakeHead+0x84>)
 8001afe:	885b      	ldrh	r3, [r3, #2]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <advanceSnakeHead+0x88>)
 8001b04:	0103      	lsls	r3, r0, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	440b      	add	r3, r1
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000210 	.word	0x20000210
 8001b20:	2000021c 	.word	0x2000021c

08001b24 <removeSnakeTail>:
void removeSnakeTail() {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
    uint16_t nextTailX = snake.tailX;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001b2c:	889b      	ldrh	r3, [r3, #4]
 8001b2e:	80fb      	strh	r3, [r7, #6]
    uint16_t nextTailY = snake.tailY;
 8001b30:	4b28      	ldr	r3, [pc, #160]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001b32:	88db      	ldrh	r3, [r3, #6]
 8001b34:	80bb      	strh	r3, [r7, #4]
    if (gameGrid[nextTailX - 1][nextTailY] == 1) {
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	4926      	ldr	r1, [pc, #152]	@ (8001bd8 <removeSnakeTail+0xb4>)
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	440a      	add	r2, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d103      	bne.n	8001b52 <removeSnakeTail+0x2e>
        nextTailX--;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	80fb      	strh	r3, [r7, #6]
 8001b50:	e028      	b.n	8001ba4 <removeSnakeTail+0x80>
    } else if (gameGrid[nextTailX + 1][nextTailY] == 1) {
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	491f      	ldr	r1, [pc, #124]	@ (8001bd8 <removeSnakeTail+0xb4>)
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	440a      	add	r2, r1
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d103      	bne.n	8001b6e <removeSnakeTail+0x4a>
        nextTailX++;
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	80fb      	strh	r3, [r7, #6]
 8001b6c:	e01a      	b.n	8001ba4 <removeSnakeTail+0x80>
    } else if (gameGrid[nextTailX][nextTailY - 1] == 1) {
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	4918      	ldr	r1, [pc, #96]	@ (8001bd8 <removeSnakeTail+0xb4>)
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	440a      	add	r2, r1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d103      	bne.n	8001b8a <removeSnakeTail+0x66>
        nextTailY--;
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	80bb      	strh	r3, [r7, #4]
 8001b88:	e00c      	b.n	8001ba4 <removeSnakeTail+0x80>
    } else if (gameGrid[nextTailX][nextTailY + 1] == 1) {
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4911      	ldr	r1, [pc, #68]	@ (8001bd8 <removeSnakeTail+0xb4>)
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	440a      	add	r2, r1
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <removeSnakeTail+0x80>
        nextTailY++;
 8001b9e:	88bb      	ldrh	r3, [r7, #4]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	80bb      	strh	r3, [r7, #4]
    }
    gameGrid[snake.tailX][snake.tailY] = 0;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001ba6:	889b      	ldrh	r3, [r3, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001bac:	88db      	ldrh	r3, [r3, #6]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <removeSnakeTail+0xb4>)
 8001bb2:	0103      	lsls	r3, r0, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    snake.tailX = nextTailX;
 8001bbc:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	8093      	strh	r3, [r2, #4]
    snake.tailY = nextTailY;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <removeSnakeTail+0xb0>)
 8001bc4:	88bb      	ldrh	r3, [r7, #4]
 8001bc6:	80d3      	strh	r3, [r2, #6]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	20000210 	.word	0x20000210
 8001bd8:	2000021c 	.word	0x2000021c

08001bdc <handleInput>:

void handleInput() {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
    if (isButtonLeft() && (snakeDirection == UP || snakeDirection == DOWN)) {
 8001be0:	f7ff fdc4 	bl	800176c <isButtonLeft>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <handleInput+0x26>
 8001bea:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <handleInput+0x90>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <handleInput+0x1e>
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <handleInput+0x90>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d103      	bne.n	8001c02 <handleInput+0x26>
        snakeDirection = LEFT;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <handleInput+0x90>)
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e032      	b.n	8001c68 <handleInput+0x8c>
    } else if (isButtonRight() && (snakeDirection == UP || snakeDirection == DOWN)) {
 8001c02:	f7ff fde1 	bl	80017c8 <isButtonRight>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00b      	beq.n	8001c24 <handleInput+0x48>
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <handleInput+0x90>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <handleInput+0x40>
 8001c14:	4b15      	ldr	r3, [pc, #84]	@ (8001c6c <handleInput+0x90>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d103      	bne.n	8001c24 <handleInput+0x48>
        snakeDirection = RIGHT;
 8001c1c:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <handleInput+0x90>)
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e021      	b.n	8001c68 <handleInput+0x8c>
    } else if (isButtonUp() && (snakeDirection == LEFT || snakeDirection == RIGHT)) {
 8001c24:	f7ff fd46 	bl	80016b4 <isButtonUp>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <handleInput+0x6a>
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <handleInput+0x90>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <handleInput+0x62>
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <handleInput+0x90>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d103      	bne.n	8001c46 <handleInput+0x6a>
        snakeDirection = UP;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <handleInput+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e010      	b.n	8001c68 <handleInput+0x8c>
    } else if (isButtonDown() && (snakeDirection == LEFT || snakeDirection == RIGHT)) {
 8001c46:	f7ff fd63 	bl	8001710 <isButtonDown>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <handleInput+0x8c>
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <handleInput+0x90>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <handleInput+0x84>
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <handleInput+0x90>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d103      	bne.n	8001c68 <handleInput+0x8c>
        snakeDirection = DOWN;
 8001c60:	4b02      	ldr	r3, [pc, #8]	@ (8001c6c <handleInput+0x90>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
    }
}
 8001c66:	e7ff      	b.n	8001c68 <handleInput+0x8c>
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000000 	.word	0x20000000

08001c70 <displayStartScreen>:


void displayStartScreen(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af04      	add	r7, sp, #16
    lcd_Fill(SCREEN_X, SCREEN_Y, SCREEN_X + SCREEN_SIZE, SCREEN_Y + SCREEN_SIZE, BLACK);
 8001c76:	2300      	movs	r3, #0
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	23c3      	movs	r3, #195	@ 0xc3
 8001c7c:	22c8      	movs	r2, #200	@ 0xc8
 8001c7e:	2123      	movs	r1, #35	@ 0x23
 8001c80:	2028      	movs	r0, #40	@ 0x28
 8001c82:	f000 fa4f 	bl	8002124 <lcd_Fill>
    lcd_ShowStr(SCREEN_X + 40, SCREEN_Y + 50, "START", GREEN, BLACK, 32, 1);
 8001c86:	2301      	movs	r3, #1
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c96:	4a04      	ldr	r2, [pc, #16]	@ (8001ca8 <displayStartScreen+0x38>)
 8001c98:	2155      	movs	r1, #85	@ 0x55
 8001c9a:	2050      	movs	r0, #80	@ 0x50
 8001c9c:	f000 fefa 	bl	8002a94 <lcd_ShowStr>
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	0800968c 	.word	0x0800968c

08001cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	@ 0x38
 8001cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
 8001cc6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	4b77      	ldr	r3, [pc, #476]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a76      	ldr	r2, [pc, #472]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b74      	ldr	r3, [pc, #464]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	4b69      	ldr	r3, [pc, #420]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a68      	ldr	r2, [pc, #416]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b66      	ldr	r3, [pc, #408]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b62      	ldr	r3, [pc, #392]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a61      	ldr	r2, [pc, #388]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a5a      	ldr	r2, [pc, #360]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b58      	ldr	r3, [pc, #352]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b54      	ldr	r3, [pc, #336]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a53      	ldr	r2, [pc, #332]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b51      	ldr	r3, [pc, #324]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <MX_GPIO_Init+0x214>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2170      	movs	r1, #112	@ 0x70
 8001da6:	4847      	ldr	r0, [pc, #284]	@ (8001ec4 <MX_GPIO_Init+0x218>)
 8001da8:	f003 fb92 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8001db2:	4845      	ldr	r0, [pc, #276]	@ (8001ec8 <MX_GPIO_Init+0x21c>)
 8001db4:	f003 fb8c 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001dbe:	4843      	ldr	r0, [pc, #268]	@ (8001ecc <MX_GPIO_Init+0x220>)
 8001dc0:	f003 fb86 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dca:	4841      	ldr	r0, [pc, #260]	@ (8001ed0 <MX_GPIO_Init+0x224>)
 8001dcc:	f003 fb80 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2108      	movs	r1, #8
 8001dd4:	483f      	ldr	r0, [pc, #252]	@ (8001ed4 <MX_GPIO_Init+0x228>)
 8001dd6:	f003 fb7b 	bl	80054d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001dda:	2370      	movs	r3, #112	@ 0x70
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2301      	movs	r3, #1
 8001de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	4834      	ldr	r0, [pc, #208]	@ (8001ec4 <MX_GPIO_Init+0x218>)
 8001df2:	f003 f9b9 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8001df6:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	482e      	ldr	r0, [pc, #184]	@ (8001ec8 <MX_GPIO_Init+0x21c>)
 8001e10:	f003 f9aa 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001e14:	23c0      	movs	r3, #192	@ 0xc0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	482a      	ldr	r0, [pc, #168]	@ (8001ed0 <MX_GPIO_Init+0x224>)
 8001e28:	f003 f99e 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001e2c:	2330      	movs	r3, #48	@ 0x30
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4822      	ldr	r0, [pc, #136]	@ (8001ec8 <MX_GPIO_Init+0x21c>)
 8001e40:	f003 f992 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001e44:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481b      	ldr	r0, [pc, #108]	@ (8001ecc <MX_GPIO_Init+0x220>)
 8001e5e:	f003 f983 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8001e62:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <MX_GPIO_Init+0x21c>)
 8001e78:	f003 f976 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <MX_GPIO_Init+0x224>)
 8001e96:	f003 f967 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4808      	ldr	r0, [pc, #32]	@ (8001ed4 <MX_GPIO_Init+0x228>)
 8001eb2:	f003 f959 	bl	8005168 <HAL_GPIO_Init>

}
 8001eb6:	bf00      	nop
 8001eb8:	3738      	adds	r7, #56	@ 0x38
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020c00 	.word	0x40020c00

08001ed8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <MX_I2C1_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <MX_I2C1_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f16:	f003 fb0f 	bl	8005538 <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f000 ff42 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	2000031c 	.word	0x2000031c
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	@ (8001fb8 <HAL_I2C_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12b      	bne.n	8001fae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a17      	ldr	r2, [pc, #92]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f72:	23c0      	movs	r3, #192	@ 0xc0
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f76:	2312      	movs	r3, #18
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f82:	2304      	movs	r3, #4
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 0314 	add.w	r3, r7, #20
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <HAL_I2C_MspInit+0x8c>)
 8001f8e:	f003 f8eb 	bl	8005168 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_I2C_MspInit+0x88>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	@ 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001fce:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <LCD_WR_REG+0x1c>)
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	8013      	strh	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	600ffffe 	.word	0x600ffffe

08001fe4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001fee:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <LCD_WR_DATA+0x1c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	8053      	strh	r3, [r2, #2]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	600ffffe 	.word	0x600ffffe

08002004 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800200a:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <LCD_RD_DATA+0x20>)
 800200c:	885b      	ldrh	r3, [r3, #2]
 800200e:	b29b      	uxth	r3, r3
 8002010:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	b29b      	uxth	r3, r3
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	600ffffe 	.word	0x600ffffe

08002028 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4604      	mov	r4, r0
 8002030:	4608      	mov	r0, r1
 8002032:	4611      	mov	r1, r2
 8002034:	461a      	mov	r2, r3
 8002036:	4623      	mov	r3, r4
 8002038:	80fb      	strh	r3, [r7, #6]
 800203a:	4603      	mov	r3, r0
 800203c:	80bb      	strh	r3, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]
 8002042:	4613      	mov	r3, r2
 8002044:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002046:	202a      	movs	r0, #42	@ 0x2a
 8002048:	f7ff ffbc 	bl	8001fc4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	b29b      	uxth	r3, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffc6 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffc0 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002064:	887b      	ldrh	r3, [r7, #2]
 8002066:	0a1b      	lsrs	r3, r3, #8
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffba 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ffb4 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800207c:	202b      	movs	r0, #43	@ 0x2b
 800207e:	f7ff ffa1 	bl	8001fc4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ffab 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800208e:	88bb      	ldrh	r3, [r7, #4]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ffa5 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800209a:	883b      	ldrh	r3, [r7, #0]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff9f 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80020a6:	883b      	ldrh	r3, [r7, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff99 	bl	8001fe4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80020b2:	202c      	movs	r0, #44	@ 0x2c
 80020b4:	f7ff ff86 	bl	8001fc4 <LCD_WR_REG>
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd90      	pop	{r4, r7, pc}

080020c0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <lcd_Clear+0x60>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <lcd_Clear+0x60>)
 80020d4:	885b      	ldrh	r3, [r3, #2]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2100      	movs	r1, #0
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff ffa3 	bl	8002028 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	81fb      	strh	r3, [r7, #14]
 80020e6:	e011      	b.n	800210c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	81bb      	strh	r3, [r7, #12]
 80020ec:	e006      	b.n	80020fc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff77 	bl	8001fe4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80020f6:	89bb      	ldrh	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	81bb      	strh	r3, [r7, #12]
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <lcd_Clear+0x60>)
 80020fe:	885b      	ldrh	r3, [r3, #2]
 8002100:	89ba      	ldrh	r2, [r7, #12]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3f3      	bcc.n	80020ee <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	3301      	adds	r3, #1
 800210a:	81fb      	strh	r3, [r7, #14]
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <lcd_Clear+0x60>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	89fa      	ldrh	r2, [r7, #14]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3e8      	bcc.n	80020e8 <lcd_Clear+0x28>
		}
	}
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000370 	.word	0x20000370

08002124 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	4611      	mov	r1, r2
 8002130:	461a      	mov	r2, r3
 8002132:	4623      	mov	r3, r4
 8002134:	80fb      	strh	r3, [r7, #6]
 8002136:	4603      	mov	r3, r0
 8002138:	80bb      	strh	r3, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
 800213e:	4613      	mov	r3, r2
 8002140:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	883b      	ldrh	r3, [r7, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	b29b      	uxth	r3, r3
 800214e:	88b9      	ldrh	r1, [r7, #4]
 8002150:	88f8      	ldrh	r0, [r7, #6]
 8002152:	f7ff ff69 	bl	8002028 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	81fb      	strh	r3, [r7, #14]
 800215a:	e010      	b.n	800217e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	81bb      	strh	r3, [r7, #12]
 8002160:	e006      	b.n	8002170 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002162:	8c3b      	ldrh	r3, [r7, #32]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff3d 	bl	8001fe4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800216a:	89bb      	ldrh	r3, [r7, #12]
 800216c:	3301      	adds	r3, #1
 800216e:	81bb      	strh	r3, [r7, #12]
 8002170:	89ba      	ldrh	r2, [r7, #12]
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3f4      	bcc.n	8002162 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	3301      	adds	r3, #1
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	89fa      	ldrh	r2, [r7, #14]
 8002180:	883b      	ldrh	r3, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3ea      	bcc.n	800215c <lcd_Fill+0x38>
		}
	}
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	460b      	mov	r3, r1
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80021a2:	88bb      	ldrh	r3, [r7, #4]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	88b9      	ldrh	r1, [r7, #4]
 80021a8:	88f8      	ldrh	r0, [r7, #6]
 80021aa:	f7ff ff3d 	bl	8002028 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff17 	bl	8001fe4 <LCD_WR_DATA>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80021be:	b590      	push	{r4, r7, lr}
 80021c0:	b08d      	sub	sp, #52	@ 0x34
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4604      	mov	r4, r0
 80021c6:	4608      	mov	r0, r1
 80021c8:	4611      	mov	r1, r2
 80021ca:	461a      	mov	r2, r3
 80021cc:	4623      	mov	r3, r4
 80021ce:	80fb      	strh	r3, [r7, #6]
 80021d0:	4603      	mov	r3, r0
 80021d2:	80bb      	strh	r3, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80021e4:	887a      	ldrh	r2, [r7, #2]
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80021ec:	883a      	ldrh	r2, [r7, #0]
 80021ee:	88bb      	ldrh	r3, [r7, #4]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80021f8:	88bb      	ldrh	r3, [r7, #4]
 80021fa:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	dd02      	ble.n	8002208 <lcd_DrawLine+0x4a>
 8002202:	2301      	movs	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e00b      	b.n	8002220 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <lcd_DrawLine+0x56>
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e005      	b.n	8002220 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	425b      	negs	r3, r3
 800221e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	dd02      	ble.n	800222c <lcd_DrawLine+0x6e>
 8002226:	2301      	movs	r3, #1
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	e00b      	b.n	8002244 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <lcd_DrawLine+0x7a>
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e005      	b.n	8002244 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	425b      	negs	r3, r3
 8002242:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	429a      	cmp	r2, r3
 800224a:	dd02      	ble.n	8002252 <lcd_DrawLine+0x94>
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e001      	b.n	8002256 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002256:	2300      	movs	r3, #0
 8002258:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800225a:	e02b      	b.n	80022b4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	b29b      	uxth	r3, r3
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	b291      	uxth	r1, r2
 8002264:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff91 	bl	8002190 <lcd_DrawPoint>
		xerr+=delta_x;
 800226e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	4413      	add	r3, r2
 8002274:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8002276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 800227e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	429a      	cmp	r2, r3
 8002284:	dd07      	ble.n	8002296 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	429a      	cmp	r2, r3
 800229c:	dd07      	ble.n	80022ae <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80022ae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022b0:	3301      	adds	r3, #1
 80022b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80022b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dacf      	bge.n	800225c <lcd_DrawLine+0x9e>
		}
	}
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3734      	adds	r7, #52	@ 0x34
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
	...

080022c8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	80fb      	strh	r3, [r7, #6]
 80022da:	4603      	mov	r3, r0
 80022dc:	80bb      	strh	r3, [r7, #4]
 80022de:	460b      	mov	r3, r1
 80022e0:	70fb      	strb	r3, [r7, #3]
 80022e2:	4613      	mov	r3, r2
 80022e4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80022ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	4413      	add	r3, r2
 8002312:	b29a      	uxth	r2, r3
 8002314:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002318:	b29b      	uxth	r3, r3
 800231a:	fb12 f303 	smulbb	r3, r2, r3
 800231e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	3b20      	subs	r3, #32
 8002324:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	b29a      	uxth	r2, r3
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4413      	add	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29c      	uxth	r4, r3
 8002334:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002338:	b29a      	uxth	r2, r3
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29b      	uxth	r3, r3
 8002344:	88b9      	ldrh	r1, [r7, #4]
 8002346:	88f8      	ldrh	r0, [r7, #6]
 8002348:	4622      	mov	r2, r4
 800234a:	f7ff fe6d 	bl	8002028 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800234e:	2300      	movs	r3, #0
 8002350:	827b      	strh	r3, [r7, #18]
 8002352:	e07a      	b.n	800244a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002354:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d028      	beq.n	80023ae <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800235c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002360:	2b10      	cmp	r3, #16
 8002362:	d108      	bne.n	8002376 <lcd_ShowChar+0xae>
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	8a7b      	ldrh	r3, [r7, #18]
 8002368:	493c      	ldr	r1, [pc, #240]	@ (800245c <lcd_ShowChar+0x194>)
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	440a      	add	r2, r1
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	e01b      	b.n	80023ae <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002376:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800237a:	2b18      	cmp	r3, #24
 800237c:	d10b      	bne.n	8002396 <lcd_ShowChar+0xce>
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	8a79      	ldrh	r1, [r7, #18]
 8002382:	4837      	ldr	r0, [pc, #220]	@ (8002460 <lcd_ShowChar+0x198>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4403      	add	r3, r0
 800238e:	440b      	add	r3, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	75fb      	strb	r3, [r7, #23]
 8002394:	e00b      	b.n	80023ae <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002396:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800239a:	2b20      	cmp	r3, #32
 800239c:	d15a      	bne.n	8002454 <lcd_ShowChar+0x18c>
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	8a7b      	ldrh	r3, [r7, #18]
 80023a2:	4930      	ldr	r1, [pc, #192]	@ (8002464 <lcd_ShowChar+0x19c>)
 80023a4:	0192      	lsls	r2, r2, #6
 80023a6:	440a      	add	r2, r1
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	75bb      	strb	r3, [r7, #22]
 80023b2:	e044      	b.n	800243e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80023b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d120      	bne.n	80023fe <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80023bc:	7dfa      	ldrb	r2, [r7, #23]
 80023be:	7dbb      	ldrb	r3, [r7, #22]
 80023c0:	fa42 f303 	asr.w	r3, r2, r3
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <lcd_ShowChar+0x10e>
 80023cc:	883b      	ldrh	r3, [r7, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe08 	bl	8001fe4 <LCD_WR_DATA>
 80023d4:	e003      	b.n	80023de <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80023d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe03 	bl	8001fe4 <LCD_WR_DATA>
				m++;
 80023de:	7d7b      	ldrb	r3, [r7, #21]
 80023e0:	3301      	adds	r3, #1
 80023e2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80023e4:	7d7b      	ldrb	r3, [r7, #21]
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ec:	fb01 f202 	mul.w	r2, r1, r2
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11f      	bne.n	8002438 <lcd_ShowChar+0x170>
				{
					m=0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	757b      	strb	r3, [r7, #21]
					break;
 80023fc:	e022      	b.n	8002444 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80023fe:	7dfa      	ldrb	r2, [r7, #23]
 8002400:	7dbb      	ldrb	r3, [r7, #22]
 8002402:	fa42 f303 	asr.w	r3, r2, r3
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <lcd_ShowChar+0x152>
 800240e:	883a      	ldrh	r2, [r7, #0]
 8002410:	88b9      	ldrh	r1, [r7, #4]
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff febb 	bl	8002190 <lcd_DrawPoint>
				x++;
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	3301      	adds	r3, #1
 800241e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	8a3b      	ldrh	r3, [r7, #16]
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	429a      	cmp	r2, r3
 800242a:	d105      	bne.n	8002438 <lcd_ShowChar+0x170>
				{
					x=x0;
 800242c:	8a3b      	ldrh	r3, [r7, #16]
 800242e:	80fb      	strh	r3, [r7, #6]
					y++;
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	80bb      	strh	r3, [r7, #4]
					break;
 8002436:	e005      	b.n	8002444 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002438:	7dbb      	ldrb	r3, [r7, #22]
 800243a:	3301      	adds	r3, #1
 800243c:	75bb      	strb	r3, [r7, #22]
 800243e:	7dbb      	ldrb	r3, [r7, #22]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d9b7      	bls.n	80023b4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002444:	8a7b      	ldrh	r3, [r7, #18]
 8002446:	3301      	adds	r3, #1
 8002448:	827b      	strh	r3, [r7, #18]
 800244a:	8a7a      	ldrh	r2, [r7, #18]
 800244c:	89bb      	ldrh	r3, [r7, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d380      	bcc.n	8002354 <lcd_ShowChar+0x8c>
 8002452:	e000      	b.n	8002456 <lcd_ShowChar+0x18e>
		else return;
 8002454:	bf00      	nop
				}
			}
		}
	}
}
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	08009774 	.word	0x08009774
 8002460:	08009d64 	.word	0x08009d64
 8002464:	0800af34 	.word	0x0800af34

08002468 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	460a      	mov	r2, r1
 8002472:	71fb      	strb	r3, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002478:	2301      	movs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800247c:	e004      	b.n	8002488 <mypow+0x20>
 800247e:	79fa      	ldrb	r2, [r7, #7]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	1e5a      	subs	r2, r3, #1
 800248c:	71ba      	strb	r2, [r7, #6]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f5      	bne.n	800247e <mypow+0x16>
	return result;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	4604      	mov	r4, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4623      	mov	r3, r4
 80024b0:	80fb      	strh	r3, [r7, #6]
 80024b2:	4603      	mov	r3, r0
 80024b4:	80bb      	strh	r3, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	807b      	strh	r3, [r7, #2]
 80024ba:	4613      	mov	r3, r2
 80024bc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80024be:	2300      	movs	r3, #0
 80024c0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80024c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e059      	b.n	8002584 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80024d0:	887c      	ldrh	r4, [r7, #2]
 80024d2:	787a      	ldrb	r2, [r7, #1]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4619      	mov	r1, r3
 80024e0:	200a      	movs	r0, #10
 80024e2:	f7ff ffc1 	bl	8002468 <mypow>
 80024e6:	4603      	mov	r3, r0
 80024e8:	fbb4 f1f3 	udiv	r1, r4, r3
 80024ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <lcd_ShowIntNum+0xf8>)
 80024ee:	fba3 2301 	umull	r2, r3, r3, r1
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	1aca      	subs	r2, r1, r3
 80024fe:	4613      	mov	r3, r2
 8002500:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d121      	bne.n	800254c <lcd_ShowIntNum+0xac>
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	787b      	ldrb	r3, [r7, #1]
 800250c:	3b01      	subs	r3, #1
 800250e:	429a      	cmp	r2, r3
 8002510:	da1c      	bge.n	800254c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002512:	7b3b      	ldrb	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d117      	bne.n	8002548 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002518:	7bfb      	ldrb	r3, [r7, #15]
 800251a:	b29a      	uxth	r2, r3
 800251c:	7b7b      	ldrb	r3, [r7, #13]
 800251e:	b29b      	uxth	r3, r3
 8002520:	fb12 f303 	smulbb	r3, r2, r3
 8002524:	b29a      	uxth	r2, r3
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	4413      	add	r3, r2
 800252a:	b298      	uxth	r0, r3
 800252c:	8c3a      	ldrh	r2, [r7, #32]
 800252e:	88b9      	ldrh	r1, [r7, #4]
 8002530:	2300      	movs	r3, #0
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	2220      	movs	r2, #32
 8002542:	f7ff fec1 	bl	80022c8 <lcd_ShowChar>
				continue;
 8002546:	e01a      	b.n	800257e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002548:	2301      	movs	r3, #1
 800254a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	b29a      	uxth	r2, r3
 8002550:	7b7b      	ldrb	r3, [r7, #13]
 8002552:	b29b      	uxth	r3, r3
 8002554:	fb12 f303 	smulbb	r3, r2, r3
 8002558:	b29a      	uxth	r2, r3
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4413      	add	r3, r2
 800255e:	b298      	uxth	r0, r3
 8002560:	7b3b      	ldrb	r3, [r7, #12]
 8002562:	3330      	adds	r3, #48	@ 0x30
 8002564:	b2da      	uxtb	r2, r3
 8002566:	8c3c      	ldrh	r4, [r7, #32]
 8002568:	88b9      	ldrh	r1, [r7, #4]
 800256a:	2300      	movs	r3, #0
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4623      	mov	r3, r4
 800257a:	f7ff fea5 	bl	80022c8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	3301      	adds	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	787b      	ldrb	r3, [r7, #1]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3a1      	bcc.n	80024d0 <lcd_ShowIntNum+0x30>
	}
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop
 8002598:	cccccccd 	.word	0xcccccccd

0800259c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <lcd_SetDir+0x44>)
 80025b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <lcd_SetDir+0x44>)
 80025c0:	22f0      	movs	r2, #240	@ 0xf0
 80025c2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80025c4:	e006      	b.n	80025d4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <lcd_SetDir+0x44>)
 80025c8:	22f0      	movs	r2, #240	@ 0xf0
 80025ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <lcd_SetDir+0x44>)
 80025ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80025d2:	805a      	strh	r2, [r3, #2]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000370 	.word	0x20000370

080025e4 <lcd_init>:


void lcd_init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80025e8:	2200      	movs	r2, #0
 80025ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ee:	48aa      	ldr	r0, [pc, #680]	@ (8002898 <lcd_init+0x2b4>)
 80025f0:	f002 ff6e 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80025f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025f8:	f001 ff34 	bl	8004464 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002602:	48a5      	ldr	r0, [pc, #660]	@ (8002898 <lcd_init+0x2b4>)
 8002604:	f002 ff64 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002608:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800260c:	f001 ff2a 	bl	8004464 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002610:	2000      	movs	r0, #0
 8002612:	f7ff ffc3 	bl	800259c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002616:	20d3      	movs	r0, #211	@ 0xd3
 8002618:	f7ff fcd4 	bl	8001fc4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800261c:	f7ff fcf2 	bl	8002004 <LCD_RD_DATA>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b9d      	ldr	r3, [pc, #628]	@ (800289c <lcd_init+0x2b8>)
 8002626:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002628:	f7ff fcec 	bl	8002004 <LCD_RD_DATA>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	4b9a      	ldr	r3, [pc, #616]	@ (800289c <lcd_init+0x2b8>)
 8002632:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002634:	f7ff fce6 	bl	8002004 <LCD_RD_DATA>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b97      	ldr	r3, [pc, #604]	@ (800289c <lcd_init+0x2b8>)
 800263e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002640:	4b96      	ldr	r3, [pc, #600]	@ (800289c <lcd_init+0x2b8>)
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b94      	ldr	r3, [pc, #592]	@ (800289c <lcd_init+0x2b8>)
 800264a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800264c:	f7ff fcda 	bl	8002004 <LCD_RD_DATA>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b91      	ldr	r3, [pc, #580]	@ (800289c <lcd_init+0x2b8>)
 8002656:	889b      	ldrh	r3, [r3, #4]
 8002658:	4313      	orrs	r3, r2
 800265a:	b29a      	uxth	r2, r3
 800265c:	4b8f      	ldr	r3, [pc, #572]	@ (800289c <lcd_init+0x2b8>)
 800265e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002660:	20cf      	movs	r0, #207	@ 0xcf
 8002662:	f7ff fcaf 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fcbc 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800266c:	20c1      	movs	r0, #193	@ 0xc1
 800266e:	f7ff fcb9 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002672:	2030      	movs	r0, #48	@ 0x30
 8002674:	f7ff fcb6 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002678:	20ed      	movs	r0, #237	@ 0xed
 800267a:	f7ff fca3 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800267e:	2064      	movs	r0, #100	@ 0x64
 8002680:	f7ff fcb0 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002684:	2003      	movs	r0, #3
 8002686:	f7ff fcad 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800268a:	2012      	movs	r0, #18
 800268c:	f7ff fcaa 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002690:	2081      	movs	r0, #129	@ 0x81
 8002692:	f7ff fca7 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002696:	20e8      	movs	r0, #232	@ 0xe8
 8002698:	f7ff fc94 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800269c:	2085      	movs	r0, #133	@ 0x85
 800269e:	f7ff fca1 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80026a2:	2010      	movs	r0, #16
 80026a4:	f7ff fc9e 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80026a8:	207a      	movs	r0, #122	@ 0x7a
 80026aa:	f7ff fc9b 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80026ae:	20cb      	movs	r0, #203	@ 0xcb
 80026b0:	f7ff fc88 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80026b4:	2039      	movs	r0, #57	@ 0x39
 80026b6:	f7ff fc95 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80026ba:	202c      	movs	r0, #44	@ 0x2c
 80026bc:	f7ff fc92 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff fc8f 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80026c6:	2034      	movs	r0, #52	@ 0x34
 80026c8:	f7ff fc8c 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80026cc:	2002      	movs	r0, #2
 80026ce:	f7ff fc89 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80026d2:	20f7      	movs	r0, #247	@ 0xf7
 80026d4:	f7ff fc76 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80026d8:	2020      	movs	r0, #32
 80026da:	f7ff fc83 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80026de:	20ea      	movs	r0, #234	@ 0xea
 80026e0:	f7ff fc70 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7ff fc7d 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7ff fc7a 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80026f0:	20c0      	movs	r0, #192	@ 0xc0
 80026f2:	f7ff fc67 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80026f6:	201b      	movs	r0, #27
 80026f8:	f7ff fc74 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80026fc:	20c1      	movs	r0, #193	@ 0xc1
 80026fe:	f7ff fc61 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fc6e 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002708:	20c5      	movs	r0, #197	@ 0xc5
 800270a:	f7ff fc5b 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800270e:	2030      	movs	r0, #48	@ 0x30
 8002710:	f7ff fc68 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002714:	2030      	movs	r0, #48	@ 0x30
 8002716:	f7ff fc65 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800271a:	20c7      	movs	r0, #199	@ 0xc7
 800271c:	f7ff fc52 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002720:	20b7      	movs	r0, #183	@ 0xb7
 8002722:	f7ff fc5f 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002726:	2036      	movs	r0, #54	@ 0x36
 8002728:	f7ff fc4c 	bl	8001fc4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800272c:	2008      	movs	r0, #8
 800272e:	f7ff fc59 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002732:	203a      	movs	r0, #58	@ 0x3a
 8002734:	f7ff fc46 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002738:	2055      	movs	r0, #85	@ 0x55
 800273a:	f7ff fc53 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800273e:	20b1      	movs	r0, #177	@ 0xb1
 8002740:	f7ff fc40 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7ff fc4d 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800274a:	201a      	movs	r0, #26
 800274c:	f7ff fc4a 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002750:	20b6      	movs	r0, #182	@ 0xb6
 8002752:	f7ff fc37 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002756:	200a      	movs	r0, #10
 8002758:	f7ff fc44 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800275c:	20a2      	movs	r0, #162	@ 0xa2
 800275e:	f7ff fc41 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002762:	20f2      	movs	r0, #242	@ 0xf2
 8002764:	f7ff fc2e 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fc3b 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800276e:	2026      	movs	r0, #38	@ 0x26
 8002770:	f7ff fc28 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fc35 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800277a:	20e0      	movs	r0, #224	@ 0xe0
 800277c:	f7ff fc22 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002780:	200f      	movs	r0, #15
 8002782:	f7ff fc2f 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002786:	202a      	movs	r0, #42	@ 0x2a
 8002788:	f7ff fc2c 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800278c:	2028      	movs	r0, #40	@ 0x28
 800278e:	f7ff fc29 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002792:	2008      	movs	r0, #8
 8002794:	f7ff fc26 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002798:	200e      	movs	r0, #14
 800279a:	f7ff fc23 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800279e:	2008      	movs	r0, #8
 80027a0:	f7ff fc20 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80027a4:	2054      	movs	r0, #84	@ 0x54
 80027a6:	f7ff fc1d 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80027aa:	20a9      	movs	r0, #169	@ 0xa9
 80027ac:	f7ff fc1a 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80027b0:	2043      	movs	r0, #67	@ 0x43
 80027b2:	f7ff fc17 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80027b6:	200a      	movs	r0, #10
 80027b8:	f7ff fc14 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80027bc:	200f      	movs	r0, #15
 80027be:	f7ff fc11 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7ff fc0e 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff fc0b 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7ff fc08 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fc05 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80027da:	20e1      	movs	r0, #225	@ 0xe1
 80027dc:	f7ff fbf2 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7ff fbff 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80027e6:	2015      	movs	r0, #21
 80027e8:	f7ff fbfc 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80027ec:	2017      	movs	r0, #23
 80027ee:	f7ff fbf9 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80027f2:	2007      	movs	r0, #7
 80027f4:	f7ff fbf6 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80027f8:	2011      	movs	r0, #17
 80027fa:	f7ff fbf3 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80027fe:	2006      	movs	r0, #6
 8002800:	f7ff fbf0 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002804:	202b      	movs	r0, #43	@ 0x2b
 8002806:	f7ff fbed 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800280a:	2056      	movs	r0, #86	@ 0x56
 800280c:	f7ff fbea 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002810:	203c      	movs	r0, #60	@ 0x3c
 8002812:	f7ff fbe7 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002816:	2005      	movs	r0, #5
 8002818:	f7ff fbe4 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800281c:	2010      	movs	r0, #16
 800281e:	f7ff fbe1 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002822:	200f      	movs	r0, #15
 8002824:	f7ff fbde 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002828:	203f      	movs	r0, #63	@ 0x3f
 800282a:	f7ff fbdb 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800282e:	203f      	movs	r0, #63	@ 0x3f
 8002830:	f7ff fbd8 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002834:	200f      	movs	r0, #15
 8002836:	f7ff fbd5 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800283a:	202b      	movs	r0, #43	@ 0x2b
 800283c:	f7ff fbc2 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fbcf 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fbcc 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800284c:	2001      	movs	r0, #1
 800284e:	f7ff fbc9 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002852:	203f      	movs	r0, #63	@ 0x3f
 8002854:	f7ff fbc6 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002858:	202a      	movs	r0, #42	@ 0x2a
 800285a:	f7ff fbb3 	bl	8001fc4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff fbc0 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fbbd 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800286a:	2000      	movs	r0, #0
 800286c:	f7ff fbba 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002870:	20ef      	movs	r0, #239	@ 0xef
 8002872:	f7ff fbb7 	bl	8001fe4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002876:	2011      	movs	r0, #17
 8002878:	f7ff fba4 	bl	8001fc4 <LCD_WR_REG>
	HAL_Delay(120);
 800287c:	2078      	movs	r0, #120	@ 0x78
 800287e:	f001 fdf1 	bl	8004464 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002882:	2029      	movs	r0, #41	@ 0x29
 8002884:	f7ff fb9e 	bl	8001fc4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800288e:	4804      	ldr	r0, [pc, #16]	@ (80028a0 <lcd_init+0x2bc>)
 8002890:	f002 fe1e 	bl	80054d0 <HAL_GPIO_WritePin>
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40020800 	.word	0x40020800
 800289c:	20000370 	.word	0x20000370
 80028a0:	40020000 	.word	0x40020000

080028a4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	b298      	uxth	r0, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8b3a      	ldrh	r2, [r7, #24]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7ff fc5f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	b298      	uxth	r0, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	8b3a      	ldrh	r2, [r7, #24]
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7ff fc4f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	b298      	uxth	r0, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	b29a      	uxth	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	b29b      	uxth	r3, r3
 800290a:	8b3a      	ldrh	r2, [r7, #24]
 800290c:	4619      	mov	r1, r3
 800290e:	f7ff fc3f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	b29a      	uxth	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b29b      	uxth	r3, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	b298      	uxth	r0, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	b29a      	uxth	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b29b      	uxth	r3, r3
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	b29b      	uxth	r3, r3
 800292a:	8b3a      	ldrh	r2, [r7, #24]
 800292c:	4619      	mov	r1, r3
 800292e:	f7ff fc2f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b29a      	uxth	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	4413      	add	r3, r2
 800293c:	b298      	uxth	r0, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	4413      	add	r3, r2
 8002948:	b29b      	uxth	r3, r3
 800294a:	8b3a      	ldrh	r2, [r7, #24]
 800294c:	4619      	mov	r1, r3
 800294e:	f7ff fc1f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b29a      	uxth	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b298      	uxth	r0, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	b29b      	uxth	r3, r3
 8002966:	4413      	add	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	8b3a      	ldrh	r2, [r7, #24]
 800296c:	4619      	mov	r1, r3
 800296e:	f7ff fc0f 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	b29a      	uxth	r2, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4413      	add	r3, r2
 800297c:	b298      	uxth	r0, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	b29b      	uxth	r3, r3
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	b29b      	uxth	r3, r3
 800298a:	8b3a      	ldrh	r2, [r7, #24]
 800298c:	4619      	mov	r1, r3
 800298e:	f7ff fbff 	bl	8002190 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	b29a      	uxth	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	b298      	uxth	r0, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	8b3a      	ldrh	r2, [r7, #24]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7ff fbef 	bl	8002190 <lcd_DrawPoint>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	@ 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	f1c3 0303 	rsb	r3, r3, #3
 80029da:	613b      	str	r3, [r7, #16]


	if (fill)
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04f      	beq.n	8002a82 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80029e2:	e029      	b.n	8002a38 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e00a      	b.n	8002a00 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	69fa      	ldr	r2, [r7, #28]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff ff55 	bl	80028a4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	ddf0      	ble.n	80029ea <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da06      	bge.n	8002a1c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	3306      	adds	r3, #6
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	e00a      	b.n	8002a32 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4413      	add	r3, r2
 8002a28:	330a      	adds	r3, #10
 8002a2a:	613b      	str	r3, [r7, #16]
				y--;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	ddd1      	ble.n	80029e4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002a40:	e023      	b.n	8002a8a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f7ff ff29 	bl	80028a4 <_draw_circle_8>
			if (d < 0) {
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da06      	bge.n	8002a66 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3306      	adds	r3, #6
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e00a      	b.n	8002a7c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	009a      	lsls	r2, r3, #2
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	330a      	adds	r3, #10
 8002a74:	613b      	str	r3, [r7, #16]
				y--;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
			x++;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dddb      	ble.n	8002a42 <lcd_DrawCircle+0x88>
}
 8002a8a:	bf00      	nop
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b08b      	sub	sp, #44	@ 0x2c
 8002a98:	af04      	add	r7, sp, #16
 8002a9a:	60ba      	str	r2, [r7, #8]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	81fb      	strh	r3, [r7, #14]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	81bb      	strh	r3, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002ab2:	e048      	b.n	8002b46 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d145      	bne.n	8002b46 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002aba:	89fa      	ldrh	r2, [r7, #14]
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <lcd_ShowStr+0xc4>)
 8002abe:	881b      	ldrh	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	429a      	cmp	r2, r3
 8002ace:	dc3f      	bgt.n	8002b50 <lcd_ShowStr+0xbc>
 8002ad0:	89ba      	ldrh	r2, [r7, #12]
 8002ad2:	4b21      	ldr	r3, [pc, #132]	@ (8002b58 <lcd_ShowStr+0xc4>)
 8002ad4:	885b      	ldrh	r3, [r3, #2]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002adc:	1acb      	subs	r3, r1, r3
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dc36      	bgt.n	8002b50 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b80      	cmp	r3, #128	@ 0x80
 8002ae8:	d902      	bls.n	8002af0 <lcd_ShowStr+0x5c>
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
 8002aee:	e02a      	b.n	8002b46 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b0d      	cmp	r3, #13
 8002af6:	d10b      	bne.n	8002b10 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002af8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	89bb      	ldrh	r3, [r7, #12]
 8002b00:	4413      	add	r3, r2
 8002b02:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002b04:	8abb      	ldrh	r3, [r7, #20]
 8002b06:	81fb      	strh	r3, [r7, #14]
					str++;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	e017      	b.n	8002b40 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781a      	ldrb	r2, [r3, #0]
 8002b14:	88fc      	ldrh	r4, [r7, #6]
 8002b16:	89b9      	ldrh	r1, [r7, #12]
 8002b18:	89f8      	ldrh	r0, [r7, #14]
 8002b1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b1e:	9302      	str	r3, [sp, #8]
 8002b20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	f7ff fbcc 	bl	80022c8 <lcd_ShowChar>
					x+=sizey/2;
 8002b30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	89fb      	ldrh	r3, [r7, #14]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1b2      	bne.n	8002ab4 <lcd_ShowStr+0x20>
 8002b4e:	e000      	b.n	8002b52 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002b50:	bf00      	nop
			}
		}
	}
}
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd90      	pop	{r4, r7, pc}
 8002b58:	20000370 	.word	0x20000370

08002b5c <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002b60:	4b3f      	ldr	r3, [pc, #252]	@ (8002c60 <led7_Scan+0x104>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <led7_Scan+0x104>)
 8002b6a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <led7_Scan+0x108>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3d      	ldr	r2, [pc, #244]	@ (8002c68 <led7_Scan+0x10c>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	b21a      	sxth	r2, r3
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <led7_Scan+0x104>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b21b      	sxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b21b      	sxth	r3, r3
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <led7_Scan+0x104>)
 8002b86:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <led7_Scan+0x108>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d847      	bhi.n	8002c20 <led7_Scan+0xc4>
 8002b90:	a201      	add	r2, pc, #4	@ (adr r2, 8002b98 <led7_Scan+0x3c>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bc7 	.word	0x08002bc7
 8002ba0:	08002be5 	.word	0x08002be5
 8002ba4:	08002c03 	.word	0x08002c03
	case 0:
		spi_buffer |= 0x00b0;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <led7_Scan+0x104>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <led7_Scan+0x104>)
 8002bb4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <led7_Scan+0x104>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <led7_Scan+0x104>)
 8002bc2:	801a      	strh	r2, [r3, #0]
		break;
 8002bc4:	e02d      	b.n	8002c22 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002bc6:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <led7_Scan+0x104>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <led7_Scan+0x104>)
 8002bd2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002bd4:	4b22      	ldr	r3, [pc, #136]	@ (8002c60 <led7_Scan+0x104>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	f023 0320 	bic.w	r3, r3, #32
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <led7_Scan+0x104>)
 8002be0:	801a      	strh	r2, [r3, #0]
		break;
 8002be2:	e01e      	b.n	8002c22 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <led7_Scan+0x104>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <led7_Scan+0x104>)
 8002bf0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <led7_Scan+0x104>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <led7_Scan+0x104>)
 8002bfe:	801a      	strh	r2, [r3, #0]
		break;
 8002c00:	e00f      	b.n	8002c22 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <led7_Scan+0x104>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <led7_Scan+0x104>)
 8002c0e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8002c10:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <led7_Scan+0x104>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <led7_Scan+0x104>)
 8002c1c:	801a      	strh	r2, [r3, #0]
		break;
 8002c1e:	e000      	b.n	8002c22 <led7_Scan+0xc6>
	default:
		break;
 8002c20:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <led7_Scan+0x108>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	425a      	negs	r2, r3
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	bf58      	it	pl
 8002c34:	4253      	negpl	r3, r2
 8002c36:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <led7_Scan+0x108>)
 8002c38:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2140      	movs	r1, #64	@ 0x40
 8002c3e:	480b      	ldr	r0, [pc, #44]	@ (8002c6c <led7_Scan+0x110>)
 8002c40:	f002 fc46 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002c44:	2301      	movs	r3, #1
 8002c46:	2202      	movs	r2, #2
 8002c48:	4905      	ldr	r1, [pc, #20]	@ (8002c60 <led7_Scan+0x104>)
 8002c4a:	4809      	ldr	r0, [pc, #36]	@ (8002c70 <led7_Scan+0x114>)
 8002c4c:	f004 f941 	bl	8006ed2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002c50:	2201      	movs	r2, #1
 8002c52:	2140      	movs	r1, #64	@ 0x40
 8002c54:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <led7_Scan+0x110>)
 8002c56:	f002 fc3b 	bl	80054d0 <HAL_GPIO_WritePin>
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000008 	.word	0x20000008
 8002c64:	20000378 	.word	0x20000378
 8002c68:	20000004 	.word	0x20000004
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	20000394 	.word	0x20000394

08002c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c78:	f001 fb82 	bl	8004380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c7c:	f000 f81e 	bl	8002cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c80:	f7ff f814 	bl	8001cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c84:	f000 fb52 	bl	800332c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002c88:	f000 f93e 	bl	8002f08 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002c8c:	f7fe fae0 	bl	8001250 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002c90:	f7ff f922 	bl	8001ed8 <MX_I2C1_Init>
  MX_TIM13_Init();
 8002c94:	f000 fb96 	bl	80033c4 <MX_TIM13_Init>
  MX_DMA_Init();
 8002c98:	f7fe faba 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 8002c9c:	f7fe f8ec 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002ca0:	f000 faf4 	bl	800328c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002ca4:	f000 f874 	bl	8002d90 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(WHITE);
 8002ca8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002cac:	f7ff fa08 	bl	80020c0 <lcd_Clear>
 while (1)
  {
	  //scan touch screen
	  touch_Scan();
 8002cb0:	f001 fb08 	bl	80042c4 <touch_Scan>

	  gameFSM();
 8002cb4:	f7fe fb9c 	bl	80013f0 <gameFSM>
	  touch_Scan();
 8002cb8:	bf00      	nop
 8002cba:	e7f9      	b.n	8002cb0 <main+0x3c>

08002cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b094      	sub	sp, #80	@ 0x50
 8002cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc2:	f107 0320 	add.w	r3, r7, #32
 8002cc6:	2230      	movs	r2, #48	@ 0x30
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f005 fd15 	bl	80086fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <SystemClock_Config+0xcc>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce8:	4a27      	ldr	r2, [pc, #156]	@ (8002d88 <SystemClock_Config+0xcc>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf0:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <SystemClock_Config+0xcc>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <SystemClock_Config+0xd0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a21      	ldr	r2, [pc, #132]	@ (8002d8c <SystemClock_Config+0xd0>)
 8002d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <SystemClock_Config+0xd0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d20:	2310      	movs	r3, #16
 8002d22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d30:	23a8      	movs	r3, #168	@ 0xa8
 8002d32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d34:	2302      	movs	r3, #2
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d3c:	f107 0320 	add.w	r3, r7, #32
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fbb9 	bl	80064b8 <HAL_RCC_OscConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d4c:	f000 f82c 	bl	8002da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d50:	230f      	movs	r3, #15
 8002d52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d54:	2302      	movs	r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002d62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d68:	f107 030c 	add.w	r3, r7, #12
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fe1a 	bl	80069a8 <HAL_RCC_ClockConfig>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d7a:	f000 f815 	bl	8002da8 <Error_Handler>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	3750      	adds	r7, #80	@ 0x50
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000

08002d90 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	  timer_init();
 8002d94:	f000 f80e 	bl	8002db4 <timer_init>
	  button_init();
 8002d98:	f7fe fa2e 	bl	80011f8 <button_init>
	  lcd_init();
 8002d9c:	f7ff fc22 	bl	80025e4 <lcd_init>
	  touch_init();
 8002da0:	f001 fa80 	bl	80042a4 <touch_init>
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dac:	b672      	cpsid	i
}
 8002dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <Error_Handler+0x8>

08002db4 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002db8:	4803      	ldr	r0, [pc, #12]	@ (8002dc8 <timer_init+0x14>)
 8002dba:	f004 fb8d 	bl	80074d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8002dbe:	4803      	ldr	r0, [pc, #12]	@ (8002dcc <timer_init+0x18>)
 8002dc0:	f004 fb22 	bl	8007408 <HAL_TIM_Base_Start>
}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000438 	.word	0x20000438
 8002dcc:	200003f0 	.word	0x200003f0

08002dd0 <setTimer_snake>:
void setTimer2(uint16_t duration){
	timer2_MUL = duration/TIMER_CYCLE_2;
	timer2_counter = timer2_MUL;
	flag_timer2 = 0;
}
void setTimer_snake(uint16_t duration){
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
	int timer_snake_MUL = duration/TIMER_CYCLE_2;
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	60fb      	str	r3, [r7, #12]
	snake_move_counter = timer_snake_MUL;
 8002dde:	4a06      	ldr	r2, [pc, #24]	@ (8002df8 <setTimer_snake+0x28>)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6013      	str	r3, [r2, #0]
	snake_move_flag = 0;
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <setTimer_snake+0x2c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000384 	.word	0x20000384
 8002dfc:	2000037c 	.word	0x2000037c

08002e00 <setTimer_button>:
void setTimer_button(uint16_t duration){
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
	int timer_button_MUL = duration/TIMER_CYCLE_2;
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	60fb      	str	r3, [r7, #12]
	button_read_counter = timer_button_MUL;
 8002e0e:	4a06      	ldr	r2, [pc, #24]	@ (8002e28 <setTimer_button+0x28>)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6013      	str	r3, [r2, #0]
	button_read_flag = 0;
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <setTimer_button+0x2c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000388 	.word	0x20000388
 8002e2c:	20000380 	.word	0x20000380

08002e30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d136      	bne.n	8002eb0 <HAL_TIM_PeriodElapsedCallback+0x80>
		if(timer2_counter > 0){
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e54:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002e56:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002e64:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002e6a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(button_read_counter > 0){
 8002e6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	dd0b      	ble.n	8002e8c <HAL_TIM_PeriodElapsedCallback+0x5c>
			button_read_counter--;
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e7c:	6013      	str	r3, [r2, #0]
			if(button_read_counter == 0) {
 8002e7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <HAL_TIM_PeriodElapsedCallback+0x5c>
				button_read_flag = 1;
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
			}
		}
		if(snake_move_counter > 0){
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dd0b      	ble.n	8002eac <HAL_TIM_PeriodElapsedCallback+0x7c>
			snake_move_counter--;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002e9c:	6013      	str	r3, [r2, #0]
			if(snake_move_counter == 0) {
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d102      	bne.n	8002eac <HAL_TIM_PeriodElapsedCallback+0x7c>
				snake_move_flag = 1;
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002eac:	f7ff fe56 	bl	8002b5c <led7_Scan>
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000038e 	.word	0x2000038e
 8002ebc:	2000038c 	.word	0x2000038c
 8002ec0:	20000390 	.word	0x20000390
 8002ec4:	20000388 	.word	0x20000388
 8002ec8:	20000380 	.word	0x20000380
 8002ecc:	20000384 	.word	0x20000384
 8002ed0:	2000037c 	.word	0x2000037c

08002ed4 <delay_us>:

void delay_us (uint16_t us)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002ede:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <delay_us+0x30>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8002ee6:	bf00      	nop
 8002ee8:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <delay_us+0x30>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3f9      	bcc.n	8002ee8 <delay_us+0x14>
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	200003f0 	.word	0x200003f0

08002f08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f0e:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <MX_SPI1_Init+0x68>)
 8002f10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f12:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f1a:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f26:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f40:	4b0a      	ldr	r3, [pc, #40]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f52:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f54:	220a      	movs	r2, #10
 8002f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f58:	4804      	ldr	r0, [pc, #16]	@ (8002f6c <MX_SPI1_Init+0x64>)
 8002f5a:	f003 ff31 	bl	8006dc0 <HAL_SPI_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f64:	f7ff ff20 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000394 	.word	0x20000394
 8002f70:	40013000 	.word	0x40013000

08002f74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_SPI_MspInit+0x84>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d12b      	bne.n	8002fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	4a17      	ldr	r2, [pc, #92]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <HAL_SPI_MspInit+0x88>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002fce:	2338      	movs	r3, #56	@ 0x38
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	@ (8003000 <HAL_SPI_MspInit+0x8c>)
 8002fea:	f002 f8bd 	bl	8005168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	@ 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020400 	.word	0x40020400

08003004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_MspInit+0x4c>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4a0f      	ldr	r2, [pc, #60]	@ (8003050 <HAL_MspInit+0x4c>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003018:	6453      	str	r3, [r2, #68]	@ 0x44
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_MspInit+0x4c>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_MspInit+0x4c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	4a08      	ldr	r2, [pc, #32]	@ (8003050 <HAL_MspInit+0x4c>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	@ 0x40
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_MspInit+0x4c>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <NMI_Handler+0x4>

0800305c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <HardFault_Handler+0x4>

08003064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <MemManage_Handler+0x4>

0800306c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <UsageFault_Handler+0x4>

0800307c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030aa:	f001 f9bb 	bl	8004424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <TIM2_IRQHandler+0x10>)
 80030ba:	f004 fad6 	bl	800766a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000438 	.word	0x20000438

080030c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <DMA2_Stream0_IRQHandler+0x10>)
 80030ce:	f001 fe0f 	bl	8004cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000124 	.word	0x20000124

080030dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
	return 1;
 80030e0:	2301      	movs	r3, #1
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_kill>:

int _kill(int pid, int sig)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030f6:	f005 fb4f 	bl	8008798 <__errno>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2216      	movs	r2, #22
 80030fe:	601a      	str	r2, [r3, #0]
	return -1;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_exit>:

void _exit (int status)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003114:	f04f 31ff 	mov.w	r1, #4294967295
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff ffe7 	bl	80030ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800311e:	bf00      	nop
 8003120:	e7fd      	b.n	800311e <_exit+0x12>

08003122 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e00a      	b.n	800314a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003134:	f3af 8000 	nop.w
 8003138:	4601      	mov	r1, r0
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	60ba      	str	r2, [r7, #8]
 8003140:	b2ca      	uxtb	r2, r1
 8003142:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	dbf0      	blt.n	8003134 <_read+0x12>
	}

return len;
 8003152:	687b      	ldr	r3, [r7, #4]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	e009      	b.n	8003182 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	60ba      	str	r2, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	dbf1      	blt.n	800316e <_write+0x12>
	}
	return len;
 800318a:	687b      	ldr	r3, [r7, #4]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_close>:

int _close(int file)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	return -1;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031bc:	605a      	str	r2, [r3, #4]
	return 0;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_isatty>:

int _isatty(int file)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	return 1;
 80031d4:	2301      	movs	r3, #1
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
	return 0;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <_sbrk+0x5c>)
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <_sbrk+0x60>)
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <_sbrk+0x64>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003218:	4b11      	ldr	r3, [pc, #68]	@ (8003260 <_sbrk+0x64>)
 800321a:	4a12      	ldr	r2, [pc, #72]	@ (8003264 <_sbrk+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <_sbrk+0x64>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d207      	bcs.n	800323c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800322c:	f005 fab4 	bl	8008798 <__errno>
 8003230:	4603      	mov	r3, r0
 8003232:	220c      	movs	r2, #12
 8003234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	e009      	b.n	8003250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <_sbrk+0x64>)
 800324c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20020000 	.word	0x20020000
 800325c:	00000400 	.word	0x00000400
 8003260:	200003ec 	.word	0x200003ec
 8003264:	20000618 	.word	0x20000618

08003268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <SystemInit+0x20>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003272:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <SystemInit+0x20>)
 8003274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	463b      	mov	r3, r7
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <MX_TIM1_Init+0x9c>)
 80032ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80032ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032b0:	2253      	movs	r2, #83	@ 0x53
 80032b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80032ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032c8:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ce:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032d4:	4813      	ldr	r0, [pc, #76]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032d6:	f004 f847 	bl	8007368 <HAL_TIM_Base_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80032e0:	f7ff fd62 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032ea:	f107 0308 	add.w	r3, r7, #8
 80032ee:	4619      	mov	r1, r3
 80032f0:	480c      	ldr	r0, [pc, #48]	@ (8003324 <MX_TIM1_Init+0x98>)
 80032f2:	f004 fb85 	bl	8007a00 <HAL_TIM_ConfigClockSource>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80032fc:	f7ff fd54 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003308:	463b      	mov	r3, r7
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_TIM1_Init+0x98>)
 800330e:	f004 ff51 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003318:	f7ff fd46 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800331c:	bf00      	nop
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200003f0 	.word	0x200003f0
 8003328:	40010000 	.word	0x40010000

0800332c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003340:	463b      	mov	r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <MX_TIM2_Init+0x94>)
 800334a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800334e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003350:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <MX_TIM2_Init+0x94>)
 8003352:	f240 3247 	movw	r2, #839	@ 0x347
 8003356:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <MX_TIM2_Init+0x94>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800335e:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <MX_TIM2_Init+0x94>)
 8003360:	2263      	movs	r2, #99	@ 0x63
 8003362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <MX_TIM2_Init+0x94>)
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <MX_TIM2_Init+0x94>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003370:	4813      	ldr	r0, [pc, #76]	@ (80033c0 <MX_TIM2_Init+0x94>)
 8003372:	f003 fff9 	bl	8007368 <HAL_TIM_Base_Init>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800337c:	f7ff fd14 	bl	8002da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003386:	f107 0308 	add.w	r3, r7, #8
 800338a:	4619      	mov	r1, r3
 800338c:	480c      	ldr	r0, [pc, #48]	@ (80033c0 <MX_TIM2_Init+0x94>)
 800338e:	f004 fb37 	bl	8007a00 <HAL_TIM_ConfigClockSource>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003398:	f7ff fd06 	bl	8002da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339c:	2300      	movs	r3, #0
 800339e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033a4:	463b      	mov	r3, r7
 80033a6:	4619      	mov	r1, r3
 80033a8:	4805      	ldr	r0, [pc, #20]	@ (80033c0 <MX_TIM2_Init+0x94>)
 80033aa:	f004 ff03 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80033b4:	f7ff fcf8 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000438 	.word	0x20000438

080033c4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	615a      	str	r2, [r3, #20]
 80033da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033de:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <MX_TIM13_Init+0x98>)
 80033e0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80033e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033e4:	f240 3247 	movw	r2, #839	@ 0x347
 80033e8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033f2:	2263      	movs	r2, #99	@ 0x63
 80033f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033fc:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <MX_TIM13_Init+0x94>)
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003402:	4815      	ldr	r0, [pc, #84]	@ (8003458 <MX_TIM13_Init+0x94>)
 8003404:	f003 ffb0 	bl	8007368 <HAL_TIM_Base_Init>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800340e:	f7ff fccb 	bl	8002da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003412:	4811      	ldr	r0, [pc, #68]	@ (8003458 <MX_TIM13_Init+0x94>)
 8003414:	f004 f8d0 	bl	80075b8 <HAL_TIM_PWM_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800341e:	f7ff fcc3 	bl	8002da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003422:	2360      	movs	r3, #96	@ 0x60
 8003424:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2200      	movs	r2, #0
 8003436:	4619      	mov	r1, r3
 8003438:	4807      	ldr	r0, [pc, #28]	@ (8003458 <MX_TIM13_Init+0x94>)
 800343a:	f004 fa1f 	bl	800787c <HAL_TIM_PWM_ConfigChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003444:	f7ff fcb0 	bl	8002da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003448:	4803      	ldr	r0, [pc, #12]	@ (8003458 <MX_TIM13_Init+0x94>)
 800344a:	f000 f85b 	bl	8003504 <HAL_TIM_MspPostInit>

}
 800344e:	bf00      	nop
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000480 	.word	0x20000480
 800345c:	40001c00 	.word	0x40001c00

08003460 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a22      	ldr	r2, [pc, #136]	@ (80034f8 <HAL_TIM_Base_MspInit+0x98>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	4a20      	ldr	r2, [pc, #128]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6453      	str	r3, [r2, #68]	@ 0x44
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800348e:	e02e      	b.n	80034ee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003498:	d116      	bne.n	80034c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	4a16      	ldr	r2, [pc, #88]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034aa:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	201c      	movs	r0, #28
 80034bc:	f001 fb33 	bl	8004b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c0:	201c      	movs	r0, #28
 80034c2:	f001 fb4c 	bl	8004b5e <HAL_NVIC_EnableIRQ>
}
 80034c6:	e012      	b.n	80034ee <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003500 <HAL_TIM_Base_MspInit+0xa0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10d      	bne.n	80034ee <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	4a08      	ldr	r2, [pc, #32]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e2:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_TIM_Base_MspInit+0x9c>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40023800 	.word	0x40023800
 8003500:	40001c00 	.word	0x40001c00

08003504 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a12      	ldr	r2, [pc, #72]	@ (800356c <HAL_TIM_MspPostInit+0x68>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d11e      	bne.n	8003564 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	4b11      	ldr	r3, [pc, #68]	@ (8003570 <HAL_TIM_MspPostInit+0x6c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a10      	ldr	r2, [pc, #64]	@ (8003570 <HAL_TIM_MspPostInit+0x6c>)
 8003530:	f043 0320 	orr.w	r3, r3, #32
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b0e      	ldr	r3, [pc, #56]	@ (8003570 <HAL_TIM_MspPostInit+0x6c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003546:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003554:	2309      	movs	r3, #9
 8003556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	4619      	mov	r1, r3
 800355e:	4805      	ldr	r0, [pc, #20]	@ (8003574 <HAL_TIM_MspPostInit+0x70>)
 8003560:	f001 fe02 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003564:	bf00      	nop
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40001c00 	.word	0x40001c00
 8003570:	40023800 	.word	0x40023800
 8003574:	40021400 	.word	0x40021400

08003578 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e025      	b.n	80035d8 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da06      	bge.n	80035a2 <TP_Write_Byte+0x2a>
 8003594:	2201      	movs	r2, #1
 8003596:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800359a:	4813      	ldr	r0, [pc, #76]	@ (80035e8 <TP_Write_Byte+0x70>)
 800359c:	f001 ff98 	bl	80054d0 <HAL_GPIO_WritePin>
 80035a0:	e005      	b.n	80035ae <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035a8:	480f      	ldr	r0, [pc, #60]	@ (80035e8 <TP_Write_Byte+0x70>)
 80035aa:	f001 ff91 	bl	80054d0 <HAL_GPIO_WritePin>
		num<<=1;
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035ba:	480c      	ldr	r0, [pc, #48]	@ (80035ec <TP_Write_Byte+0x74>)
 80035bc:	f001 ff88 	bl	80054d0 <HAL_GPIO_WritePin>
		delay_us(1);
 80035c0:	2001      	movs	r0, #1
 80035c2:	f7ff fc87 	bl	8002ed4 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80035c6:	2201      	movs	r2, #1
 80035c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035cc:	4807      	ldr	r0, [pc, #28]	@ (80035ec <TP_Write_Byte+0x74>)
 80035ce:	f001 ff7f 	bl	80054d0 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	3301      	adds	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d9d6      	bls.n	800358c <TP_Write_Byte+0x14>
	}
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40021800 	.word	0x40021800

080035f0 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 80035fe:	2300      	movs	r3, #0
 8003600:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003608:	482f      	ldr	r0, [pc, #188]	@ (80036c8 <TP_Read_AD+0xd8>)
 800360a:	f001 ff61 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003614:	482d      	ldr	r0, [pc, #180]	@ (80036cc <TP_Read_AD+0xdc>)
 8003616:	f001 ff5b 	bl	80054d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2180      	movs	r1, #128	@ 0x80
 800361e:	482a      	ldr	r0, [pc, #168]	@ (80036c8 <TP_Read_AD+0xd8>)
 8003620:	f001 ff56 	bl	80054d0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ffa6 	bl	8003578 <TP_Write_Byte>
	delay_us(6);
 800362c:	2006      	movs	r0, #6
 800362e:	f7ff fc51 	bl	8002ed4 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003638:	4823      	ldr	r0, [pc, #140]	@ (80036c8 <TP_Read_AD+0xd8>)
 800363a:	f001 ff49 	bl	80054d0 <HAL_GPIO_WritePin>
	delay_us(1);
 800363e:	2001      	movs	r0, #1
 8003640:	f7ff fc48 	bl	8002ed4 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800364a:	481f      	ldr	r0, [pc, #124]	@ (80036c8 <TP_Read_AD+0xd8>)
 800364c:	f001 ff40 	bl	80054d0 <HAL_GPIO_WritePin>
	delay_us(1);
 8003650:	2001      	movs	r0, #1
 8003652:	f7ff fc3f 	bl	8002ed4 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800365c:	481a      	ldr	r0, [pc, #104]	@ (80036c8 <TP_Read_AD+0xd8>)
 800365e:	f001 ff37 	bl	80054d0 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e01f      	b.n	80036a8 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8003668:	89bb      	ldrh	r3, [r7, #12]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003674:	4814      	ldr	r0, [pc, #80]	@ (80036c8 <TP_Read_AD+0xd8>)
 8003676:	f001 ff2b 	bl	80054d0 <HAL_GPIO_WritePin>
		delay_us(1);
 800367a:	2001      	movs	r0, #1
 800367c:	f7ff fc2a 	bl	8002ed4 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8003680:	2201      	movs	r2, #1
 8003682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003686:	4810      	ldr	r0, [pc, #64]	@ (80036c8 <TP_Read_AD+0xd8>)
 8003688:	f001 ff22 	bl	80054d0 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 800368c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003690:	480e      	ldr	r0, [pc, #56]	@ (80036cc <TP_Read_AD+0xdc>)
 8003692:	f001 ff05 	bl	80054a0 <HAL_GPIO_ReadPin>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <TP_Read_AD+0xb2>
 800369c:	89bb      	ldrh	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	3301      	adds	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b0f      	cmp	r3, #15
 80036ac:	d9dc      	bls.n	8003668 <TP_Read_AD+0x78>
	}
	Num>>=4;
 80036ae:	89bb      	ldrh	r3, [r7, #12]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 80036b4:	2201      	movs	r2, #1
 80036b6:	2180      	movs	r1, #128	@ 0x80
 80036b8:	4803      	ldr	r0, [pc, #12]	@ (80036c8 <TP_Read_AD+0xd8>)
 80036ba:	f001 ff09 	bl	80054d0 <HAL_GPIO_WritePin>
	return(Num);
 80036be:	89bb      	ldrh	r3, [r7, #12]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40020800 	.word	0x40020800

080036d0 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b089      	sub	sp, #36	@ 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 80036de:	2300      	movs	r3, #0
 80036e0:	83fb      	strh	r3, [r7, #30]
 80036e2:	e00e      	b.n	8003702 <TP_Read_XOY+0x32>
 80036e4:	8bfc      	ldrh	r4, [r7, #30]
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff81 	bl	80035f0 <TP_Read_AD>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	0063      	lsls	r3, r4, #1
 80036f4:	3320      	adds	r3, #32
 80036f6:	443b      	add	r3, r7
 80036f8:	f823 2c14 	strh.w	r2, [r3, #-20]
 80036fc:	8bfb      	ldrh	r3, [r7, #30]
 80036fe:	3301      	adds	r3, #1
 8003700:	83fb      	strh	r3, [r7, #30]
 8003702:	8bfb      	ldrh	r3, [r7, #30]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d9ed      	bls.n	80036e4 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8003708:	2300      	movs	r3, #0
 800370a:	83fb      	strh	r3, [r7, #30]
 800370c:	e035      	b.n	800377a <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 800370e:	8bfb      	ldrh	r3, [r7, #30]
 8003710:	3301      	adds	r3, #1
 8003712:	83bb      	strh	r3, [r7, #28]
 8003714:	e02b      	b.n	800376e <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 8003716:	8bfb      	ldrh	r3, [r7, #30]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	3320      	adds	r3, #32
 800371c:	443b      	add	r3, r7
 800371e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003722:	8bbb      	ldrh	r3, [r7, #28]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	3320      	adds	r3, #32
 8003728:	443b      	add	r3, r7
 800372a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d91a      	bls.n	8003768 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 8003732:	8bfb      	ldrh	r3, [r7, #30]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	3320      	adds	r3, #32
 8003738:	443b      	add	r3, r7
 800373a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800373e:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8003740:	8bbb      	ldrh	r3, [r7, #28]
 8003742:	8bfa      	ldrh	r2, [r7, #30]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	3320      	adds	r3, #32
 8003748:	443b      	add	r3, r7
 800374a:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 800374e:	0053      	lsls	r3, r2, #1
 8003750:	3320      	adds	r3, #32
 8003752:	443b      	add	r3, r7
 8003754:	460a      	mov	r2, r1
 8003756:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 800375a:	8bbb      	ldrh	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	3320      	adds	r3, #32
 8003760:	443b      	add	r3, r7
 8003762:	8b3a      	ldrh	r2, [r7, #24]
 8003764:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8003768:	8bbb      	ldrh	r3, [r7, #28]
 800376a:	3301      	adds	r3, #1
 800376c:	83bb      	strh	r3, [r7, #28]
 800376e:	8bbb      	ldrh	r3, [r7, #28]
 8003770:	2b04      	cmp	r3, #4
 8003772:	d9d0      	bls.n	8003716 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8003774:	8bfb      	ldrh	r3, [r7, #30]
 8003776:	3301      	adds	r3, #1
 8003778:	83fb      	strh	r3, [r7, #30]
 800377a:	8bfb      	ldrh	r3, [r7, #30]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d9c6      	bls.n	800370e <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8003780:	2300      	movs	r3, #0
 8003782:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8003784:	2301      	movs	r3, #1
 8003786:	83fb      	strh	r3, [r7, #30]
 8003788:	e00b      	b.n	80037a2 <TP_Read_XOY+0xd2>
 800378a:	8bfb      	ldrh	r3, [r7, #30]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	3320      	adds	r3, #32
 8003790:	443b      	add	r3, r7
 8003792:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003796:	8b7b      	ldrh	r3, [r7, #26]
 8003798:	4413      	add	r3, r2
 800379a:	837b      	strh	r3, [r7, #26]
 800379c:	8bfb      	ldrh	r3, [r7, #30]
 800379e:	3301      	adds	r3, #1
 80037a0:	83fb      	strh	r3, [r7, #30]
 80037a2:	8bfb      	ldrh	r3, [r7, #30]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d9f0      	bls.n	800378a <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 80037a8:	8b7b      	ldrh	r3, [r7, #26]
 80037aa:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <TP_Read_XOY+0xf0>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	833b      	strh	r3, [r7, #24]
	return temp;
 80037b4:	8b3b      	ldrh	r3, [r7, #24]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	@ 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd90      	pop	{r4, r7, pc}
 80037be:	bf00      	nop
 80037c0:	aaaaaaab 	.word	0xaaaaaaab

080037c4 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <TP_Read_XY+0x3c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff ff7c 	bl	80036d0 <TP_Read_XOY>
 80037d8:	4603      	mov	r3, r0
 80037da:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <TP_Read_XY+0x40>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff75 	bl	80036d0 <TP_Read_XOY>
 80037e6:	4603      	mov	r3, r0
 80037e8:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	89fa      	ldrh	r2, [r7, #14]
 80037ee:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	89ba      	ldrh	r2, [r7, #12]
 80037f4:	801a      	strh	r2, [r3, #0]
	return 1;
 80037f6:	2301      	movs	r3, #1
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000044 	.word	0x20000044
 8003804:	20000045 	.word	0x20000045

08003808 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8003812:	f107 0212 	add.w	r2, r7, #18
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ffd1 	bl	80037c4 <TP_Read_XY>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <TP_Read_XY2+0x28>
 800382c:	2300      	movs	r3, #0
 800382e:	e049      	b.n	80038c4 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8003830:	f107 020e 	add.w	r2, r7, #14
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ffc2 	bl	80037c4 <TP_Read_XY>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <TP_Read_XY2+0x46>
 800384a:	2300      	movs	r3, #0
 800384c:	e03a      	b.n	80038c4 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 800384e:	8a3a      	ldrh	r2, [r7, #16]
 8003850:	8abb      	ldrh	r3, [r7, #20]
 8003852:	429a      	cmp	r2, r3
 8003854:	d804      	bhi.n	8003860 <TP_Read_XY2+0x58>
 8003856:	8a3b      	ldrh	r3, [r7, #16]
 8003858:	3363      	adds	r3, #99	@ 0x63
 800385a:	8aba      	ldrh	r2, [r7, #20]
 800385c:	4293      	cmp	r3, r2
 800385e:	da08      	bge.n	8003872 <TP_Read_XY2+0x6a>
 8003860:	8aba      	ldrh	r2, [r7, #20]
 8003862:	8a3b      	ldrh	r3, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d82c      	bhi.n	80038c2 <TP_Read_XY2+0xba>
 8003868:	8abb      	ldrh	r3, [r7, #20]
 800386a:	3363      	adds	r3, #99	@ 0x63
 800386c:	8a3a      	ldrh	r2, [r7, #16]
 800386e:	4293      	cmp	r3, r2
 8003870:	db27      	blt.n	80038c2 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	8a7b      	ldrh	r3, [r7, #18]
 8003876:	429a      	cmp	r2, r3
 8003878:	d804      	bhi.n	8003884 <TP_Read_XY2+0x7c>
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	3363      	adds	r3, #99	@ 0x63
 800387e:	8a7a      	ldrh	r2, [r7, #18]
 8003880:	4293      	cmp	r3, r2
 8003882:	da08      	bge.n	8003896 <TP_Read_XY2+0x8e>
 8003884:	8a7a      	ldrh	r2, [r7, #18]
 8003886:	89fb      	ldrh	r3, [r7, #14]
 8003888:	429a      	cmp	r2, r3
 800388a:	d81a      	bhi.n	80038c2 <TP_Read_XY2+0xba>
 800388c:	8a7b      	ldrh	r3, [r7, #18]
 800388e:	3363      	adds	r3, #99	@ 0x63
 8003890:	89fa      	ldrh	r2, [r7, #14]
 8003892:	4293      	cmp	r3, r2
 8003894:	db15      	blt.n	80038c2 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8003896:	8abb      	ldrh	r3, [r7, #20]
 8003898:	461a      	mov	r2, r3
 800389a:	8a3b      	ldrh	r3, [r7, #16]
 800389c:	4413      	add	r3, r2
 800389e:	0fda      	lsrs	r2, r3, #31
 80038a0:	4413      	add	r3, r2
 80038a2:	105b      	asrs	r3, r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 80038aa:	8a7b      	ldrh	r3, [r7, #18]
 80038ac:	461a      	mov	r2, r3
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	4413      	add	r3, r2
 80038b2:	0fda      	lsrs	r2, r3, #31
 80038b4:	4413      	add	r3, r2
 80038b6:	105b      	asrs	r3, r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	801a      	strh	r2, [r3, #0]
		return 1;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <TP_Read_XY2+0xbc>
	}else return 0;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
 80038d6:	460b      	mov	r3, r1
 80038d8:	80bb      	strh	r3, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	3b0c      	subs	r3, #12
 80038e2:	b298      	uxth	r0, r3
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	330d      	adds	r3, #13
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	88bc      	ldrh	r4, [r7, #4]
 80038ec:	88b9      	ldrh	r1, [r7, #4]
 80038ee:	887b      	ldrh	r3, [r7, #2]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	4623      	mov	r3, r4
 80038f4:	f7fe fc63 	bl	80021be <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 80038f8:	88bb      	ldrh	r3, [r7, #4]
 80038fa:	3b0c      	subs	r3, #12
 80038fc:	b299      	uxth	r1, r3
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	330d      	adds	r3, #13
 8003902:	b29c      	uxth	r4, r3
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	88f8      	ldrh	r0, [r7, #6]
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4623      	mov	r3, r4
 800390e:	f7fe fc56 	bl	80021be <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	3301      	adds	r3, #1
 8003916:	b298      	uxth	r0, r3
 8003918:	88bb      	ldrh	r3, [r7, #4]
 800391a:	3301      	adds	r3, #1
 800391c:	b29b      	uxth	r3, r3
 800391e:	887a      	ldrh	r2, [r7, #2]
 8003920:	4619      	mov	r1, r3
 8003922:	f7fe fc35 	bl	8002190 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	3b01      	subs	r3, #1
 800392a:	b298      	uxth	r0, r3
 800392c:	88bb      	ldrh	r3, [r7, #4]
 800392e:	3301      	adds	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	4619      	mov	r1, r3
 8003936:	f7fe fc2b 	bl	8002190 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	3301      	adds	r3, #1
 800393e:	b298      	uxth	r0, r3
 8003940:	88bb      	ldrh	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	887a      	ldrh	r2, [r7, #2]
 8003948:	4619      	mov	r1, r3
 800394a:	f7fe fc21 	bl	8002190 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	3b01      	subs	r3, #1
 8003952:	b298      	uxth	r0, r3
 8003954:	88bb      	ldrh	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	b29b      	uxth	r3, r3
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	4619      	mov	r1, r3
 800395e:	f7fe fc17 	bl	8002190 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	88b9      	ldrh	r1, [r7, #4]
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2306      	movs	r3, #6
 800396e:	f7ff f824 	bl	80029ba <lcd_DrawCircle>
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
	...

0800397c <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8003986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800398a:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <TP_Scan+0x11c>)
 800398c:	f001 fd88 	bl	80054a0 <HAL_GPIO_ReadPin>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d157      	bne.n	8003a46 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <TP_Scan+0x2a>
 800399c:	493f      	ldr	r1, [pc, #252]	@ (8003a9c <TP_Scan+0x120>)
 800399e:	4840      	ldr	r0, [pc, #256]	@ (8003aa0 <TP_Scan+0x124>)
 80039a0:	f7ff ff32 	bl	8003808 <TP_Read_XY2>
 80039a4:	e03c      	b.n	8003a20 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 80039a6:	493d      	ldr	r1, [pc, #244]	@ (8003a9c <TP_Scan+0x120>)
 80039a8:	483d      	ldr	r0, [pc, #244]	@ (8003aa0 <TP_Scan+0x124>)
 80039aa:	f7ff ff2d 	bl	8003808 <TP_Read_XY2>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d035      	beq.n	8003a20 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 80039b4:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa4 <TP_Scan+0x128>)
 80039b6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80039ba:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa4 <TP_Scan+0x128>)
 80039bc:	899b      	ldrh	r3, [r3, #12]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ca:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <TP_Scan+0x128>)
 80039cc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e0:	ee17 3a90 	vmov	r3, s15
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <TP_Scan+0x128>)
 80039e8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 80039ea:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <TP_Scan+0x128>)
 80039ec:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80039f0:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <TP_Scan+0x128>)
 80039f2:	8adb      	ldrh	r3, [r3, #22]
 80039f4:	ee07 3a90 	vmov	s15, r3
 80039f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a00:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <TP_Scan+0x128>)
 8003a02:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a16:	ee17 3a90 	vmov	r3, s15
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	4b21      	ldr	r3, [pc, #132]	@ (8003aa4 <TP_Scan+0x128>)
 8003a1e:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8003a20:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <TP_Scan+0x128>)
 8003a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db2a      	blt.n	8003a82 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <TP_Scan+0x128>)
 8003a2e:	22c0      	movs	r2, #192	@ 0xc0
 8003a30:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8003a34:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <TP_Scan+0x128>)
 8003a36:	899a      	ldrh	r2, [r3, #12]
 8003a38:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa4 <TP_Scan+0x128>)
 8003a3a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <TP_Scan+0x128>)
 8003a3e:	8ada      	ldrh	r2, [r3, #22]
 8003a40:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <TP_Scan+0x128>)
 8003a42:	83da      	strh	r2, [r3, #30]
 8003a44:	e01d      	b.n	8003a82 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8003a46:	4b17      	ldr	r3, [pc, #92]	@ (8003aa4 <TP_Scan+0x128>)
 8003a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da09      	bge.n	8003a66 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8003a52:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <TP_Scan+0x128>)
 8003a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <TP_Scan+0x128>)
 8003a60:	f883 2020 	strb.w	r2, [r3, #32]
 8003a64:	e00d      	b.n	8003a82 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <TP_Scan+0x128>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <TP_Scan+0x128>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8003a72:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa4 <TP_Scan+0x128>)
 8003a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a78:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <TP_Scan+0x128>)
 8003a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a80:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8003a82:	4b08      	ldr	r3, [pc, #32]	@ (8003aa4 <TP_Scan+0x128>)
 8003a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003a8c:	b2db      	uxtb	r3, r3
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40020800 	.word	0x40020800
 8003a9c:	20000026 	.word	0x20000026
 8003aa0:	2000001c 	.word	0x2000001c
 8003aa4:	20000010 	.word	0x20000010

08003aa8 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003aac:	220e      	movs	r2, #14
 8003aae:	4905      	ldr	r1, [pc, #20]	@ (8003ac4 <TP_Save_Adjdata+0x1c>)
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f7fd fb81 	bl	80011b8 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	200e      	movs	r0, #14
 8003aba:	f7fd fb1d 	bl	80010f8 <at24c_WriteOneByte>
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000034 	.word	0x20000034

08003ac8 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8003ad2:	200e      	movs	r0, #14
 8003ad4:	f7fd faf4 	bl	80010c0 <at24c_ReadOneByte>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8003ae2:	220e      	movs	r2, #14
 8003ae4:	4905      	ldr	r1, [pc, #20]	@ (8003afc <TP_Get_Adjdata+0x34>)
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fd fb47 	bl	800117a <at24c_Read>
		return 1;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000034 	.word	0x20000034

08003b00 <touch_Adjust>:


void touch_Adjust(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08e      	sub	sp, #56	@ 0x38
 8003b04:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8003b12:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <touch_Adjust+0x190>)
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	4b5e      	ldr	r3, [pc, #376]	@ (8003c90 <touch_Adjust+0x190>)
 8003b18:	885b      	ldrh	r3, [r3, #2]
 8003b1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b1e:	9100      	str	r1, [sp, #0]
 8003b20:	2100      	movs	r1, #0
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fe fafe 	bl	8002124 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9302      	str	r3, [sp, #8]
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b3a:	4a56      	ldr	r2, [pc, #344]	@ (8003c94 <touch_Adjust+0x194>)
 8003b3c:	2128      	movs	r1, #40	@ 0x28
 8003b3e:	2005      	movs	r0, #5
 8003b40:	f7fe ffa8 	bl	8002a94 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8003b44:	2300      	movs	r3, #0
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	2310      	movs	r3, #16
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b56:	4a50      	ldr	r2, [pc, #320]	@ (8003c98 <touch_Adjust+0x198>)
 8003b58:	2141      	movs	r1, #65	@ 0x41
 8003b5a:	2005      	movs	r0, #5
 8003b5c:	f7fe ff9a 	bl	8002a94 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8003b60:	2300      	movs	r3, #0
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	2310      	movs	r3, #16
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003b72:	4a4a      	ldr	r2, [pc, #296]	@ (8003c9c <touch_Adjust+0x19c>)
 8003b74:	215a      	movs	r1, #90	@ 0x5a
 8003b76:	2005      	movs	r0, #5
 8003b78:	f7fe ff8c 	bl	8002a94 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8003b7c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003b80:	2114      	movs	r1, #20
 8003b82:	2014      	movs	r0, #20
 8003b84:	f7ff fea2 	bl	80038cc <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8003b88:	4b45      	ldr	r3, [pc, #276]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8003b90:	4b43      	ldr	r3, [pc, #268]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8003b98:	2032      	movs	r0, #50	@ 0x32
 8003b9a:	f000 fc63 	bl	8004464 <HAL_Delay>
		tp_dev.scan(1);
 8003b9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bb0:	2b40      	cmp	r3, #64	@ 0x40
 8003bb2:	d1f1      	bne.n	8003b98 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003bb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b37      	ldr	r3, [pc, #220]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8003bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bca:	4a35      	ldr	r2, [pc, #212]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003bcc:	8992      	ldrh	r2, [r2, #12]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3328      	adds	r3, #40	@ 0x28
 8003bd2:	443b      	add	r3, r7
 8003bd4:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8003bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bdc:	4a30      	ldr	r2, [pc, #192]	@ (8003ca0 <touch_Adjust+0x1a0>)
 8003bde:	8ad2      	ldrh	r2, [r2, #22]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	3328      	adds	r3, #40	@ 0x28
 8003be4:	443b      	add	r3, r7
 8003be6:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8003bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d8cc      	bhi.n	8003b98 <touch_Adjust+0x98>
 8003bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <touch_Adjust+0x104>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c61 	.word	0x08003c61
 8003c10:	08003ca5 	.word	0x08003ca5
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 8003c14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c18:	2114      	movs	r1, #20
 8003c1a:	2014      	movs	r0, #20
 8003c1c:	f7ff fe56 	bl	80038cc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <touch_Adjust+0x190>)
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	3b14      	subs	r3, #20
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003c2c:	2114      	movs	r1, #20
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fe4c 	bl	80038cc <TP_Drow_Touch_Point>
					break;
 8003c34:	e319      	b.n	800426a <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 8003c36:	4b16      	ldr	r3, [pc, #88]	@ (8003c90 <touch_Adjust+0x190>)
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	3b14      	subs	r3, #20
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c42:	2114      	movs	r1, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fe41 	bl	80038cc <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8003c4a:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <touch_Adjust+0x190>)
 8003c4c:	885b      	ldrh	r3, [r3, #2]
 8003c4e:	3b14      	subs	r3, #20
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003c56:	4619      	mov	r1, r3
 8003c58:	2014      	movs	r0, #20
 8003c5a:	f7ff fe37 	bl	80038cc <TP_Drow_Touch_Point>
					break;
 8003c5e:	e304      	b.n	800426a <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <touch_Adjust+0x190>)
 8003c62:	885b      	ldrh	r3, [r3, #2]
 8003c64:	3b14      	subs	r3, #20
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	2014      	movs	r0, #20
 8003c70:	f7ff fe2c 	bl	80038cc <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8003c74:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <touch_Adjust+0x190>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	3b14      	subs	r3, #20
 8003c7a:	b298      	uxth	r0, r3
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <touch_Adjust+0x190>)
 8003c7e:	885b      	ldrh	r3, [r3, #2]
 8003c80:	3b14      	subs	r3, #20
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7ff fe1f 	bl	80038cc <TP_Drow_Touch_Point>
					break;
 8003c8e:	e2ec      	b.n	800426a <touch_Adjust+0x76a>
 8003c90:	20000370 	.word	0x20000370
 8003c94:	08009694 	.word	0x08009694
 8003c98:	080096b0 	.word	0x080096b0
 8003c9c:	080096c8 	.word	0x080096c8
 8003ca0:	20000010 	.word	0x20000010
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8003ca4:	883b      	ldrh	r3, [r7, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	88bb      	ldrh	r3, [r7, #4]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bfb8      	it	lt
 8003cb0:	425b      	neglt	r3, r3
 8003cb2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	425b      	neglt	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	fb03 f303 	mul.w	r3, r3, r3
 8003cca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	fb03 f303 	mul.w	r3, r3, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fc0a 	bl	80004f4 <__aeabi_ui2d>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	ec43 2b10 	vmov	d0, r2, r3
 8003ce8:	f005 fba2 	bl	8009430 <sqrt>
 8003cec:	ec53 2b10 	vmov	r2, r3, d0
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	f7fc ff28 	bl	8000b48 <__aeabi_d2uiz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	425b      	neglt	r3, r3
 8003d0a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 8003d0c:	897b      	ldrh	r3, [r7, #10]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	89fb      	ldrh	r3, [r7, #14]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bfb8      	it	lt
 8003d18:	425b      	neglt	r3, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	fb03 f303 	mul.w	r3, r3, r3
 8003d22:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	fb03 f303 	mul.w	r3, r3, r3
 8003d2a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	4413      	add	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbde 	bl	80004f4 <__aeabi_ui2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	ec43 2b10 	vmov	d0, r2, r3
 8003d40:	f005 fb76 	bl	8009430 <sqrt>
 8003d44:	ec53 2b10 	vmov	r2, r3, d0
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	f7fc fefc 	bl	8000b48 <__aeabi_d2uiz>
 8003d50:	4603      	mov	r3, r0
 8003d52:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003d54:	8b7b      	ldrh	r3, [r7, #26]
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d5e:	8b3b      	ldrh	r3, [r7, #24]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d6c:	ee16 0a90 	vmov	r0, s13
 8003d70:	f7fc fbe2 	bl	8000538 <__aeabi_f2d>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8003d7c:	a384      	add	r3, pc, #528	@ (adr r3, 8003f90 <touch_Adjust+0x490>)
 8003d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d86:	f7fc fea1 	bl	8000acc <__aeabi_dcmplt>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <touch_Adjust+0x2b0>
 8003d90:	a381      	add	r3, pc, #516	@ (adr r3, 8003f98 <touch_Adjust+0x498>)
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d9a:	f7fc feb5 	bl	8000b08 <__aeabi_dcmpgt>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <touch_Adjust+0x2b0>
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <touch_Adjust+0x2b0>
 8003daa:	8b3b      	ldrh	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d136      	bne.n	8003e1e <touch_Adjust+0x31e>
					{
						cnt=0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003db6:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa0 <touch_Adjust+0x4a0>)
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	3b14      	subs	r3, #20
 8003dbc:	b298      	uxth	r0, r3
 8003dbe:	4b78      	ldr	r3, [pc, #480]	@ (8003fa0 <touch_Adjust+0x4a0>)
 8003dc0:	885b      	ldrh	r3, [r3, #2]
 8003dc2:	3b14      	subs	r3, #20
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7ff fd7e 	bl	80038cc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003dd0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003dd4:	2114      	movs	r1, #20
 8003dd6:	2014      	movs	r0, #20
 8003dd8:	f7ff fd78 	bl	80038cc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9302      	str	r3, [sp, #8]
 8003de0:	2310      	movs	r3, #16
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003dee:	4a6d      	ldr	r2, [pc, #436]	@ (8003fa4 <touch_Adjust+0x4a4>)
 8003df0:	2128      	movs	r1, #40	@ 0x28
 8003df2:	2005      	movs	r0, #5
 8003df4:	f7fe fe4e 	bl	8002a94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9302      	str	r3, [sp, #8]
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003e0a:	4a67      	ldr	r2, [pc, #412]	@ (8003fa8 <touch_Adjust+0x4a8>)
 8003e0c:	213c      	movs	r1, #60	@ 0x3c
 8003e0e:	2005      	movs	r0, #5
 8003e10:	f7fe fe40 	bl	8002a94 <lcd_ShowStr>
						HAL_Delay(1000);
 8003e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e18:	f000 fb24 	bl	8004464 <HAL_Delay>
 						continue;
 8003e1c:	e225      	b.n	800426a <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8003e1e:	883b      	ldrh	r3, [r7, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	893b      	ldrh	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bfb8      	it	lt
 8003e2a:	425b      	neglt	r3, r3
 8003e2c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8003e2e:	887b      	ldrh	r3, [r7, #2]
 8003e30:	461a      	mov	r2, r3
 8003e32:	897b      	ldrh	r3, [r7, #10]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	425b      	neglt	r3, r3
 8003e3c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	fb03 f303 	mul.w	r3, r3, r3
 8003e44:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fb03 f303 	mul.w	r3, r3, r3
 8003e4c:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb4d 	bl	80004f4 <__aeabi_ui2d>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	ec43 2b10 	vmov	d0, r2, r3
 8003e62:	f005 fae5 	bl	8009430 <sqrt>
 8003e66:	ec53 2b10 	vmov	r2, r3, d0
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fe6b 	bl	8000b48 <__aeabi_d2uiz>
 8003e72:	4603      	mov	r3, r0
 8003e74:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8003e76:	88bb      	ldrh	r3, [r7, #4]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	89bb      	ldrh	r3, [r7, #12]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	89fb      	ldrh	r3, [r7, #14]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	425b      	neglt	r3, r3
 8003e94:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	fb03 f303 	mul.w	r3, r3, r3
 8003e9c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fb03 f303 	mul.w	r3, r3, r3
 8003ea4:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb21 	bl	80004f4 <__aeabi_ui2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	ec43 2b10 	vmov	d0, r2, r3
 8003eba:	f005 fab9 	bl	8009430 <sqrt>
 8003ebe:	ec53 2b10 	vmov	r2, r3, d0
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fe3f 	bl	8000b48 <__aeabi_d2uiz>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8003ece:	8b7b      	ldrh	r3, [r7, #26]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed8:	8b3b      	ldrh	r3, [r7, #24]
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ee6:	ee16 0a90 	vmov	r0, s13
 8003eea:	f7fc fb25 	bl	8000538 <__aeabi_f2d>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8003ef6:	a326      	add	r3, pc, #152	@ (adr r3, 8003f90 <touch_Adjust+0x490>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f00:	f7fc fde4 	bl	8000acc <__aeabi_dcmplt>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <touch_Adjust+0x41e>
 8003f0a:	a323      	add	r3, pc, #140	@ (adr r3, 8003f98 <touch_Adjust+0x498>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f14:	f7fc fdf8 	bl	8000b08 <__aeabi_dcmpgt>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d046      	beq.n	8003fac <touch_Adjust+0x4ac>
					{
						cnt=0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <touch_Adjust+0x4a0>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	3b14      	subs	r3, #20
 8003f2a:	b298      	uxth	r0, r3
 8003f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa0 <touch_Adjust+0x4a0>)
 8003f2e:	885b      	ldrh	r3, [r3, #2]
 8003f30:	3b14      	subs	r3, #20
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7ff fcc7 	bl	80038cc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8003f3e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003f42:	2114      	movs	r1, #20
 8003f44:	2014      	movs	r0, #20
 8003f46:	f7ff fcc1 	bl	80038cc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	2310      	movs	r3, #16
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f5c:	4a11      	ldr	r2, [pc, #68]	@ (8003fa4 <touch_Adjust+0x4a4>)
 8003f5e:	2128      	movs	r1, #40	@ 0x28
 8003f60:	2005      	movs	r0, #5
 8003f62:	f7fe fd97 	bl	8002a94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8003f66:	2300      	movs	r3, #0
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003f78:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa8 <touch_Adjust+0x4a8>)
 8003f7a:	213c      	movs	r1, #60	@ 0x3c
 8003f7c:	2005      	movs	r0, #5
 8003f7e:	f7fe fd89 	bl	8002a94 <lcd_ShowStr>
						HAL_Delay(1000);
 8003f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f86:	f000 fa6d 	bl	8004464 <HAL_Delay>
						continue;
 8003f8a:	e16e      	b.n	800426a <touch_Adjust+0x76a>
 8003f8c:	f3af 8000 	nop.w
 8003f90:	66666666 	.word	0x66666666
 8003f94:	3fee6666 	.word	0x3fee6666
 8003f98:	cccccccd 	.word	0xcccccccd
 8003f9c:	3ff0cccc 	.word	0x3ff0cccc
 8003fa0:	20000370 	.word	0x20000370
 8003fa4:	080096dc 	.word	0x080096dc
 8003fa8:	080096fc 	.word	0x080096fc
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8003fac:	88bb      	ldrh	r3, [r7, #4]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	893b      	ldrh	r3, [r7, #8]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bfb8      	it	lt
 8003fb8:	425b      	neglt	r3, r3
 8003fba:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	897b      	ldrh	r3, [r7, #10]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bfb8      	it	lt
 8003fc8:	425b      	neglt	r3, r3
 8003fca:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	fb03 f303 	mul.w	r3, r3, r3
 8003fd2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	fb03 f303 	mul.w	r3, r3, r3
 8003fda:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fa86 	bl	80004f4 <__aeabi_ui2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	ec43 2b10 	vmov	d0, r2, r3
 8003ff0:	f005 fa1e 	bl	8009430 <sqrt>
 8003ff4:	ec53 2b10 	vmov	r2, r3, d0
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fda4 	bl	8000b48 <__aeabi_d2uiz>
 8004000:	4603      	mov	r3, r0
 8004002:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8004004:	883b      	ldrh	r3, [r7, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	89bb      	ldrh	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	425b      	neglt	r3, r3
 8004012:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8004014:	887b      	ldrh	r3, [r7, #2]
 8004016:	461a      	mov	r2, r3
 8004018:	89fb      	ldrh	r3, [r7, #14]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	bfb8      	it	lt
 8004020:	425b      	neglt	r3, r3
 8004022:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	fb03 f303 	mul.w	r3, r3, r3
 800402a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	fb03 f303 	mul.w	r3, r3, r3
 8004032:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa5a 	bl	80004f4 <__aeabi_ui2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	ec43 2b10 	vmov	d0, r2, r3
 8004048:	f005 f9f2 	bl	8009430 <sqrt>
 800404c:	ec53 2b10 	vmov	r2, r3, d0
 8004050:	4610      	mov	r0, r2
 8004052:	4619      	mov	r1, r3
 8004054:	f7fc fd78 	bl	8000b48 <__aeabi_d2uiz>
 8004058:	4603      	mov	r3, r0
 800405a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800405c:	8b7b      	ldrh	r3, [r7, #26]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004066:	8b3b      	ldrh	r3, [r7, #24]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004070:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004074:	ee16 0a90 	vmov	r0, s13
 8004078:	f7fc fa5e 	bl	8000538 <__aeabi_f2d>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8004084:	a383      	add	r3, pc, #524	@ (adr r3, 8004294 <touch_Adjust+0x794>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800408e:	f7fc fd1d 	bl	8000acc <__aeabi_dcmplt>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <touch_Adjust+0x5ac>
 8004098:	a380      	add	r3, pc, #512	@ (adr r3, 800429c <touch_Adjust+0x79c>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040a2:	f7fc fd31 	bl	8000b08 <__aeabi_dcmpgt>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d036      	beq.n	800411a <touch_Adjust+0x61a>
					{
						cnt=0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80040b2:	4b71      	ldr	r3, [pc, #452]	@ (8004278 <touch_Adjust+0x778>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	3b14      	subs	r3, #20
 80040b8:	b298      	uxth	r0, r3
 80040ba:	4b6f      	ldr	r3, [pc, #444]	@ (8004278 <touch_Adjust+0x778>)
 80040bc:	885b      	ldrh	r3, [r3, #2]
 80040be:	3b14      	subs	r3, #20
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040c6:	4619      	mov	r1, r3
 80040c8:	f7ff fc00 	bl	80038cc <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80040cc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80040d0:	2114      	movs	r1, #20
 80040d2:	2014      	movs	r0, #20
 80040d4:	f7ff fbfa 	bl	80038cc <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80040d8:	2300      	movs	r3, #0
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	2310      	movs	r3, #16
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80040ea:	4a64      	ldr	r2, [pc, #400]	@ (800427c <touch_Adjust+0x77c>)
 80040ec:	2128      	movs	r1, #40	@ 0x28
 80040ee:	2005      	movs	r0, #5
 80040f0:	f7fe fcd0 	bl	8002a94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80040f4:	2300      	movs	r3, #0
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	2310      	movs	r3, #16
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004106:	4a5e      	ldr	r2, [pc, #376]	@ (8004280 <touch_Adjust+0x780>)
 8004108:	213c      	movs	r1, #60	@ 0x3c
 800410a:	2005      	movs	r0, #5
 800410c:	f7fe fcc2 	bl	8002a94 <lcd_ShowStr>

						HAL_Delay(1000);
 8004110:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004114:	f000 f9a6 	bl	8004464 <HAL_Delay>
 							continue;
 8004118:	e0a7      	b.n	800426a <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 800411a:	4b57      	ldr	r3, [pc, #348]	@ (8004278 <touch_Adjust+0x778>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	3b28      	subs	r3, #40	@ 0x28
 8004120:	ee07 3a90 	vmov	s15, r3
 8004124:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004128:	88bb      	ldrh	r3, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	883b      	ldrh	r3, [r7, #0]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800413c:	4b51      	ldr	r3, [pc, #324]	@ (8004284 <touch_Adjust+0x784>)
 800413e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8004142:	4b4d      	ldr	r3, [pc, #308]	@ (8004278 <touch_Adjust+0x778>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414e:	4b4d      	ldr	r3, [pc, #308]	@ (8004284 <touch_Adjust+0x784>)
 8004150:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004154:	88bb      	ldrh	r3, [r7, #4]
 8004156:	461a      	mov	r2, r3
 8004158:	883b      	ldrh	r3, [r7, #0]
 800415a:	4413      	add	r3, r2
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004168:	ee37 7a67 	vsub.f32	s14, s14, s15
 800416c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004178:	ee17 3a90 	vmov	r3, s15
 800417c:	b21a      	sxth	r2, r3
 800417e:	4b41      	ldr	r3, [pc, #260]	@ (8004284 <touch_Adjust+0x784>)
 8004180:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8004182:	4b3d      	ldr	r3, [pc, #244]	@ (8004278 <touch_Adjust+0x778>)
 8004184:	885b      	ldrh	r3, [r3, #2]
 8004186:	3b28      	subs	r3, #40	@ 0x28
 8004188:	ee07 3a90 	vmov	s15, r3
 800418c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004190:	897b      	ldrh	r3, [r7, #10]
 8004192:	461a      	mov	r2, r3
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	4b37      	ldr	r3, [pc, #220]	@ (8004284 <touch_Adjust+0x784>)
 80041a6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 80041aa:	4b33      	ldr	r3, [pc, #204]	@ (8004278 <touch_Adjust+0x778>)
 80041ac:	885b      	ldrh	r3, [r3, #2]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041b6:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <touch_Adjust+0x784>)
 80041b8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80041bc:	897b      	ldrh	r3, [r7, #10]
 80041be:	461a      	mov	r2, r3
 80041c0:	887b      	ldrh	r3, [r7, #2]
 80041c2:	4413      	add	r3, r2
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80041d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e0:	ee17 3a90 	vmov	r3, s15
 80041e4:	b21a      	sxth	r2, r3
 80041e6:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <touch_Adjust+0x784>)
 80041e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80041ea:	4b23      	ldr	r3, [pc, #140]	@ (8004278 <touch_Adjust+0x778>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	3b14      	subs	r3, #20
 80041f0:	b298      	uxth	r0, r3
 80041f2:	4b21      	ldr	r3, [pc, #132]	@ (8004278 <touch_Adjust+0x778>)
 80041f4:	885b      	ldrh	r3, [r3, #2]
 80041f6:	3b14      	subs	r3, #20
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041fe:	4619      	mov	r1, r3
 8004200:	f7ff fb64 	bl	80038cc <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8004204:	2300      	movs	r3, #0
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	2310      	movs	r3, #16
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004216:	4a1c      	ldr	r2, [pc, #112]	@ (8004288 <touch_Adjust+0x788>)
 8004218:	2128      	movs	r1, #40	@ 0x28
 800421a:	2005      	movs	r0, #5
 800421c:	f7fe fc3a 	bl	8002a94 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8004220:	2300      	movs	r3, #0
 8004222:	9302      	str	r3, [sp, #8]
 8004224:	2310      	movs	r3, #16
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <touch_Adjust+0x78c>)
 8004234:	213c      	movs	r1, #60	@ 0x3c
 8004236:	2005      	movs	r0, #5
 8004238:	f7fe fc2c 	bl	8002a94 <lcd_ShowStr>
					HAL_Delay(1000);
 800423c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004240:	f000 f910 	bl	8004464 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8004244:	2300      	movs	r3, #0
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	2310      	movs	r3, #16
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004256:	4a0e      	ldr	r2, [pc, #56]	@ (8004290 <touch_Adjust+0x790>)
 8004258:	2128      	movs	r1, #40	@ 0x28
 800425a:	2005      	movs	r0, #5
 800425c:	f7fe fc1a 	bl	8002a94 <lcd_ShowStr>
					TP_Save_Adjdata();
 8004260:	f7ff fc22 	bl	8003aa8 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8004264:	f7ff fc30 	bl	8003ac8 <TP_Get_Adjdata>
					return;
 8004268:	e000      	b.n	800426c <touch_Adjust+0x76c>
		HAL_Delay(50);
 800426a:	e495      	b.n	8003b98 <touch_Adjust+0x98>
			}
		}
 	}
}
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	f3af 8000 	nop.w
 8004278:	20000370 	.word	0x20000370
 800427c:	080096dc 	.word	0x080096dc
 8004280:	080096fc 	.word	0x080096fc
 8004284:	20000010 	.word	0x20000010
 8004288:	0800971c 	.word	0x0800971c
 800428c:	0800973c 	.word	0x0800973c
 8004290:	0800975c 	.word	0x0800975c
 8004294:	66666666 	.word	0x66666666
 8004298:	3fee6666 	.word	0x3fee6666
 800429c:	cccccccd 	.word	0xcccccccd
 80042a0:	3ff0cccc 	.word	0x3ff0cccc

080042a4 <touch_init>:

void touch_init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 80042a8:	4904      	ldr	r1, [pc, #16]	@ (80042bc <touch_init+0x18>)
 80042aa:	4805      	ldr	r0, [pc, #20]	@ (80042c0 <touch_init+0x1c>)
 80042ac:	f7ff fa8a 	bl	80037c4 <TP_Read_XY>
	at24c_init();
 80042b0:	f7fc ff00 	bl	80010b4 <at24c_init>
	TP_Get_Adjdata();
 80042b4:	f7ff fc08 	bl	8003ac8 <TP_Get_Adjdata>
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000026 	.word	0x20000026
 80042c0:	2000001c 	.word	0x2000001c

080042c4 <touch_Scan>:

void touch_Scan(){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80042c8:	4b02      	ldr	r3, [pc, #8]	@ (80042d4 <touch_Scan+0x10>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2000      	movs	r0, #0
 80042ce:	4798      	blx	r3
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000010 	.word	0x20000010

080042d8 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80042dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042e0:	4805      	ldr	r0, [pc, #20]	@ (80042f8 <touch_IsTouched+0x20>)
 80042e2:	f001 f8dd 	bl	80054a0 <HAL_GPIO_ReadPin>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bf0c      	ite	eq
 80042ec:	2301      	moveq	r3, #1
 80042ee:	2300      	movne	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40020800 	.word	0x40020800

080042fc <touch_GetX>:

uint16_t touch_GetX(){
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8004300:	4b03      	ldr	r3, [pc, #12]	@ (8004310 <touch_GetX+0x14>)
 8004302:	899b      	ldrh	r3, [r3, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000010 	.word	0x20000010

08004314 <touch_GetY>:

uint16_t touch_GetY(){
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8004318:	4b03      	ldr	r3, [pc, #12]	@ (8004328 <touch_GetY+0x14>)
 800431a:	8adb      	ldrh	r3, [r3, #22]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000010 	.word	0x20000010

0800432c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800432c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004330:	480d      	ldr	r0, [pc, #52]	@ (8004368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004332:	490e      	ldr	r1, [pc, #56]	@ (800436c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004334:	4a0e      	ldr	r2, [pc, #56]	@ (8004370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004338:	e002      	b.n	8004340 <LoopCopyDataInit>

0800433a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800433a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800433c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800433e:	3304      	adds	r3, #4

08004340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004344:	d3f9      	bcc.n	800433a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004346:	4a0b      	ldr	r2, [pc, #44]	@ (8004374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004348:	4c0b      	ldr	r4, [pc, #44]	@ (8004378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800434a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800434c:	e001      	b.n	8004352 <LoopFillZerobss>

0800434e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800434e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004350:	3204      	adds	r2, #4

08004352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004354:	d3fb      	bcc.n	800434e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004356:	f7fe ff87 	bl	8003268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800435a:	f004 fa23 	bl	80087a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800435e:	f7fe fc89 	bl	8002c74 <main>
  bx  lr    
 8004362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800436c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004370:	0800c804 	.word	0x0800c804
  ldr r2, =_sbss
 8004374:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004378:	20000618 	.word	0x20000618

0800437c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800437c:	e7fe      	b.n	800437c <ADC_IRQHandler>
	...

08004380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <HAL_Init+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a0d      	ldr	r2, [pc, #52]	@ (80043c0 <HAL_Init+0x40>)
 800438a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800438e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <HAL_Init+0x40>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <HAL_Init+0x40>)
 8004396:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800439a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800439c:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_Init+0x40>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a07      	ldr	r2, [pc, #28]	@ (80043c0 <HAL_Init+0x40>)
 80043a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043a8:	2003      	movs	r0, #3
 80043aa:	f000 fbb1 	bl	8004b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ae:	200f      	movs	r0, #15
 80043b0:	f000 f808 	bl	80043c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043b4:	f7fe fe26 	bl	8003004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00

080043c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043cc:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <HAL_InitTick+0x54>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_InitTick+0x58>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043da:	fbb3 f3f1 	udiv	r3, r3, r1
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fbc9 	bl	8004b7a <HAL_SYSTICK_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00e      	b.n	8004410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b0f      	cmp	r3, #15
 80043f6:	d80a      	bhi.n	800440e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f8:	2200      	movs	r2, #0
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	f000 fb91 	bl	8004b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004404:	4a06      	ldr	r2, [pc, #24]	@ (8004420 <HAL_InitTick+0x5c>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	2000000c 	.word	0x2000000c
 800441c:	2000004c 	.word	0x2000004c
 8004420:	20000048 	.word	0x20000048

08004424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_IncTick+0x20>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_IncTick+0x24>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4413      	add	r3, r2
 8004434:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <HAL_IncTick+0x24>)
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000004c 	.word	0x2000004c
 8004448:	200004c8 	.word	0x200004c8

0800444c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return uwTick;
 8004450:	4b03      	ldr	r3, [pc, #12]	@ (8004460 <HAL_GetTick+0x14>)
 8004452:	681b      	ldr	r3, [r3, #0]
}
 8004454:	4618      	mov	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	200004c8 	.word	0x200004c8

08004464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800446c:	f7ff ffee 	bl	800444c <HAL_GetTick>
 8004470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d005      	beq.n	800448a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_Delay+0x44>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800448a:	bf00      	nop
 800448c:	f7ff ffde 	bl	800444c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	429a      	cmp	r2, r3
 800449a:	d8f7      	bhi.n	800448c <HAL_Delay+0x28>
  {
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000004c 	.word	0x2000004c

080044ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e033      	b.n	800452a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fd5e 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044f2:	f023 0302 	bic.w	r3, r3, #2
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f93a 	bl	8004778 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
 800451a:	e001      	b.n	8004520 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e105      	b.n	800475c <HAL_ADC_ConfigChannel+0x228>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b09      	cmp	r3, #9
 800455e:	d925      	bls.n	80045ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68d9      	ldr	r1, [r3, #12]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	4413      	add	r3, r2
 8004574:	3b1e      	subs	r3, #30
 8004576:	2207      	movs	r2, #7
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43da      	mvns	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	400a      	ands	r2, r1
 8004584:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68d9      	ldr	r1, [r3, #12]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	4618      	mov	r0, r3
 8004598:	4603      	mov	r3, r0
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4403      	add	r3, r0
 800459e:	3b1e      	subs	r3, #30
 80045a0:	409a      	lsls	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	60da      	str	r2, [r3, #12]
 80045aa:	e022      	b.n	80045f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6919      	ldr	r1, [r3, #16]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	2207      	movs	r2, #7
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43da      	mvns	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	400a      	ands	r2, r1
 80045ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6919      	ldr	r1, [r3, #16]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	4603      	mov	r3, r0
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4403      	add	r3, r0
 80045e8:	409a      	lsls	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d824      	bhi.n	8004644 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	3b05      	subs	r3, #5
 800460c:	221f      	movs	r2, #31
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	400a      	ands	r2, r1
 800461a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	4618      	mov	r0, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	3b05      	subs	r3, #5
 8004636:	fa00 f203 	lsl.w	r2, r0, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34
 8004642:	e04c      	b.n	80046de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d824      	bhi.n	8004696 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	3b23      	subs	r3, #35	@ 0x23
 800465e:	221f      	movs	r2, #31
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43da      	mvns	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	400a      	ands	r2, r1
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	4618      	mov	r0, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3b23      	subs	r3, #35	@ 0x23
 8004688:	fa00 f203 	lsl.w	r2, r0, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
 8004694:	e023      	b.n	80046de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	3b41      	subs	r3, #65	@ 0x41
 80046a8:	221f      	movs	r2, #31
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	400a      	ands	r2, r1
 80046b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4618      	mov	r0, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	3b41      	subs	r3, #65	@ 0x41
 80046d2:	fa00 f203 	lsl.w	r2, r0, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046de:	4b22      	ldr	r3, [pc, #136]	@ (8004768 <HAL_ADC_ConfigChannel+0x234>)
 80046e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a21      	ldr	r2, [pc, #132]	@ (800476c <HAL_ADC_ConfigChannel+0x238>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1cc>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b12      	cmp	r3, #18
 80046f2:	d105      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a19      	ldr	r2, [pc, #100]	@ (800476c <HAL_ADC_ConfigChannel+0x238>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d123      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x21e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b10      	cmp	r3, #16
 8004710:	d003      	beq.n	800471a <HAL_ADC_ConfigChannel+0x1e6>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b11      	cmp	r3, #17
 8004718:	d11b      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b10      	cmp	r3, #16
 800472c:	d111      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <HAL_ADC_ConfigChannel+0x23c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a10      	ldr	r2, [pc, #64]	@ (8004774 <HAL_ADC_ConfigChannel+0x240>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0c9a      	lsrs	r2, r3, #18
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004744:	e002      	b.n	800474c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3b01      	subs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f9      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40012300 	.word	0x40012300
 800476c:	40012000 	.word	0x40012000
 8004770:	2000000c 	.word	0x2000000c
 8004774:	431bde83 	.word	0x431bde83

08004778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004780:	4b79      	ldr	r3, [pc, #484]	@ (8004968 <ADC_Init+0x1f0>)
 8004782:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80047d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6899      	ldr	r1, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	4a58      	ldr	r2, [pc, #352]	@ (800496c <ADC_Init+0x1f4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d022      	beq.n	8004856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800481e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6899      	ldr	r1, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	e00f      	b.n	8004876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0202 	bic.w	r2, r2, #2
 8004884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7e1b      	ldrb	r3, [r3, #24]
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80048c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	3b01      	subs	r3, #1
 80048d0:	035a      	lsls	r2, r3, #13
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	e007      	b.n	80048ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	3b01      	subs	r3, #1
 8004908:	051a      	lsls	r2, r3, #20
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800492e:	025a      	lsls	r2, r3, #9
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	029a      	lsls	r2, r3, #10
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40012300 	.word	0x40012300
 800496c:	0f000001 	.word	0x0f000001

08004970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004980:	4b0c      	ldr	r3, [pc, #48]	@ (80049b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800498c:	4013      	ands	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800499c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049a2:	4a04      	ldr	r2, [pc, #16]	@ (80049b4 <__NVIC_SetPriorityGrouping+0x44>)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	60d3      	str	r3, [r2, #12]
}
 80049a8:	bf00      	nop
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049bc:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <__NVIC_GetPriorityGrouping+0x18>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	0a1b      	lsrs	r3, r3, #8
 80049c2:	f003 0307 	and.w	r3, r3, #7
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000ed00 	.word	0xe000ed00

080049d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	db0b      	blt.n	80049fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	f003 021f 	and.w	r2, r3, #31
 80049ec:	4907      	ldr	r1, [pc, #28]	@ (8004a0c <__NVIC_EnableIRQ+0x38>)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2001      	movs	r0, #1
 80049f6:	fa00 f202 	lsl.w	r2, r0, r2
 80049fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	e000e100 	.word	0xe000e100

08004a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db0a      	blt.n	8004a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	490c      	ldr	r1, [pc, #48]	@ (8004a5c <__NVIC_SetPriority+0x4c>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	440b      	add	r3, r1
 8004a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a38:	e00a      	b.n	8004a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4908      	ldr	r1, [pc, #32]	@ (8004a60 <__NVIC_SetPriority+0x50>)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	f003 030f 	and.w	r3, r3, #15
 8004a46:	3b04      	subs	r3, #4
 8004a48:	0112      	lsls	r2, r2, #4
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	761a      	strb	r2, [r3, #24]
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e100 	.word	0xe000e100
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	@ 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f1c3 0307 	rsb	r3, r3, #7
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	bf28      	it	cs
 8004a82:	2304      	movcs	r3, #4
 8004a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d902      	bls.n	8004a94 <NVIC_EncodePriority+0x30>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	3b03      	subs	r3, #3
 8004a92:	e000      	b.n	8004a96 <NVIC_EncodePriority+0x32>
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aac:	f04f 31ff 	mov.w	r1, #4294967295
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	43d9      	mvns	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004abc:	4313      	orrs	r3, r2
         );
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3724      	adds	r7, #36	@ 0x24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004adc:	d301      	bcc.n	8004ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e00f      	b.n	8004b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <SysTick_Config+0x40>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aea:	210f      	movs	r1, #15
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	f7ff ff8e 	bl	8004a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004af4:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <SysTick_Config+0x40>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004afa:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <SysTick_Config+0x40>)
 8004afc:	2207      	movs	r2, #7
 8004afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	e000e010 	.word	0xe000e010

08004b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff ff29 	bl	8004970 <__NVIC_SetPriorityGrouping>
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b38:	f7ff ff3e 	bl	80049b8 <__NVIC_GetPriorityGrouping>
 8004b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff8e 	bl	8004a64 <NVIC_EncodePriority>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff5d 	bl	8004a10 <__NVIC_SetPriority>
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	4603      	mov	r3, r0
 8004b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff ff31 	bl	80049d4 <__NVIC_EnableIRQ>
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ffa2 	bl	8004acc <SysTick_Config>
 8004b88:	4603      	mov	r3, r0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ba0:	f7ff fc54 	bl	800444c <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e099      	b.n	8004ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bd0:	e00f      	b.n	8004bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd2:	f7ff fc3b 	bl	800444c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d908      	bls.n	8004bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2203      	movs	r2, #3
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e078      	b.n	8004ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e8      	bne.n	8004bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <HAL_DMA_Init+0x158>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d107      	bne.n	8004c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c54:	4313      	orrs	r3, r2
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d117      	bne.n	8004cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00e      	beq.n	8004cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f9e9 	bl	8005070 <DMA_CheckFifoParam>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2240      	movs	r2, #64	@ 0x40
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e016      	b.n	8004ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9a0 	bl	8005004 <DMA_CalcBaseAndBitshift>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ccc:	223f      	movs	r2, #63	@ 0x3f
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	f010803f 	.word	0xf010803f

08004cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cfc:	4b8e      	ldr	r3, [pc, #568]	@ (8004f38 <HAL_DMA_IRQHandler+0x248>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a8e      	ldr	r2, [pc, #568]	@ (8004f3c <HAL_DMA_IRQHandler+0x24c>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	0a9b      	lsrs	r3, r3, #10
 8004d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	2208      	movs	r2, #8
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01a      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0204 	bic.w	r2, r2, #4
 8004d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	2208      	movs	r2, #8
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d012      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d7e:	2201      	movs	r2, #1
 8004d80:	409a      	lsls	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8a:	f043 0202 	orr.w	r2, r3, #2
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d96:	2204      	movs	r2, #4
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d012      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db4:	2204      	movs	r2, #4
 8004db6:	409a      	lsls	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dcc:	2210      	movs	r2, #16
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d043      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03c      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	2210      	movs	r2, #16
 8004dec:	409a      	lsls	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d018      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d108      	bne.n	8004e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d024      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
 8004e1e:	e01f      	b.n	8004e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
 8004e30:	e016      	b.n	8004e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d107      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0208 	bic.w	r2, r2, #8
 8004e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e64:	2220      	movs	r2, #32
 8004e66:	409a      	lsls	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 808f 	beq.w	8004f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8087 	beq.w	8004f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e86:	2220      	movs	r2, #32
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b05      	cmp	r3, #5
 8004e98:	d136      	bne.n	8004f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0216 	bic.w	r2, r2, #22
 8004ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <HAL_DMA_IRQHandler+0x1da>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0208 	bic.w	r2, r2, #8
 8004ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ede:	223f      	movs	r2, #63	@ 0x3f
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d07e      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	4798      	blx	r3
        }
        return;
 8004f06:	e079      	b.n	8004ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d031      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	e02c      	b.n	8004f90 <HAL_DMA_IRQHandler+0x2a0>
 8004f36:	bf00      	nop
 8004f38:	2000000c 	.word	0x2000000c
 8004f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
 8004f50:	e01e      	b.n	8004f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10f      	bne.n	8004f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0210 	bic.w	r2, r2, #16
 8004f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d032      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d022      	beq.n	8004fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d307      	bcc.n	8004fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f2      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x2cc>
 8004fd6:	e000      	b.n	8004fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
 8004ffa:	e000      	b.n	8004ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ffc:	bf00      	nop
    }
  }
}
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	3b10      	subs	r3, #16
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <DMA_CalcBaseAndBitshift+0x64>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800501e:	4a13      	ldr	r2, [pc, #76]	@ (800506c <DMA_CalcBaseAndBitshift+0x68>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d909      	bls.n	8005046 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	659a      	str	r2, [r3, #88]	@ 0x58
 8005044:	e007      	b.n	8005056 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	aaaaaaab 	.word	0xaaaaaaab
 800506c:	0800c70c 	.word	0x0800c70c

08005070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11f      	bne.n	80050ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d856      	bhi.n	800513e <DMA_CheckFifoParam+0xce>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <DMA_CheckFifoParam+0x28>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050bb 	.word	0x080050bb
 80050a0:	080050a9 	.word	0x080050a9
 80050a4:	0800513f 	.word	0x0800513f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d046      	beq.n	8005142 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e043      	b.n	8005142 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050c2:	d140      	bne.n	8005146 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c8:	e03d      	b.n	8005146 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050d2:	d121      	bne.n	8005118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d837      	bhi.n	800514a <DMA_CheckFifoParam+0xda>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <DMA_CheckFifoParam+0x70>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	080050f7 	.word	0x080050f7
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005109 	.word	0x08005109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e030      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d025      	beq.n	800514e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005106:	e022      	b.n	800514e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005110:	d11f      	bne.n	8005152 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005116:	e01c      	b.n	8005152 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d903      	bls.n	8005126 <DMA_CheckFifoParam+0xb6>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d003      	beq.n	800512c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005124:	e018      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
      break;
 800512a:	e015      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      break;
 800513c:	e00b      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 800513e:	bf00      	nop
 8005140:	e00a      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005142:	bf00      	nop
 8005144:	e008      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005146:	bf00      	nop
 8005148:	e006      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 800514a:	bf00      	nop
 800514c:	e004      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 800514e:	bf00      	nop
 8005150:	e002      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;   
 8005152:	bf00      	nop
 8005154:	e000      	b.n	8005158 <DMA_CheckFifoParam+0xe8>
      break;
 8005156:	bf00      	nop
    }
  } 
  
  return status; 
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	@ 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e16b      	b.n	800545c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005184:	2201      	movs	r2, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	f040 815a 	bne.w	8005456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d005      	beq.n	80051ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d130      	bne.n	800521c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	2b03      	cmp	r3, #3
 8005226:	d017      	beq.n	8005258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d123      	bne.n	80052ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	08da      	lsrs	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	08da      	lsrs	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3208      	adds	r2, #8
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2203      	movs	r2, #3
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80b4 	beq.w	8005456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	4b60      	ldr	r3, [pc, #384]	@ (8005474 <HAL_GPIO_Init+0x30c>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005474 <HAL_GPIO_Init+0x30c>)
 80052f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80052fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005474 <HAL_GPIO_Init+0x30c>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800530a:	4a5b      	ldr	r2, [pc, #364]	@ (8005478 <HAL_GPIO_Init+0x310>)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	3302      	adds	r3, #2
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a52      	ldr	r2, [pc, #328]	@ (800547c <HAL_GPIO_Init+0x314>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d02b      	beq.n	800538e <HAL_GPIO_Init+0x226>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a51      	ldr	r2, [pc, #324]	@ (8005480 <HAL_GPIO_Init+0x318>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d025      	beq.n	800538a <HAL_GPIO_Init+0x222>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a50      	ldr	r2, [pc, #320]	@ (8005484 <HAL_GPIO_Init+0x31c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <HAL_GPIO_Init+0x21e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4f      	ldr	r2, [pc, #316]	@ (8005488 <HAL_GPIO_Init+0x320>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d019      	beq.n	8005382 <HAL_GPIO_Init+0x21a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4e      	ldr	r2, [pc, #312]	@ (800548c <HAL_GPIO_Init+0x324>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_GPIO_Init+0x216>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4d      	ldr	r2, [pc, #308]	@ (8005490 <HAL_GPIO_Init+0x328>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00d      	beq.n	800537a <HAL_GPIO_Init+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4c      	ldr	r2, [pc, #304]	@ (8005494 <HAL_GPIO_Init+0x32c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <HAL_GPIO_Init+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4b      	ldr	r2, [pc, #300]	@ (8005498 <HAL_GPIO_Init+0x330>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_GPIO_Init+0x20a>
 800536e:	2307      	movs	r3, #7
 8005370:	e00e      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005372:	2308      	movs	r3, #8
 8005374:	e00c      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005376:	2306      	movs	r3, #6
 8005378:	e00a      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537a:	2305      	movs	r3, #5
 800537c:	e008      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537e:	2304      	movs	r3, #4
 8005380:	e006      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005382:	2303      	movs	r3, #3
 8005384:	e004      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005386:	2302      	movs	r3, #2
 8005388:	e002      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538e:	2300      	movs	r3, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f002 0203 	and.w	r2, r2, #3
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	4093      	lsls	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a0:	4935      	ldr	r1, [pc, #212]	@ (8005478 <HAL_GPIO_Init+0x310>)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	3302      	adds	r3, #2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ae:	4b3b      	ldr	r3, [pc, #236]	@ (800549c <HAL_GPIO_Init+0x334>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d2:	4a32      	ldr	r2, [pc, #200]	@ (800549c <HAL_GPIO_Init+0x334>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053d8:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_GPIO_Init+0x334>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fc:	4a27      	ldr	r2, [pc, #156]	@ (800549c <HAL_GPIO_Init+0x334>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005402:	4b26      	ldr	r3, [pc, #152]	@ (800549c <HAL_GPIO_Init+0x334>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005426:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <HAL_GPIO_Init+0x334>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800542c:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_GPIO_Init+0x334>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005450:	4a12      	ldr	r2, [pc, #72]	@ (800549c <HAL_GPIO_Init+0x334>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f ae90 	bls.w	8005184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3724      	adds	r7, #36	@ 0x24
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40013800 	.word	0x40013800
 800547c:	40020000 	.word	0x40020000
 8005480:	40020400 	.word	0x40020400
 8005484:	40020800 	.word	0x40020800
 8005488:	40020c00 	.word	0x40020c00
 800548c:	40021000 	.word	0x40021000
 8005490:	40021400 	.word	0x40021400
 8005494:	40021800 	.word	0x40021800
 8005498:	40021c00 	.word	0x40021c00
 800549c:	40013c00 	.word	0x40013c00

080054a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	460b      	mov	r3, r1
 80054aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
 80054bc:	e001      	b.n	80054c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
 80054dc:	4613      	mov	r3, r2
 80054de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054e0:	787b      	ldrb	r3, [r7, #1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054e6:	887a      	ldrh	r2, [r7, #2]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054ec:	e003      	b.n	80054f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	041a      	lsls	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	619a      	str	r2, [r3, #24]
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005514:	887a      	ldrh	r2, [r7, #2]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	041a      	lsls	r2, r3, #16
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	43d9      	mvns	r1, r3
 8005520:	887b      	ldrh	r3, [r7, #2]
 8005522:	400b      	ands	r3, r1
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	619a      	str	r2, [r3, #24]
}
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e12b      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7fc fce8 	bl	8001f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2224      	movs	r2, #36	@ 0x24
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800558a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800559a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800559c:	f001 fbfc 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
 80055a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	4a81      	ldr	r2, [pc, #516]	@ (80057ac <HAL_I2C_Init+0x274>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d807      	bhi.n	80055bc <HAL_I2C_Init+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a80      	ldr	r2, [pc, #512]	@ (80057b0 <HAL_I2C_Init+0x278>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bf94      	ite	ls
 80055b4:	2301      	movls	r3, #1
 80055b6:	2300      	movhi	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e006      	b.n	80055ca <HAL_I2C_Init+0x92>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a7d      	ldr	r2, [pc, #500]	@ (80057b4 <HAL_I2C_Init+0x27c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	bf94      	ite	ls
 80055c4:	2301      	movls	r3, #1
 80055c6:	2300      	movhi	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0e7      	b.n	80057a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a78      	ldr	r2, [pc, #480]	@ (80057b8 <HAL_I2C_Init+0x280>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	0c9b      	lsrs	r3, r3, #18
 80055dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a6a      	ldr	r2, [pc, #424]	@ (80057ac <HAL_I2C_Init+0x274>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d802      	bhi.n	800560c <HAL_I2C_Init+0xd4>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3301      	adds	r3, #1
 800560a:	e009      	b.n	8005620 <HAL_I2C_Init+0xe8>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	4a69      	ldr	r2, [pc, #420]	@ (80057bc <HAL_I2C_Init+0x284>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	3301      	adds	r3, #1
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005632:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	495c      	ldr	r1, [pc, #368]	@ (80057ac <HAL_I2C_Init+0x274>)
 800563c:	428b      	cmp	r3, r1
 800563e:	d819      	bhi.n	8005674 <HAL_I2C_Init+0x13c>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1e59      	subs	r1, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	1c59      	adds	r1, r3, #1
 8005650:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005654:	400b      	ands	r3, r1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_I2C_Init+0x138>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1e59      	subs	r1, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	fbb1 f3f3 	udiv	r3, r1, r3
 8005668:	3301      	adds	r3, #1
 800566a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800566e:	e051      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005670:	2304      	movs	r3, #4
 8005672:	e04f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d111      	bne.n	80056a0 <HAL_I2C_Init+0x168>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1e58      	subs	r0, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	440b      	add	r3, r1
 800568a:	fbb0 f3f3 	udiv	r3, r0, r3
 800568e:	3301      	adds	r3, #1
 8005690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e012      	b.n	80056c6 <HAL_I2C_Init+0x18e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Init+0x196>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e022      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10e      	bne.n	80056f4 <HAL_I2C_Init+0x1bc>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1e58      	subs	r0, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	460b      	mov	r3, r1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	440b      	add	r3, r1
 80056e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056e8:	3301      	adds	r3, #1
 80056ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f2:	e00f      	b.n	8005714 <HAL_I2C_Init+0x1dc>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1e58      	subs	r0, r3, #1
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	0099      	lsls	r1, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	fbb0 f3f3 	udiv	r3, r0, r3
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	6809      	ldr	r1, [r1, #0]
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69da      	ldr	r2, [r3, #28]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005742:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6911      	ldr	r1, [r2, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	4311      	orrs	r1, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	430b      	orrs	r3, r1
 8005756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	000186a0 	.word	0x000186a0
 80057b0:	001e847f 	.word	0x001e847f
 80057b4:	003d08ff 	.word	0x003d08ff
 80057b8:	431bde83 	.word	0x431bde83
 80057bc:	10624dd3 	.word	0x10624dd3

080057c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	460b      	mov	r3, r1
 80057d4:	813b      	strh	r3, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057da:	f7fe fe37 	bl	800444c <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	f040 80d9 	bne.w	80059a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	2319      	movs	r3, #25
 80057f4:	2201      	movs	r2, #1
 80057f6:	496d      	ldr	r1, [pc, #436]	@ (80059ac <HAL_I2C_Mem_Write+0x1ec>)
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fc7f 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005804:	2302      	movs	r3, #2
 8005806:	e0cc      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_I2C_Mem_Write+0x56>
 8005812:	2302      	movs	r3, #2
 8005814:	e0c5      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b01      	cmp	r3, #1
 800582a:	d007      	beq.n	800583c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800584a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2221      	movs	r2, #33	@ 0x21
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2240      	movs	r2, #64	@ 0x40
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800586c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a4d      	ldr	r2, [pc, #308]	@ (80059b0 <HAL_I2C_Mem_Write+0x1f0>)
 800587c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800587e:	88f8      	ldrh	r0, [r7, #6]
 8005880:	893a      	ldrh	r2, [r7, #8]
 8005882:	8979      	ldrh	r1, [r7, #10]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4603      	mov	r3, r0
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fab6 	bl	8005e00 <I2C_RequestMemoryWrite>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d052      	beq.n	8005940 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e081      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fd00 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00d      	beq.n	80058ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d107      	bne.n	80058c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e06b      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	781a      	ldrb	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b04      	cmp	r3, #4
 8005906:	d11b      	bne.n	8005940 <HAL_I2C_Mem_Write+0x180>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d017      	beq.n	8005940 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1aa      	bne.n	800589e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fcec 	bl	800632a <I2C_WaitOnBTFFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00d      	beq.n	8005974 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	2b04      	cmp	r3, #4
 800595e:	d107      	bne.n	8005970 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800596e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e016      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	00100002 	.word	0x00100002
 80059b0:	ffff0000 	.word	0xffff0000

080059b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	461a      	mov	r2, r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	817b      	strh	r3, [r7, #10]
 80059c6:	460b      	mov	r3, r1
 80059c8:	813b      	strh	r3, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059ce:	f7fe fd3d 	bl	800444c <HAL_GetTick>
 80059d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b20      	cmp	r3, #32
 80059de:	f040 8208 	bne.w	8005df2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2319      	movs	r3, #25
 80059e8:	2201      	movs	r2, #1
 80059ea:	497b      	ldr	r1, [pc, #492]	@ (8005bd8 <HAL_I2C_Mem_Read+0x224>)
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 fb85 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
 80059fa:	e1fb      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_I2C_Mem_Read+0x56>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e1f4      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d007      	beq.n	8005a30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2222      	movs	r2, #34	@ 0x22
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2240      	movs	r2, #64	@ 0x40
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bdc <HAL_I2C_Mem_Read+0x228>)
 8005a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a72:	88f8      	ldrh	r0, [r7, #6]
 8005a74:	893a      	ldrh	r2, [r7, #8]
 8005a76:	8979      	ldrh	r1, [r7, #10]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	4603      	mov	r3, r0
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa52 	bl	8005f2c <I2C_RequestMemoryRead>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e1b0      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d113      	bne.n	8005ac2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	623b      	str	r3, [r7, #32]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e184      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d11b      	bne.n	8005b02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	61fb      	str	r3, [r7, #28]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e164      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d11b      	bne.n	8005b42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	e144      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b58:	e138      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	f200 80f1 	bhi.w	8005d46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d123      	bne.n	8005bb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f000 fc1b 	bl	80063ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e139      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bb2:	e10b      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d14e      	bne.n	8005c5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4906      	ldr	r1, [pc, #24]	@ (8005be0 <HAL_I2C_Mem_Read+0x22c>)
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 fa98 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d008      	beq.n	8005be4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e10e      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
 8005bd6:	bf00      	nop
 8005bd8:	00100002 	.word	0x00100002
 8005bdc:	ffff0000 	.word	0xffff0000
 8005be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c58:	e0b8      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	2200      	movs	r2, #0
 8005c62:	4966      	ldr	r1, [pc, #408]	@ (8005dfc <HAL_I2C_Mem_Read+0x448>)
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fa49 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0bf      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	1c5a      	adds	r2, r3, #1
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	494f      	ldr	r1, [pc, #316]	@ (8005dfc <HAL_I2C_Mem_Read+0x448>)
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fa1b 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e091      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d44:	e042      	b.n	8005dcc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fb2e 	bl	80063ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e04c      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d118      	bne.n	8005dcc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f aec2 	bne.w	8005b5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	@ 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	00010004 	.word	0x00010004

08005e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	460b      	mov	r3, r1
 8005e14:	813b      	strh	r3, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f960 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e50:	d103      	bne.n	8005e5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e05f      	b.n	8005f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e5e:	897b      	ldrh	r3, [r7, #10]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	492d      	ldr	r1, [pc, #180]	@ (8005f28 <I2C_RequestMemoryWrite+0x128>)
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f998 	bl	80061aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e04c      	b.n	8005f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9c:	6a39      	ldr	r1, [r7, #32]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa02 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d107      	bne.n	8005ec2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e02b      	b.n	8005f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d105      	bne.n	8005ed8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ecc:	893b      	ldrh	r3, [r7, #8]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	611a      	str	r2, [r3, #16]
 8005ed6:	e021      	b.n	8005f1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f9dc 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e005      	b.n	8005f1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f12:	893b      	ldrh	r3, [r7, #8]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	00010002 	.word	0x00010002

08005f2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	813b      	strh	r3, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f8c2 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00d      	beq.n	8005f9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f8c:	d103      	bne.n	8005f96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e0aa      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f9a:	897b      	ldrh	r3, [r7, #10]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	4952      	ldr	r1, [pc, #328]	@ (80060f8 <I2C_RequestMemoryRead+0x1cc>)
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8fa 	bl	80061aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e097      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd8:	6a39      	ldr	r1, [r7, #32]
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f964 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d107      	bne.n	8005ffe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e076      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006008:	893b      	ldrh	r3, [r7, #8]
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]
 8006012:	e021      	b.n	8006058 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006014:	893b      	ldrh	r3, [r7, #8]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	b29b      	uxth	r3, r3
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f93e 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d107      	bne.n	800604a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e050      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800604e:	893b      	ldrh	r3, [r7, #8]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605a:	6a39      	ldr	r1, [r7, #32]
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f923 	bl	80062a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00d      	beq.n	8006084 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	2b04      	cmp	r3, #4
 800606e:	d107      	bne.n	8006080 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e035      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006092:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2200      	movs	r2, #0
 800609c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f82b 	bl	80060fc <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ba:	d103      	bne.n	80060c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e013      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060c8:	897b      	ldrh	r3, [r7, #10]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	6a3a      	ldr	r2, [r7, #32]
 80060dc:	4906      	ldr	r1, [pc, #24]	@ (80060f8 <I2C_RequestMemoryRead+0x1cc>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f863 	bl	80061aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	00010002 	.word	0x00010002

080060fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800610c:	e025      	b.n	800615a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006114:	d021      	beq.n	800615a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006116:	f7fe f999 	bl	800444c <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d116      	bne.n	800615a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	f043 0220 	orr.w	r2, r3, #32
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e023      	b.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	0c1b      	lsrs	r3, r3, #16
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10d      	bne.n	8006180 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	43da      	mvns	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf0c      	ite	eq
 8006176:	2301      	moveq	r3, #1
 8006178:	2300      	movne	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	e00c      	b.n	800619a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	43da      	mvns	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	4013      	ands	r3, r2
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf0c      	ite	eq
 8006192:	2301      	moveq	r3, #1
 8006194:	2300      	movne	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	429a      	cmp	r2, r3
 800619e:	d0b6      	beq.n	800610e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061b8:	e051      	b.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c8:	d123      	bne.n	8006212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e046      	b.n	80062a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d021      	beq.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fe f917 	bl	800444c <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d116      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e020      	b.n	80062a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10c      	bne.n	8006282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	43da      	mvns	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4013      	ands	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	bf14      	ite	ne
 800627a:	2301      	movne	r3, #1
 800627c:	2300      	moveq	r3, #0
 800627e:	b2db      	uxtb	r3, r3
 8006280:	e00b      	b.n	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	43da      	mvns	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4013      	ands	r3, r2
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf14      	ite	ne
 8006294:	2301      	movne	r3, #1
 8006296:	2300      	moveq	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d18d      	bne.n	80061ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062b4:	e02d      	b.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8ce 	bl	8006458 <I2C_IsAcknowledgeFailed>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e02d      	b.n	8006322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d021      	beq.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fe f8bd 	bl	800444c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d116      	bne.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e007      	b.n	8006322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631c:	2b80      	cmp	r3, #128	@ 0x80
 800631e:	d1ca      	bne.n	80062b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006336:	e02d      	b.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f88d 	bl	8006458 <I2C_IsAcknowledgeFailed>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e02d      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634e:	d021      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006350:	f7fe f87c 	bl	800444c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	429a      	cmp	r2, r3
 800635e:	d302      	bcc.n	8006366 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d116      	bne.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e007      	b.n	80063a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d1ca      	bne.n	8006338 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063b8:	e042      	b.n	8006440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d119      	bne.n	80063fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0210 	mvn.w	r2, #16
 80063d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e029      	b.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fc:	f7fe f826 	bl	800444c <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d116      	bne.n	8006440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	f043 0220 	orr.w	r2, r3, #32
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e007      	b.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b40      	cmp	r3, #64	@ 0x40
 800644c:	d1b5      	bne.n	80063ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646e:	d11b      	bne.n	80064a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	f043 0204 	orr.w	r2, r3, #4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e267      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d075      	beq.n	80065c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064d6:	4b88      	ldr	r3, [pc, #544]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d00c      	beq.n	80064fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064e2:	4b85      	ldr	r3, [pc, #532]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d112      	bne.n	8006514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80064ee:	4b82      	ldr	r3, [pc, #520]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064fa:	d10b      	bne.n	8006514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064fc:	4b7e      	ldr	r3, [pc, #504]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05b      	beq.n	80065c0 <HAL_RCC_OscConfig+0x108>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d157      	bne.n	80065c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e242      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651c:	d106      	bne.n	800652c <HAL_RCC_OscConfig+0x74>
 800651e:	4b76      	ldr	r3, [pc, #472]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a75      	ldr	r2, [pc, #468]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e01d      	b.n	8006568 <HAL_RCC_OscConfig+0xb0>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006534:	d10c      	bne.n	8006550 <HAL_RCC_OscConfig+0x98>
 8006536:	4b70      	ldr	r3, [pc, #448]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a6f      	ldr	r2, [pc, #444]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800653c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4b6d      	ldr	r3, [pc, #436]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a6c      	ldr	r2, [pc, #432]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e00b      	b.n	8006568 <HAL_RCC_OscConfig+0xb0>
 8006550:	4b69      	ldr	r3, [pc, #420]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a68      	ldr	r2, [pc, #416]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	4b66      	ldr	r3, [pc, #408]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a65      	ldr	r2, [pc, #404]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d013      	beq.n	8006598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006570:	f7fd ff6c 	bl	800444c <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006578:	f7fd ff68 	bl	800444c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b64      	cmp	r3, #100	@ 0x64
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e207      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658a:	4b5b      	ldr	r3, [pc, #364]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0xc0>
 8006596:	e014      	b.n	80065c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006598:	f7fd ff58 	bl	800444c <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065a0:	f7fd ff54 	bl	800444c <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	@ 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e1f3      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065b2:	4b51      	ldr	r3, [pc, #324]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0xe8>
 80065be:	e000      	b.n	80065c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d063      	beq.n	8006696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065ce:	4b4a      	ldr	r3, [pc, #296]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065da:	4b47      	ldr	r3, [pc, #284]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d11c      	bne.n	8006620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80065e6:	4b44      	ldr	r3, [pc, #272]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d116      	bne.n	8006620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065f2:	4b41      	ldr	r3, [pc, #260]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_RCC_OscConfig+0x152>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d001      	beq.n	800660a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e1c7      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660a:	4b3b      	ldr	r3, [pc, #236]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4937      	ldr	r1, [pc, #220]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800661a:	4313      	orrs	r3, r2
 800661c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800661e:	e03a      	b.n	8006696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d020      	beq.n	800666a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006628:	4b34      	ldr	r3, [pc, #208]	@ (80066fc <HAL_RCC_OscConfig+0x244>)
 800662a:	2201      	movs	r2, #1
 800662c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662e:	f7fd ff0d 	bl	800444c <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006636:	f7fd ff09 	bl	800444c <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e1a8      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006648:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0f0      	beq.n	8006636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006654:	4b28      	ldr	r3, [pc, #160]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	4925      	ldr	r1, [pc, #148]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 8006664:	4313      	orrs	r3, r2
 8006666:	600b      	str	r3, [r1, #0]
 8006668:	e015      	b.n	8006696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800666a:	4b24      	ldr	r3, [pc, #144]	@ (80066fc <HAL_RCC_OscConfig+0x244>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006670:	f7fd feec 	bl	800444c <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006678:	f7fd fee8 	bl	800444c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e187      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668a:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d036      	beq.n	8006710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d016      	beq.n	80066d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066aa:	4b15      	ldr	r3, [pc, #84]	@ (8006700 <HAL_RCC_OscConfig+0x248>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b0:	f7fd fecc 	bl	800444c <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b8:	f7fd fec8 	bl	800444c <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e167      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ca:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_RCC_OscConfig+0x240>)
 80066cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0f0      	beq.n	80066b8 <HAL_RCC_OscConfig+0x200>
 80066d6:	e01b      	b.n	8006710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d8:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <HAL_RCC_OscConfig+0x248>)
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066de:	f7fd feb5 	bl	800444c <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e4:	e00e      	b.n	8006704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066e6:	f7fd feb1 	bl	800444c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d907      	bls.n	8006704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e150      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
 80066f8:	40023800 	.word	0x40023800
 80066fc:	42470000 	.word	0x42470000
 8006700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006704:	4b88      	ldr	r3, [pc, #544]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ea      	bne.n	80066e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8097 	beq.w	800684c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006722:	4b81      	ldr	r3, [pc, #516]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	2300      	movs	r3, #0
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	4b7d      	ldr	r3, [pc, #500]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	4a7c      	ldr	r2, [pc, #496]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800673c:	6413      	str	r3, [r2, #64]	@ 0x40
 800673e:	4b7a      	ldr	r3, [pc, #488]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006746:	60bb      	str	r3, [r7, #8]
 8006748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674e:	4b77      	ldr	r3, [pc, #476]	@ (800692c <HAL_RCC_OscConfig+0x474>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006756:	2b00      	cmp	r3, #0
 8006758:	d118      	bne.n	800678c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800675a:	4b74      	ldr	r3, [pc, #464]	@ (800692c <HAL_RCC_OscConfig+0x474>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a73      	ldr	r2, [pc, #460]	@ (800692c <HAL_RCC_OscConfig+0x474>)
 8006760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006766:	f7fd fe71 	bl	800444c <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800676e:	f7fd fe6d 	bl	800444c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e10c      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006780:	4b6a      	ldr	r3, [pc, #424]	@ (800692c <HAL_RCC_OscConfig+0x474>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d106      	bne.n	80067a2 <HAL_RCC_OscConfig+0x2ea>
 8006794:	4b64      	ldr	r3, [pc, #400]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006798:	4a63      	ldr	r2, [pc, #396]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	6713      	str	r3, [r2, #112]	@ 0x70
 80067a0:	e01c      	b.n	80067dc <HAL_RCC_OscConfig+0x324>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b05      	cmp	r3, #5
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x30c>
 80067aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067b0:	f043 0304 	orr.w	r3, r3, #4
 80067b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80067c2:	e00b      	b.n	80067dc <HAL_RCC_OscConfig+0x324>
 80067c4:	4b58      	ldr	r3, [pc, #352]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c8:	4a57      	ldr	r2, [pc, #348]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067ca:	f023 0301 	bic.w	r3, r3, #1
 80067ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d0:	4b55      	ldr	r3, [pc, #340]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d4:	4a54      	ldr	r2, [pc, #336]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80067d6:	f023 0304 	bic.w	r3, r3, #4
 80067da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d015      	beq.n	8006810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e4:	f7fd fe32 	bl	800444c <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ea:	e00a      	b.n	8006802 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fd fe2e 	bl	800444c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e0cb      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006802:	4b49      	ldr	r3, [pc, #292]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ee      	beq.n	80067ec <HAL_RCC_OscConfig+0x334>
 800680e:	e014      	b.n	800683a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006810:	f7fd fe1c 	bl	800444c <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006816:	e00a      	b.n	800682e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006818:	f7fd fe18 	bl	800444c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e0b5      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800682e:	4b3e      	ldr	r3, [pc, #248]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1ee      	bne.n	8006818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800683a:	7dfb      	ldrb	r3, [r7, #23]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d105      	bne.n	800684c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006840:	4b39      	ldr	r3, [pc, #228]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	4a38      	ldr	r2, [pc, #224]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800684a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80a1 	beq.w	8006998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006856:	4b34      	ldr	r3, [pc, #208]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 030c 	and.w	r3, r3, #12
 800685e:	2b08      	cmp	r3, #8
 8006860:	d05c      	beq.n	800691c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d141      	bne.n	80068ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686a:	4b31      	ldr	r3, [pc, #196]	@ (8006930 <HAL_RCC_OscConfig+0x478>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006870:	f7fd fdec 	bl	800444c <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006878:	f7fd fde8 	bl	800444c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e087      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800688a:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69da      	ldr	r2, [r3, #28]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	3b01      	subs	r3, #1
 80068b0:	041b      	lsls	r3, r3, #16
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	061b      	lsls	r3, r3, #24
 80068ba:	491b      	ldr	r1, [pc, #108]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006930 <HAL_RCC_OscConfig+0x478>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c6:	f7fd fdc1 	bl	800444c <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068ce:	f7fd fdbd 	bl	800444c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e05c      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e0:	4b11      	ldr	r3, [pc, #68]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x416>
 80068ec:	e054      	b.n	8006998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ee:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <HAL_RCC_OscConfig+0x478>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f4:	f7fd fdaa 	bl	800444c <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068fc:	f7fd fda6 	bl	800444c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e045      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <HAL_RCC_OscConfig+0x470>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x444>
 800691a:	e03d      	b.n	8006998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d107      	bne.n	8006934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e038      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
 8006928:	40023800 	.word	0x40023800
 800692c:	40007000 	.word	0x40007000
 8006930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006934:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <HAL_RCC_OscConfig+0x4ec>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d028      	beq.n	8006994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800694c:	429a      	cmp	r2, r3
 800694e:	d121      	bne.n	8006994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d11a      	bne.n	8006994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006964:	4013      	ands	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800696a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800696c:	4293      	cmp	r3, r2
 800696e:	d111      	bne.n	8006994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	3b01      	subs	r3, #1
 800697e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d107      	bne.n	8006994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800

080069a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e0cc      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069bc:	4b68      	ldr	r3, [pc, #416]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d90c      	bls.n	80069e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	4b65      	ldr	r3, [pc, #404]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b63      	ldr	r3, [pc, #396]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e0b8      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069fc:	4b59      	ldr	r3, [pc, #356]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4a58      	ldr	r2, [pc, #352]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a14:	4b53      	ldr	r3, [pc, #332]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4a52      	ldr	r2, [pc, #328]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a20:	4b50      	ldr	r3, [pc, #320]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	494d      	ldr	r1, [pc, #308]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d044      	beq.n	8006ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d107      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	4b47      	ldr	r3, [pc, #284]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d119      	bne.n	8006a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e07f      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d003      	beq.n	8006a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d107      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a66:	4b3f      	ldr	r3, [pc, #252]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d109      	bne.n	8006a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e06f      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a76:	4b3b      	ldr	r3, [pc, #236]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e067      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a86:	4b37      	ldr	r3, [pc, #220]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f023 0203 	bic.w	r2, r3, #3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4934      	ldr	r1, [pc, #208]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a98:	f7fd fcd8 	bl	800444c <HAL_GetTick>
 8006a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa0:	f7fd fcd4 	bl	800444c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e04f      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f003 020c 	and.w	r2, r3, #12
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d1eb      	bne.n	8006aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac8:	4b25      	ldr	r3, [pc, #148]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d20c      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad6:	4b22      	ldr	r3, [pc, #136]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b20      	ldr	r3, [pc, #128]	@ (8006b60 <HAL_RCC_ClockConfig+0x1b8>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e032      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4916      	ldr	r1, [pc, #88]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b1a:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	490e      	ldr	r1, [pc, #56]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b2e:	f000 f821 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b0b      	ldr	r3, [pc, #44]	@ (8006b64 <HAL_RCC_ClockConfig+0x1bc>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	091b      	lsrs	r3, r3, #4
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	490a      	ldr	r1, [pc, #40]	@ (8006b68 <HAL_RCC_ClockConfig+0x1c0>)
 8006b40:	5ccb      	ldrb	r3, [r1, r3]
 8006b42:	fa22 f303 	lsr.w	r3, r2, r3
 8006b46:	4a09      	ldr	r2, [pc, #36]	@ (8006b6c <HAL_RCC_ClockConfig+0x1c4>)
 8006b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b4a:	4b09      	ldr	r3, [pc, #36]	@ (8006b70 <HAL_RCC_ClockConfig+0x1c8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd fc38 	bl	80043c4 <HAL_InitTick>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40023c00 	.word	0x40023c00
 8006b64:	40023800 	.word	0x40023800
 8006b68:	0800c6f4 	.word	0x0800c6f4
 8006b6c:	2000000c 	.word	0x2000000c
 8006b70:	20000048 	.word	0x20000048

08006b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b78:	b094      	sub	sp, #80	@ 0x50
 8006b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b80:	2300      	movs	r3, #0
 8006b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b84:	2300      	movs	r3, #0
 8006b86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b8c:	4b79      	ldr	r3, [pc, #484]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 030c 	and.w	r3, r3, #12
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d00d      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	f200 80e1 	bhi.w	8006d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d003      	beq.n	8006bae <HAL_RCC_GetSysClockFreq+0x3a>
 8006ba6:	e0db      	b.n	8006d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ba8:	4b73      	ldr	r3, [pc, #460]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006baa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006bac:	e0db      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bae:	4b73      	ldr	r3, [pc, #460]	@ (8006d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8006bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bb2:	e0d8      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d063      	beq.n	8006c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bca:	4b6a      	ldr	r3, [pc, #424]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	099b      	lsrs	r3, r3, #6
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bde:	2300      	movs	r3, #0
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	f04f 0000 	mov.w	r0, #0
 8006bee:	f04f 0100 	mov.w	r1, #0
 8006bf2:	0159      	lsls	r1, r3, #5
 8006bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bf8:	0150      	lsls	r0, r2, #5
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4621      	mov	r1, r4
 8006c00:	1a51      	subs	r1, r2, r1
 8006c02:	6139      	str	r1, [r7, #16]
 8006c04:	4629      	mov	r1, r5
 8006c06:	eb63 0301 	sbc.w	r3, r3, r1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c18:	4659      	mov	r1, fp
 8006c1a:	018b      	lsls	r3, r1, #6
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c22:	4651      	mov	r1, sl
 8006c24:	018a      	lsls	r2, r1, #6
 8006c26:	4651      	mov	r1, sl
 8006c28:	ebb2 0801 	subs.w	r8, r2, r1
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8006c32:	f04f 0200 	mov.w	r2, #0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c46:	4690      	mov	r8, r2
 8006c48:	4699      	mov	r9, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	eb18 0303 	adds.w	r3, r8, r3
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	462b      	mov	r3, r5
 8006c54:	eb49 0303 	adc.w	r3, r9, r3
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	f04f 0200 	mov.w	r2, #0
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c66:	4629      	mov	r1, r5
 8006c68:	024b      	lsls	r3, r1, #9
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c70:	4621      	mov	r1, r4
 8006c72:	024a      	lsls	r2, r1, #9
 8006c74:	4610      	mov	r0, r2
 8006c76:	4619      	mov	r1, r3
 8006c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c84:	f7f9 ff80 	bl	8000b88 <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c90:	e058      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c92:	4b38      	ldr	r3, [pc, #224]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	4611      	mov	r1, r2
 8006c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ca2:	623b      	str	r3, [r7, #32]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cac:	4642      	mov	r2, r8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	f04f 0000 	mov.w	r0, #0
 8006cb4:	f04f 0100 	mov.w	r1, #0
 8006cb8:	0159      	lsls	r1, r3, #5
 8006cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cbe:	0150      	lsls	r0, r2, #5
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cca:	4649      	mov	r1, r9
 8006ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	00eb      	lsls	r3, r5, #3
 8006cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cfa:	00e2      	lsls	r2, r4, #3
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	461d      	mov	r5, r3
 8006d00:	4643      	mov	r3, r8
 8006d02:	18e3      	adds	r3, r4, r3
 8006d04:	603b      	str	r3, [r7, #0]
 8006d06:	464b      	mov	r3, r9
 8006d08:	eb45 0303 	adc.w	r3, r5, r3
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	028b      	lsls	r3, r1, #10
 8006d1e:	4621      	mov	r1, r4
 8006d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d24:	4621      	mov	r1, r4
 8006d26:	028a      	lsls	r2, r1, #10
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2e:	2200      	movs	r2, #0
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	61fa      	str	r2, [r7, #28]
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	f7f9 ff26 	bl	8000b88 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4613      	mov	r3, r2
 8006d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	3301      	adds	r3, #1
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d5e:	e002      	b.n	8006d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3750      	adds	r7, #80	@ 0x50
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d72:	bf00      	nop
 8006d74:	40023800 	.word	0x40023800
 8006d78:	00f42400 	.word	0x00f42400
 8006d7c:	007a1200 	.word	0x007a1200

08006d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d84:	4b03      	ldr	r3, [pc, #12]	@ (8006d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d86:	681b      	ldr	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c

08006d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d9c:	f7ff fff0 	bl	8006d80 <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	0a9b      	lsrs	r3, r3, #10
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	0800c704 	.word	0x0800c704

08006dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e07b      	b.n	8006eca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de2:	d009      	beq.n	8006df8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	61da      	str	r2, [r3, #28]
 8006dea:	e005      	b.n	8006df8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fc f8ae 	bl	8002f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e40:	431a      	orrs	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7c:	ea42 0103 	orr.w	r1, r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	f003 0104 	and.w	r1, r3, #4
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	f003 0210 	and.w	r2, r3, #16
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006eb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_SPI_Transmit+0x22>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e126      	b.n	8007142 <HAL_SPI_Transmit+0x270>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006efc:	f7fd faa6 	bl	800444c <HAL_GetTick>
 8006f00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f02:	88fb      	ldrh	r3, [r7, #6]
 8006f04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d002      	beq.n	8006f18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
 8006f14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f16:	e10b      	b.n	8007130 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_Transmit+0x52>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f28:	e102      	b.n	8007130 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	88fa      	ldrh	r2, [r7, #6]
 8006f42:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f70:	d10f      	bne.n	8006f92 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b40      	cmp	r3, #64	@ 0x40
 8006f9e:	d007      	beq.n	8006fb0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb8:	d14b      	bne.n	8007052 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_Transmit+0xf6>
 8006fc2:	8afb      	ldrh	r3, [r7, #22]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d13e      	bne.n	8007046 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fcc:	881a      	ldrh	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fec:	e02b      	b.n	8007046 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d112      	bne.n	8007022 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007000:	881a      	ldrh	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700c:	1c9a      	adds	r2, r3, #2
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007020:	e011      	b.n	8007046 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007022:	f7fd fa13 	bl	800444c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d803      	bhi.n	800703a <HAL_SPI_Transmit+0x168>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d102      	bne.n	8007040 <HAL_SPI_Transmit+0x16e>
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007044:	e074      	b.n	8007130 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ce      	bne.n	8006fee <HAL_SPI_Transmit+0x11c>
 8007050:	e04c      	b.n	80070ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SPI_Transmit+0x18e>
 800705a:	8afb      	ldrh	r3, [r7, #22]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d140      	bne.n	80070e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007086:	e02c      	b.n	80070e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d113      	bne.n	80070be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	7812      	ldrb	r2, [r2, #0]
 80070a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80070bc:	e011      	b.n	80070e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070be:	f7fd f9c5 	bl	800444c <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d803      	bhi.n	80070d6 <HAL_SPI_Transmit+0x204>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d102      	bne.n	80070dc <HAL_SPI_Transmit+0x20a>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070e0:	e026      	b.n	8007130 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1cd      	bne.n	8007088 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f8b3 	bl	800725c <SPI_EndRxTxTransaction>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800710a:	2300      	movs	r3, #0
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	613b      	str	r3, [r7, #16]
 800711e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e000      	b.n	8007130 <HAL_SPI_Transmit+0x25e>
  }

error:
 800712e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007140:	7ffb      	ldrb	r3, [r7, #31]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800715c:	f7fd f976 	bl	800444c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	1a9b      	subs	r3, r3, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	4413      	add	r3, r2
 800716a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800716c:	f7fd f96e 	bl	800444c <HAL_GetTick>
 8007170:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007172:	4b39      	ldr	r3, [pc, #228]	@ (8007258 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	015b      	lsls	r3, r3, #5
 8007178:	0d1b      	lsrs	r3, r3, #20
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	fb02 f303 	mul.w	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007182:	e054      	b.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d050      	beq.n	800722e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800718c:	f7fd f95e 	bl	800444c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	429a      	cmp	r2, r3
 800719a:	d902      	bls.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d13d      	bne.n	800721e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ba:	d111      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	d004      	beq.n	80071d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ce:	d107      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071e8:	d10f      	bne.n	800720a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e017      	b.n	800724e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3b01      	subs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	429a      	cmp	r2, r3
 800724a:	d19b      	bne.n	8007184 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	2000000c 	.word	0x2000000c

0800725c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <SPI_EndRxTxTransaction+0x7c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1b      	ldr	r2, [pc, #108]	@ (80072dc <SPI_EndRxTxTransaction+0x80>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0d5b      	lsrs	r3, r3, #21
 8007274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007286:	d112      	bne.n	80072ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2200      	movs	r2, #0
 8007290:	2180      	movs	r1, #128	@ 0x80
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7ff ff5a 	bl	800714c <SPI_WaitFlagStateUntilTimeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e00f      	b.n	80072ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c4:	2b80      	cmp	r3, #128	@ 0x80
 80072c6:	d0f2      	beq.n	80072ae <SPI_EndRxTxTransaction+0x52>
 80072c8:	e000      	b.n	80072cc <SPI_EndRxTxTransaction+0x70>
        break;
 80072ca:	bf00      	nop
  }

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	2000000c 	.word	0x2000000c
 80072dc:	165e9f81 	.word	0x165e9f81

080072e0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e034      	b.n	8007360 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7fa f866 	bl	80013dc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3308      	adds	r3, #8
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f000 ffda 	bl	80082d4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	f001 f824 	bl	8008378 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6858      	ldr	r0, [r3, #4]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	f001 f859 	bl	80083f4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6892      	ldr	r2, [r2, #8]
 800734a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6892      	ldr	r2, [r2, #8]
 8007356:	f041 0101 	orr.w	r1, r1, #1
 800735a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e041      	b.n	80073fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fc f866 	bl	8003460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	4610      	mov	r0, r2
 80073a8:	f000 fc1a 	bl	8007be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b01      	cmp	r3, #1
 800741a:	d001      	beq.n	8007420 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e046      	b.n	80074ae <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2202      	movs	r2, #2
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a23      	ldr	r2, [pc, #140]	@ (80074bc <HAL_TIM_Base_Start+0xb4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d022      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800743a:	d01d      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1f      	ldr	r2, [pc, #124]	@ (80074c0 <HAL_TIM_Base_Start+0xb8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d018      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1e      	ldr	r2, [pc, #120]	@ (80074c4 <HAL_TIM_Base_Start+0xbc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d013      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1c      	ldr	r2, [pc, #112]	@ (80074c8 <HAL_TIM_Base_Start+0xc0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00e      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1b      	ldr	r2, [pc, #108]	@ (80074cc <HAL_TIM_Base_Start+0xc4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d009      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a19      	ldr	r2, [pc, #100]	@ (80074d0 <HAL_TIM_Base_Start+0xc8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d004      	beq.n	8007478 <HAL_TIM_Base_Start+0x70>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a18      	ldr	r2, [pc, #96]	@ (80074d4 <HAL_TIM_Base_Start+0xcc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d111      	bne.n	800749c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b06      	cmp	r3, #6
 8007488:	d010      	beq.n	80074ac <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f042 0201 	orr.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749a:	e007      	b.n	80074ac <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40000400 	.word	0x40000400
 80074c4:	40000800 	.word	0x40000800
 80074c8:	40000c00 	.word	0x40000c00
 80074cc:	40010400 	.word	0x40010400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40001800 	.word	0x40001800

080074d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e04e      	b.n	800758e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a23      	ldr	r2, [pc, #140]	@ (800759c <HAL_TIM_Base_Start_IT+0xc4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d022      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751a:	d01d      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1f      	ldr	r2, [pc, #124]	@ (80075a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d018      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1e      	ldr	r2, [pc, #120]	@ (80075a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1c      	ldr	r2, [pc, #112]	@ (80075a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <HAL_TIM_Base_Start_IT+0xd4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a19      	ldr	r2, [pc, #100]	@ (80075b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <HAL_TIM_Base_Start_IT+0x80>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	@ (80075b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d111      	bne.n	800757c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 0307 	and.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b06      	cmp	r3, #6
 8007568:	d010      	beq.n	800758c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0201 	orr.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	e007      	b.n	800758c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40010000 	.word	0x40010000
 80075a0:	40000400 	.word	0x40000400
 80075a4:	40000800 	.word	0x40000800
 80075a8:	40000c00 	.word	0x40000c00
 80075ac:	40010400 	.word	0x40010400
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40001800 	.word	0x40001800

080075b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e041      	b.n	800764e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f839 	bl	8007656 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f000 faf2 	bl	8007be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d122      	bne.n	80076c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d11b      	bne.n	80076c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f06f 0202 	mvn.w	r2, #2
 8007696:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa78 	bl	8007ba2 <HAL_TIM_IC_CaptureCallback>
 80076b2:	e005      	b.n	80076c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa6a 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fa7b 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d122      	bne.n	800771a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f003 0304 	and.w	r3, r3, #4
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d11b      	bne.n	800771a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f06f 0204 	mvn.w	r2, #4
 80076ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa4e 	bl	8007ba2 <HAL_TIM_IC_CaptureCallback>
 8007706:	e005      	b.n	8007714 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa40 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fa51 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b08      	cmp	r3, #8
 8007726:	d122      	bne.n	800776e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b08      	cmp	r3, #8
 8007734:	d11b      	bne.n	800776e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f06f 0208 	mvn.w	r2, #8
 800773e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2204      	movs	r2, #4
 8007744:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa24 	bl	8007ba2 <HAL_TIM_IC_CaptureCallback>
 800775a:	e005      	b.n	8007768 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa16 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa27 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b10      	cmp	r3, #16
 800777a:	d122      	bne.n	80077c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	2b10      	cmp	r3, #16
 8007788:	d11b      	bne.n	80077c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f06f 0210 	mvn.w	r2, #16
 8007792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2208      	movs	r2, #8
 8007798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9fa 	bl	8007ba2 <HAL_TIM_IC_CaptureCallback>
 80077ae:	e005      	b.n	80077bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f9ec 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9fd 	bl	8007bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d10e      	bne.n	80077ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d107      	bne.n	80077ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f06f 0201 	mvn.w	r2, #1
 80077e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7fb fb21 	bl	8002e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f8:	2b80      	cmp	r3, #128	@ 0x80
 80077fa:	d10e      	bne.n	800781a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007806:	2b80      	cmp	r3, #128	@ 0x80
 8007808:	d107      	bne.n	800781a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fd53 	bl	80082c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	d10e      	bne.n	8007846 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007832:	2b40      	cmp	r3, #64	@ 0x40
 8007834:	d107      	bne.n	8007846 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800783e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9c2 	bl	8007bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b20      	cmp	r3, #32
 8007852:	d10e      	bne.n	8007872 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b20      	cmp	r3, #32
 8007860:	d107      	bne.n	8007872 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f06f 0220 	mvn.w	r2, #32
 800786a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fd1d 	bl	80082ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007896:	2302      	movs	r3, #2
 8007898:	e0ae      	b.n	80079f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	f200 809f 	bhi.w	80079e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078aa:	a201      	add	r2, pc, #4	@ (adr r2, 80078b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	080078e5 	.word	0x080078e5
 80078b4:	080079e9 	.word	0x080079e9
 80078b8:	080079e9 	.word	0x080079e9
 80078bc:	080079e9 	.word	0x080079e9
 80078c0:	08007925 	.word	0x08007925
 80078c4:	080079e9 	.word	0x080079e9
 80078c8:	080079e9 	.word	0x080079e9
 80078cc:	080079e9 	.word	0x080079e9
 80078d0:	08007967 	.word	0x08007967
 80078d4:	080079e9 	.word	0x080079e9
 80078d8:	080079e9 	.word	0x080079e9
 80078dc:	080079e9 	.word	0x080079e9
 80078e0:	080079a7 	.word	0x080079a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 fa18 	bl	8007d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699a      	ldr	r2, [r3, #24]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0208 	orr.w	r2, r2, #8
 80078fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0204 	bic.w	r2, r2, #4
 800790e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6999      	ldr	r1, [r3, #24]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	691a      	ldr	r2, [r3, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	619a      	str	r2, [r3, #24]
      break;
 8007922:	e064      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fa68 	bl	8007e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800793e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800794e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6999      	ldr	r1, [r3, #24]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	021a      	lsls	r2, r3, #8
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	619a      	str	r2, [r3, #24]
      break;
 8007964:	e043      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fabd 	bl	8007eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0208 	orr.w	r2, r2, #8
 8007980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0204 	bic.w	r2, r2, #4
 8007990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69d9      	ldr	r1, [r3, #28]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	61da      	str	r2, [r3, #28]
      break;
 80079a4:	e023      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fb11 	bl	8007fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69d9      	ldr	r1, [r3, #28]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	021a      	lsls	r2, r3, #8
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	61da      	str	r2, [r3, #28]
      break;
 80079e6:	e002      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	75fb      	strb	r3, [r7, #23]
      break;
 80079ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d101      	bne.n	8007a1c <HAL_TIM_ConfigClockSource+0x1c>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	e0b4      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x186>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a54:	d03e      	beq.n	8007ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8007a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5a:	f200 8087 	bhi.w	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a62:	f000 8086 	beq.w	8007b72 <HAL_TIM_ConfigClockSource+0x172>
 8007a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6a:	d87f      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a6c:	2b70      	cmp	r3, #112	@ 0x70
 8007a6e:	d01a      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8007a70:	2b70      	cmp	r3, #112	@ 0x70
 8007a72:	d87b      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a74:	2b60      	cmp	r3, #96	@ 0x60
 8007a76:	d050      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x11a>
 8007a78:	2b60      	cmp	r3, #96	@ 0x60
 8007a7a:	d877      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a7c:	2b50      	cmp	r3, #80	@ 0x50
 8007a7e:	d03c      	beq.n	8007afa <HAL_TIM_ConfigClockSource+0xfa>
 8007a80:	2b50      	cmp	r3, #80	@ 0x50
 8007a82:	d873      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a84:	2b40      	cmp	r3, #64	@ 0x40
 8007a86:	d058      	beq.n	8007b3a <HAL_TIM_ConfigClockSource+0x13a>
 8007a88:	2b40      	cmp	r3, #64	@ 0x40
 8007a8a:	d86f      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8c:	2b30      	cmp	r3, #48	@ 0x30
 8007a8e:	d064      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x15a>
 8007a90:	2b30      	cmp	r3, #48	@ 0x30
 8007a92:	d86b      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	d060      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x15a>
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d867      	bhi.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d05c      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x15a>
 8007aa0:	2b10      	cmp	r3, #16
 8007aa2:	d05a      	beq.n	8007b5a <HAL_TIM_ConfigClockSource+0x15a>
 8007aa4:	e062      	b.n	8007b6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6899      	ldr	r1, [r3, #8]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f000 fb5d 	bl	8008174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	609a      	str	r2, [r3, #8]
      break;
 8007ad2:	e04f      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6899      	ldr	r1, [r3, #8]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f000 fb46 	bl	8008174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007af6:	609a      	str	r2, [r3, #8]
      break;
 8007af8:	e03c      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f000 faba 	bl	8008080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2150      	movs	r1, #80	@ 0x50
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fb13 	bl	800813e <TIM_ITRx_SetConfig>
      break;
 8007b18:	e02c      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6818      	ldr	r0, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	6859      	ldr	r1, [r3, #4]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f000 fad9 	bl	80080de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2160      	movs	r1, #96	@ 0x60
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fb03 	bl	800813e <TIM_ITRx_SetConfig>
      break;
 8007b38:	e01c      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6859      	ldr	r1, [r3, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	461a      	mov	r2, r3
 8007b48:	f000 fa9a 	bl	8008080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2140      	movs	r1, #64	@ 0x40
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 faf3 	bl	800813e <TIM_ITRx_SetConfig>
      break;
 8007b58:	e00c      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f000 faea 	bl	800813e <TIM_ITRx_SetConfig>
      break;
 8007b6a:	e003      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a40      	ldr	r2, [pc, #256]	@ (8007cf4 <TIM_Base_SetConfig+0x114>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d013      	beq.n	8007c20 <TIM_Base_SetConfig+0x40>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bfe:	d00f      	beq.n	8007c20 <TIM_Base_SetConfig+0x40>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a3d      	ldr	r2, [pc, #244]	@ (8007cf8 <TIM_Base_SetConfig+0x118>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00b      	beq.n	8007c20 <TIM_Base_SetConfig+0x40>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8007cfc <TIM_Base_SetConfig+0x11c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d007      	beq.n	8007c20 <TIM_Base_SetConfig+0x40>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a3b      	ldr	r2, [pc, #236]	@ (8007d00 <TIM_Base_SetConfig+0x120>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d003      	beq.n	8007c20 <TIM_Base_SetConfig+0x40>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007d04 <TIM_Base_SetConfig+0x124>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d108      	bne.n	8007c32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a2f      	ldr	r2, [pc, #188]	@ (8007cf4 <TIM_Base_SetConfig+0x114>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d02b      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c40:	d027      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a2c      	ldr	r2, [pc, #176]	@ (8007cf8 <TIM_Base_SetConfig+0x118>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d023      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8007cfc <TIM_Base_SetConfig+0x11c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d01f      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a2a      	ldr	r2, [pc, #168]	@ (8007d00 <TIM_Base_SetConfig+0x120>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01b      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a29      	ldr	r2, [pc, #164]	@ (8007d04 <TIM_Base_SetConfig+0x124>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d017      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a28      	ldr	r2, [pc, #160]	@ (8007d08 <TIM_Base_SetConfig+0x128>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a27      	ldr	r2, [pc, #156]	@ (8007d0c <TIM_Base_SetConfig+0x12c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00f      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a26      	ldr	r2, [pc, #152]	@ (8007d10 <TIM_Base_SetConfig+0x130>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00b      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a25      	ldr	r2, [pc, #148]	@ (8007d14 <TIM_Base_SetConfig+0x134>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d007      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a24      	ldr	r2, [pc, #144]	@ (8007d18 <TIM_Base_SetConfig+0x138>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d003      	beq.n	8007c92 <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a23      	ldr	r2, [pc, #140]	@ (8007d1c <TIM_Base_SetConfig+0x13c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d108      	bne.n	8007ca4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a0a      	ldr	r2, [pc, #40]	@ (8007cf4 <TIM_Base_SetConfig+0x114>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_Base_SetConfig+0xf8>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8007d04 <TIM_Base_SetConfig+0x124>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d103      	bne.n	8007ce0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	691a      	ldr	r2, [r3, #16]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	615a      	str	r2, [r3, #20]
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40010000 	.word	0x40010000
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40014000 	.word	0x40014000
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	40014800 	.word	0x40014800
 8007d14:	40001800 	.word	0x40001800
 8007d18:	40001c00 	.word	0x40001c00
 8007d1c:	40002000 	.word	0x40002000

08007d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f023 0201 	bic.w	r2, r3, #1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f023 0302 	bic.w	r3, r3, #2
 8007d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a20      	ldr	r2, [pc, #128]	@ (8007df8 <TIM_OC1_SetConfig+0xd8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d003      	beq.n	8007d84 <TIM_OC1_SetConfig+0x64>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dfc <TIM_OC1_SetConfig+0xdc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d10c      	bne.n	8007d9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f023 0308 	bic.w	r3, r3, #8
 8007d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f023 0304 	bic.w	r3, r3, #4
 8007d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a15      	ldr	r2, [pc, #84]	@ (8007df8 <TIM_OC1_SetConfig+0xd8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_OC1_SetConfig+0x8e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a14      	ldr	r2, [pc, #80]	@ (8007dfc <TIM_OC1_SetConfig+0xdc>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d111      	bne.n	8007dd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	621a      	str	r2, [r3, #32]
}
 8007dec:	bf00      	nop
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40010400 	.word	0x40010400

08007e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0210 	bic.w	r2, r3, #16
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0320 	bic.w	r3, r3, #32
 8007e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a22      	ldr	r2, [pc, #136]	@ (8007ee4 <TIM_OC2_SetConfig+0xe4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_OC2_SetConfig+0x68>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a21      	ldr	r2, [pc, #132]	@ (8007ee8 <TIM_OC2_SetConfig+0xe8>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d10d      	bne.n	8007e84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <TIM_OC2_SetConfig+0xe4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC2_SetConfig+0x94>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ee8 <TIM_OC2_SetConfig+0xe8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d113      	bne.n	8007ebc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	621a      	str	r2, [r3, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40010400 	.word	0x40010400

08007eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a21      	ldr	r2, [pc, #132]	@ (8007fcc <TIM_OC3_SetConfig+0xe0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d003      	beq.n	8007f52 <TIM_OC3_SetConfig+0x66>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a20      	ldr	r2, [pc, #128]	@ (8007fd0 <TIM_OC3_SetConfig+0xe4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10d      	bne.n	8007f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a16      	ldr	r2, [pc, #88]	@ (8007fcc <TIM_OC3_SetConfig+0xe0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_OC3_SetConfig+0x92>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a15      	ldr	r2, [pc, #84]	@ (8007fd0 <TIM_OC3_SetConfig+0xe4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d113      	bne.n	8007fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	621a      	str	r2, [r3, #32]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	40010000 	.word	0x40010000
 8007fd0:	40010400 	.word	0x40010400

08007fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800800a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800801e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	031b      	lsls	r3, r3, #12
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <TIM_OC4_SetConfig+0xa4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC4_SetConfig+0x68>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a11      	ldr	r2, [pc, #68]	@ (800807c <TIM_OC4_SetConfig+0xa8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d109      	bne.n	8008050 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40010400 	.word	0x40010400

08008080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f023 030a 	bic.w	r3, r3, #10
 80080bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f023 0210 	bic.w	r2, r3, #16
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	031b      	lsls	r3, r3, #12
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800811a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	621a      	str	r2, [r3, #32]
}
 8008132:	bf00      	nop
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800813e:	b480      	push	{r7}
 8008140:	b085      	sub	sp, #20
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4313      	orrs	r3, r2
 800815c:	f043 0307 	orr.w	r3, r3, #7
 8008160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	609a      	str	r2, [r3, #8]
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800818e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	021a      	lsls	r2, r3, #8
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	431a      	orrs	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4313      	orrs	r3, r2
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	609a      	str	r2, [r3, #8]
}
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e05a      	b.n	8008282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a21      	ldr	r2, [pc, #132]	@ (8008290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d022      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008218:	d01d      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1d      	ldr	r2, [pc, #116]	@ (8008294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d018      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1b      	ldr	r2, [pc, #108]	@ (8008298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d013      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1a      	ldr	r2, [pc, #104]	@ (800829c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00e      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a18      	ldr	r2, [pc, #96]	@ (80082a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d009      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a17      	ldr	r2, [pc, #92]	@ (80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d004      	beq.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a15      	ldr	r2, [pc, #84]	@ (80082a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d10c      	bne.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800825c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4313      	orrs	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40010000 	.word	0x40010000
 8008294:	40000400 	.word	0x40000400
 8008298:	40000800 	.word	0x40000800
 800829c:	40000c00 	.word	0x40000c00
 80082a0:	40010400 	.word	0x40010400
 80082a4:	40014000 	.word	0x40014000
 80082a8:	40001800 	.word	0x40001800

080082ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4b20      	ldr	r3, [pc, #128]	@ (8008374 <FSMC_NORSRAM_Init+0xa0>)
 80082f2:	4013      	ands	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80082fe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008304:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800830a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008310:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008316:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800831c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008322:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 8008328:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800832e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8008334:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800833a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8008340:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d103      	bne.n	8008358 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008356:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68f9      	ldr	r1, [r7, #12]
 8008360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	fff00080 	.word	0xfff00080

08008378 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800839a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083a6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80083ae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80083b6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	3b01      	subs	r3, #1
 80083be:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80083c0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	3b02      	subs	r3, #2
 80083c8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80083ca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80083d0:	4313      	orrs	r3, r2
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6979      	ldr	r1, [r7, #20]
 80083e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800840c:	d122      	bne.n	8008454 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800841c:	4013      	ands	r3, r2
 800841e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800842a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008432:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800843a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008440:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6979      	ldr	r1, [r7, #20]
 800844e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008452:	e005      	b.n	8008460 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800845c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	cff00000 	.word	0xcff00000

08008474 <rand>:
 8008474:	4b16      	ldr	r3, [pc, #88]	@ (80084d0 <rand+0x5c>)
 8008476:	b510      	push	{r4, lr}
 8008478:	681c      	ldr	r4, [r3, #0]
 800847a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800847c:	b9b3      	cbnz	r3, 80084ac <rand+0x38>
 800847e:	2018      	movs	r0, #24
 8008480:	f000 fa20 	bl	80088c4 <malloc>
 8008484:	4602      	mov	r2, r0
 8008486:	6320      	str	r0, [r4, #48]	@ 0x30
 8008488:	b920      	cbnz	r0, 8008494 <rand+0x20>
 800848a:	4b12      	ldr	r3, [pc, #72]	@ (80084d4 <rand+0x60>)
 800848c:	4812      	ldr	r0, [pc, #72]	@ (80084d8 <rand+0x64>)
 800848e:	2152      	movs	r1, #82	@ 0x52
 8008490:	f000 f9b0 	bl	80087f4 <__assert_func>
 8008494:	4911      	ldr	r1, [pc, #68]	@ (80084dc <rand+0x68>)
 8008496:	4b12      	ldr	r3, [pc, #72]	@ (80084e0 <rand+0x6c>)
 8008498:	e9c0 1300 	strd	r1, r3, [r0]
 800849c:	4b11      	ldr	r3, [pc, #68]	@ (80084e4 <rand+0x70>)
 800849e:	6083      	str	r3, [r0, #8]
 80084a0:	230b      	movs	r3, #11
 80084a2:	8183      	strh	r3, [r0, #12]
 80084a4:	2100      	movs	r1, #0
 80084a6:	2001      	movs	r0, #1
 80084a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80084ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80084ae:	480e      	ldr	r0, [pc, #56]	@ (80084e8 <rand+0x74>)
 80084b0:	690b      	ldr	r3, [r1, #16]
 80084b2:	694c      	ldr	r4, [r1, #20]
 80084b4:	4a0d      	ldr	r2, [pc, #52]	@ (80084ec <rand+0x78>)
 80084b6:	4358      	muls	r0, r3
 80084b8:	fb02 0004 	mla	r0, r2, r4, r0
 80084bc:	fba3 3202 	umull	r3, r2, r3, r2
 80084c0:	3301      	adds	r3, #1
 80084c2:	eb40 0002 	adc.w	r0, r0, r2
 80084c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80084ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80084ce:	bd10      	pop	{r4, pc}
 80084d0:	2000005c 	.word	0x2000005c
 80084d4:	0800c714 	.word	0x0800c714
 80084d8:	0800c72b 	.word	0x0800c72b
 80084dc:	abcd330e 	.word	0xabcd330e
 80084e0:	e66d1234 	.word	0xe66d1234
 80084e4:	0005deec 	.word	0x0005deec
 80084e8:	5851f42d 	.word	0x5851f42d
 80084ec:	4c957f2d 	.word	0x4c957f2d

080084f0 <std>:
 80084f0:	2300      	movs	r3, #0
 80084f2:	b510      	push	{r4, lr}
 80084f4:	4604      	mov	r4, r0
 80084f6:	e9c0 3300 	strd	r3, r3, [r0]
 80084fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fe:	6083      	str	r3, [r0, #8]
 8008500:	8181      	strh	r1, [r0, #12]
 8008502:	6643      	str	r3, [r0, #100]	@ 0x64
 8008504:	81c2      	strh	r2, [r0, #14]
 8008506:	6183      	str	r3, [r0, #24]
 8008508:	4619      	mov	r1, r3
 800850a:	2208      	movs	r2, #8
 800850c:	305c      	adds	r0, #92	@ 0x5c
 800850e:	f000 f8f4 	bl	80086fa <memset>
 8008512:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <std+0x58>)
 8008514:	6263      	str	r3, [r4, #36]	@ 0x24
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x5c>)
 8008518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x60>)
 800851c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x64>)
 8008520:	6323      	str	r3, [r4, #48]	@ 0x30
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x68>)
 8008524:	6224      	str	r4, [r4, #32]
 8008526:	429c      	cmp	r4, r3
 8008528:	d006      	beq.n	8008538 <std+0x48>
 800852a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800852e:	4294      	cmp	r4, r2
 8008530:	d002      	beq.n	8008538 <std+0x48>
 8008532:	33d0      	adds	r3, #208	@ 0xd0
 8008534:	429c      	cmp	r4, r3
 8008536:	d105      	bne.n	8008544 <std+0x54>
 8008538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800853c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008540:	f000 b954 	b.w	80087ec <__retarget_lock_init_recursive>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08008675 	.word	0x08008675
 800854c:	08008697 	.word	0x08008697
 8008550:	080086cf 	.word	0x080086cf
 8008554:	080086f3 	.word	0x080086f3
 8008558:	200004cc 	.word	0x200004cc

0800855c <stdio_exit_handler>:
 800855c:	4a02      	ldr	r2, [pc, #8]	@ (8008568 <stdio_exit_handler+0xc>)
 800855e:	4903      	ldr	r1, [pc, #12]	@ (800856c <stdio_exit_handler+0x10>)
 8008560:	4803      	ldr	r0, [pc, #12]	@ (8008570 <stdio_exit_handler+0x14>)
 8008562:	f000 b869 	b.w	8008638 <_fwalk_sglue>
 8008566:	bf00      	nop
 8008568:	20000050 	.word	0x20000050
 800856c:	08008b39 	.word	0x08008b39
 8008570:	20000060 	.word	0x20000060

08008574 <cleanup_stdio>:
 8008574:	6841      	ldr	r1, [r0, #4]
 8008576:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <cleanup_stdio+0x34>)
 8008578:	4299      	cmp	r1, r3
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	d001      	beq.n	8008584 <cleanup_stdio+0x10>
 8008580:	f000 fada 	bl	8008b38 <_fflush_r>
 8008584:	68a1      	ldr	r1, [r4, #8]
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <cleanup_stdio+0x38>)
 8008588:	4299      	cmp	r1, r3
 800858a:	d002      	beq.n	8008592 <cleanup_stdio+0x1e>
 800858c:	4620      	mov	r0, r4
 800858e:	f000 fad3 	bl	8008b38 <_fflush_r>
 8008592:	68e1      	ldr	r1, [r4, #12]
 8008594:	4b06      	ldr	r3, [pc, #24]	@ (80085b0 <cleanup_stdio+0x3c>)
 8008596:	4299      	cmp	r1, r3
 8008598:	d004      	beq.n	80085a4 <cleanup_stdio+0x30>
 800859a:	4620      	mov	r0, r4
 800859c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a0:	f000 baca 	b.w	8008b38 <_fflush_r>
 80085a4:	bd10      	pop	{r4, pc}
 80085a6:	bf00      	nop
 80085a8:	200004cc 	.word	0x200004cc
 80085ac:	20000534 	.word	0x20000534
 80085b0:	2000059c 	.word	0x2000059c

080085b4 <global_stdio_init.part.0>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <global_stdio_init.part.0+0x30>)
 80085b8:	4c0b      	ldr	r4, [pc, #44]	@ (80085e8 <global_stdio_init.part.0+0x34>)
 80085ba:	4a0c      	ldr	r2, [pc, #48]	@ (80085ec <global_stdio_init.part.0+0x38>)
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	4620      	mov	r0, r4
 80085c0:	2200      	movs	r2, #0
 80085c2:	2104      	movs	r1, #4
 80085c4:	f7ff ff94 	bl	80084f0 <std>
 80085c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085cc:	2201      	movs	r2, #1
 80085ce:	2109      	movs	r1, #9
 80085d0:	f7ff ff8e 	bl	80084f0 <std>
 80085d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d8:	2202      	movs	r2, #2
 80085da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085de:	2112      	movs	r1, #18
 80085e0:	f7ff bf86 	b.w	80084f0 <std>
 80085e4:	20000604 	.word	0x20000604
 80085e8:	200004cc 	.word	0x200004cc
 80085ec:	0800855d 	.word	0x0800855d

080085f0 <__sfp_lock_acquire>:
 80085f0:	4801      	ldr	r0, [pc, #4]	@ (80085f8 <__sfp_lock_acquire+0x8>)
 80085f2:	f000 b8fc 	b.w	80087ee <__retarget_lock_acquire_recursive>
 80085f6:	bf00      	nop
 80085f8:	2000060d 	.word	0x2000060d

080085fc <__sfp_lock_release>:
 80085fc:	4801      	ldr	r0, [pc, #4]	@ (8008604 <__sfp_lock_release+0x8>)
 80085fe:	f000 b8f7 	b.w	80087f0 <__retarget_lock_release_recursive>
 8008602:	bf00      	nop
 8008604:	2000060d 	.word	0x2000060d

08008608 <__sinit>:
 8008608:	b510      	push	{r4, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	f7ff fff0 	bl	80085f0 <__sfp_lock_acquire>
 8008610:	6a23      	ldr	r3, [r4, #32]
 8008612:	b11b      	cbz	r3, 800861c <__sinit+0x14>
 8008614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008618:	f7ff bff0 	b.w	80085fc <__sfp_lock_release>
 800861c:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__sinit+0x28>)
 800861e:	6223      	str	r3, [r4, #32]
 8008620:	4b04      	ldr	r3, [pc, #16]	@ (8008634 <__sinit+0x2c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f5      	bne.n	8008614 <__sinit+0xc>
 8008628:	f7ff ffc4 	bl	80085b4 <global_stdio_init.part.0>
 800862c:	e7f2      	b.n	8008614 <__sinit+0xc>
 800862e:	bf00      	nop
 8008630:	08008575 	.word	0x08008575
 8008634:	20000604 	.word	0x20000604

08008638 <_fwalk_sglue>:
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	4607      	mov	r7, r0
 800863e:	4688      	mov	r8, r1
 8008640:	4614      	mov	r4, r2
 8008642:	2600      	movs	r6, #0
 8008644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008648:	f1b9 0901 	subs.w	r9, r9, #1
 800864c:	d505      	bpl.n	800865a <_fwalk_sglue+0x22>
 800864e:	6824      	ldr	r4, [r4, #0]
 8008650:	2c00      	cmp	r4, #0
 8008652:	d1f7      	bne.n	8008644 <_fwalk_sglue+0xc>
 8008654:	4630      	mov	r0, r6
 8008656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d907      	bls.n	8008670 <_fwalk_sglue+0x38>
 8008660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008664:	3301      	adds	r3, #1
 8008666:	d003      	beq.n	8008670 <_fwalk_sglue+0x38>
 8008668:	4629      	mov	r1, r5
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	4306      	orrs	r6, r0
 8008670:	3568      	adds	r5, #104	@ 0x68
 8008672:	e7e9      	b.n	8008648 <_fwalk_sglue+0x10>

08008674 <__sread>:
 8008674:	b510      	push	{r4, lr}
 8008676:	460c      	mov	r4, r1
 8008678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867c:	f000 f868 	bl	8008750 <_read_r>
 8008680:	2800      	cmp	r0, #0
 8008682:	bfab      	itete	ge
 8008684:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008686:	89a3      	ldrhlt	r3, [r4, #12]
 8008688:	181b      	addge	r3, r3, r0
 800868a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800868e:	bfac      	ite	ge
 8008690:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008692:	81a3      	strhlt	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__swrite>:
 8008696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869a:	461f      	mov	r7, r3
 800869c:	898b      	ldrh	r3, [r1, #12]
 800869e:	05db      	lsls	r3, r3, #23
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	4616      	mov	r6, r2
 80086a6:	d505      	bpl.n	80086b4 <__swrite+0x1e>
 80086a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ac:	2302      	movs	r3, #2
 80086ae:	2200      	movs	r2, #0
 80086b0:	f000 f83c 	bl	800872c <_lseek_r>
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086be:	81a3      	strh	r3, [r4, #12]
 80086c0:	4632      	mov	r2, r6
 80086c2:	463b      	mov	r3, r7
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ca:	f000 b853 	b.w	8008774 <_write_r>

080086ce <__sseek>:
 80086ce:	b510      	push	{r4, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d6:	f000 f829 	bl	800872c <_lseek_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	bf15      	itete	ne
 80086e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80086e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80086e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80086ea:	81a3      	strheq	r3, [r4, #12]
 80086ec:	bf18      	it	ne
 80086ee:	81a3      	strhne	r3, [r4, #12]
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__sclose>:
 80086f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f6:	f000 b809 	b.w	800870c <_close_r>

080086fa <memset>:
 80086fa:	4402      	add	r2, r0
 80086fc:	4603      	mov	r3, r0
 80086fe:	4293      	cmp	r3, r2
 8008700:	d100      	bne.n	8008704 <memset+0xa>
 8008702:	4770      	bx	lr
 8008704:	f803 1b01 	strb.w	r1, [r3], #1
 8008708:	e7f9      	b.n	80086fe <memset+0x4>
	...

0800870c <_close_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d06      	ldr	r5, [pc, #24]	@ (8008728 <_close_r+0x1c>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	602b      	str	r3, [r5, #0]
 8008718:	f7fa fd3c 	bl	8003194 <_close>
 800871c:	1c43      	adds	r3, r0, #1
 800871e:	d102      	bne.n	8008726 <_close_r+0x1a>
 8008720:	682b      	ldr	r3, [r5, #0]
 8008722:	b103      	cbz	r3, 8008726 <_close_r+0x1a>
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	bd38      	pop	{r3, r4, r5, pc}
 8008728:	20000608 	.word	0x20000608

0800872c <_lseek_r>:
 800872c:	b538      	push	{r3, r4, r5, lr}
 800872e:	4d07      	ldr	r5, [pc, #28]	@ (800874c <_lseek_r+0x20>)
 8008730:	4604      	mov	r4, r0
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	2200      	movs	r2, #0
 8008738:	602a      	str	r2, [r5, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	f7fa fd51 	bl	80031e2 <_lseek>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_lseek_r+0x1e>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_lseek_r+0x1e>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	20000608 	.word	0x20000608

08008750 <_read_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	@ (8008770 <_read_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7fa fcdf 	bl	8003122 <_read>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_read_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_read_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20000608 	.word	0x20000608

08008774 <_write_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4d07      	ldr	r5, [pc, #28]	@ (8008794 <_write_r+0x20>)
 8008778:	4604      	mov	r4, r0
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	2200      	movs	r2, #0
 8008780:	602a      	str	r2, [r5, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	f7fa fcea 	bl	800315c <_write>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_write_r+0x1e>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_write_r+0x1e>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20000608 	.word	0x20000608

08008798 <__errno>:
 8008798:	4b01      	ldr	r3, [pc, #4]	@ (80087a0 <__errno+0x8>)
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	2000005c 	.word	0x2000005c

080087a4 <__libc_init_array>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4d0d      	ldr	r5, [pc, #52]	@ (80087dc <__libc_init_array+0x38>)
 80087a8:	4c0d      	ldr	r4, [pc, #52]	@ (80087e0 <__libc_init_array+0x3c>)
 80087aa:	1b64      	subs	r4, r4, r5
 80087ac:	10a4      	asrs	r4, r4, #2
 80087ae:	2600      	movs	r6, #0
 80087b0:	42a6      	cmp	r6, r4
 80087b2:	d109      	bne.n	80087c8 <__libc_init_array+0x24>
 80087b4:	4d0b      	ldr	r5, [pc, #44]	@ (80087e4 <__libc_init_array+0x40>)
 80087b6:	4c0c      	ldr	r4, [pc, #48]	@ (80087e8 <__libc_init_array+0x44>)
 80087b8:	f000 ff40 	bl	800963c <_init>
 80087bc:	1b64      	subs	r4, r4, r5
 80087be:	10a4      	asrs	r4, r4, #2
 80087c0:	2600      	movs	r6, #0
 80087c2:	42a6      	cmp	r6, r4
 80087c4:	d105      	bne.n	80087d2 <__libc_init_array+0x2e>
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087cc:	4798      	blx	r3
 80087ce:	3601      	adds	r6, #1
 80087d0:	e7ee      	b.n	80087b0 <__libc_init_array+0xc>
 80087d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d6:	4798      	blx	r3
 80087d8:	3601      	adds	r6, #1
 80087da:	e7f2      	b.n	80087c2 <__libc_init_array+0x1e>
 80087dc:	0800c7fc 	.word	0x0800c7fc
 80087e0:	0800c7fc 	.word	0x0800c7fc
 80087e4:	0800c7fc 	.word	0x0800c7fc
 80087e8:	0800c800 	.word	0x0800c800

080087ec <__retarget_lock_init_recursive>:
 80087ec:	4770      	bx	lr

080087ee <__retarget_lock_acquire_recursive>:
 80087ee:	4770      	bx	lr

080087f0 <__retarget_lock_release_recursive>:
 80087f0:	4770      	bx	lr
	...

080087f4 <__assert_func>:
 80087f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f6:	4614      	mov	r4, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <__assert_func+0x2c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4605      	mov	r5, r0
 8008800:	68d8      	ldr	r0, [r3, #12]
 8008802:	b954      	cbnz	r4, 800881a <__assert_func+0x26>
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <__assert_func+0x30>)
 8008806:	461c      	mov	r4, r3
 8008808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800880c:	9100      	str	r1, [sp, #0]
 800880e:	462b      	mov	r3, r5
 8008810:	4905      	ldr	r1, [pc, #20]	@ (8008828 <__assert_func+0x34>)
 8008812:	f000 f9b9 	bl	8008b88 <fiprintf>
 8008816:	f000 f9d9 	bl	8008bcc <abort>
 800881a:	4b04      	ldr	r3, [pc, #16]	@ (800882c <__assert_func+0x38>)
 800881c:	e7f4      	b.n	8008808 <__assert_func+0x14>
 800881e:	bf00      	nop
 8008820:	2000005c 	.word	0x2000005c
 8008824:	0800c7be 	.word	0x0800c7be
 8008828:	0800c790 	.word	0x0800c790
 800882c:	0800c783 	.word	0x0800c783

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d041      	beq.n	80088bc <_free_r+0x8c>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f000 f8e8 	bl	8008a18 <__malloc_lock>
 8008848:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <_free_r+0x90>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f000 b8e4 	b.w	8008a24 <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	6053      	str	r3, [r2, #4]
 8008896:	4408      	add	r0, r1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf04      	itt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	bf04      	itt	eq
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6054      	str	r4, [r2, #4]
 80088ba:	e7ca      	b.n	8008852 <_free_r+0x22>
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	20000614 	.word	0x20000614

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 b825 	b.w	8008918 <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	2000005c 	.word	0x2000005c

080088d4 <sbrk_aligned>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008914 <sbrk_aligned+0x40>)
 80088d8:	460c      	mov	r4, r1
 80088da:	6831      	ldr	r1, [r6, #0]
 80088dc:	4605      	mov	r5, r0
 80088de:	b911      	cbnz	r1, 80088e6 <sbrk_aligned+0x12>
 80088e0:	f000 f964 	bl	8008bac <_sbrk_r>
 80088e4:	6030      	str	r0, [r6, #0]
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 f95f 	bl	8008bac <_sbrk_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d103      	bne.n	80088fa <sbrk_aligned+0x26>
 80088f2:	f04f 34ff 	mov.w	r4, #4294967295
 80088f6:	4620      	mov	r0, r4
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d0f8      	beq.n	80088f6 <sbrk_aligned+0x22>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f950 	bl	8008bac <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d1f2      	bne.n	80088f6 <sbrk_aligned+0x22>
 8008910:	e7ef      	b.n	80088f2 <sbrk_aligned+0x1e>
 8008912:	bf00      	nop
 8008914:	20000610 	.word	0x20000610

08008918 <_malloc_r>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	1ccd      	adds	r5, r1, #3
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	2d00      	cmp	r5, #0
 800892c:	4606      	mov	r6, r0
 800892e:	db01      	blt.n	8008934 <_malloc_r+0x1c>
 8008930:	42a9      	cmp	r1, r5
 8008932:	d904      	bls.n	800893e <_malloc_r+0x26>
 8008934:	230c      	movs	r3, #12
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a14 <_malloc_r+0xfc>
 8008942:	f000 f869 	bl	8008a18 <__malloc_lock>
 8008946:	f8d8 3000 	ldr.w	r3, [r8]
 800894a:	461c      	mov	r4, r3
 800894c:	bb44      	cbnz	r4, 80089a0 <_malloc_r+0x88>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ffbf 	bl	80088d4 <sbrk_aligned>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	4604      	mov	r4, r0
 800895a:	d158      	bne.n	8008a0e <_malloc_r+0xf6>
 800895c:	f8d8 4000 	ldr.w	r4, [r8]
 8008960:	4627      	mov	r7, r4
 8008962:	2f00      	cmp	r7, #0
 8008964:	d143      	bne.n	80089ee <_malloc_r+0xd6>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d04b      	beq.n	8008a02 <_malloc_r+0xea>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	4639      	mov	r1, r7
 800896e:	4630      	mov	r0, r6
 8008970:	eb04 0903 	add.w	r9, r4, r3
 8008974:	f000 f91a 	bl	8008bac <_sbrk_r>
 8008978:	4581      	cmp	r9, r0
 800897a:	d142      	bne.n	8008a02 <_malloc_r+0xea>
 800897c:	6821      	ldr	r1, [r4, #0]
 800897e:	1a6d      	subs	r5, r5, r1
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa6 	bl	80088d4 <sbrk_aligned>
 8008988:	3001      	adds	r0, #1
 800898a:	d03a      	beq.n	8008a02 <_malloc_r+0xea>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	442b      	add	r3, r5
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	f8d8 3000 	ldr.w	r3, [r8]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	bb62      	cbnz	r2, 80089f4 <_malloc_r+0xdc>
 800899a:	f8c8 7000 	str.w	r7, [r8]
 800899e:	e00f      	b.n	80089c0 <_malloc_r+0xa8>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	1b52      	subs	r2, r2, r5
 80089a4:	d420      	bmi.n	80089e8 <_malloc_r+0xd0>
 80089a6:	2a0b      	cmp	r2, #11
 80089a8:	d917      	bls.n	80089da <_malloc_r+0xc2>
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	6059      	strne	r1, [r3, #4]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	bf08      	it	eq
 80089b8:	f8c8 1000 	streq.w	r1, [r8]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f82f 	bl	8008a24 <__malloc_unlock>
 80089c6:	f104 000b 	add.w	r0, r4, #11
 80089ca:	1d23      	adds	r3, r4, #4
 80089cc:	f020 0007 	bic.w	r0, r0, #7
 80089d0:	1ac2      	subs	r2, r0, r3
 80089d2:	bf1c      	itt	ne
 80089d4:	1a1b      	subne	r3, r3, r0
 80089d6:	50a3      	strne	r3, [r4, r2]
 80089d8:	e7af      	b.n	800893a <_malloc_r+0x22>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bf0c      	ite	eq
 80089e0:	f8c8 2000 	streq.w	r2, [r8]
 80089e4:	605a      	strne	r2, [r3, #4]
 80089e6:	e7eb      	b.n	80089c0 <_malloc_r+0xa8>
 80089e8:	4623      	mov	r3, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7ae      	b.n	800894c <_malloc_r+0x34>
 80089ee:	463c      	mov	r4, r7
 80089f0:	687f      	ldr	r7, [r7, #4]
 80089f2:	e7b6      	b.n	8008962 <_malloc_r+0x4a>
 80089f4:	461a      	mov	r2, r3
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d1fb      	bne.n	80089f4 <_malloc_r+0xdc>
 80089fc:	2300      	movs	r3, #0
 80089fe:	6053      	str	r3, [r2, #4]
 8008a00:	e7de      	b.n	80089c0 <_malloc_r+0xa8>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f80c 	bl	8008a24 <__malloc_unlock>
 8008a0c:	e794      	b.n	8008938 <_malloc_r+0x20>
 8008a0e:	6005      	str	r5, [r0, #0]
 8008a10:	e7d6      	b.n	80089c0 <_malloc_r+0xa8>
 8008a12:	bf00      	nop
 8008a14:	20000614 	.word	0x20000614

08008a18 <__malloc_lock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_lock+0x8>)
 8008a1a:	f7ff bee8 	b.w	80087ee <__retarget_lock_acquire_recursive>
 8008a1e:	bf00      	nop
 8008a20:	2000060c 	.word	0x2000060c

08008a24 <__malloc_unlock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_unlock+0x8>)
 8008a26:	f7ff bee3 	b.w	80087f0 <__retarget_lock_release_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	2000060c 	.word	0x2000060c

08008a30 <__sflush_r>:
 8008a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	0716      	lsls	r6, r2, #28
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	d454      	bmi.n	8008aea <__sflush_r+0xba>
 8008a40:	684b      	ldr	r3, [r1, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dc02      	bgt.n	8008a4c <__sflush_r+0x1c>
 8008a46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	dd48      	ble.n	8008ade <__sflush_r+0xae>
 8008a4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d045      	beq.n	8008ade <__sflush_r+0xae>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a58:	682f      	ldr	r7, [r5, #0]
 8008a5a:	6a21      	ldr	r1, [r4, #32]
 8008a5c:	602b      	str	r3, [r5, #0]
 8008a5e:	d030      	beq.n	8008ac2 <__sflush_r+0x92>
 8008a60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	0759      	lsls	r1, r3, #29
 8008a66:	d505      	bpl.n	8008a74 <__sflush_r+0x44>
 8008a68:	6863      	ldr	r3, [r4, #4]
 8008a6a:	1ad2      	subs	r2, r2, r3
 8008a6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a6e:	b10b      	cbz	r3, 8008a74 <__sflush_r+0x44>
 8008a70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a72:	1ad2      	subs	r2, r2, r3
 8008a74:	2300      	movs	r3, #0
 8008a76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a78:	6a21      	ldr	r1, [r4, #32]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	47b0      	blx	r6
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	d106      	bne.n	8008a92 <__sflush_r+0x62>
 8008a84:	6829      	ldr	r1, [r5, #0]
 8008a86:	291d      	cmp	r1, #29
 8008a88:	d82b      	bhi.n	8008ae2 <__sflush_r+0xb2>
 8008a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008b34 <__sflush_r+0x104>)
 8008a8c:	410a      	asrs	r2, r1
 8008a8e:	07d6      	lsls	r6, r2, #31
 8008a90:	d427      	bmi.n	8008ae2 <__sflush_r+0xb2>
 8008a92:	2200      	movs	r2, #0
 8008a94:	6062      	str	r2, [r4, #4]
 8008a96:	04d9      	lsls	r1, r3, #19
 8008a98:	6922      	ldr	r2, [r4, #16]
 8008a9a:	6022      	str	r2, [r4, #0]
 8008a9c:	d504      	bpl.n	8008aa8 <__sflush_r+0x78>
 8008a9e:	1c42      	adds	r2, r0, #1
 8008aa0:	d101      	bne.n	8008aa6 <__sflush_r+0x76>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	b903      	cbnz	r3, 8008aa8 <__sflush_r+0x78>
 8008aa6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	b1b9      	cbz	r1, 8008ade <__sflush_r+0xae>
 8008aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	d002      	beq.n	8008abc <__sflush_r+0x8c>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f7ff feba 	bl	8008830 <_free_r>
 8008abc:	2300      	movs	r3, #0
 8008abe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ac0:	e00d      	b.n	8008ade <__sflush_r+0xae>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b0      	blx	r6
 8008ac8:	4602      	mov	r2, r0
 8008aca:	1c50      	adds	r0, r2, #1
 8008acc:	d1c9      	bne.n	8008a62 <__sflush_r+0x32>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d0c6      	beq.n	8008a62 <__sflush_r+0x32>
 8008ad4:	2b1d      	cmp	r3, #29
 8008ad6:	d001      	beq.n	8008adc <__sflush_r+0xac>
 8008ad8:	2b16      	cmp	r3, #22
 8008ada:	d11e      	bne.n	8008b1a <__sflush_r+0xea>
 8008adc:	602f      	str	r7, [r5, #0]
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e022      	b.n	8008b28 <__sflush_r+0xf8>
 8008ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae6:	b21b      	sxth	r3, r3
 8008ae8:	e01b      	b.n	8008b22 <__sflush_r+0xf2>
 8008aea:	690f      	ldr	r7, [r1, #16]
 8008aec:	2f00      	cmp	r7, #0
 8008aee:	d0f6      	beq.n	8008ade <__sflush_r+0xae>
 8008af0:	0793      	lsls	r3, r2, #30
 8008af2:	680e      	ldr	r6, [r1, #0]
 8008af4:	bf08      	it	eq
 8008af6:	694b      	ldreq	r3, [r1, #20]
 8008af8:	600f      	str	r7, [r1, #0]
 8008afa:	bf18      	it	ne
 8008afc:	2300      	movne	r3, #0
 8008afe:	eba6 0807 	sub.w	r8, r6, r7
 8008b02:	608b      	str	r3, [r1, #8]
 8008b04:	f1b8 0f00 	cmp.w	r8, #0
 8008b08:	dde9      	ble.n	8008ade <__sflush_r+0xae>
 8008b0a:	6a21      	ldr	r1, [r4, #32]
 8008b0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b0e:	4643      	mov	r3, r8
 8008b10:	463a      	mov	r2, r7
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b0      	blx	r6
 8008b16:	2800      	cmp	r0, #0
 8008b18:	dc08      	bgt.n	8008b2c <__sflush_r+0xfc>
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	4407      	add	r7, r0
 8008b2e:	eba8 0800 	sub.w	r8, r8, r0
 8008b32:	e7e7      	b.n	8008b04 <__sflush_r+0xd4>
 8008b34:	dfbffffe 	.word	0xdfbffffe

08008b38 <_fflush_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	690b      	ldr	r3, [r1, #16]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	460c      	mov	r4, r1
 8008b40:	b913      	cbnz	r3, 8008b48 <_fflush_r+0x10>
 8008b42:	2500      	movs	r5, #0
 8008b44:	4628      	mov	r0, r5
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
 8008b48:	b118      	cbz	r0, 8008b52 <_fflush_r+0x1a>
 8008b4a:	6a03      	ldr	r3, [r0, #32]
 8008b4c:	b90b      	cbnz	r3, 8008b52 <_fflush_r+0x1a>
 8008b4e:	f7ff fd5b 	bl	8008608 <__sinit>
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0f3      	beq.n	8008b42 <_fflush_r+0xa>
 8008b5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b5c:	07d0      	lsls	r0, r2, #31
 8008b5e:	d404      	bmi.n	8008b6a <_fflush_r+0x32>
 8008b60:	0599      	lsls	r1, r3, #22
 8008b62:	d402      	bmi.n	8008b6a <_fflush_r+0x32>
 8008b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b66:	f7ff fe42 	bl	80087ee <__retarget_lock_acquire_recursive>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	f7ff ff5f 	bl	8008a30 <__sflush_r>
 8008b72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b74:	07da      	lsls	r2, r3, #31
 8008b76:	4605      	mov	r5, r0
 8008b78:	d4e4      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	059b      	lsls	r3, r3, #22
 8008b7e:	d4e1      	bmi.n	8008b44 <_fflush_r+0xc>
 8008b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b82:	f7ff fe35 	bl	80087f0 <__retarget_lock_release_recursive>
 8008b86:	e7dd      	b.n	8008b44 <_fflush_r+0xc>

08008b88 <fiprintf>:
 8008b88:	b40e      	push	{r1, r2, r3}
 8008b8a:	b503      	push	{r0, r1, lr}
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	ab03      	add	r3, sp, #12
 8008b90:	4805      	ldr	r0, [pc, #20]	@ (8008ba8 <fiprintf+0x20>)
 8008b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b96:	6800      	ldr	r0, [r0, #0]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	f000 f847 	bl	8008c2c <_vfiprintf_r>
 8008b9e:	b002      	add	sp, #8
 8008ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ba4:	b003      	add	sp, #12
 8008ba6:	4770      	bx	lr
 8008ba8:	2000005c 	.word	0x2000005c

08008bac <_sbrk_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	@ (8008bc8 <_sbrk_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7fa fb20 	bl	80031fc <_sbrk>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_sbrk_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_sbrk_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	20000608 	.word	0x20000608

08008bcc <abort>:
 8008bcc:	b508      	push	{r3, lr}
 8008bce:	2006      	movs	r0, #6
 8008bd0:	f000 fb8e 	bl	80092f0 <raise>
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	f7fa fa99 	bl	800310c <_exit>

08008bda <__sfputc_r>:
 8008bda:	6893      	ldr	r3, [r2, #8]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	b410      	push	{r4}
 8008be2:	6093      	str	r3, [r2, #8]
 8008be4:	da08      	bge.n	8008bf8 <__sfputc_r+0x1e>
 8008be6:	6994      	ldr	r4, [r2, #24]
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	db01      	blt.n	8008bf0 <__sfputc_r+0x16>
 8008bec:	290a      	cmp	r1, #10
 8008bee:	d103      	bne.n	8008bf8 <__sfputc_r+0x1e>
 8008bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf4:	f000 bac0 	b.w	8009178 <__swbuf_r>
 8008bf8:	6813      	ldr	r3, [r2, #0]
 8008bfa:	1c58      	adds	r0, r3, #1
 8008bfc:	6010      	str	r0, [r2, #0]
 8008bfe:	7019      	strb	r1, [r3, #0]
 8008c00:	4608      	mov	r0, r1
 8008c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <__sfputs_r>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	4614      	mov	r4, r2
 8008c10:	18d5      	adds	r5, r2, r3
 8008c12:	42ac      	cmp	r4, r5
 8008c14:	d101      	bne.n	8008c1a <__sfputs_r+0x12>
 8008c16:	2000      	movs	r0, #0
 8008c18:	e007      	b.n	8008c2a <__sfputs_r+0x22>
 8008c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1e:	463a      	mov	r2, r7
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7ff ffda 	bl	8008bda <__sfputc_r>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d1f3      	bne.n	8008c12 <__sfputs_r+0xa>
 8008c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c2c <_vfiprintf_r>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	460d      	mov	r5, r1
 8008c32:	b09d      	sub	sp, #116	@ 0x74
 8008c34:	4614      	mov	r4, r2
 8008c36:	4698      	mov	r8, r3
 8008c38:	4606      	mov	r6, r0
 8008c3a:	b118      	cbz	r0, 8008c44 <_vfiprintf_r+0x18>
 8008c3c:	6a03      	ldr	r3, [r0, #32]
 8008c3e:	b90b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x18>
 8008c40:	f7ff fce2 	bl	8008608 <__sinit>
 8008c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c46:	07d9      	lsls	r1, r3, #31
 8008c48:	d405      	bmi.n	8008c56 <_vfiprintf_r+0x2a>
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	059a      	lsls	r2, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <_vfiprintf_r+0x2a>
 8008c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c52:	f7ff fdcc 	bl	80087ee <__retarget_lock_acquire_recursive>
 8008c56:	89ab      	ldrh	r3, [r5, #12]
 8008c58:	071b      	lsls	r3, r3, #28
 8008c5a:	d501      	bpl.n	8008c60 <_vfiprintf_r+0x34>
 8008c5c:	692b      	ldr	r3, [r5, #16]
 8008c5e:	b99b      	cbnz	r3, 8008c88 <_vfiprintf_r+0x5c>
 8008c60:	4629      	mov	r1, r5
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 fac6 	bl	80091f4 <__swsetup_r>
 8008c68:	b170      	cbz	r0, 8008c88 <_vfiprintf_r+0x5c>
 8008c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c6c:	07dc      	lsls	r4, r3, #31
 8008c6e:	d504      	bpl.n	8008c7a <_vfiprintf_r+0x4e>
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	b01d      	add	sp, #116	@ 0x74
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	89ab      	ldrh	r3, [r5, #12]
 8008c7c:	0598      	lsls	r0, r3, #22
 8008c7e:	d4f7      	bmi.n	8008c70 <_vfiprintf_r+0x44>
 8008c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c82:	f7ff fdb5 	bl	80087f0 <__retarget_lock_release_recursive>
 8008c86:	e7f3      	b.n	8008c70 <_vfiprintf_r+0x44>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c96:	2330      	movs	r3, #48	@ 0x30
 8008c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e48 <_vfiprintf_r+0x21c>
 8008c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ca0:	f04f 0901 	mov.w	r9, #1
 8008ca4:	4623      	mov	r3, r4
 8008ca6:	469a      	mov	sl, r3
 8008ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cac:	b10a      	cbz	r2, 8008cb2 <_vfiprintf_r+0x86>
 8008cae:	2a25      	cmp	r2, #37	@ 0x25
 8008cb0:	d1f9      	bne.n	8008ca6 <_vfiprintf_r+0x7a>
 8008cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008cb6:	d00b      	beq.n	8008cd0 <_vfiprintf_r+0xa4>
 8008cb8:	465b      	mov	r3, fp
 8008cba:	4622      	mov	r2, r4
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff ffa2 	bl	8008c08 <__sfputs_r>
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	f000 80a7 	beq.w	8008e18 <_vfiprintf_r+0x1ec>
 8008cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ccc:	445a      	add	r2, fp
 8008cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 809f 	beq.w	8008e18 <_vfiprintf_r+0x1ec>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce4:	f10a 0a01 	add.w	sl, sl, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	9307      	str	r3, [sp, #28]
 8008cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cf2:	4654      	mov	r4, sl
 8008cf4:	2205      	movs	r2, #5
 8008cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cfa:	4853      	ldr	r0, [pc, #332]	@ (8008e48 <_vfiprintf_r+0x21c>)
 8008cfc:	f7f7 fa68 	bl	80001d0 <memchr>
 8008d00:	9a04      	ldr	r2, [sp, #16]
 8008d02:	b9d8      	cbnz	r0, 8008d3c <_vfiprintf_r+0x110>
 8008d04:	06d1      	lsls	r1, r2, #27
 8008d06:	bf44      	itt	mi
 8008d08:	2320      	movmi	r3, #32
 8008d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d0e:	0713      	lsls	r3, r2, #28
 8008d10:	bf44      	itt	mi
 8008d12:	232b      	movmi	r3, #43	@ 0x2b
 8008d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d18:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d1e:	d015      	beq.n	8008d4c <_vfiprintf_r+0x120>
 8008d20:	9a07      	ldr	r2, [sp, #28]
 8008d22:	4654      	mov	r4, sl
 8008d24:	2000      	movs	r0, #0
 8008d26:	f04f 0c0a 	mov.w	ip, #10
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d30:	3b30      	subs	r3, #48	@ 0x30
 8008d32:	2b09      	cmp	r3, #9
 8008d34:	d94b      	bls.n	8008dce <_vfiprintf_r+0x1a2>
 8008d36:	b1b0      	cbz	r0, 8008d66 <_vfiprintf_r+0x13a>
 8008d38:	9207      	str	r2, [sp, #28]
 8008d3a:	e014      	b.n	8008d66 <_vfiprintf_r+0x13a>
 8008d3c:	eba0 0308 	sub.w	r3, r0, r8
 8008d40:	fa09 f303 	lsl.w	r3, r9, r3
 8008d44:	4313      	orrs	r3, r2
 8008d46:	9304      	str	r3, [sp, #16]
 8008d48:	46a2      	mov	sl, r4
 8008d4a:	e7d2      	b.n	8008cf2 <_vfiprintf_r+0xc6>
 8008d4c:	9b03      	ldr	r3, [sp, #12]
 8008d4e:	1d19      	adds	r1, r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	9103      	str	r1, [sp, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	bfbb      	ittet	lt
 8008d58:	425b      	neglt	r3, r3
 8008d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d5e:	9307      	strge	r3, [sp, #28]
 8008d60:	9307      	strlt	r3, [sp, #28]
 8008d62:	bfb8      	it	lt
 8008d64:	9204      	strlt	r2, [sp, #16]
 8008d66:	7823      	ldrb	r3, [r4, #0]
 8008d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d6a:	d10a      	bne.n	8008d82 <_vfiprintf_r+0x156>
 8008d6c:	7863      	ldrb	r3, [r4, #1]
 8008d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d70:	d132      	bne.n	8008dd8 <_vfiprintf_r+0x1ac>
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	9203      	str	r2, [sp, #12]
 8008d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d7e:	3402      	adds	r4, #2
 8008d80:	9305      	str	r3, [sp, #20]
 8008d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e58 <_vfiprintf_r+0x22c>
 8008d86:	7821      	ldrb	r1, [r4, #0]
 8008d88:	2203      	movs	r2, #3
 8008d8a:	4650      	mov	r0, sl
 8008d8c:	f7f7 fa20 	bl	80001d0 <memchr>
 8008d90:	b138      	cbz	r0, 8008da2 <_vfiprintf_r+0x176>
 8008d92:	9b04      	ldr	r3, [sp, #16]
 8008d94:	eba0 000a 	sub.w	r0, r0, sl
 8008d98:	2240      	movs	r2, #64	@ 0x40
 8008d9a:	4082      	lsls	r2, r0
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	3401      	adds	r4, #1
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da6:	4829      	ldr	r0, [pc, #164]	@ (8008e4c <_vfiprintf_r+0x220>)
 8008da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dac:	2206      	movs	r2, #6
 8008dae:	f7f7 fa0f 	bl	80001d0 <memchr>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d03f      	beq.n	8008e36 <_vfiprintf_r+0x20a>
 8008db6:	4b26      	ldr	r3, [pc, #152]	@ (8008e50 <_vfiprintf_r+0x224>)
 8008db8:	bb1b      	cbnz	r3, 8008e02 <_vfiprintf_r+0x1d6>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	3307      	adds	r3, #7
 8008dbe:	f023 0307 	bic.w	r3, r3, #7
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	443b      	add	r3, r7
 8008dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dcc:	e76a      	b.n	8008ca4 <_vfiprintf_r+0x78>
 8008dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	e7a8      	b.n	8008d2a <_vfiprintf_r+0xfe>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	4619      	mov	r1, r3
 8008de0:	f04f 0c0a 	mov.w	ip, #10
 8008de4:	4620      	mov	r0, r4
 8008de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dea:	3a30      	subs	r2, #48	@ 0x30
 8008dec:	2a09      	cmp	r2, #9
 8008dee:	d903      	bls.n	8008df8 <_vfiprintf_r+0x1cc>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0c6      	beq.n	8008d82 <_vfiprintf_r+0x156>
 8008df4:	9105      	str	r1, [sp, #20]
 8008df6:	e7c4      	b.n	8008d82 <_vfiprintf_r+0x156>
 8008df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e7f0      	b.n	8008de4 <_vfiprintf_r+0x1b8>
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	462a      	mov	r2, r5
 8008e08:	4b12      	ldr	r3, [pc, #72]	@ (8008e54 <_vfiprintf_r+0x228>)
 8008e0a:	a904      	add	r1, sp, #16
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	f3af 8000 	nop.w
 8008e12:	4607      	mov	r7, r0
 8008e14:	1c78      	adds	r0, r7, #1
 8008e16:	d1d6      	bne.n	8008dc6 <_vfiprintf_r+0x19a>
 8008e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	d405      	bmi.n	8008e2a <_vfiprintf_r+0x1fe>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	059a      	lsls	r2, r3, #22
 8008e22:	d402      	bmi.n	8008e2a <_vfiprintf_r+0x1fe>
 8008e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e26:	f7ff fce3 	bl	80087f0 <__retarget_lock_release_recursive>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	065b      	lsls	r3, r3, #25
 8008e2e:	f53f af1f 	bmi.w	8008c70 <_vfiprintf_r+0x44>
 8008e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e34:	e71e      	b.n	8008c74 <_vfiprintf_r+0x48>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <_vfiprintf_r+0x228>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4630      	mov	r0, r6
 8008e42:	f000 f879 	bl	8008f38 <_printf_i>
 8008e46:	e7e4      	b.n	8008e12 <_vfiprintf_r+0x1e6>
 8008e48:	0800c7bf 	.word	0x0800c7bf
 8008e4c:	0800c7c9 	.word	0x0800c7c9
 8008e50:	00000000 	.word	0x00000000
 8008e54:	08008c09 	.word	0x08008c09
 8008e58:	0800c7c5 	.word	0x0800c7c5

08008e5c <_printf_common>:
 8008e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e60:	4616      	mov	r6, r2
 8008e62:	4698      	mov	r8, r3
 8008e64:	688a      	ldr	r2, [r1, #8]
 8008e66:	690b      	ldr	r3, [r1, #16]
 8008e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	bfb8      	it	lt
 8008e70:	4613      	movlt	r3, r2
 8008e72:	6033      	str	r3, [r6, #0]
 8008e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e78:	4607      	mov	r7, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	b10a      	cbz	r2, 8008e82 <_printf_common+0x26>
 8008e7e:	3301      	adds	r3, #1
 8008e80:	6033      	str	r3, [r6, #0]
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	0699      	lsls	r1, r3, #26
 8008e86:	bf42      	ittt	mi
 8008e88:	6833      	ldrmi	r3, [r6, #0]
 8008e8a:	3302      	addmi	r3, #2
 8008e8c:	6033      	strmi	r3, [r6, #0]
 8008e8e:	6825      	ldr	r5, [r4, #0]
 8008e90:	f015 0506 	ands.w	r5, r5, #6
 8008e94:	d106      	bne.n	8008ea4 <_printf_common+0x48>
 8008e96:	f104 0a19 	add.w	sl, r4, #25
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	6832      	ldr	r2, [r6, #0]
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dc26      	bgt.n	8008ef2 <_printf_common+0x96>
 8008ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ea8:	6822      	ldr	r2, [r4, #0]
 8008eaa:	3b00      	subs	r3, #0
 8008eac:	bf18      	it	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	0692      	lsls	r2, r2, #26
 8008eb2:	d42b      	bmi.n	8008f0c <_printf_common+0xb0>
 8008eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008eb8:	4641      	mov	r1, r8
 8008eba:	4638      	mov	r0, r7
 8008ebc:	47c8      	blx	r9
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d01e      	beq.n	8008f00 <_printf_common+0xa4>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	f003 0306 	and.w	r3, r3, #6
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	bf02      	ittt	eq
 8008ece:	68e5      	ldreq	r5, [r4, #12]
 8008ed0:	6833      	ldreq	r3, [r6, #0]
 8008ed2:	1aed      	subeq	r5, r5, r3
 8008ed4:	68a3      	ldr	r3, [r4, #8]
 8008ed6:	bf0c      	ite	eq
 8008ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008edc:	2500      	movne	r5, #0
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	bfc4      	itt	gt
 8008ee2:	1a9b      	subgt	r3, r3, r2
 8008ee4:	18ed      	addgt	r5, r5, r3
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	341a      	adds	r4, #26
 8008eea:	42b5      	cmp	r5, r6
 8008eec:	d11a      	bne.n	8008f24 <_printf_common+0xc8>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e008      	b.n	8008f04 <_printf_common+0xa8>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c8      	blx	r9
 8008efc:	3001      	adds	r0, #1
 8008efe:	d103      	bne.n	8008f08 <_printf_common+0xac>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	3501      	adds	r5, #1
 8008f0a:	e7c6      	b.n	8008e9a <_printf_common+0x3e>
 8008f0c:	18e1      	adds	r1, r4, r3
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	2030      	movs	r0, #48	@ 0x30
 8008f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f16:	4422      	add	r2, r4
 8008f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f20:	3302      	adds	r3, #2
 8008f22:	e7c7      	b.n	8008eb4 <_printf_common+0x58>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4622      	mov	r2, r4
 8008f28:	4641      	mov	r1, r8
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c8      	blx	r9
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0e6      	beq.n	8008f00 <_printf_common+0xa4>
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7d9      	b.n	8008eea <_printf_common+0x8e>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	7e0f      	ldrb	r7, [r1, #24]
 8008f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f40:	2f78      	cmp	r7, #120	@ 0x78
 8008f42:	4691      	mov	r9, r2
 8008f44:	4680      	mov	r8, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	469a      	mov	sl, r3
 8008f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	@ 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d2 	beq.w	80090fe <_printf_i+0x1c6>
 8008f5a:	2f58      	cmp	r7, #88	@ 0x58
 8008f5c:	f000 80b9 	beq.w	80090d2 <_printf_i+0x19a>
 8008f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a101      	add	r1, pc, #4	@ (adr r1, 8008f78 <_printf_i+0x40>)
 8008f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090e5 	.word	0x080090e5
 8008fa8:	0800900f 	.word	0x0800900f
 8008fac:	0800909f 	.word	0x0800909f
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009107 	.word	0x08009107
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	0800900f 	.word	0x0800900f
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090a7 	.word	0x080090a7
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	1d1a      	adds	r2, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6032      	str	r2, [r6, #0]
 8008fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e09d      	b.n	8009120 <_printf_i+0x1e8>
 8008fe4:	6833      	ldr	r3, [r6, #0]
 8008fe6:	6820      	ldr	r0, [r4, #0]
 8008fe8:	1d19      	adds	r1, r3, #4
 8008fea:	6031      	str	r1, [r6, #0]
 8008fec:	0606      	lsls	r6, r0, #24
 8008fee:	d501      	bpl.n	8008ff4 <_printf_i+0xbc>
 8008ff0:	681d      	ldr	r5, [r3, #0]
 8008ff2:	e003      	b.n	8008ffc <_printf_i+0xc4>
 8008ff4:	0645      	lsls	r5, r0, #25
 8008ff6:	d5fb      	bpl.n	8008ff0 <_printf_i+0xb8>
 8008ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	da03      	bge.n	8009008 <_printf_i+0xd0>
 8009000:	232d      	movs	r3, #45	@ 0x2d
 8009002:	426d      	negs	r5, r5
 8009004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009008:	4859      	ldr	r0, [pc, #356]	@ (8009170 <_printf_i+0x238>)
 800900a:	230a      	movs	r3, #10
 800900c:	e011      	b.n	8009032 <_printf_i+0xfa>
 800900e:	6821      	ldr	r1, [r4, #0]
 8009010:	6833      	ldr	r3, [r6, #0]
 8009012:	0608      	lsls	r0, r1, #24
 8009014:	f853 5b04 	ldr.w	r5, [r3], #4
 8009018:	d402      	bmi.n	8009020 <_printf_i+0xe8>
 800901a:	0649      	lsls	r1, r1, #25
 800901c:	bf48      	it	mi
 800901e:	b2ad      	uxthmi	r5, r5
 8009020:	2f6f      	cmp	r7, #111	@ 0x6f
 8009022:	4853      	ldr	r0, [pc, #332]	@ (8009170 <_printf_i+0x238>)
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	bf14      	ite	ne
 8009028:	230a      	movne	r3, #10
 800902a:	2308      	moveq	r3, #8
 800902c:	2100      	movs	r1, #0
 800902e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009032:	6866      	ldr	r6, [r4, #4]
 8009034:	60a6      	str	r6, [r4, #8]
 8009036:	2e00      	cmp	r6, #0
 8009038:	bfa2      	ittt	ge
 800903a:	6821      	ldrge	r1, [r4, #0]
 800903c:	f021 0104 	bicge.w	r1, r1, #4
 8009040:	6021      	strge	r1, [r4, #0]
 8009042:	b90d      	cbnz	r5, 8009048 <_printf_i+0x110>
 8009044:	2e00      	cmp	r6, #0
 8009046:	d04b      	beq.n	80090e0 <_printf_i+0x1a8>
 8009048:	4616      	mov	r6, r2
 800904a:	fbb5 f1f3 	udiv	r1, r5, r3
 800904e:	fb03 5711 	mls	r7, r3, r1, r5
 8009052:	5dc7      	ldrb	r7, [r0, r7]
 8009054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009058:	462f      	mov	r7, r5
 800905a:	42bb      	cmp	r3, r7
 800905c:	460d      	mov	r5, r1
 800905e:	d9f4      	bls.n	800904a <_printf_i+0x112>
 8009060:	2b08      	cmp	r3, #8
 8009062:	d10b      	bne.n	800907c <_printf_i+0x144>
 8009064:	6823      	ldr	r3, [r4, #0]
 8009066:	07df      	lsls	r7, r3, #31
 8009068:	d508      	bpl.n	800907c <_printf_i+0x144>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	6861      	ldr	r1, [r4, #4]
 800906e:	4299      	cmp	r1, r3
 8009070:	bfde      	ittt	le
 8009072:	2330      	movle	r3, #48	@ 0x30
 8009074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800907c:	1b92      	subs	r2, r2, r6
 800907e:	6122      	str	r2, [r4, #16]
 8009080:	f8cd a000 	str.w	sl, [sp]
 8009084:	464b      	mov	r3, r9
 8009086:	aa03      	add	r2, sp, #12
 8009088:	4621      	mov	r1, r4
 800908a:	4640      	mov	r0, r8
 800908c:	f7ff fee6 	bl	8008e5c <_printf_common>
 8009090:	3001      	adds	r0, #1
 8009092:	d14a      	bne.n	800912a <_printf_i+0x1f2>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	b004      	add	sp, #16
 800909a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f043 0320 	orr.w	r3, r3, #32
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	4833      	ldr	r0, [pc, #204]	@ (8009174 <_printf_i+0x23c>)
 80090a8:	2778      	movs	r7, #120	@ 0x78
 80090aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	6831      	ldr	r1, [r6, #0]
 80090b2:	061f      	lsls	r7, r3, #24
 80090b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80090b8:	d402      	bmi.n	80090c0 <_printf_i+0x188>
 80090ba:	065f      	lsls	r7, r3, #25
 80090bc:	bf48      	it	mi
 80090be:	b2ad      	uxthmi	r5, r5
 80090c0:	6031      	str	r1, [r6, #0]
 80090c2:	07d9      	lsls	r1, r3, #31
 80090c4:	bf44      	itt	mi
 80090c6:	f043 0320 	orrmi.w	r3, r3, #32
 80090ca:	6023      	strmi	r3, [r4, #0]
 80090cc:	b11d      	cbz	r5, 80090d6 <_printf_i+0x19e>
 80090ce:	2310      	movs	r3, #16
 80090d0:	e7ac      	b.n	800902c <_printf_i+0xf4>
 80090d2:	4827      	ldr	r0, [pc, #156]	@ (8009170 <_printf_i+0x238>)
 80090d4:	e7e9      	b.n	80090aa <_printf_i+0x172>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	f023 0320 	bic.w	r3, r3, #32
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	e7f6      	b.n	80090ce <_printf_i+0x196>
 80090e0:	4616      	mov	r6, r2
 80090e2:	e7bd      	b.n	8009060 <_printf_i+0x128>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	6825      	ldr	r5, [r4, #0]
 80090e8:	6961      	ldr	r1, [r4, #20]
 80090ea:	1d18      	adds	r0, r3, #4
 80090ec:	6030      	str	r0, [r6, #0]
 80090ee:	062e      	lsls	r6, r5, #24
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	d501      	bpl.n	80090f8 <_printf_i+0x1c0>
 80090f4:	6019      	str	r1, [r3, #0]
 80090f6:	e002      	b.n	80090fe <_printf_i+0x1c6>
 80090f8:	0668      	lsls	r0, r5, #25
 80090fa:	d5fb      	bpl.n	80090f4 <_printf_i+0x1bc>
 80090fc:	8019      	strh	r1, [r3, #0]
 80090fe:	2300      	movs	r3, #0
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	4616      	mov	r6, r2
 8009104:	e7bc      	b.n	8009080 <_printf_i+0x148>
 8009106:	6833      	ldr	r3, [r6, #0]
 8009108:	1d1a      	adds	r2, r3, #4
 800910a:	6032      	str	r2, [r6, #0]
 800910c:	681e      	ldr	r6, [r3, #0]
 800910e:	6862      	ldr	r2, [r4, #4]
 8009110:	2100      	movs	r1, #0
 8009112:	4630      	mov	r0, r6
 8009114:	f7f7 f85c 	bl	80001d0 <memchr>
 8009118:	b108      	cbz	r0, 800911e <_printf_i+0x1e6>
 800911a:	1b80      	subs	r0, r0, r6
 800911c:	6060      	str	r0, [r4, #4]
 800911e:	6863      	ldr	r3, [r4, #4]
 8009120:	6123      	str	r3, [r4, #16]
 8009122:	2300      	movs	r3, #0
 8009124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009128:	e7aa      	b.n	8009080 <_printf_i+0x148>
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	4632      	mov	r2, r6
 800912e:	4649      	mov	r1, r9
 8009130:	4640      	mov	r0, r8
 8009132:	47d0      	blx	sl
 8009134:	3001      	adds	r0, #1
 8009136:	d0ad      	beq.n	8009094 <_printf_i+0x15c>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	079b      	lsls	r3, r3, #30
 800913c:	d413      	bmi.n	8009166 <_printf_i+0x22e>
 800913e:	68e0      	ldr	r0, [r4, #12]
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	4298      	cmp	r0, r3
 8009144:	bfb8      	it	lt
 8009146:	4618      	movlt	r0, r3
 8009148:	e7a6      	b.n	8009098 <_printf_i+0x160>
 800914a:	2301      	movs	r3, #1
 800914c:	4632      	mov	r2, r6
 800914e:	4649      	mov	r1, r9
 8009150:	4640      	mov	r0, r8
 8009152:	47d0      	blx	sl
 8009154:	3001      	adds	r0, #1
 8009156:	d09d      	beq.n	8009094 <_printf_i+0x15c>
 8009158:	3501      	adds	r5, #1
 800915a:	68e3      	ldr	r3, [r4, #12]
 800915c:	9903      	ldr	r1, [sp, #12]
 800915e:	1a5b      	subs	r3, r3, r1
 8009160:	42ab      	cmp	r3, r5
 8009162:	dcf2      	bgt.n	800914a <_printf_i+0x212>
 8009164:	e7eb      	b.n	800913e <_printf_i+0x206>
 8009166:	2500      	movs	r5, #0
 8009168:	f104 0619 	add.w	r6, r4, #25
 800916c:	e7f5      	b.n	800915a <_printf_i+0x222>
 800916e:	bf00      	nop
 8009170:	0800c7d0 	.word	0x0800c7d0
 8009174:	0800c7e1 	.word	0x0800c7e1

08009178 <__swbuf_r>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	460e      	mov	r6, r1
 800917c:	4614      	mov	r4, r2
 800917e:	4605      	mov	r5, r0
 8009180:	b118      	cbz	r0, 800918a <__swbuf_r+0x12>
 8009182:	6a03      	ldr	r3, [r0, #32]
 8009184:	b90b      	cbnz	r3, 800918a <__swbuf_r+0x12>
 8009186:	f7ff fa3f 	bl	8008608 <__sinit>
 800918a:	69a3      	ldr	r3, [r4, #24]
 800918c:	60a3      	str	r3, [r4, #8]
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	071a      	lsls	r2, r3, #28
 8009192:	d501      	bpl.n	8009198 <__swbuf_r+0x20>
 8009194:	6923      	ldr	r3, [r4, #16]
 8009196:	b943      	cbnz	r3, 80091aa <__swbuf_r+0x32>
 8009198:	4621      	mov	r1, r4
 800919a:	4628      	mov	r0, r5
 800919c:	f000 f82a 	bl	80091f4 <__swsetup_r>
 80091a0:	b118      	cbz	r0, 80091aa <__swbuf_r+0x32>
 80091a2:	f04f 37ff 	mov.w	r7, #4294967295
 80091a6:	4638      	mov	r0, r7
 80091a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	6922      	ldr	r2, [r4, #16]
 80091ae:	1a98      	subs	r0, r3, r2
 80091b0:	6963      	ldr	r3, [r4, #20]
 80091b2:	b2f6      	uxtb	r6, r6
 80091b4:	4283      	cmp	r3, r0
 80091b6:	4637      	mov	r7, r6
 80091b8:	dc05      	bgt.n	80091c6 <__swbuf_r+0x4e>
 80091ba:	4621      	mov	r1, r4
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fcbb 	bl	8008b38 <_fflush_r>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d1ed      	bne.n	80091a2 <__swbuf_r+0x2a>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	60a3      	str	r3, [r4, #8]
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	6022      	str	r2, [r4, #0]
 80091d2:	701e      	strb	r6, [r3, #0]
 80091d4:	6962      	ldr	r2, [r4, #20]
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	429a      	cmp	r2, r3
 80091da:	d004      	beq.n	80091e6 <__swbuf_r+0x6e>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	07db      	lsls	r3, r3, #31
 80091e0:	d5e1      	bpl.n	80091a6 <__swbuf_r+0x2e>
 80091e2:	2e0a      	cmp	r6, #10
 80091e4:	d1df      	bne.n	80091a6 <__swbuf_r+0x2e>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f7ff fca5 	bl	8008b38 <_fflush_r>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0d9      	beq.n	80091a6 <__swbuf_r+0x2e>
 80091f2:	e7d6      	b.n	80091a2 <__swbuf_r+0x2a>

080091f4 <__swsetup_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4b29      	ldr	r3, [pc, #164]	@ (800929c <__swsetup_r+0xa8>)
 80091f8:	4605      	mov	r5, r0
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	460c      	mov	r4, r1
 80091fe:	b118      	cbz	r0, 8009208 <__swsetup_r+0x14>
 8009200:	6a03      	ldr	r3, [r0, #32]
 8009202:	b90b      	cbnz	r3, 8009208 <__swsetup_r+0x14>
 8009204:	f7ff fa00 	bl	8008608 <__sinit>
 8009208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800920c:	0719      	lsls	r1, r3, #28
 800920e:	d422      	bmi.n	8009256 <__swsetup_r+0x62>
 8009210:	06da      	lsls	r2, r3, #27
 8009212:	d407      	bmi.n	8009224 <__swsetup_r+0x30>
 8009214:	2209      	movs	r2, #9
 8009216:	602a      	str	r2, [r5, #0]
 8009218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	e033      	b.n	800928c <__swsetup_r+0x98>
 8009224:	0758      	lsls	r0, r3, #29
 8009226:	d512      	bpl.n	800924e <__swsetup_r+0x5a>
 8009228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800922a:	b141      	cbz	r1, 800923e <__swsetup_r+0x4a>
 800922c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009230:	4299      	cmp	r1, r3
 8009232:	d002      	beq.n	800923a <__swsetup_r+0x46>
 8009234:	4628      	mov	r0, r5
 8009236:	f7ff fafb 	bl	8008830 <_free_r>
 800923a:	2300      	movs	r3, #0
 800923c:	6363      	str	r3, [r4, #52]	@ 0x34
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0308 	orr.w	r3, r3, #8
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	b94b      	cbnz	r3, 800926e <__swsetup_r+0x7a>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009264:	d003      	beq.n	800926e <__swsetup_r+0x7a>
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 f883 	bl	8009374 <__smakebuf_r>
 800926e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009272:	f013 0201 	ands.w	r2, r3, #1
 8009276:	d00a      	beq.n	800928e <__swsetup_r+0x9a>
 8009278:	2200      	movs	r2, #0
 800927a:	60a2      	str	r2, [r4, #8]
 800927c:	6962      	ldr	r2, [r4, #20]
 800927e:	4252      	negs	r2, r2
 8009280:	61a2      	str	r2, [r4, #24]
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	b942      	cbnz	r2, 8009298 <__swsetup_r+0xa4>
 8009286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800928a:	d1c5      	bne.n	8009218 <__swsetup_r+0x24>
 800928c:	bd38      	pop	{r3, r4, r5, pc}
 800928e:	0799      	lsls	r1, r3, #30
 8009290:	bf58      	it	pl
 8009292:	6962      	ldrpl	r2, [r4, #20]
 8009294:	60a2      	str	r2, [r4, #8]
 8009296:	e7f4      	b.n	8009282 <__swsetup_r+0x8e>
 8009298:	2000      	movs	r0, #0
 800929a:	e7f7      	b.n	800928c <__swsetup_r+0x98>
 800929c:	2000005c 	.word	0x2000005c

080092a0 <_raise_r>:
 80092a0:	291f      	cmp	r1, #31
 80092a2:	b538      	push	{r3, r4, r5, lr}
 80092a4:	4605      	mov	r5, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	d904      	bls.n	80092b4 <_raise_r+0x14>
 80092aa:	2316      	movs	r3, #22
 80092ac:	6003      	str	r3, [r0, #0]
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80092b6:	b112      	cbz	r2, 80092be <_raise_r+0x1e>
 80092b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092bc:	b94b      	cbnz	r3, 80092d2 <_raise_r+0x32>
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 f830 	bl	8009324 <_getpid_r>
 80092c4:	4622      	mov	r2, r4
 80092c6:	4601      	mov	r1, r0
 80092c8:	4628      	mov	r0, r5
 80092ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ce:	f000 b817 	b.w	8009300 <_kill_r>
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d00a      	beq.n	80092ec <_raise_r+0x4c>
 80092d6:	1c59      	adds	r1, r3, #1
 80092d8:	d103      	bne.n	80092e2 <_raise_r+0x42>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	2001      	movs	r0, #1
 80092e0:	e7e7      	b.n	80092b2 <_raise_r+0x12>
 80092e2:	2100      	movs	r1, #0
 80092e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092e8:	4620      	mov	r0, r4
 80092ea:	4798      	blx	r3
 80092ec:	2000      	movs	r0, #0
 80092ee:	e7e0      	b.n	80092b2 <_raise_r+0x12>

080092f0 <raise>:
 80092f0:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <raise+0xc>)
 80092f2:	4601      	mov	r1, r0
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f7ff bfd3 	b.w	80092a0 <_raise_r>
 80092fa:	bf00      	nop
 80092fc:	2000005c 	.word	0x2000005c

08009300 <_kill_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4d07      	ldr	r5, [pc, #28]	@ (8009320 <_kill_r+0x20>)
 8009304:	2300      	movs	r3, #0
 8009306:	4604      	mov	r4, r0
 8009308:	4608      	mov	r0, r1
 800930a:	4611      	mov	r1, r2
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	f7f9 feed 	bl	80030ec <_kill>
 8009312:	1c43      	adds	r3, r0, #1
 8009314:	d102      	bne.n	800931c <_kill_r+0x1c>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	b103      	cbz	r3, 800931c <_kill_r+0x1c>
 800931a:	6023      	str	r3, [r4, #0]
 800931c:	bd38      	pop	{r3, r4, r5, pc}
 800931e:	bf00      	nop
 8009320:	20000608 	.word	0x20000608

08009324 <_getpid_r>:
 8009324:	f7f9 beda 	b.w	80030dc <_getpid>

08009328 <__swhatbuf_r>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	460c      	mov	r4, r1
 800932c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009330:	2900      	cmp	r1, #0
 8009332:	b096      	sub	sp, #88	@ 0x58
 8009334:	4615      	mov	r5, r2
 8009336:	461e      	mov	r6, r3
 8009338:	da0d      	bge.n	8009356 <__swhatbuf_r+0x2e>
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009340:	f04f 0100 	mov.w	r1, #0
 8009344:	bf14      	ite	ne
 8009346:	2340      	movne	r3, #64	@ 0x40
 8009348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800934c:	2000      	movs	r0, #0
 800934e:	6031      	str	r1, [r6, #0]
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	b016      	add	sp, #88	@ 0x58
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	466a      	mov	r2, sp
 8009358:	f000 f848 	bl	80093ec <_fstat_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	dbec      	blt.n	800933a <__swhatbuf_r+0x12>
 8009360:	9901      	ldr	r1, [sp, #4]
 8009362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800936a:	4259      	negs	r1, r3
 800936c:	4159      	adcs	r1, r3
 800936e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009372:	e7eb      	b.n	800934c <__swhatbuf_r+0x24>

08009374 <__smakebuf_r>:
 8009374:	898b      	ldrh	r3, [r1, #12]
 8009376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009378:	079d      	lsls	r5, r3, #30
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d507      	bpl.n	8009390 <__smakebuf_r+0x1c>
 8009380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	2301      	movs	r3, #1
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	b003      	add	sp, #12
 800938e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009390:	ab01      	add	r3, sp, #4
 8009392:	466a      	mov	r2, sp
 8009394:	f7ff ffc8 	bl	8009328 <__swhatbuf_r>
 8009398:	9f00      	ldr	r7, [sp, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	4639      	mov	r1, r7
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff faba 	bl	8008918 <_malloc_r>
 80093a4:	b948      	cbnz	r0, 80093ba <__smakebuf_r+0x46>
 80093a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093aa:	059a      	lsls	r2, r3, #22
 80093ac:	d4ee      	bmi.n	800938c <__smakebuf_r+0x18>
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	f043 0302 	orr.w	r3, r3, #2
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	e7e2      	b.n	8009380 <__smakebuf_r+0xc>
 80093ba:	89a3      	ldrh	r3, [r4, #12]
 80093bc:	6020      	str	r0, [r4, #0]
 80093be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093c2:	81a3      	strh	r3, [r4, #12]
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80093ca:	b15b      	cbz	r3, 80093e4 <__smakebuf_r+0x70>
 80093cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 f81d 	bl	8009410 <_isatty_r>
 80093d6:	b128      	cbz	r0, 80093e4 <__smakebuf_r+0x70>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	81a3      	strh	r3, [r4, #12]
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	431d      	orrs	r5, r3
 80093e8:	81a5      	strh	r5, [r4, #12]
 80093ea:	e7cf      	b.n	800938c <__smakebuf_r+0x18>

080093ec <_fstat_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d07      	ldr	r5, [pc, #28]	@ (800940c <_fstat_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	f7f9 fed7 	bl	80031ac <_fstat>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	d102      	bne.n	8009408 <_fstat_r+0x1c>
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	b103      	cbz	r3, 8009408 <_fstat_r+0x1c>
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	bd38      	pop	{r3, r4, r5, pc}
 800940a:	bf00      	nop
 800940c:	20000608 	.word	0x20000608

08009410 <_isatty_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d06      	ldr	r5, [pc, #24]	@ (800942c <_isatty_r+0x1c>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	f7f9 fed6 	bl	80031cc <_isatty>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_isatty_r+0x1a>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_isatty_r+0x1a>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000608 	.word	0x20000608

08009430 <sqrt>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	ed2d 8b02 	vpush	{d8}
 8009436:	ec55 4b10 	vmov	r4, r5, d0
 800943a:	f000 f825 	bl	8009488 <__ieee754_sqrt>
 800943e:	4622      	mov	r2, r4
 8009440:	462b      	mov	r3, r5
 8009442:	4620      	mov	r0, r4
 8009444:	4629      	mov	r1, r5
 8009446:	eeb0 8a40 	vmov.f32	s16, s0
 800944a:	eef0 8a60 	vmov.f32	s17, s1
 800944e:	f7f7 fb65 	bl	8000b1c <__aeabi_dcmpun>
 8009452:	b990      	cbnz	r0, 800947a <sqrt+0x4a>
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f7 fb36 	bl	8000acc <__aeabi_dcmplt>
 8009460:	b158      	cbz	r0, 800947a <sqrt+0x4a>
 8009462:	f7ff f999 	bl	8008798 <__errno>
 8009466:	2321      	movs	r3, #33	@ 0x21
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	2300      	movs	r3, #0
 800946e:	4610      	mov	r0, r2
 8009470:	4619      	mov	r1, r3
 8009472:	f7f7 f9e3 	bl	800083c <__aeabi_ddiv>
 8009476:	ec41 0b18 	vmov	d8, r0, r1
 800947a:	eeb0 0a48 	vmov.f32	s0, s16
 800947e:	eef0 0a68 	vmov.f32	s1, s17
 8009482:	ecbd 8b02 	vpop	{d8}
 8009486:	bd38      	pop	{r3, r4, r5, pc}

08009488 <__ieee754_sqrt>:
 8009488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800948c:	4a68      	ldr	r2, [pc, #416]	@ (8009630 <__ieee754_sqrt+0x1a8>)
 800948e:	ec55 4b10 	vmov	r4, r5, d0
 8009492:	43aa      	bics	r2, r5
 8009494:	462b      	mov	r3, r5
 8009496:	4621      	mov	r1, r4
 8009498:	d110      	bne.n	80094bc <__ieee754_sqrt+0x34>
 800949a:	4622      	mov	r2, r4
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 f8a2 	bl	80005e8 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f6 fee6 	bl	800027c <__adddf3>
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	ec45 4b10 	vmov	d0, r4, r5
 80094b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	2d00      	cmp	r5, #0
 80094be:	dc0e      	bgt.n	80094de <__ieee754_sqrt+0x56>
 80094c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80094c4:	4322      	orrs	r2, r4
 80094c6:	d0f5      	beq.n	80094b4 <__ieee754_sqrt+0x2c>
 80094c8:	b19d      	cbz	r5, 80094f2 <__ieee754_sqrt+0x6a>
 80094ca:	4622      	mov	r2, r4
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f6 fed2 	bl	8000278 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	f7f7 f9b0 	bl	800083c <__aeabi_ddiv>
 80094dc:	e7e8      	b.n	80094b0 <__ieee754_sqrt+0x28>
 80094de:	152a      	asrs	r2, r5, #20
 80094e0:	d115      	bne.n	800950e <__ieee754_sqrt+0x86>
 80094e2:	2000      	movs	r0, #0
 80094e4:	e009      	b.n	80094fa <__ieee754_sqrt+0x72>
 80094e6:	0acb      	lsrs	r3, r1, #11
 80094e8:	3a15      	subs	r2, #21
 80094ea:	0549      	lsls	r1, r1, #21
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d0fa      	beq.n	80094e6 <__ieee754_sqrt+0x5e>
 80094f0:	e7f7      	b.n	80094e2 <__ieee754_sqrt+0x5a>
 80094f2:	462a      	mov	r2, r5
 80094f4:	e7fa      	b.n	80094ec <__ieee754_sqrt+0x64>
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	3001      	adds	r0, #1
 80094fa:	02dc      	lsls	r4, r3, #11
 80094fc:	d5fb      	bpl.n	80094f6 <__ieee754_sqrt+0x6e>
 80094fe:	1e44      	subs	r4, r0, #1
 8009500:	1b12      	subs	r2, r2, r4
 8009502:	f1c0 0420 	rsb	r4, r0, #32
 8009506:	fa21 f404 	lsr.w	r4, r1, r4
 800950a:	4323      	orrs	r3, r4
 800950c:	4081      	lsls	r1, r0
 800950e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009512:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800951a:	07d2      	lsls	r2, r2, #31
 800951c:	bf5c      	itt	pl
 800951e:	005b      	lslpl	r3, r3, #1
 8009520:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009524:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009528:	bf58      	it	pl
 800952a:	0049      	lslpl	r1, r1, #1
 800952c:	2600      	movs	r6, #0
 800952e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009532:	106d      	asrs	r5, r5, #1
 8009534:	0049      	lsls	r1, r1, #1
 8009536:	2016      	movs	r0, #22
 8009538:	4632      	mov	r2, r6
 800953a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800953e:	1917      	adds	r7, r2, r4
 8009540:	429f      	cmp	r7, r3
 8009542:	bfde      	ittt	le
 8009544:	193a      	addle	r2, r7, r4
 8009546:	1bdb      	suble	r3, r3, r7
 8009548:	1936      	addle	r6, r6, r4
 800954a:	0fcf      	lsrs	r7, r1, #31
 800954c:	3801      	subs	r0, #1
 800954e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009552:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009556:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800955a:	d1f0      	bne.n	800953e <__ieee754_sqrt+0xb6>
 800955c:	4604      	mov	r4, r0
 800955e:	2720      	movs	r7, #32
 8009560:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009564:	429a      	cmp	r2, r3
 8009566:	eb00 0e0c 	add.w	lr, r0, ip
 800956a:	db02      	blt.n	8009572 <__ieee754_sqrt+0xea>
 800956c:	d113      	bne.n	8009596 <__ieee754_sqrt+0x10e>
 800956e:	458e      	cmp	lr, r1
 8009570:	d811      	bhi.n	8009596 <__ieee754_sqrt+0x10e>
 8009572:	f1be 0f00 	cmp.w	lr, #0
 8009576:	eb0e 000c 	add.w	r0, lr, ip
 800957a:	da42      	bge.n	8009602 <__ieee754_sqrt+0x17a>
 800957c:	2800      	cmp	r0, #0
 800957e:	db40      	blt.n	8009602 <__ieee754_sqrt+0x17a>
 8009580:	f102 0801 	add.w	r8, r2, #1
 8009584:	1a9b      	subs	r3, r3, r2
 8009586:	458e      	cmp	lr, r1
 8009588:	bf88      	it	hi
 800958a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800958e:	eba1 010e 	sub.w	r1, r1, lr
 8009592:	4464      	add	r4, ip
 8009594:	4642      	mov	r2, r8
 8009596:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800959a:	3f01      	subs	r7, #1
 800959c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80095a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80095a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80095a8:	d1dc      	bne.n	8009564 <__ieee754_sqrt+0xdc>
 80095aa:	4319      	orrs	r1, r3
 80095ac:	d01b      	beq.n	80095e6 <__ieee754_sqrt+0x15e>
 80095ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009634 <__ieee754_sqrt+0x1ac>
 80095b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009638 <__ieee754_sqrt+0x1b0>
 80095b6:	e9da 0100 	ldrd	r0, r1, [sl]
 80095ba:	e9db 2300 	ldrd	r2, r3, [fp]
 80095be:	f7f6 fe5b 	bl	8000278 <__aeabi_dsub>
 80095c2:	e9da 8900 	ldrd	r8, r9, [sl]
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 fa87 	bl	8000ae0 <__aeabi_dcmple>
 80095d2:	b140      	cbz	r0, 80095e6 <__ieee754_sqrt+0x15e>
 80095d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80095d8:	e9da 0100 	ldrd	r0, r1, [sl]
 80095dc:	e9db 2300 	ldrd	r2, r3, [fp]
 80095e0:	d111      	bne.n	8009606 <__ieee754_sqrt+0x17e>
 80095e2:	3601      	adds	r6, #1
 80095e4:	463c      	mov	r4, r7
 80095e6:	1072      	asrs	r2, r6, #1
 80095e8:	0863      	lsrs	r3, r4, #1
 80095ea:	07f1      	lsls	r1, r6, #31
 80095ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80095f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80095f4:	bf48      	it	mi
 80095f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80095fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80095fe:	4618      	mov	r0, r3
 8009600:	e756      	b.n	80094b0 <__ieee754_sqrt+0x28>
 8009602:	4690      	mov	r8, r2
 8009604:	e7be      	b.n	8009584 <__ieee754_sqrt+0xfc>
 8009606:	f7f6 fe39 	bl	800027c <__adddf3>
 800960a:	e9da 8900 	ldrd	r8, r9, [sl]
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f7 fa59 	bl	8000acc <__aeabi_dcmplt>
 800961a:	b120      	cbz	r0, 8009626 <__ieee754_sqrt+0x19e>
 800961c:	1ca0      	adds	r0, r4, #2
 800961e:	bf08      	it	eq
 8009620:	3601      	addeq	r6, #1
 8009622:	3402      	adds	r4, #2
 8009624:	e7df      	b.n	80095e6 <__ieee754_sqrt+0x15e>
 8009626:	1c63      	adds	r3, r4, #1
 8009628:	f023 0401 	bic.w	r4, r3, #1
 800962c:	e7db      	b.n	80095e6 <__ieee754_sqrt+0x15e>
 800962e:	bf00      	nop
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	200000b8 	.word	0x200000b8
 8009638:	200000b0 	.word	0x200000b0

0800963c <_init>:
 800963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963e:	bf00      	nop
 8009640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009642:	bc08      	pop	{r3}
 8009644:	469e      	mov	lr, r3
 8009646:	4770      	bx	lr

08009648 <_fini>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr
